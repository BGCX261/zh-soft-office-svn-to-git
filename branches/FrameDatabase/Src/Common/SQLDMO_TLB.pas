unit SQLDMO_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 2007-4-11 13:24:03 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL (1)
// LIBID: {10010001-E260-11CF-AE68-00AA004A34D5}
// LCID: 0
// Helpfile: C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO80.hlp
// HelpString: Microsoft SQLDMO Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// Errors:
//   Hint: TypeInfo 'Property' changed to 'Property_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Member 'Set' of 'Property' changed to 'Set_'
//   Hint: Parameter 'Type' of _SQLServer.ListMembers changed to 'Type_'
//   Hint: Parameter 'Object' of Databases.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Tables.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Columns.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Keys.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Indexes.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Triggers.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Checks.Add changed to 'Object_'
//   Hint: Parameter 'Type' of _Table2.FullTextPopulation changed to 'Type_'
//   Hint: Parameter 'Object' of Views.Add changed to 'Object_'
//   Hint: Parameter 'Object' of StoredProcedures.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Defaults.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Rules.Add changed to 'Object_'
//   Hint: Parameter 'Object' of UserDefinedDatatypes.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Users.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Groups.Add changed to 'Object_'
//   Hint: Parameter 'Object' of LogFiles.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of FileGroups.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DBFiles.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DatabaseRoles.Add changed to 'Object_'
//   Hint: Parameter 'Object' of FullTextCatalogs.Add changed to 'Object_'
//   Hint: Parameter 'Object' of UserDefinedFunctions.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of BackupDevices.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of RemoteServers.Add changed to 'Object_'
//   Hint: Parameter 'Object' of RemoteLogins.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Logins.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Operators.Add changed to 'Object_'
//   Hint: Parameter 'Object' of Alerts.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of Jobs.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Member 'Invoke' of '_Job' changed to 'Invoke_'
//   Hint: Parameter 'Object' of JobSteps.Add changed to 'Object_'
//   Hint: Parameter 'Object' of JobSchedules.Add changed to 'Object_'
//   Hint: Parameter 'Object' of TargetServerGroups.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of JobCategories.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of AlertCategories.Add changed to 'Object_'
//   Hint: Parameter 'Object' of OperatorCategories.Add changed to 'Object_'
//   Hint: Parameter 'Object' of RegisteredSubscribers.Add changed to 'Object_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Object' of DistributionPublishers.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DistributionPublications.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DistributionArticles.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DistributionSubscriptions.Add changed to 'Object_'
//   Hint: Parameter 'Object' of DistributionDatabases.Add changed to 'Object_'
//   Hint: Parameter 'Object' of TransPublications.Add changed to 'Object_'
//   Hint: Parameter 'Object' of TransArticles.Add changed to 'Object_'
//   Hint: Parameter 'Object' of TransSubscriptions.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergePublications.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergeArticles.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergeSubsetFilters.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergeSubscriptions.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergeDynamicSnapshotJobs.Add changed to 'Object_'
//   Hint: Parameter 'Object' of TransPullSubscriptions.Add changed to 'Object_'
//   Hint: Parameter 'Object' of MergePullSubscriptions.Add changed to 'Object_'
//   Hint: Parameter 'Object' of LinkedServers.Add changed to 'Object_'
//   Hint: Parameter 'Object' of LinkedServerLogins.Add changed to 'Object_'
//   Hint: Parameter 'Object' of ServerGroups.Add changed to 'Object_'
//   Hint: Parameter 'Object' of RegisteredServers.Add changed to 'Object_'
//   Error creating palette bitmap of (TSQLServer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDatabase) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTable) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TColumn) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TKey) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TIndex) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TView) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TBulkCopy) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTrigger) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TCheck) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TStoredProcedure) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDefault) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRule) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TUserDefinedDatatype) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TUser) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLogFile) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransfer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TFileGroup) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDBFile) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDatabaseRole) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TFullTextCatalog) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TUserDefinedFunction) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TBackupDevice) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLanguage) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRemoteServer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRemoteLogin) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLogin) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TOperator) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TAlert) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TJob) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TJobStep) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TJobSchedule) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTargetServer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTargetServerGroup) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TCategory) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRestore) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TReplication) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRegisteredSubscriber) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TReplicationSecurity) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionPublisher) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionPublication) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionArticle) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionSubscription) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionDatabase) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransPublication) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransArticle) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransSubscription) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergePublication) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeArticle) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeSubsetFilter) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeSubscription) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeDynamicSnapshotJob) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransPullSubscription) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergePullSubscription) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TServerRole) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLinkedServer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLinkedServerLogin) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TServerGroup) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRegisteredServer) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TSQLServer2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDatabase2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTable2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TColumn2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TView2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TUserDefinedDatatype2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDefault2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRule2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TUser2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TStoredProcedure2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TIndex2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTrigger2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLogin2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRemoteServer2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransfer2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TBackup) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TBackup2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TBulkCopy2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TFileGroup2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLogFile2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDatabaseRole2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TRestore2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TLinkedServer2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TFullTextCatalog2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TReplication2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionPublisher2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionDatabase2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransPublication2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransArticle2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransSubscription2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TTransPullSubscription2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergePublication2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeArticle2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergeSubscription2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TMergePullSubscription2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionPublication2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionArticle2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
//   Error creating palette bitmap of (TDistributionSubscription2) : Server C:\Program Files\Microsoft SQL Server\80\Tools\Binn\SQLDMO.DLL contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  SQLDMOMajorVersion = 8;
  SQLDMOMinorVersion = 5;

  LIBID_SQLDMO: TGUID = '{10010001-E260-11CF-AE68-00AA004A34D5}';

  IID__IVSQLDMOStdObject: TGUID = '{10010007-E260-11CF-AE68-00AA004A34D5}';
  IID__Application: TGUID = '{10020106-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Application: TGUID = '{10020100-E260-11CF-AE68-00AA004A34D5}';
  IID_Properties: TGUID = '{10020001-E260-11CF-AE68-00AA004A34D5}';
  IID_Property_: TGUID = '{10020002-E260-11CF-AE68-00AA004A34D5}';
  IID_SQLServers: TGUID = '{10020203-E260-11CF-AE68-00AA004A34D5}';
  IID__SQLServer: TGUID = '{10020206-E260-11CF-AE68-00AA004A34D5}';
  IID__SQLServer2: TGUID = '{10020216-E260-11CF-AE68-00AA004A34D5}';
  IID_Databases: TGUID = '{10020303-E260-11CF-AE68-00AA004A34D5}';
  IID__Database: TGUID = '{10020306-E260-11CF-AE68-00AA004A34D5}';
  IID__Database2: TGUID = '{10020316-E260-11CF-AE68-00AA004A34D5}';
  IID_Tables: TGUID = '{10020403-E260-11CF-AE68-00AA004A34D5}';
  IID__Table: TGUID = '{10020406-E260-11CF-AE68-00AA004A34D5}';
  IID__Table2: TGUID = '{10020416-E260-11CF-AE68-00AA004A34D5}';
  IID_Columns: TGUID = '{10020503-E260-11CF-AE68-00AA004A34D5}';
  IID__Column: TGUID = '{10020506-E260-11CF-AE68-00AA004A34D5}';
  IID__Column2: TGUID = '{10020516-E260-11CF-AE68-00AA004A34D5}';
  IID_DRIDefault: TGUID = '{10022B06-E260-11CF-AE68-00AA004A34D5}';
  IID_SQLObjectList: TGUID = '{10022806-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Column: TGUID = '{10020500-E260-11CF-AE68-00AA004A34D5}';
  IID_Keys: TGUID = '{10020F03-E260-11CF-AE68-00AA004A34D5}';
  IID__Key: TGUID = '{10020F06-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Key: TGUID = '{10020F00-E260-11CF-AE68-00AA004A34D5}';
  IID_Names: TGUID = '{10021D03-E260-11CF-AE68-00AA004A34D5}';
  IID_Indexes: TGUID = '{10020E03-E260-11CF-AE68-00AA004A34D5}';
  IID__Index: TGUID = '{10020E06-E260-11CF-AE68-00AA004A34D5}';
  IID__Index2: TGUID = '{10020E16-E260-11CF-AE68-00AA004A34D5}';
  IID_QueryResults: TGUID = '{10022506-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Index: TGUID = '{10020E00-E260-11CF-AE68-00AA004A34D5}';
  IID__View: TGUID = '{10020706-E260-11CF-AE68-00AA004A34D5}';
  IID__View2: TGUID = '{10020716-E260-11CF-AE68-00AA004A34D5}';
  IID__BulkCopy: TGUID = '{10021C06-E260-11CF-AE68-00AA004A34D5}';
  IID__BulkCopy2: TGUID = '{10021C16-E260-11CF-AE68-00AA004A34D5}';
  IID_BulkCopySink: TGUID = '{10021C09-E260-11CF-AE68-00AA004A34D5}';
  CLASS_BulkCopy: TGUID = '{10021C00-E260-11CF-AE68-00AA004A34D5}';
  CLASS_View: TGUID = '{10020700-E260-11CF-AE68-00AA004A34D5}';
  IID_Triggers: TGUID = '{10021003-E260-11CF-AE68-00AA004A34D5}';
  IID__Trigger: TGUID = '{10021006-E260-11CF-AE68-00AA004A34D5}';
  IID__Trigger2: TGUID = '{10021016-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Trigger: TGUID = '{10021000-E260-11CF-AE68-00AA004A34D5}';
  IID_Checks: TGUID = '{10021703-E260-11CF-AE68-00AA004A34D5}';
  IID__Check: TGUID = '{10021706-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Check: TGUID = '{10021700-E260-11CF-AE68-00AA004A34D5}';
  IID_NameList: TGUID = '{10022406-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Table: TGUID = '{10020400-E260-11CF-AE68-00AA004A34D5}';
  IID_Views: TGUID = '{10020703-E260-11CF-AE68-00AA004A34D5}';
  IID_StoredProcedures: TGUID = '{10020D03-E260-11CF-AE68-00AA004A34D5}';
  IID__StoredProcedure: TGUID = '{10020D06-E260-11CF-AE68-00AA004A34D5}';
  IID__StoredProcedure2: TGUID = '{10020D16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_StoredProcedure: TGUID = '{10020D00-E260-11CF-AE68-00AA004A34D5}';
  IID_Defaults: TGUID = '{10020903-E260-11CF-AE68-00AA004A34D5}';
  IID__Default: TGUID = '{10020906-E260-11CF-AE68-00AA004A34D5}';
  IID__Default2: TGUID = '{10020916-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Default: TGUID = '{10020900-E260-11CF-AE68-00AA004A34D5}';
  IID_Rules: TGUID = '{10020A03-E260-11CF-AE68-00AA004A34D5}';
  IID__Rule: TGUID = '{10020A06-E260-11CF-AE68-00AA004A34D5}';
  IID__Rule2: TGUID = '{10020A16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Rule: TGUID = '{10020A00-E260-11CF-AE68-00AA004A34D5}';
  IID_UserDefinedDatatypes: TGUID = '{10020803-E260-11CF-AE68-00AA004A34D5}';
  IID__UserDefinedDatatype: TGUID = '{10020806-E260-11CF-AE68-00AA004A34D5}';
  IID__UserDefinedDatatype2: TGUID = '{10020816-E260-11CF-AE68-00AA004A34D5}';
  CLASS_UserDefinedDatatype: TGUID = '{10020800-E260-11CF-AE68-00AA004A34D5}';
  IID_Users: TGUID = '{10020B03-E260-11CF-AE68-00AA004A34D5}';
  IID__User: TGUID = '{10020B06-E260-11CF-AE68-00AA004A34D5}';
  IID__User2: TGUID = '{10020B16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_User: TGUID = '{10020B00-E260-11CF-AE68-00AA004A34D5}';
  IID_Groups: TGUID = '{10020C03-E260-11CF-AE68-00AA004A34D5}';
  IID__Group: TGUID = '{10020C06-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Group: TGUID = '{10020C00-E260-11CF-AE68-00AA004A34D5}';
  IID_SystemDatatypes: TGUID = '{10021A03-E260-11CF-AE68-00AA004A34D5}';
  IID_SystemDatatype: TGUID = '{10021A06-E260-11CF-AE68-00AA004A34D5}';
  IID_TransactionLog: TGUID = '{10022606-E260-11CF-AE68-00AA004A34D5}';
  IID_LogFiles: TGUID = '{10022E03-E260-11CF-AE68-00AA004A34D5}';
  IID__LogFile: TGUID = '{10022E06-E260-11CF-AE68-00AA004A34D5}';
  IID__LogFile2: TGUID = '{10022E16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_LogFile: TGUID = '{10022E00-E260-11CF-AE68-00AA004A34D5}';
  IID_DBOption: TGUID = '{10022206-E260-11CF-AE68-00AA004A34D5}';
  IID_DBObject: TGUID = '{10022106-E260-11CF-AE68-00AA004A34D5}';
  IID__Transfer: TGUID = '{10021E06-E260-11CF-AE68-00AA004A34D5}';
  IID__Transfer2: TGUID = '{10021E16-E260-11CF-AE68-00AA004A34D5}';
  IID_TransferSink: TGUID = '{10021E09-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Transfer: TGUID = '{10021E00-E260-11CF-AE68-00AA004A34D5}';
  IID_FileGroups: TGUID = '{10022C03-E260-11CF-AE68-00AA004A34D5}';
  IID__FileGroup: TGUID = '{10022C06-E260-11CF-AE68-00AA004A34D5}';
  IID__FileGroup2: TGUID = '{10022C16-E260-11CF-AE68-00AA004A34D5}';
  IID_DBFiles: TGUID = '{10022D03-E260-11CF-AE68-00AA004A34D5}';
  IID__DBFile: TGUID = '{10022D06-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DBFile: TGUID = '{10022D00-E260-11CF-AE68-00AA004A34D5}';
  CLASS_FileGroup: TGUID = '{10022C00-E260-11CF-AE68-00AA004A34D5}';
  IID_DatabaseRoles: TGUID = '{10023103-E260-11CF-AE68-00AA004A34D5}';
  IID__DatabaseRole: TGUID = '{10023106-E260-11CF-AE68-00AA004A34D5}';
  IID__DatabaseRole2: TGUID = '{10023116-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DatabaseRole: TGUID = '{10023100-E260-11CF-AE68-00AA004A34D5}';
  IID_FullTextCatalogs: TGUID = '{10023503-E260-11CF-AE68-00AA004A34D5}';
  IID__FullTextCatalog: TGUID = '{10023506-E260-11CF-AE68-00AA004A34D5}';
  IID__FullTextCatalog2: TGUID = '{10023516-E260-11CF-AE68-00AA004A34D5}';
  CLASS_FullTextCatalog: TGUID = '{10023500-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Database: TGUID = '{10020300-E260-11CF-AE68-00AA004A34D5}';
  IID_UserDefinedFunctions: TGUID = '{10023703-E260-11CF-AE68-00AA004A34D5}';
  IID__UserDefinedFunction: TGUID = '{10023706-E260-11CF-AE68-00AA004A34D5}';
  CLASS_UserDefinedFunction: TGUID = '{10023700-E260-11CF-AE68-00AA004A34D5}';
  IID_BackupDevices: TGUID = '{10021103-E260-11CF-AE68-00AA004A34D5}';
  IID__BackupDevice: TGUID = '{10021106-E260-11CF-AE68-00AA004A34D5}';
  CLASS_BackupDevice: TGUID = '{10021100-E260-11CF-AE68-00AA004A34D5}';
  IID_IntegratedSecurity: TGUID = '{10022A06-E260-11CF-AE68-00AA004A34D5}';
  IID_Languages: TGUID = '{10021403-E260-11CF-AE68-00AA004A34D5}';
  IID__Language: TGUID = '{10021406-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Language: TGUID = '{10021400-E260-11CF-AE68-00AA004A34D5}';
  IID_RemoteServers: TGUID = '{10021503-E260-11CF-AE68-00AA004A34D5}';
  IID__RemoteServer: TGUID = '{10021506-E260-11CF-AE68-00AA004A34D5}';
  IID__RemoteServer2: TGUID = '{10021516-E260-11CF-AE68-00AA004A34D5}';
  IID_RemoteLogins: TGUID = '{10021603-E260-11CF-AE68-00AA004A34D5}';
  IID__RemoteLogin: TGUID = '{10021606-E260-11CF-AE68-00AA004A34D5}';
  CLASS_RemoteLogin: TGUID = '{10021600-E260-11CF-AE68-00AA004A34D5}';
  CLASS_RemoteServer: TGUID = '{10021500-E260-11CF-AE68-00AA004A34D5}';
  IID_Logins: TGUID = '{10021303-E260-11CF-AE68-00AA004A34D5}';
  IID__Login: TGUID = '{10021306-E260-11CF-AE68-00AA004A34D5}';
  IID__Login2: TGUID = '{10021316-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Login: TGUID = '{10021300-E260-11CF-AE68-00AA004A34D5}';
  IID_Registry: TGUID = '{10022706-E260-11CF-AE68-00AA004A34D5}';
  IID_Configuration: TGUID = '{10022306-E260-11CF-AE68-00AA004A34D5}';
  IID_ConfigValues: TGUID = '{10021B03-E260-11CF-AE68-00AA004A34D5}';
  IID_ConfigValue: TGUID = '{10021B06-E260-11CF-AE68-00AA004A34D5}';
  IID_JobServer: TGUID = '{10040406-E260-11CF-AE68-00AA004A34D5}';
  IID_AlertSystem: TGUID = '{10040506-E260-11CF-AE68-00AA004A34D5}';
  IID_Operators: TGUID = '{10040203-E260-11CF-AE68-00AA004A34D5}';
  IID__Operator: TGUID = '{10040206-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Operator: TGUID = '{10040200-E260-11CF-AE68-00AA004A34D5}';
  IID_Alerts: TGUID = '{10040603-E260-11CF-AE68-00AA004A34D5}';
  IID__Alert: TGUID = '{10040606-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Alert: TGUID = '{10040600-E260-11CF-AE68-00AA004A34D5}';
  IID_Jobs: TGUID = '{10040803-E260-11CF-AE68-00AA004A34D5}';
  IID__Job: TGUID = '{10040806-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Job: TGUID = '{10040800-E260-11CF-AE68-00AA004A34D5}';
  IID_JobSteps: TGUID = '{10040903-E260-11CF-AE68-00AA004A34D5}';
  IID__JobStep: TGUID = '{10040906-E260-11CF-AE68-00AA004A34D5}';
  CLASS_JobStep: TGUID = '{10040900-E260-11CF-AE68-00AA004A34D5}';
  IID_JobSchedules: TGUID = '{10041603-E260-11CF-AE68-00AA004A34D5}';
  IID__JobSchedule: TGUID = '{10041606-E260-11CF-AE68-00AA004A34D5}';
  CLASS_JobSchedule: TGUID = '{10041600-E260-11CF-AE68-00AA004A34D5}';
  IID_Schedule: TGUID = '{10041206-E260-11CF-AE68-00AA004A34D5}';
  IID_TargetServers: TGUID = '{10041003-E260-11CF-AE68-00AA004A34D5}';
  IID__TargetServer: TGUID = '{10041006-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TargetServer: TGUID = '{10041000-E260-11CF-AE68-00AA004A34D5}';
  IID_TargetServerGroups: TGUID = '{10041103-E260-11CF-AE68-00AA004A34D5}';
  IID__TargetServerGroup: TGUID = '{10041106-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TargetServerGroup: TGUID = '{10041100-E260-11CF-AE68-00AA004A34D5}';
  IID_JobFilter: TGUID = '{10041306-E260-11CF-AE68-00AA004A34D5}';
  IID_JobHistoryFilter: TGUID = '{10041406-E260-11CF-AE68-00AA004A34D5}';
  IID_JobCategories: TGUID = '{10041503-E260-11CF-AE68-00AA004A34D5}';
  IID__Category: TGUID = '{10041512-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Category: TGUID = '{10041500-E260-11CF-AE68-00AA004A34D5}';
  IID_AlertCategories: TGUID = '{10041506-E260-11CF-AE68-00AA004A34D5}';
  IID_OperatorCategories: TGUID = '{10041509-E260-11CF-AE68-00AA004A34D5}';
  IID__Restore: TGUID = '{10023203-E260-11CF-AE68-00AA004A34D5}';
  IID__Restore2: TGUID = '{10023213-E260-11CF-AE68-00AA004A34D5}';
  IID_RestoreSink: TGUID = '{10023206-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Restore: TGUID = '{10023200-E260-11CF-AE68-00AA004A34D5}';
  IID__Replication: TGUID = '{10031006-E260-11CF-AE68-00AA004A34D5}';
  IID__Replication2: TGUID = '{10031016-E260-11CF-AE68-00AA004A34D5}';
  IID_Publisher: TGUID = '{10030C06-E260-11CF-AE68-00AA004A34D5}';
  IID_RegisteredSubscribers: TGUID = '{10030903-E260-11CF-AE68-00AA004A34D5}';
  IID__RegisteredSubscriber: TGUID = '{10030906-E260-11CF-AE68-00AA004A34D5}';
  CLASS_RegisteredSubscriber: TGUID = '{10030900-E260-11CF-AE68-00AA004A34D5}';
  IID__ReplicationSecurity: TGUID = '{10031206-E260-11CF-AE68-00AA004A34D5}';
  CLASS_ReplicationSecurity: TGUID = '{10031200-E260-11CF-AE68-00AA004A34D5}';
  IID_Subscriber: TGUID = '{10030D06-E260-11CF-AE68-00AA004A34D5}';
  IID_Distributor: TGUID = '{10030E06-E260-11CF-AE68-00AA004A34D5}';
  IID_DistributionPublishers: TGUID = '{10030703-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionPublisher: TGUID = '{10030706-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionPublisher2: TGUID = '{10030716-E260-11CF-AE68-00AA004A34D5}';
  IID_DistributionPublications: TGUID = '{10032103-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionPublication: TGUID = '{10032106-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionPublication2: TGUID = '{10032116-E260-11CF-AE68-00AA004A34D5}';
  IID_DistributionArticles: TGUID = '{10033103-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionArticle: TGUID = '{10033106-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionArticle2: TGUID = '{10033116-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionArticle: TGUID = '{10033100-E260-11CF-AE68-00AA004A34D5}';
  IID_DistributionSubscriptions: TGUID = '{10034103-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionSubscription: TGUID = '{10034106-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionSubscription2: TGUID = '{10034116-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionSubscription: TGUID = '{10034100-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionPublication: TGUID = '{10032100-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionPublisher: TGUID = '{10030700-E260-11CF-AE68-00AA004A34D5}';
  IID_DistributionDatabases: TGUID = '{10031303-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionDatabase: TGUID = '{10031306-E260-11CF-AE68-00AA004A34D5}';
  IID__DistributionDatabase2: TGUID = '{10031316-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionDatabase: TGUID = '{10031300-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationDatabases: TGUID = '{10030A03-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationDatabase: TGUID = '{10030A06-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationTables: TGUID = '{10031403-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationTable: TGUID = '{10031406-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationStoredProcedures: TGUID = '{10031603-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationStoredProcedure: TGUID = '{10031606-E260-11CF-AE68-00AA004A34D5}';
  IID_TransPublications: TGUID = '{10030103-E260-11CF-AE68-00AA004A34D5}';
  IID__TransPublication: TGUID = '{10030106-E260-11CF-AE68-00AA004A34D5}';
  IID__TransPublication2: TGUID = '{10030116-E260-11CF-AE68-00AA004A34D5}';
  IID_TransArticles: TGUID = '{10030203-E260-11CF-AE68-00AA004A34D5}';
  IID__TransArticle: TGUID = '{10030206-E260-11CF-AE68-00AA004A34D5}';
  IID__TransArticle2: TGUID = '{10030216-E260-11CF-AE68-00AA004A34D5}';
  IID_TransSubscriptions: TGUID = '{10030303-E260-11CF-AE68-00AA004A34D5}';
  IID__TransSubscription: TGUID = '{10030306-E260-11CF-AE68-00AA004A34D5}';
  IID__TransSubscription2: TGUID = '{10030316-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransSubscription: TGUID = '{10030300-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransArticle: TGUID = '{10030200-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransPublication: TGUID = '{10030100-E260-11CF-AE68-00AA004A34D5}';
  IID_MergePublications: TGUID = '{10030403-E260-11CF-AE68-00AA004A34D5}';
  IID__MergePublication: TGUID = '{10030406-E260-11CF-AE68-00AA004A34D5}';
  IID__MergePublication2: TGUID = '{10030416-E260-11CF-AE68-00AA004A34D5}';
  IID_MergeArticles: TGUID = '{10030503-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeArticle: TGUID = '{10030506-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeArticle2: TGUID = '{10030516-E260-11CF-AE68-00AA004A34D5}';
  IID_MergeSubsetFilters: TGUID = '{10035103-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeSubsetFilter: TGUID = '{10035106-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeSubsetFilter: TGUID = '{10035100-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeArticle: TGUID = '{10030500-E260-11CF-AE68-00AA004A34D5}';
  IID_MergeSubscriptions: TGUID = '{10030603-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeSubscription: TGUID = '{10030606-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeSubscription2: TGUID = '{10030616-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeSubscription: TGUID = '{10030600-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergePublication: TGUID = '{10030400-E260-11CF-AE68-00AA004A34D5}';
  IID_MergeDynamicSnapshotJobs: TGUID = '{10036103-E260-11CF-AE68-00AA004A34D5}';
  IID__MergeDynamicSnapshotJob: TGUID = '{10036106-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeDynamicSnapshotJob: TGUID = '{10036100-E260-11CF-AE68-00AA004A34D5}';
  IID_TransPullSubscriptions: TGUID = '{10030B03-E260-11CF-AE68-00AA004A34D5}';
  IID__TransPullSubscription: TGUID = '{10030B06-E260-11CF-AE68-00AA004A34D5}';
  IID__TransPullSubscription2: TGUID = '{10030B16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransPullSubscription: TGUID = '{10030B00-E260-11CF-AE68-00AA004A34D5}';
  IID_MergePullSubscriptions: TGUID = '{10031103-E260-11CF-AE68-00AA004A34D5}';
  IID__MergePullSubscription: TGUID = '{10031106-E260-11CF-AE68-00AA004A34D5}';
  IID__MergePullSubscription2: TGUID = '{10031116-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergePullSubscription: TGUID = '{10031100-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationSink: TGUID = '{10031009-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Replication: TGUID = '{10031000-E260-11CF-AE68-00AA004A34D5}';
  IID_ServerRoles: TGUID = '{10022F03-E260-11CF-AE68-00AA004A34D5}';
  IID__ServerRole: TGUID = '{10022F06-E260-11CF-AE68-00AA004A34D5}';
  CLASS_ServerRole: TGUID = '{10022F00-E260-11CF-AE68-00AA004A34D5}';
  IID_LinkedServers: TGUID = '{10023303-E260-11CF-AE68-00AA004A34D5}';
  IID__LinkedServer: TGUID = '{10023306-E260-11CF-AE68-00AA004A34D5}';
  IID__LinkedServer2: TGUID = '{10023316-E260-11CF-AE68-00AA004A34D5}';
  IID_LinkedServerLogins: TGUID = '{10023403-E260-11CF-AE68-00AA004A34D5}';
  IID__LinkedServerLogin: TGUID = '{10023406-E260-11CF-AE68-00AA004A34D5}';
  CLASS_LinkedServerLogin: TGUID = '{10023400-E260-11CF-AE68-00AA004A34D5}';
  CLASS_LinkedServer: TGUID = '{10023300-E260-11CF-AE68-00AA004A34D5}';
  IID_FullTextService: TGUID = '{10023606-E260-11CF-AE68-00AA004A34D5}';
  IID_ServerSink: TGUID = '{10020209-E260-11CF-AE68-00AA004A34D5}';
  CLASS_SQLServer: TGUID = '{10020200-E260-11CF-AE68-00AA004A34D5}';
  IID_ServerGroups: TGUID = '{10021803-E260-11CF-AE68-00AA004A34D5}';
  IID__ServerGroup: TGUID = '{10021806-E260-11CF-AE68-00AA004A34D5}';
  CLASS_ServerGroup: TGUID = '{10021800-E260-11CF-AE68-00AA004A34D5}';
  IID_RegisteredServers: TGUID = '{10021903-E260-11CF-AE68-00AA004A34D5}';
  IID__RegisteredServer: TGUID = '{10021906-E260-11CF-AE68-00AA004A34D5}';
  CLASS_RegisteredServer: TGUID = '{10021900-E260-11CF-AE68-00AA004A34D5}';
  IID_Permission: TGUID = '{10022906-E260-11CF-AE68-00AA004A34D5}';
  IID__Backup: TGUID = '{10021F06-E260-11CF-AE68-00AA004A34D5}';
  CLASS_SQLServer2: TGUID = '{100202C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Database2: TGUID = '{100203C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Table2: TGUID = '{100204C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Column2: TGUID = '{100205C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_View2: TGUID = '{100207C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_UserDefinedDatatype2: TGUID = '{100208C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Default2: TGUID = '{100209C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Rule2: TGUID = '{10020AC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_User2: TGUID = '{10020BC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_StoredProcedure2: TGUID = '{10020DC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Index2: TGUID = '{10020EC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Trigger2: TGUID = '{100210C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Login2: TGUID = '{100213C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_RemoteServer2: TGUID = '{100215C1-E260-11CF-AE68-00AA004A34D5}';
  IID_DBOption2: TGUID = '{10022216-E260-11CF-AE68-00AA004A34D5}';
  IID_QueryResults2: TGUID = '{10022516-E260-11CF-AE68-00AA004A34D5}';
  IID_Registry2: TGUID = '{10022716-E260-11CF-AE68-00AA004A34D5}';
  IID_SystemDatatype2: TGUID = '{10021A16-E260-11CF-AE68-00AA004A34D5}';
  IID_Permission2: TGUID = '{10022916-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Transfer2: TGUID = '{10021EC1-E260-11CF-AE68-00AA004A34D5}';
  IID__Backup2: TGUID = '{10021F16-E260-11CF-AE68-00AA004A34D5}';
  IID_BackupSink: TGUID = '{10021F09-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Backup: TGUID = '{10021F00-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Backup2: TGUID = '{10021FC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_BulkCopy2: TGUID = '{10021CC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_FileGroup2: TGUID = '{10022CC1-E260-11CF-AE68-00AA004A34D5}';
  IID_LogFiles2: TGUID = '{10022E13-E260-11CF-AE68-00AA004A34D5}';
  CLASS_LogFile2: TGUID = '{10022EC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DatabaseRole2: TGUID = '{100231C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Restore2: TGUID = '{100232C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_LinkedServer2: TGUID = '{100233C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_FullTextCatalog2: TGUID = '{100235C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_Replication2: TGUID = '{100310C1-E260-11CF-AE68-00AA004A34D5}';
  IID_Publisher2: TGUID = '{10030C16-E260-11CF-AE68-00AA004A34D5}';
  IID_Subscriber2: TGUID = '{10030D16-E260-11CF-AE68-00AA004A34D5}';
  IID_Distributor2: TGUID = '{10030E16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionPublisher2: TGUID = '{100307C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionDatabase2: TGUID = '{100313C1-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationDatabase2: TGUID = '{10030A16-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransPublication2: TGUID = '{100301C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransArticle2: TGUID = '{100302C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransSubscription2: TGUID = '{100303C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_TransPullSubscription2: TGUID = '{10030BC1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergePublication2: TGUID = '{100304C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeArticle2: TGUID = '{100305C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergeSubscription2: TGUID = '{100306C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_MergePullSubscription2: TGUID = '{100311C1-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationTable2: TGUID = '{10031416-E260-11CF-AE68-00AA004A34D5}';
  IID_ReplicationStoredProcedure2: TGUID = '{10031616-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionPublication2: TGUID = '{100321C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionArticle2: TGUID = '{100331C1-E260-11CF-AE68-00AA004A34D5}';
  CLASS_DistributionSubscription2: TGUID = '{100341C1-E260-11CF-AE68-00AA004A34D5}';
  IID_JobServer2: TGUID = '{10040416-E260-11CF-AE68-00AA004A34D5}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum SQLDMO_OBJECT_TYPE
type
  SQLDMO_OBJECT_TYPE = TOleEnum;
const
  SQLDMOObj_Unknown = $00004000;
  SQLDMOObj_Application = $00000000;
  SQLDMOObj_UserDefinedDatatype = $00000001;
  SQLDMOObj_SystemTable = $00000002;
  SQLDMOObj_View = $00000004;
  SQLDMOObj_UserTable = $00000008;
  SQLDMOObj_StoredProcedure = $00000010;
  SQLDMOObj_Default = $00000040;
  SQLDMOObj_Rule = $00000080;
  SQLDMOObj_Trigger = $00000100;
  SQLDMOObj_UserDefinedFunction = $00001000;
  SQLDMOObj_AllDatabaseUserObjects = $000011FD;
  SQLDMOObj_AllDatabaseObjects = $000011FF;
  SQLDMOObj_AllButSystemObjects = $000013FF;
  SQLDMOObj_SystemDatatype = $00001000;
  SQLDMOObj_User = $00002000;
  SQLDMOObj_Group = $00003000;
  SQLDMOObj_Index = $00004000;
  SQLDMOObj_Key = $00005000;
  SQLDMOObj_Column = $00006000;
  SQLDMOObj_DBObject = $00007000;
  SQLDMOObj_DBOption = $00008000;
  SQLDMOObj_ProcedureParameter = $00009000;
  SQLDMOObj_Permission = $0000A000;
  SQLDMOObj_IntegratedSecurity = $0000B000;
  SQLDMOObj_Check = $0000C000;
  SQLDMOObj_DRIDefault = $0000D000;
  SQLDMOObj_SQLServer = $00020000;
  SQLDMOObj_Database = $00021000;
  SQLDMOObj_BackupDevice = $00022000;
  SQLDMOObj_Login = $00023000;
  SQLDMOObj_Language = $00024000;
  SQLDMOObj_RemoteServer = $00025000;
  SQLDMOObj_RemoteLogin = $00026000;
  SQLDMOObj_Configuration = $00027000;
  SQLDMOObj_ConfigValue = $00028000;
  SQLDMOObj_QueryResults = $00029000;
  SQLDMOObj_TransactionLog = $0002A000;
  SQLDMOObj_Registry = $0002B000;
  SQLDMOObj_Transfer = $0002C000;
  SQLDMOObj_Backup = $0002D000;
  SQLDMOObj_AutoProperty = $0002E000;
  SQLDMOObj_ServerGroup = $0002F000;
  SQLDMOObj_RegisteredServer = $00031000;
  SQLDMOObj_BulkCopy = $00032000;
  SQLDMOObj_FileGroup = $00033000;
  SQLDMOObj_DBFile = $00034000;
  SQLDMOObj_LogFile = $00035000;
  SQLDMOObj_ServerRole = $00036000;
  SQLDMOObj_DatabaseRole = $00037000;
  SQLDMOObj_Restore = $00038000;
  SQLDMOObj_LinkedServer = $00039000;
  SQLDMOObj_LinkedServerLogin = $00040000;
  SQLDMOObj_FullTextCatalog = $00041000;
  SQLDMOObj_FullTextService = $00042000;
  SQLDMOObj_TransPublication = $00101000;
  SQLDMOObj_TransArticle = $00102000;
  SQLDMOObj_TransSubscription = $00103000;
  SQLDMOObj_TransPullSubscription = $00104000;
  SQLDMOObj_MergePublication = $00105000;
  SQLDMOObj_MergeArticle = $00106000;
  SQLDMOObj_MergeSubscription = $00107000;
  SQLDMOObj_MergePullSubscription = $00108000;
  SQLDMOObj_Replication = $00109000;
  SQLDMOObj_Publisher = $0010A000;
  SQLDMOObj_Subscriber = $0010B000;
  SQLDMOObj_Distributor = $0010C000;
  SQLDMOObj_ReplicationSecurity = $0010D000;
  SQLDMOObj_DistributionPublisher = $0010E000;
  SQLDMOObj_RegisteredSubscriber = $0010F000;
  SQLDMOObj_ReplicationDatabase = $00110000;
  SQLDMOObj_DistributionDatabase = $00111000;
  SQLDMOObj_ReplicationTable = $00112000;
  SQLDMOObj_ReplicationStoredProcedure = $00113000;
  SQLDMOObj_DistributionPublication = $00114000;
  SQLDMOObj_DistributionArticle = $00115000;
  SQLDMOObj_DistributionSubscription = $00116000;
  SQLDMOObj_MergeSubsetFilter = $00117000;
  SQLDMOObj_MergeDynamicSnapshotJob = $00118000;
  SQLDMOObj_AlertSystem = $00201000;
  SQLDMOObj_JobServer = $00202000;
  SQLDMOObj_Alert = $00203000;
  SQLDMOObj_Operator = $00204000;
  SQLDMOObj_Job = $00205000;
  SQLDMOObj_JobStep = $00206000;
  SQLDMOObj_TargetServer = $00207000;
  SQLDMOObj_TargetServerGroup = $00208000;
  SQLDMOObj_Category = $00209000;
  SQLDMOObj_Schedule = $00210000;
  SQLDMOObj_JobFilter = $00211000;
  SQLDMOObj_JobHistoryFilter = $00212000;
  SQLDMOObj_JobSchedule = $00213000;
  SQLDMOObj_Last = $10000000;

// Constants for enum SQLDMO_KEY_TYPE
type
  SQLDMO_KEY_TYPE = TOleEnum;
const
  SQLDMOKey_Unknown = $00000000;
  SQLDMOKey_Primary = $00000001;
  SQLDMOKey_Unique = $00000002;
  SQLDMOKey_Foreign = $00000003;

// Constants for enum SQLDMO_DEVICE_TYPE
type
  SQLDMO_DEVICE_TYPE = TOleEnum;
const
  SQLDMODevice_Unknown = $00000064;
  SQLDMODevice_DiskDump = $00000002;
  SQLDMODevice_FloppyADump = $00000003;
  SQLDMODevice_FloppyBDump = $00000004;
  SQLDMODevice_TapeDump = $00000005;
  SQLDMODevice_PipeDump = $00000006;
  SQLDMODevice_CDROM = $00000007;

// Constants for enum SQLDMO_PRIVILEGE_TYPE
type
  SQLDMO_PRIVILEGE_TYPE = TOleEnum;
const
  SQLDMOPriv_Unknown = $00000000;
  SQLDMOPriv_Select = $00000001;
  SQLDMOPriv_Insert = $00000002;
  SQLDMOPriv_Update = $00000004;
  SQLDMOPriv_Delete = $00000008;
  SQLDMOPriv_Execute = $00000010;
  SQLDMOPriv_References = $00000020;
  SQLDMOPriv_AllObjectPrivs = $0000003F;
  SQLDMOPriv_CreateTable = $00000080;
  SQLDMOPriv_CreateDatabase = $00000100;
  SQLDMOPriv_CreateView = $00000200;
  SQLDMOPriv_CreateProcedure = $00000400;
  SQLDMOPriv_DumpDatabase = $00000800;
  SQLDMOPriv_CreateDefault = $00001000;
  SQLDMOPriv_DumpTransaction = $00002000;
  SQLDMOPriv_CreateRule = $00004000;
  SQLDMOPriv_DumpTable = $00008000;
  SQLDMOPriv_CreateFunction = $00010000;
  SQLDMOPriv_AllDatabasePrivs = $0001FF80;

// Constants for enum SQLDMO_PROCEDURE_TYPE
type
  SQLDMO_PROCEDURE_TYPE = TOleEnum;
const
  SQLDMOProc_Unknown = $00000000;
  SQLDMOProc_Standard = $00000001;
  SQLDMOProc_Extended = $00000002;
  SQLDMOProc_Macro = $00000003;
  SQLDMOProc_ReplicationFilter = $00000004;

// Constants for enum SQLDMO_TRIGGER_TYPE
type
  SQLDMO_TRIGGER_TYPE = TOleEnum;
const
  SQLDMOTrig_Unknown = $00000000;
  SQLDMOTrig_Insert = $00000001;
  SQLDMOTrig_Update = $00000002;
  SQLDMOTrig_Delete = $00000004;
  SQLDMOTrig_All = $00000007;

// Constants for enum SQLDMO_INDEX_TYPE
type
  SQLDMO_INDEX_TYPE = TOleEnum;
const
  SQLDMOIndex_Default = $00000000;
  SQLDMOIndex_IgnoreDupKey = $00000001;
  SQLDMOIndex_Unique = $00000002;
  SQLDMOIndex_Clustered = $00000010;
  SQLDMOIndex_PadIndex = $00000100;
  SQLDMOIndex_SortedData = $00000200;
  SQLDMOIndex_SortedDataReorg = $00002000;
  SQLDMOIndex_DropExist = $00008000;
  SQLDMOIndex_Valid = $0000A313;
  SQLDMOIndex_Hypothetical = $00000020;
  SQLDMOIndex_DRIPrimaryKey = $00000800;
  SQLDMOIndex_DRIUniqueKey = $00001000;
  SQLDMOIndex_DRIIndex = $00001800;
  SQLDMOIndex_NoRecompute = $01000000;

// Constants for enum SQLDMO_QUERY_DATATYPE
type
  SQLDMO_QUERY_DATATYPE = TOleEnum;
const
  SQLDMO_DTypeUnknown = $00000000;
  SQLDMO_DTypeChar = $00000001;
  SQLDMO_DTypeText = $FFFFFFFF;
  SQLDMO_DTypeVarchar = $0000000C;
  SQLDMO_DTypeVarBinary = $FFFFFFFD;
  SQLDMO_DTypeBinary = $FFFFFFFE;
  SQLDMO_DTypeImage = $FFFFFFFC;
  SQLDMO_DTypeFloat4 = $00000007;
  SQLDMO_DTypeFloat8 = $00000008;
  SQLDMO_DTypeInt1 = $FFFFFFFA;
  SQLDMO_DTypeInt2 = $00000005;
  SQLDMO_DTypeInt4 = $00000004;
  SQLDMO_DTypeMoney4 = $00000003;
  SQLDMO_DTypeMoney = $00000003;
  SQLDMO_DTypeDateTime = $FFFFFFFE;
  SQLDMO_DTypeDateTime4 = $0000005D;
  SQLDMO_DTypeBit = $FFFFFFF9;
  SQLDMO_DTypeUChar = $FFFFFFF8;
  SQLDMO_DTypeUVarchar = $FFFFFFF7;
  SQLDMO_DTypeGUID = $FFFFFFF5;
  SQLDMO_DTypeNText = $FFFFFFF6;
  SQLDMO_DTypeBigint = $FFFFFFFB;
  SQLDMO_DTypeSQLVariant = $FFFFFF6A;

// Constants for enum SQLDMO_AUDIT_TYPE
type
  SQLDMO_AUDIT_TYPE = TOleEnum;
const
  SQLDMOAudit_None = $00000000;
  SQLDMOAudit_Success = $00000001;
  SQLDMOAudit_Failure = $00000002;
  SQLDMOAudit_All = $00000003;

// Constants for enum SQLDMO_SECURITY_TYPE
type
  SQLDMO_SECURITY_TYPE = TOleEnum;
const
  SQLDMOSecurity_Min = $00000000;
  SQLDMOSecurity_Normal = $00000000;
  SQLDMOSecurity_Integrated = $00000001;
  SQLDMOSecurity_Mixed = $00000002;
  SQLDMOSecurity_Max = $00000002;
  SQLDMOSecurity_Unknown = $00000009;

// Constants for enum SQLDMO_MEDIA_TYPE
type
  SQLDMO_MEDIA_TYPE = TOleEnum;
const
  SQLDMOMedia_Floppy = $00000001;
  SQLDMOMedia_FixedDisk = $00000002;
  SQLDMOMedia_Tape = $00000004;
  SQLDMOMedia_CDROM = $00000008;
  SQLDMOMedia_All = $0000000F;
  SQLDMOMedia_SharedFixedDisk = $00000010;

// Constants for enum SQLDMO_PERFMON_TYPE
type
  SQLDMO_PERFMON_TYPE = TOleEnum;
const
  SQLDMOPerfmon_None = $000003E8;
  SQLDMOPerfmon_MinSet = $00000000;
  SQLDMOPerfmon_Continuous = $00000000;
  SQLDMOPerfmon_OnDemand = $00000001;
  SQLDMOPerfmon_MaxSet = $00000001;

// Constants for enum SQLDMO_DBSTATUS_TYPE
type
  SQLDMO_DBSTATUS_TYPE = TOleEnum;
const
  SQLDMODBStat_Normal = $00000000;
  SQLDMODBStat_Loading = $00000020;
  SQLDMODBStat_Recovering = $000000C0;
  SQLDMODBStat_Suspect = $00000100;
  SQLDMODBStat_Offline = $00000200;
  SQLDMODBStat_Inaccessible = $000003E0;
  SQLDMODBStat_EmergencyMode = $00008000;
  SQLDMODBStat_Standby = $00000400;
  SQLDMODBStat_All = $000087E0;

// Constants for enum SQLDMO_COPYDATA_TYPE
type
  SQLDMO_COPYDATA_TYPE = TOleEnum;
const
  SQLDMOCopyData_False = $00000000;
  SQLDMOCopyData_Replace = $00000001;
  SQLDMOCopyData_Append = $00000002;

// Constants for enum SQLDMO_DATAFILE_TYPE
type
  SQLDMO_DATAFILE_TYPE = TOleEnum;
const
  SQLDMODataFile_CommaDelimitedChar = $00000001;
  SQLDMODataFile_Default = $00000001;
  SQLDMODataFile_TabDelimitedChar = $00000002;
  SQLDMODataFile_SpecialDelimitedChar = $00000003;
  SQLDMODataFile_NativeFormat = $00000004;
  SQLDMODataFile_UseFormatFile = $00000005;

// Constants for enum SQLDMO_STATUSINFO_TYPE
type
  SQLDMO_STATUSINFO_TYPE = TOleEnum;
const
  SQLDMOStatInfo_Unknown = $00000000;
  SQLDMOStatInfo_DatabaseStatus = $00000001;
  SQLDMOStatInfo_DatabaseSpace = $00000002;
  SQLDMOStatInfo_AutoVerifyConnection = $00000004;
  SQLDMOStatInfo_All = $00000007;

// Constants for enum SQLDMO_SCRIPT_TYPE
type
  SQLDMO_SCRIPT_TYPE = TOleEnum;
const
  SQLDMOScript_None = $00000000;
  SQLDMOScript_Default = $00000004;
  SQLDMOScript_Drops = $00000001;
  SQLDMOScript_ObjectPermissions = $00000002;
  SQLDMOScript_PrimaryObject = $00000004;
  SQLDMOScript_ClusteredIndexes = $00000008;
  SQLDMOScript_Triggers = $00000010;
  SQLDMOScript_DatabasePermissions = $00000020;
  SQLDMOScript_Permissions = $00000022;
  SQLDMOScript_ToFileOnly = $00000040;
  SQLDMOScript_Bindings = $00000080;
  SQLDMOScript_AppendToFile = $00000100;
  SQLDMOScript_NoDRI = $00000200;
  SQLDMOScript_UDDTsToBaseType = $00000400;
  SQLDMOScript_IncludeIfNotExists = $00001000;
  SQLDMOScript_NonClusteredIndexes = $00002000;
  SQLDMOScript_Indexes = $00012008;
  SQLDMOScript_Aliases = $00004000;
  SQLDMOScript_NoCommandTerm = $00008000;
  SQLDMOScript_DRIIndexes = $00010000;
  SQLDMOScript_IncludeHeaders = $00020000;
  SQLDMOScript_OwnerQualify = $00040000;
  SQLDMOScript_TimestampToBinary = $00080000;
  SQLDMOScript_SortedData = $00100000;
  SQLDMOScript_SortedDataReorg = $00200000;
  SQLDMOScript_TransferDefault = $000670FF;
  SQLDMOScript_DRI_NonClustered = $00400000;
  SQLDMOScript_DRI_Clustered = $00800000;
  SQLDMOScript_DRI_Checks = $01000000;
  SQLDMOScript_DRI_Defaults = $02000000;
  SQLDMOScript_DRI_UniqueKeys = $04000000;
  SQLDMOScript_DRI_ForeignKeys = $08000000;
  SQLDMOScript_DRI_PrimaryKey = $10000000;
  SQLDMOScript_DRI_AllKeys = $1C000000;
  SQLDMOScript_DRI_AllConstraints = $1F000000;
  SQLDMOScript_DRI_All = $1FC00000;
  SQLDMOScript_DRIWithNoCheck = $20000000;
  SQLDMOScript_NoIdentity = $40000000;
  SQLDMOScript_UseQuotedIdentifiers = $80000000;

// Constants for enum SQLDMO_SCRIPT2_TYPE
type
  SQLDMO_SCRIPT2_TYPE = TOleEnum;
const
  SQLDMOScript2_Default = $00000000;
  SQLDMOScript2_AnsiPadding = $00000001;
  SQLDMOScript2_AnsiFile = $00000002;
  SQLDMOScript2_UnicodeFile = $00000004;
  SQLDMOScript2_NonStop = $00000008;
  SQLDMOScript2_NoFG = $00000010;
  SQLDMOScript2_MarkTriggers = $00000020;
  SQLDMOScript2_OnlyUserTriggers = $00000040;
  SQLDMOScript2_EncryptPWD = $00000080;
  SQLDMOScript2_SeparateXPs = $00000100;
  SQLDMOScript2_NoWhatIfIndexes = $00000200;
  SQLDMOScript2_AgentNotify = $00000400;
  SQLDMOScript2_AgentAlertJob = $00000800;
  SQLDMOScript2_FullTextIndex = $00080000;
  SQLDMOScript2_LoginSID = $00100000;
  SQLDMOScript2_FullTextCat = $00200000;
  SQLDMOScript2_ExtendedProperty = $00400000;
  SQLDMOScript2_NoCollation = $00800000;
  SQLDMOScript2_70Only = $01000000;
  SQLDMOScript2_JobDisable = $02000000;
  SQLDMOScript2_ExtendedOnly = $04000000;
  SQLDMOScript2_DontScriptJobServer = $08000000;

// Constants for enum SQLDMO_XFRSCRIPTMODE_TYPE
type
  SQLDMO_XFRSCRIPTMODE_TYPE = TOleEnum;
const
  SQLDMOXfrFile_Default = $00000001;
  SQLDMOXfrFile_SummaryFiles = $00000001;
  SQLDMOXfrFile_SingleFile = $00000002;
  SQLDMOXfrFile_SingleFilePerObject = $00000004;
  SQLDMOXfrFile_SingleSummaryFile = $00000008;

// Constants for enum SQLDMO_DEPENDENCY_TYPE
type
  SQLDMO_DEPENDENCY_TYPE = TOleEnum;
const
  SQLDMODep_Parents = $00000000;
  SQLDMODep_FullHierarchy = $00010000;
  SQLDMODep_OrderDescending = $00020000;
  SQLDMODep_Children = $00040000;
  SQLDMODep_ReturnInputObject = $00080000;
  SQLDMODep_FirstLevelOnly = $00100000;
  SQLDMODep_DRIOnly = $00200000;
  SQLDMODep_IncludeSystem = $00400000;
  SQLDMODep_Valid = $007F0000;

// Constants for enum SQLDMO_OBJSORT_TYPE
type
  SQLDMO_OBJSORT_TYPE = TOleEnum;
const
  SQLDMOObjSort_Name = $00000000;
  SQLDMOObjSort_Type = $00000001;
  SQLDMOObjSort_Owner = $00000002;
  SQLDMOObjSort_Date = $00000003;

// Constants for enum SQLDMO_SVCSTATUS_TYPE
type
  SQLDMO_SVCSTATUS_TYPE = TOleEnum;
const
  SQLDMOSvc_Unknown = $00000000;
  SQLDMOSvc_Running = $00000001;
  SQLDMOSvc_Paused = $00000002;
  SQLDMOSvc_Stopped = $00000003;
  SQLDMOSvc_Starting = $00000004;
  SQLDMOSvc_Stopping = $00000005;
  SQLDMOSvc_Continuing = $00000006;
  SQLDMOSvc_Pausing = $00000007;

// Constants for enum SQLDMO_SRVOPTION_TYPE
type
  SQLDMO_SRVOPTION_TYPE = TOleEnum;
const
  SQLDMOSrvOpt_Unknown = $00000000;
  SQLDMOSrvOpt_RPC = $00000001;
  SQLDMOSrvOpt_Publisher = $00000002;
  SQLDMOSrvOpt_Subscriber = $00000004;
  SQLDMOSrvOpt_Distributor = $00000008;
  SQLDMOSrvOpt_DistPublisher = $00000010;
  SQLDMOSrvOpt_RPC_out = $00000040;
  SQLDMOSrvOpt_DataAccess = $00000080;
  SQLDMOSrvOpt_CollationCompatible = $00000100;
  SQLDMOSrvOpt_UseRemoteCollation = $00000400;
  SQLDMOSrvOpt_LazySchemaValid = $00000800;
  SQLDMOSrvOpt_NonTransacted = $00001000;
  SQLDMOSrvOpt_InProcess = $00002000;
  SQLDMOSrvOpt_IndexAsAccessPath = $00004000;
  SQLDMOSrvOpt_LevelZeroOnly = $00008000;
  SQLDMOSrvOpt_NestedQueries = $00010000;
  SQLDMOSrvOpt_DynamicParameters = $00020000;

// Constants for enum SQLDMO_TABLEATT_TYPE
type
  SQLDMO_TABLEATT_TYPE = TOleEnum;
const
  SQLDMOTabAtt_Identity = $00000001;
  SQLDMOTabAtt_SystemObject = $00000002;
  SQLDMOTabAtt_ForeignKey = $00000004;
  SQLDMOTabAtt_Referenced = $00000008;
  SQLDMOTabAtt_Published = $00000020;
  SQLDMOTabAtt_Replicated = $00000040;
  SQLDMOTabAtt_Check = $00000080;
  SQLDMOTabAtt_Replica = $00000100;
  SQLDMOTabAtt_PrimaryKey = $00000200;
  SQLDMOTabAtt_Unique = $00000400;
  SQLDMOTabAtt_Default = $00000800;
  SQLDMOTabAtt_ReplCheck = $00001000;
  SQLDMOTabAtt_HasConstraint = $00001C84;

// Constants for enum SQLDMO_INTSECLOGIN_TYPE
type
  SQLDMO_INTSECLOGIN_TYPE = TOleEnum;
const
  SQLDMOIntSecLogin_Unknown = $00000000;
  SQLDMOIntSecLogin_Min = $00000001;
  SQLDMOIntSecLogin_Admin = $00000001;
  SQLDMOIntSecLogin_User = $00000002;
  SQLDMOIntSecLogin_Replication = $00000003;
  SQLDMOIntSecLogin_Max = $00000003;

// Constants for enum SQLDMO_VERIFYCONN_TYPE
type
  SQLDMO_VERIFYCONN_TYPE = TOleEnum;
const
  SQLDMOConn_LastState = $00000001;
  SQLDMOConn_CurrentState = $00000002;
  SQLDMOConn_ReconnectIfDead = $00000006;
  SQLDMOConn_Valid = $00000007;

// Constants for enum SQLDMO_EXEC_TYPE
type
  SQLDMO_EXEC_TYPE = TOleEnum;
const
  SQLDMOExec_Default = $00000000;
  SQLDMOExec_NoCommandTerm = $00000001;
  SQLDMOExec_ContinueOnError = $00000002;
  SQLDMOExec_NoExec = $00000004;
  SQLDMOExec_ParseOnly = $00000008;
  SQLDMOExec_QI_ON = $00000010;

// Constants for enum SQLDMO_CONFIGVALUE_TYPE
type
  SQLDMO_CONFIGVALUE_TYPE = TOleEnum;
const
  SQLDMOConfig_RecoveryInterval = $00000065;
  SQLDMOConfig_AllowUpdates = $00000066;
  SQLDMOConfig_UserConnections = $00000067;
  SQLDMOConfig_Locks = $0000006A;
  SQLDMOConfig_OpenObjects = $0000006B;
  SQLDMOConfig_FillFactor = $0000006D;
  SQLDMOConfig_NestedTriggers = $00000073;
  SQLDMOConfig_RemoteAccess = $00000075;
  SQLDMOConfig_DefaultLanguage = $0000007C;
  SQLDMOConfig_LanguageInCache = $0000007D;
  SQLDMOConfig_MaxAsyncIO = $000001F6;
  SQLDMOConfig_MaxWorkerThreads = $000001F7;
  SQLDMOConfig_NetworkPacketSize = $000001F9;
  SQLDMOConfig_ShowAdvancedOption = $00000206;
  SQLDMOConfig_RemoteProcTrans = $0000021E;
  SQLDMOConfig_RemoteConnTimeout = $0000021F;
  SQLDMOConfig_DefaultSortorderId = $00000463;
  SQLDMOConfig_PriorityBoost = $000005ED;
  SQLDMOConfig_RemoteLoginTimeout = $000005EF;
  SQLDMOConfig_RemoteQueryTimeout = $000005F0;
  SQLDMOConfig_CursorThreshold = $000005FB;
  SQLDMOConfig_SetWorkingSetSize = $000005FC;
  SQLDMOConfig_UserOptions = $000005FE;
  SQLDMOConfig_ProcessorAffinityMask = $000005FF;
  SQLDMOConfig_MaxTextReplSize = $00000600;
  SQLDMOConfig_UnicodeLocalID = $00000464;
  SQLDMOConfig_UnicodeComparisonStyle = $00000465;
  SQLDMOConfig_LanguageNeutral = $00000466;
  SQLDMOConfig_TwoDigitYearCutoff = $00000467;
  SQLDMOConfig_IndexCreateMem = $000005E1;
  SQLDMOConfig_MediaRetention = $00000601;
  SQLDMOConfig_CostThresholdForParallelism = $00000602;
  SQLDMOConfig_MaxDegreeOfParallelism = $00000603;
  SQLDMOConfig_MimMemoryPerQuery = $00000604;
  SQLDMOConfig_QueryWait = $00000605;
  SQLDMOConfig_VLMSize = $00000606;
  SQLDMOConfig_MinMemory = $00000607;
  SQLDMOConfig_MaxMemory = $00000608;
  SQLDMOConfig_QueryMaxTime = $00000609;
  SQLDMOConfig_LightweightPooling = $0000060A;
  SQLDMOConfig_ScanStartup = $0000060B;

// Constants for enum SQLDMO_SRVUSERPROFILE_TYPE
type
  SQLDMO_SRVUSERPROFILE_TYPE = TOleEnum;
const
  SQLDMOSrvUserProf_None = $00000000;
  SQLDMOSrvUserProf_SaLogin = $00000001;
  SQLDMOSrvUserProf_CreateDatabase = $00000002;
  SQLDMOSrvUserProf_CreateXP = $00000004;
  SQLDMOSrvUserProf_AllProfileBits = $00000007;

// Constants for enum SQLDMO_DBUSERPROFILE_TYPE
type
  SQLDMO_DBUSERPROFILE_TYPE = TOleEnum;
const
  SQLDMODbUserProf_None = $00000000;
  SQLDMODbUserProf_DboLogin = $00000001;
  SQLDMODbUserProf_CreateTable = $00000002;
  SQLDMODbUserProf_CreateView = $00000004;
  SQLDMODbUserProf_CreateProcedure = $00000008;
  SQLDMODbUserProf_DumpDatabase = $00000010;
  SQLDMODbUserProf_CreateDefault = $00000020;
  SQLDMODbUserProf_DumpTransaction = $00000040;
  SQLDMODbUserProf_CreateRule = $00000080;
  SQLDMODbUserProf_DumpTable = $00000100;
  SQLDMODbUserProf_CreateFunction = $00000200;
  SQLDMODbUserProf_AllProfileBits = $000003FF;
  SQLDMODbUserProf_InvalidLogin = $40000000;
  SQLDMODbUserProf_InaccessibleDb = $80000000;
  SQLDMODbUserProf_DbNotAvailable = $C0000000;

// Constants for enum SQLDMO_OS_TYPE
type
  SQLDMO_OS_TYPE = TOleEnum;
const
  SQLDMO_WIN95 = $00000001;
  SQLDMO_WINNT = $00000002;

// Constants for enum SQLDMO_PACKAGE_TYPE
type
  SQLDMO_PACKAGE_TYPE = TOleEnum;
const
  SQLDMO_Unknown = $00000000;
  SQLDMO_OFFICE = $00000001;
  SQLDMO_STANDARD = $00000002;
  SQLDMO_ENTERPRISE = $00000003;
  SQLDMO_MSDE = $00000004;

// Constants for enum SQLDMO_CONSTANTS_TYPE
type
  SQLDMO_CONSTANTS_TYPE = TOleEnum;
const
  SQLDMO_NOENDDATE = $05F5BEBF;
  SQLDMO_NOENDTIME = $000399B7;
  SQLDMO_USEEXISTINGFILLFACTOR = $00000000;

// Constants for enum SQLDMO_LOGIN_TYPE
type
  SQLDMO_LOGIN_TYPE = TOleEnum;
const
  SQLDMOLogin_NTUser = $00000000;
  SQLDMOLogin_NTGroup = $00000001;
  SQLDMOLogin_Standard = $00000002;

// Constants for enum SQLDMO_ROLE_TYPE
type
  SQLDMO_ROLE_TYPE = TOleEnum;
const
  SQLDMORole_Server = $00000001;
  SQLDMORole_Database = $00000002;
  SQLDMORole_All = $00000003;

// Constants for enum SQLDMO_GRANTED_TYPE
type
  SQLDMO_GRANTED_TYPE = TOleEnum;
const
  SQLDMOGranted_GrantGrant = $000000CC;
  SQLDMOGranted_Grant = $000000CD;
  SQLDMOGranted_Deny = $000000CE;

// Constants for enum SQLDMO_BACKUP_LOG_TYPE
type
  SQLDMO_BACKUP_LOG_TYPE = TOleEnum;
const
  SQLDMOBackup_Log_Truncate = $00000000;
  SQLDMOBackup_Log_NoTruncate = $00000001;
  SQLDMOBackup_Log_NoLog = $00000002;
  SQLDMOBackup_Log_TruncateOnly = $00000003;
  SQLDMOBackup_Log_NoOption = $00000004;

// Constants for enum SQLDMO_BACKUP_TYPE
type
  SQLDMO_BACKUP_TYPE = TOleEnum;
const
  SQLDMOBackup_Database = $00000000;
  SQLDMOBackup_Differential = $00000001;
  SQLDMOBackup_Files = $00000002;
  SQLDMOBackup_Log = $00000003;

// Constants for enum SQLDMO_RESTORE_TYPE
type
  SQLDMO_RESTORE_TYPE = TOleEnum;
const
  SQLDMORestore_Database = $00000000;
  SQLDMORestore_Files = $00000001;
  SQLDMORestore_Log = $00000002;

// Constants for enum SQLDMO_DBUSERROLE_TYPE
type
  SQLDMO_DBUSERROLE_TYPE = TOleEnum;
const
  SQLDMORole_db_None = $00000000;
  SQLDMORole_dbcreator = $00000001;
  SQLDMORole_diskadmin = $00000002;
  SQLDMORole_processadmin = $00000004;
  SQLDMORole_securityadmin = $00000008;
  SQLDMORole_serveradmin = $00000010;
  SQLDMORole_setupadmin = $00000020;
  SQLDMORole_sysadmin = $00000040;
  SQLDMORole_db_accessadmin = $00000080;
  SQLDMORole_db_datareader = $00000100;
  SQLDMORole_db_ddladmin = $00000200;
  SQLDMORole_db_denydatareader = $00000400;
  SQLDMORole_db_denydatawriter = $00000800;
  SQLDMORole_db_backupoperator = $00001000;
  SQLDMORole_db_owner = $00002000;
  SQLDMORole_db_securityadmin = $00004000;
  SQLDMORole_db_datawriter = $00008000;
  SQLDMORole_bulkadmin = $00010000;
  SQLDMORole_Unknown = $FFFFFFFF;

// Constants for enum SQLDMO_GROWTH_TYPE
type
  SQLDMO_GROWTH_TYPE = TOleEnum;
const
  SQLDMOGrowth_MB = $00000000;
  SQLDMOGrowth_Percent = $00000001;
  SQLDMOGrowth_Invalid = $00000063;

// Constants for enum SQLDMO_STAT_SCAN_TYPE
type
  SQLDMO_STAT_SCAN_TYPE = TOleEnum;
const
  SQLDMOStatistic_Sample = $00000000;
  SQLDMOStatistic_Percent = $00000001;
  SQLDMOStatistic_Rows = $00000002;
  SQLDMOStatistic_FullScan = $00000003;

// Constants for enum SQLDMO_STAT_AFFECT_TYPE
type
  SQLDMO_STAT_AFFECT_TYPE = TOleEnum;
const
  SQLDMOStatistic_AffectIndex = $00000000;
  SQLDMOStatistic_AffectColumn = $00000001;
  SQLDMOStatistic_AffectAll = $00000002;

// Constants for enum SQLDMO_FULLTEXTSTATUS_TYPE
type
  SQLDMO_FULLTEXTSTATUS_TYPE = TOleEnum;
const
  SQLDMOFullText_Idle = $00000000;
  SQLDMOFullText_CrawlinProgress = $00000001;
  SQLDMOFullText_Paused = $00000002;
  SQLDMOFullText_Throttled = $00000003;
  SQLDMOFullText_Recovering = $00000004;
  SQLDMOFullText_Shutdown = $00000005;
  SQLDMOFullText_Incremental = $00000006;
  SQLDMOFullText_UpdatingIndex = $00000007;
  SQLDMOFullText_DiskFullPause = $00000008;
  SQLDMOFullText_Notifications = $00000009;

// Constants for enum SQLDMO_FULLTEXT_START_TYPE
type
  SQLDMO_FULLTEXT_START_TYPE = TOleEnum;
const
  SQLDMOFullText_Full = $00000000;
  SQLDMOFullText_Inc = $00000001;

// Constants for enum SQLDMO_LINKEDTABLE_TYPE
type
  SQLDMO_LINKEDTABLE_TYPE = TOleEnum;
const
  SQLDMOLinkedTable_Default = $00000000;
  SQLDMOLinkedTable_Alias = $00000001;
  SQLDMOLinkedTable_GlobalTemporary = $00000002;
  SQLDMOLinkedTable_LocalTemporary = $00000003;
  SQLDMOLinkedTable_SystemTable = $00000004;
  SQLDMOLinkedTable_Table = $00000005;
  SQLDMOLinkedTable_View = $00000006;
  SQLDMOLinkedTable_SystemView = $00000007;

// Constants for enum SQLDMO_SQL_VER
type
  SQLDMO_SQL_VER = TOleEnum;
const
  SQLDMOSQLVer_Unknown = $00000000;
  SQLDMOSQLVer_Pre_60 = $00000001;
  SQLDMOSQLVer_60 = $00000002;
  SQLDMOSQLVer_65 = $00000004;
  SQLDMOSQLVer_70 = $00000008;
  SQLDMOSQLVer_80 = $00000010;

// Constants for enum SQLDMO_DBCC_REPAIR_TYPE
type
  SQLDMO_DBCC_REPAIR_TYPE = TOleEnum;
const
  SQLDMORepair_None = $00000000;
  SQLDMORepair_Fast = $00000001;
  SQLDMORepair_Rebuild = $00000002;
  SQLDMORepair_Allow_DataLoss = $00000003;

// Constants for enum SQLDMO_BCP_CODEPAGE_TYPE
type
  SQLDMO_BCP_CODEPAGE_TYPE = TOleEnum;
const
  SQLDMOBCP_RAW = $FFFFFFFF;
  SQLDMOBCP_ACP = $00000000;
  SQLDMOBCP_OEM = $00000001;
  SQLDMOBCP_User = $00000002;

// Constants for enum SQLDMO_SERVERBCP_DATAFILE_TYPE
type
  SQLDMO_SERVERBCP_DATAFILE_TYPE = TOleEnum;
const
  SQLDMOBCPDataFile_Char = $00000001;
  SQLDMOBCPDataFile_Default = $00000001;
  SQLDMOBCPDataFile_Native = $00000002;
  SQLDMOBCPDataFile_WideChar = $00000004;
  SQLDMOBCPDataFile_WideNative = $00000008;

// Constants for enum SQLDMO_COMP_LEVEL_TYPE
type
  SQLDMO_COMP_LEVEL_TYPE = TOleEnum;
const
  SQLDMOCompLevel_Unknown = $00000000;
  SQLDMOCompLevel_60 = $0000003C;
  SQLDMOCompLevel_65 = $00000041;
  SQLDMOCompLevel_70 = $00000046;
  SQLDMOCompLevel_80 = $00000050;
  SQLDMOCompLevel_90 = $0000005A;

// Constants for enum SQLDMO_SHRINK_TYPE
type
  SQLDMO_SHRINK_TYPE = TOleEnum;
const
  SQLDMOShrink_Default = $00000000;
  SQLDMOShrink_NoTruncate = $00000001;
  SQLDMOShrink_TruncateOnly = $00000002;
  SQLDMOShrink_EmptyFile = $00000003;

// Constants for enum SQLDMO_NTACCESS_TYPE
type
  SQLDMO_NTACCESS_TYPE = TOleEnum;
const
  SQLDMONTAccess_Unknown = $00000000;
  SQLDMONTAccess_Grant = $00000001;
  SQLDMONTAccess_Deny = $00000002;
  SQLDMONTAccess_NonNTLogin = $00000063;

// Constants for enum SQLDMO_FULLTEXT_POPULATE_TYPE
type
  SQLDMO_FULLTEXT_POPULATE_TYPE = TOleEnum;
const
  SQLDMOFullText_PopuFull = $00000000;
  SQLDMOFullText_PopuInc = $00000001;
  SQLDMOFullText_PopuStop = $00000002;

// Constants for enum SQLDMO_FULLTEXT_POPULATE_STATUS
type
  SQLDMO_FULLTEXT_POPULATE_STATUS = TOleEnum;
const
  SQLDMOFullText_Popu_No = $00000000;
  SQLDMOFullText_Popu_Full = $00000001;
  SQLDMOFullText_Popu_Inc = $00000002;

// Constants for enum SQLDMO_UDF_TYPE
type
  SQLDMO_UDF_TYPE = TOleEnum;
const
  SQLDMOUDF_Unknown = $00000000;
  SQLDMOUDF_Scalar = $00000001;
  SQLDMOUDF_Table = $00000002;
  SQLDMOUDF_Inline = $00000003;

// Constants for enum SQLDMO_RECOVERY_TYPE
type
  SQLDMO_RECOVERY_TYPE = TOleEnum;
const
  SQLDMORECOVERY_Simple = $00000000;
  SQLDMORECOVERY_BulkLogged = $00000001;
  SQLDMORECOVERY_Full = $00000002;
  SQLDMORECOVERY_Unknown = $00000003;

// Constants for enum SQLDMO_SUBSCRIBER_TYPE
type
  SQLDMO_SUBSCRIBER_TYPE = TOleEnum;
const
  SQLDMOSubInfo_SQLServer = $00000000;
  SQLDMOSubInfo_ODBCDatasource = $00000001;
  SQLDMOSubInfo_JetDatabase = $00000002;
  SQLDMOSubInfo_OLEDBDatasource = $00000003;
  SQLDMOSubInfo_ExchangeServer = $00000004;

// Constants for enum SQLDMO_INITIALSYNC_TYPE
type
  SQLDMO_INITIALSYNC_TYPE = TOleEnum;
const
  SQLDMOInitSync_Unknown = $0000000A;
  SQLDMOInitSync_Min = $00000000;
  SQLDMOInitSync_Default = $00000000;
  SQLDMOInitSync_BCPNative = $00000000;
  SQLDMOInitSync_BCPChar = $00000001;
  SQLDMOInitSync_Concurrent = $00000003;
  SQLDMOInitSync_ConcurrentChar = $00000004;
  SQLDMOInitSync_Max = $00000004;

// Constants for enum SQLDMO_REPFREQ_TYPE
type
  SQLDMO_REPFREQ_TYPE = TOleEnum;
const
  SQLDMORepFreq_Unknown = $000003E8;
  SQLDMORepFreq_Min = $00000000;
  SQLDMORepFreq_Continuous = $00000000;
  SQLDMORepFreq_Snapshot = $00000001;
  SQLDMORepFreq_Max = $00000001;

// Constants for enum SQLDMO_PUBLICATION_TYPE
type
  SQLDMO_PUBLICATION_TYPE = TOleEnum;
const
  SQLDMOPublication_Unknown = $000003E8;
  SQLDMOPublication_Min = $00000000;
  SQLDMOPublication_Transactional = $00000000;
  SQLDMOPublication_Snapshot = $00000001;
  SQLDMOPublication_Merge = $00000002;
  SQLDMOPublication_Max = $00000002;

// Constants for enum SQLDMO_ARTICLE_TYPE
type
  SQLDMO_ARTICLE_TYPE = TOleEnum;
const
  SQLDMORep_Min = $00000000;
  SQLDMORep_LogBased = $00000001;
  SQLDMORep_ManualFilterProc = $00000002;
  SQLDMORep_LogBasedManualFilterProc = $00000003;
  SQLDMORep_ManualSyncView = $00000004;
  SQLDMORep_LogBasedManualSyncView = $00000005;
  SQLDMORep_LogBasedVerticalPartition = $00000006;
  SQLDMORep_LogBasedManualBoth = $00000007;
  SQLDMORep_ProcExecution = $00000008;
  SQLDMORep_SerializableProcExecution = $00000018;
  SQLDMORep_TableBased = $0000000A;
  SQLDMORep_ProcSchemaOnly = $00000020;
  SQLDMORep_ViewSchemaOnly = $00000040;
  SQLDMORep_FuncSchemaOnly = $00000080;
  SQLDMORep_IndexedView = $00000100;
  SQLDMORep_IndexedViewLogBased = $00000101;
  SQLDMORep_IndexedViewLogBasedManualFilterProc = $00000103;
  SQLDMORep_IndexedViewLogBasedManualSyncView = $00000105;
  SQLDMORep_IndexedViewLogBasedManualBoth = $00000107;
  SQLDMORep_IndexedViewSchemaOnly = $00000140;
  SQLDMORep_Max = $00000140;

// Constants for enum SQLDMO_SUBSYNC_TYPE
type
  SQLDMO_SUBSYNC_TYPE = TOleEnum;
const
  SQLDMOSubSync_Unknown = $000003E8;
  SQLDMOSubSync_Manual = $00000000;
  SQLDMOSubSync_Min = $00000001;
  SQLDMOSubSync_Auto = $00000001;
  SQLDMOSubSync_Default = $00000001;
  SQLDMOSubSync_None = $00000002;
  SQLDMOSubSync_Max = $00000002;

// Constants for enum SQLDMO_PREARTICLE_TYPE
type
  SQLDMO_PREARTICLE_TYPE = TOleEnum;
const
  SQLDMOPreArt_Min = $00000000;
  SQLDMOPreArt_None = $00000000;
  SQLDMOPreArt_DropTable = $00000001;
  SQLDMOPreArt_DeleteRows = $00000002;
  SQLDMOPreArt_TruncateTable = $00000003;
  SQLDMOPreArt_Max = $00000003;

// Constants for enum SQLDMO_ARTSTATUS_TYPE
type
  SQLDMO_ARTSTATUS_TYPE = TOleEnum;
const
  SQLDMOArtStat_Min = $00000000;
  SQLDMOArtStat_Inactive = $00000000;
  SQLDMOArtStat_Unsynced = $00000001;
  SQLDMOArtStat_Active = $00000002;
  SQLDMOArtStat_Conflicts = $00000003;
  SQLDMOArtStat_Errors = $00000004;
  SQLDMOArtStat_NewInactive = $00000005;
  SQLDMOArtStat_NewActive = $00000006;
  SQLDMOArtStat_Max = $00000006;

// Constants for enum SQLDMO_SUBSTATUS_TYPE
type
  SQLDMO_SUBSTATUS_TYPE = TOleEnum;
const
  SQLDMOSubStat_Unknown = $000003E8;
  SQLDMOSubStat_Default = $000003E8;
  SQLDMOSubStat_Min = $00000000;
  SQLDMOSubStat_Inactive = $00000000;
  SQLDMOSubStat_Unsynced = $00000001;
  SQLDMOSubStat_Active = $00000002;
  SQLDMOSubStat_Max = $00000002;

// Constants for enum SQLDMO_PUBSTATUS_TYPE
type
  SQLDMO_PUBSTATUS_TYPE = TOleEnum;
const
  SQLDMOPubStat_Unknown = $000003E8;
  SQLDMOPubStat_Default = $000003E8;
  SQLDMOPubStat_Min = $00000000;
  SQLDMOPubStat_Inactive = $00000000;
  SQLDMOPubStat_Active = $00000001;
  SQLDMOPubStat_Max = $00000001;

// Constants for enum SQLDMO_REPLICATION_TYPE
type
  SQLDMO_REPLICATION_TYPE = TOleEnum;
const
  SQLDMORepType_Unknown = $00000100;
  SQLDMORepType_Transactional = $00000001;
  SQLDMORepType_Merge = $00000002;
  SQLDMORepType_TransactionalMerge = $00000003;
  SQLDMORepType_Default = $00000001;

// Constants for enum SQLDMO_RESOLVECONFLICT_TYPE
type
  SQLDMO_RESOLVECONFLICT_TYPE = TOleEnum;
const
  SQLDMOResolveConflict_Unknown = $00000100;
  SQLDMOResolveConflict_Resubmit = $00000001;
  SQLDMOResolveConflict_Discard = $00000002;
  SQLDMOResolveConflict_Default = $00000001;

// Constants for enum SQLDMO_TRANSUBSCRIBER_TYPE
type
  SQLDMO_TRANSUBSCRIBER_TYPE = TOleEnum;
const
  SQLDMOTranSubscriber_Unknown = $00000100;
  SQLDMOTranSubscriber_Min = $00000000;
  SQLDMOTranSubscriber_ReadOnly = $00000000;
  SQLDMOTranSubscriber_Synchronous = $00000001;
  SQLDMOTranSubscriber_Queued = $00000002;
  SQLDMOTranSubscriber_Failover = $00000003;
  SQLDMOTranSubscriber_Default = $00000000;
  SQLDMOTranSubscriber_Max = $00000003;

// Constants for enum SQLDMO_MERGESUBSCRIBER_TYPE
type
  SQLDMO_MERGESUBSCRIBER_TYPE = TOleEnum;
const
  SQLDMOMergeSubscriber_Unknown = $00000100;
  SQLDMOMergeSubscriber_Min = $00000001;
  SQLDMOMergeSubscriber_Global = $00000001;
  SQLDMOMergeSubscriber_Local = $00000002;
  SQLDMOMergeSubscriber_Anonymous = $00000003;
  SQLDMOMergeSubscriber_Republishing = $00000004;
  SQLDMOMergeSubscriber_Default = $00000002;
  SQLDMOMergeSubscriber_Max = $00000004;

// Constants for enum SQLDMO_REPSCRIPT_TYPE
type
  SQLDMO_REPSCRIPT_TYPE = TOleEnum;
const
  SQLDMORepScript_Default = $00000100;
  SQLDMORepScript_NoSubscription = $00000080;
  SQLDMORepScript_InstallDistributor = $00000100;
  SQLDMORepScript_UninstallDistributor = $00000200;
  SQLDMORepScript_InstallPublisher = $00000400;
  SQLDMORepScript_UninstallPublisher = $00000800;
  SQLDMORepScript_ToFileOnly = $00001000;
  SQLDMORepScript_AppendToFile = $00002000;
  SQLDMORepScript_Creation = $00004000;
  SQLDMORepScript_Deletion = $00008000;
  SQLDMORepScript_PublicationCreation = $00010000;
  SQLDMORepScript_PublicationDeletion = $00020000;
  SQLDMORepScript_SubscriptionCreation = $00040000;
  SQLDMORepScript_SubscriptionDeletion = $00080000;
  SQLDMORepScript_PullSubscriptionCreation = $00040000;
  SQLDMORepScript_PullSubscriptionDeletion = $00080000;
  SQLDMORepScript_InstallReplication = $00100000;
  SQLDMORepScript_UninstallReplication = $00200000;
  SQLDMORepScript_ReplicationJobs = $00400000;
  SQLDMORepScript_AnsiFile = $01000000;
  SQLDMORepScript_UnicodeFile = $02000000;
  SQLDMORepScript_EnableReplicationDB = $04000000;
  SQLDMORepScript_DisableReplicationDB = $08000000;
  SQLDMORepScript_NoCommandTerm = $10000000;

// Constants for enum SQLDMO_CREATIONSCRIPT_TYPE
type
  SQLDMO_CREATIONSCRIPT_TYPE = TOleEnum;
const
  SQLDMOCreationScript_DisableScripting = $00000000;
  SQLDMOCreationScript_PrimaryObject = $00000001;
  SQLDMOCreationScript_CustomProcs = $00000002;
  SQLDMOCreationScript_ClusteredIndexes = $00000010;
  SQLDMOCreationScript_UDDTsToBaseTypes = $00000020;
  SQLDMOCreationScript_NonClusteredIndexes = $00000040;
  SQLDMOCreationScript_DRI_PrimaryKey = $00000080;
  SQLDMOCreationScript_UserTriggers = $00000100;
  SQLDMOCreationScript_DRI_ForeignKeys = $00000200;
  SQLDMOCreationScript_DRI_Checks = $00000400;
  SQLDMOCreationScript_DRI_Defaults = $00000800;
  SQLDMOCreationScript_Collation = $00001000;
  SQLDMOCreationScript_ExtendedProperties = $00002000;
  SQLDMOCreationScript_DRI_UniqueKeys = $00004000;
  SQLDMOCreationScript_PKUKAsConstraints = $00008000;

// Constants for enum SQLDMO_COMMANDOPTION_TYPE
type
  SQLDMO_COMMANDOPTION_TYPE = TOleEnum;
const
  SQLDMOCommandOption_IncludeInsertColumnNames = $00000008;
  SQLDMOCommandOption_BinaryParameters = $00000010;
  SQLDMOCommandOption_DTSHorizontalPartition = $00000040;

// Constants for enum SQLDMO_SUBSCRIPTION_TYPE
type
  SQLDMO_SUBSCRIPTION_TYPE = TOleEnum;
const
  SQLDMOSubscription_Unknown = $00000100;
  SQLDMOSubscription_Min = $00000000;
  SQLDMOSubscription_Push = $00000000;
  SQLDMOSubscription_Pull = $00000001;
  SQLDMOSubscription_Anonymous = $00000002;
  SQLDMOSubscription_All = $00000003;
  SQLDMOSubscription_Default = $00000000;
  SQLDMOSubscription_Max = $00000003;

// Constants for enum SQLDMO_PUBATTRIB_TYPE
type
  SQLDMO_PUBATTRIB_TYPE = TOleEnum;
const
  SQLDMOPubAttrib_Unknown = $00000100;
  SQLDMOPubAttrib_Min = $00000000;
  SQLDMOPubAttrib_AllowPush = $00000001;
  SQLDMOPubAttrib_AllowPull = $00000002;
  SQLDMOPubAttrib_AllowAnonymous = $00000004;
  SQLDMOPubAttrib_InternetEnabled = $00000008;
  SQLDMOPubAttrib_ImmediateSync = $00000010;
  SQLDMOPubAttrib_IndependentAgent = $00000020;
  SQLDMOPubAttrib_SnapshotInDefaultFolder = $00000040;
  SQLDMOPubAttrib_CompressSnapshot = $00000080;
  SQLDMOPubAttrib_AllowSubscriptionCopy = $00000100;
  SQLDMOPubAttrib_Default = $00000001;
  SQLDMOPubAttrib_Valid = $000001FF;

// Constants for enum SQLDMO_TASKSTATUS_TYPE
type
  SQLDMO_TASKSTATUS_TYPE = TOleEnum;
const
  SQLDMOTask_Pending = $00000000;
  SQLDMOTask_Starting = $00000001;
  SQLDMOTask_Succeeded = $00000002;
  SQLDMOTask_Running = $00000003;
  SQLDMOTask_Idle = $00000004;
  SQLDMOTask_Retry = $00000005;
  SQLDMOTask_Failed = $00000006;

// Constants for enum SQLDMO_SESSION_TYPE
type
  SQLDMO_SESSION_TYPE = TOleEnum;
const
  SQLDMOSession_Unknown = $00000100;
  SQLDMOSession_All = $00000001;
  SQLDMOSession_Errors = $00000002;

// Constants for enum SQLDMO_REPLAGENT_TYPE
type
  SQLDMO_REPLAGENT_TYPE = TOleEnum;
const
  SQLDMOReplAgent_Default = $00000000;
  SQLDMOReplAgent_Publishers = $FFFFFFFF;
  SQLDMOReplAgent_All = $00000000;
  SQLDMOReplAgent_Snapshot = $00000001;
  SQLDMOReplAgent_LogReader = $00000002;
  SQLDMOReplAgent_Distribution = $00000003;
  SQLDMOReplAgent_Merge = $00000004;
  SQLDMOReplAgent_Miscellaneous = $00000005;
  SQLDMOReplAgent_QueueReader = $00000009;

// Constants for enum SQLDMO_REPLSECURITY_TYPE
type
  SQLDMO_REPLSECURITY_TYPE = TOleEnum;
const
  SQLDMOReplSecurity_Min = $00000000;
  SQLDMOReplSecurity_Normal = $00000000;
  SQLDMOReplSecurity_Integrated = $00000001;
  SQLDMOReplSecurity_PredefinedServer = $00000002;
  SQLDMOReplSecurity_Max = $00000002;

// Constants for enum SQLDMO_REPLDTSLOC_TYPE
type
  SQLDMO_REPLDTSLOC_TYPE = TOleEnum;
const
  SQLDMOReplDTSPackageLocation_Distributor = $00000000;
  SQLDMOReplDTSPackageLocation_Subscriber = $00000001;

// Constants for enum SQLDMO_CONFLICTPOLICY_TYPE
type
  SQLDMO_CONFLICTPOLICY_TYPE = TOleEnum;
const
  SQLDMOConflictPolicy_PublisherWin = $00000001;
  SQLDMOConflictPolicy_SubscriberWin = $00000002;
  SQLDMOConflictPolicy_ReinitSubscription = $00000003;

// Constants for enum SQLDMO_VERIFYSIGNATURE_TYPE
type
  SQLDMO_VERIFYSIGNATURE_TYPE = TOleEnum;
const
  SQLDMOVerifySignature_NoVerification = $00000000;
  SQLDMOVerifySignature_TrustedAuthority = $00000001;

// Constants for enum SQLDMO_REPLFAILOVER_TYPE
type
  SQLDMO_REPLFAILOVER_TYPE = TOleEnum;
const
  SQLDMOReplFailOver_Immediate = $00000000;
  SQLDMOReplFailOver_Queued = $00000001;

// Constants for enum SQLDMO_THIRDPARTYOPTION_TYPE
type
  SQLDMO_THIRDPARTYOPTION_TYPE = TOleEnum;
const
  SQLDMOThirdPartyOption_Default = $00000000;
  SQLDMOThirdPartyOption_SuppressDisplay = $00000001;

// Constants for enum SQLDMO_REPLQUEUE_TYPE
type
  SQLDMO_REPLQUEUE_TYPE = TOleEnum;
const
  SQLDMOReplQueue_MSMQ = $00000001;
  SQLDMOReplQueue_SQL = $00000002;

// Constants for enum SQLDMO_REPLCOMPLEVEL_TYPE
type
  SQLDMO_REPLCOMPLEVEL_TYPE = TOleEnum;
const
  SQLDMOReplCompatibilityLevel_70 = $0000000A;
  SQLDMOReplCompatibilityLevel_70SP1 = $00000014;
  SQLDMOReplCompatibilityLevel_70SP2 = $0000001E;
  SQLDMOReplCompatibilityLevel_80 = $00000028;

// Constants for enum SQLDMO_VALIDATIONOPTION_TYPE
type
  SQLDMO_VALIDATIONOPTION_TYPE = TOleEnum;
const
  SQLDMOValidationOption_70Checksum = $00000000;
  SQLDMOValidationOption_RowCountOnly = $00000001;
  SQLDMOValidationOption_80Checksum = $00000002;

// Constants for enum SQLDMO_VALIDATIONMETHOD_TYPE
type
  SQLDMO_VALIDATIONMETHOD_TYPE = TOleEnum;
const
  SQLDMOValidationMethod_FullCount = $00000000;
  SQLDMOValidationMethod_FastCount = $00000001;
  SQLDMOValidationMethod_ConditionalFast = $00000002;

// Constants for enum SQLDMO_RESYNC_TYPE
type
  SQLDMO_RESYNC_TYPE = TOleEnum;
const
  SQLDMOResync_SinceLastSnapshotApplied = $00000000;
  SQLDMOResync_SinceLastSuccessfulValidation = $00000001;
  SQLDMOResync_SinceAGivenDateTime = $00000002;

// Constants for enum SQLDMO_CHECKPERMISSIONS_TYPE
type
  SQLDMO_CHECKPERMISSIONS_TYPE = TOleEnum;
const
  SQLDMOCheckPermissions_NoCheck = $00000000;
  SQLDMOCheckPermissions_InsertCheck = $00000001;
  SQLDMOCheckPermissions_UpdateCheck = $00000002;
  SQLDMOCheckPermissions_DeleteCheck = $00000004;

// Constants for enum SQLDMO_REPLCONSTANTS_TYPE
type
  SQLDMO_REPLCONSTANTS_TYPE = TOleEnum;
const
  SQLDMO_DEFAULTRETENTION = $0000000E;

// Constants for enum SQLDMO_COMPLETION_TYPE
type
  SQLDMO_COMPLETION_TYPE = TOleEnum;
const
  SQLDMOComp_Unknown = $00001000;
  SQLDMOComp_None = $00000000;
  SQLDMOComp_Success = $00000001;
  SQLDMOComp_Failure = $00000002;
  SQLDMOComp_Always = $00000003;
  SQLDMOComp_All = $00000006;

// Constants for enum SQLDMO_JOBOUTCOME_TYPE
type
  SQLDMO_JOBOUTCOME_TYPE = TOleEnum;
const
  SQLDMOJobOutcome_Failed = $00000000;
  SQLDMOJobOutcome_Succeeded = $00000001;
  SQLDMOJobOutcome_Cancelled = $00000003;
  SQLDMOJobOutcome_InProgress = $00000004;
  SQLDMOJobOutcome_Unknown = $00000005;

// Constants for enum SQLDMO_EVENT_TYPE
type
  SQLDMO_EVENT_TYPE = TOleEnum;
const
  SQLDMOEvent_Unknown = $00000000;
  SQLDMOEvent_Info = $00000001;
  SQLDMOEvent_Warning = $00000002;
  SQLDMOEvent_Error = $00000004;
  SQLDMOEvent_AuditSuccess = $00000008;
  SQLDMOEvent_AuditFailure = $00000010;
  SQLDMOEvent_All = $0000001F;

// Constants for enum SQLDMO_FREQUENCY_TYPE
type
  SQLDMO_FREQUENCY_TYPE = TOleEnum;
const
  SQLDMOFreq_Unknown = $00000000;
  SQLDMOFreq_OneTime = $00000001;
  SQLDMOFreq_Daily = $00000004;
  SQLDMOFreq_Weekly = $00000008;
  SQLDMOFreq_Monthly = $00000010;
  SQLDMOFreq_MonthlyRelative = $00000020;
  SQLDMOFreq_Autostart = $00000040;
  SQLDMOFreq_OnIdle = $00000080;
  SQLDMOFreq_Valid = $000000FF;

// Constants for enum SQLDMO_FREQSUB_TYPE
type
  SQLDMO_FREQSUB_TYPE = TOleEnum;
const
  SQLDMOFreqSub_Unknown = $00000000;
  SQLDMOFreqSub_Once = $00000001;
  SQLDMOFreqSub_Minute = $00000004;
  SQLDMOFreqSub_Hour = $00000008;
  SQLDMOFreqSub_Valid = $0000000D;

// Constants for enum SQLDMO_FREQRELATIVE_TYPE
type
  SQLDMO_FREQRELATIVE_TYPE = TOleEnum;
const
  SQLDMOFreqRel_Unknown = $00000000;
  SQLDMOFreqRel_First = $00000001;
  SQLDMOFreqRel_Second = $00000002;
  SQLDMOFreqRel_Third = $00000004;
  SQLDMOFreqRel_Fourth = $00000008;
  SQLDMOFreqRel_Last = $00000010;
  SQLDMOFreqRel_Valid = $0000001F;

// Constants for enum SQLDMO_WEEKDAY_TYPE
type
  SQLDMO_WEEKDAY_TYPE = TOleEnum;
const
  SQLDMOWeek_Unknown = $00000000;
  SQLDMOWeek_Sunday = $00000001;
  SQLDMOWeek_Monday = $00000002;
  SQLDMOWeek_Tuesday = $00000004;
  SQLDMOWeek_Wednesday = $00000008;
  SQLDMOWeek_Thursday = $00000010;
  SQLDMOWeek_Friday = $00000020;
  SQLDMOWeek_Saturday = $00000040;
  SQLDMOWeek_WeekDays = $0000003E;
  SQLDMOWeek_WeekEnds = $00000041;
  SQLDMOWeek_EveryDay = $0000007F;

// Constants for enum SQLDMO_MONTHDAY_TYPE
type
  SQLDMO_MONTHDAY_TYPE = TOleEnum;
const
  SQLDMOMonth_Unknown = $00000000;
  SQLDMOMonth_MinValid = $00000001;
  SQLDMOMonth_Sunday = $00000001;
  SQLDMOMonth_Monday = $00000002;
  SQLDMOMonth_Tuesday = $00000003;
  SQLDMOMonth_Wednesday = $00000004;
  SQLDMOMonth_Thursday = $00000005;
  SQLDMOMonth_Friday = $00000006;
  SQLDMOMonth_Saturday = $00000007;
  SQLDMOMonth_Day = $00000008;
  SQLDMOMonth_WeekDay = $00000009;
  SQLDMOMonth_WeekEndDay = $0000000A;
  SQLDMOMonth_MaxValid = $0000000A;

// Constants for enum SQLDMO_RUNPRIORITY_TYPE
type
  SQLDMO_RUNPRIORITY_TYPE = TOleEnum;
const
  SQLDMORunPri_Unknown = $00000064;
  SQLDMORunPri_Min = $00000001;
  SQLDMORunPri_Idle = $FFFFFFF1;
  SQLDMORunPri_Lowest = $FFFFFFFE;
  SQLDMORunPri_BelowNormal = $FFFFFFFF;
  SQLDMORunPri_Normal = $00000000;
  SQLDMORunPri_AboveNormal = $00000001;
  SQLDMORunPri_Highest = $00000002;
  SQLDMORunPri_TimeCritical = $0000000F;

// Constants for enum SQLDMO_NOTIFY_TYPE
type
  SQLDMO_NOTIFY_TYPE = TOleEnum;
const
  SQLDMONotify_None = $00000000;
  SQLDMONotify_Email = $00000001;
  SQLDMONotify_Pager = $00000002;
  SQLDMONotify_NetSend = $00000004;
  SQLDMONotify_All = $00000007;

// Constants for enum SQLDMO_ENUMNOTIFY_TYPE
type
  SQLDMO_ENUMNOTIFY_TYPE = TOleEnum;
const
  SQLDMOEnumNotify_Min = $00000001;
  SQLDMOEnumNotify_All = $00000001;
  SQLDMOEnumNotify_Actual = $00000002;
  SQLDMOEnumNotify_Target = $00000003;
  SQLDMOEnumNotify_Max = $00000003;

// Constants for enum SQLDMO_JOBEXECUTION_STATUS
type
  SQLDMO_JOBEXECUTION_STATUS = TOleEnum;
const
  SQLDMOJobExecution_Unknown = $00000000;
  SQLDMOJobExecution_Executing = $00000001;
  SQLDMOJobExecution_WaitingForWorkerThread = $00000002;
  SQLDMOJobExecution_BetweenRetries = $00000003;
  SQLDMOJobExecution_Idle = $00000004;
  SQLDMOJobExecution_Suspended = $00000005;
  SQLDMOJobExecution_WaitingForStepToFinish = $00000006;
  SQLDMOJobExecution_PerformingCompletionActions = $00000007;

// Constants for enum SQLDMO_FIND_OPERAND
type
  SQLDMO_FIND_OPERAND = TOleEnum;
const
  SQLDMOFindOperand_Unknown = $00000000;
  SQLDMOFindOperand_EqualTo = $00000001;
  SQLDMOFindOperand_GreaterThan = $00000002;
  SQLDMOFindOperand_LessThan = $00000003;

// Constants for enum SQLDMO_JOBSTEPACTION_TYPE
type
  SQLDMO_JOBSTEPACTION_TYPE = TOleEnum;
const
  SQLDMOJobStepAction_Unknown = $00000000;
  SQLDMOJobStepAction_QuitWithSuccess = $00000001;
  SQLDMOJobStepAction_QuitWithFailure = $00000002;
  SQLDMOJobStepAction_GotoNextStep = $00000003;
  SQLDMOJobStepAction_GotoStep = $00000004;

// Constants for enum SQLDMO_CATEGORYTYPE_TYPE
type
  SQLDMO_CATEGORYTYPE_TYPE = TOleEnum;
const
  SQLDMOCategoryType_Unknown = $00000000;
  SQLDMOCategoryType_LocalJob = $00000001;
  SQLDMOCategoryType_MultiServerJob = $00000002;
  SQLDMOCategoryType_None = $00000003;

// Constants for enum SQLDMO_TARGETSERVERSTATUS_TYPE
type
  SQLDMO_TARGETSERVERSTATUS_TYPE = TOleEnum;
const
  SQLDMOTargetServerStatus_Unknown = $00000000;
  SQLDMOTargetServerStatus_Normal = $00000001;
  SQLDMOTargetServerStatus_SuspectedOffline = $00000002;
  SQLDMOTargetServerStatus_Blocked = $00000004;

// Constants for enum SQLDMO_JOB_TYPE
type
  SQLDMO_JOB_TYPE = TOleEnum;
const
  SQLDMOJob_Unknown = $00000000;
  SQLDMOJob_Local = $00000001;
  SQLDMOJob_MultiServer = $00000002;

// Constants for enum SQLDMO_JOBSERVER_TYPE
type
  SQLDMO_JOBSERVER_TYPE = TOleEnum;
const
  SQLDMOJobServer_StandAlone = $00000001;
  SQLDMOJobServer_TSX = $00000002;
  SQLDMOJobServer_MSX = $00000003;
  SQLDMOJobServer_Unknown = $00000000;

// Constants for enum SQLDMO_ALERT_TYPE
type
  SQLDMO_ALERT_TYPE = TOleEnum;
const
  SQLDMOAlert_SQLServerEvent = $00000001;
  SQLDMOAlert_SQLServerPerformanceCondition = $00000002;
  SQLDMOAlert_NonSQLServerEvent = $00000003;

// Constants for enum SQLDMO_ERROR_TYPE
type
  SQLDMO_ERROR_TYPE = TOleEnum;
const
  SQLDMO_E_DBLIBFIRSTERROR = $00002710;
  SQLDMO_E_DBLIBLASTERROR = $000027D8;
  SQLDMO_E_FIRSTERROR = $00005000;
  SQLDMO_ECAT_MASK = $00005F00;
  SQLDMO_ECAT_INVALIDCONTEXT = $00005000;
  SQLDMO_E_ALREADYCONN = $00005000;
  SQLDMO_E_ALREADYCOLL = $00005001;
  SQLDMO_E_NOTCONN = $00005002;
  SQLDMO_E_CANTDROPSERVER = $00005003;
  SQLDMO_E_NOCOMPLEXALTER = $00005004;
  SQLDMO_E_PROPNEEDSCREATE = $00005005;
  SQLDMO_E_COLTYPEFIXED = $00005006;
  SQLDMO_E_COLTYPENONNULL = $00005007;
  SQLDMO_E_CANTCHANGEUDDT = $00005008;
  SQLDMO_E_BASETYPEFIXED = $00005009;
  SQLDMO_E_BASETYPENONNULL = $0000500A;
  SQLDMO_E_ENUMORDINAL = $0000500B;
  SQLDMO_E_CANTRENAMEUSER = $0000500C;
  SQLDMO_E_CANTRENAMEGROUP = $0000500D;
  SQLDMO_E_CANTRENAMELOGIN = $0000500E;
  SQLDMO_E_CANTRENAMEDEVICE = $0000500F;
  SQLDMO_E_NOTDUMPPROP = $00005010;
  SQLDMO_E_NOSERVERASSOC = $00005011;
  SQLDMO_E_NOTCOLLTYPE = $00005012;
  SQLDMO_E_CANTMODIFYDRIINDEX = $00005013;
  SQLDMO_E_CANTCHANGEPROCTYPE = $00005014;
  SQLDMO_E_CANTMODIFYINDEX = $00005015;
  SQLDMO_E_INVALIDPRIVOBJ = $00005016;
  SQLDMO_E_CANTCHANGETRIGTYPE = $00005017;
  SQLDMO_E_NOVIEWCOLALTER = $00005018;
  SQLDMO_E_CANTRENAMELANGUAGE = $00005019;
  SQLDMO_E_CANTRENAMERSERVER = $0000501A;
  SQLDMO_E_CANTRENAMERLOGIN = $0000501B;
  SQLDMO_E_MUSTBEDBDEV = $0000501C;
  SQLDMO_E_NOINACTIVEMIRROR = $0000501D;
  SQLDMO_E_NOACTIVEMIRROR = $0000501E;
  SQLDMO_E_NOMIRROR = $0000501F;
  SQLDMO_E_SERVERDISCONNECTED = $00005020;
  SQLDMO_E_CANTRENAMESERVER = $00005021;
  SQLDMO_E_CANTMODIFYTEXT = $00005022;
  SQLDMO_E_CANTMODIFYSYSTABLE = $00005023;
  SQLDMO_E_LOGINALREADYALIASED = $00005024;
  SQLDMO_E_LOGINALREADYUSER = $00005025;
  SQLDMO_E_CACHENORESULTS = $00005026;
  SQLDMO_E_ALREADYCREATED = $00005027;
  SQLDMO_E_NOTDISCONN = $00005028;
  SQLDMO_E_CANTMODIFYARTTABLE = $00005029;
  SQLDMO_E_PROPERTYCANNOTBEMODIFIED = $0000502A;
  SQLDMO_E_BASETYPENOTNUMERIC = $0000502B;
  SQLDMO_E_TOFILEBUTNOFILENAME = $0000502C;
  SQLDMO_E_CANTMODIFYKEY = $0000502E;
  SQLDMO_E_LISTCANTREFRESH = $0000502F;
  SQLDMO_E_NOCOLTABLE = $00005030;
  SQLDMO_E_MUSTBEINALTER = $00005031;
  SQLDMO_E_CANTUNDEDICATELOGDEVICE = $00005032;
  SQLDMO_E_CANTRENAMESERVERGROUP = $00005033;
  SQLDMO_E_CANTRENAMEREGISTEREDSERVER = $00005034;
  SQLDMO_E_INDEXREBUILDKEYTYPE = $00005035;
  SQLDMO_E_REBUILDINDEXOPTIONS = $00005036;
  SQLDMO_E_IMPERSONATEXPONLY = $00005037;
  SQLDMO_E_CANTRENAMEPUBLICATION = $00005038;
  SQLDMO_E_CANTMODIFYSPARTTYPE = $00005039;
  SQLDMO_E_INVALIDDISTDB = $0000503A;
  SQLDMO_E_CANTMODIFYTABLE = $0000503B;
  SQLDMO_E_CANTDROPFILEGROUP = $0000503C;
  SQLDMO_E_DEFAULTFILEGROUP = $0000503D;
  SQLDMO_E_NOTDEFAULTFILEGROUP = $0000503E;
  SQLDMO_E_CANTRESETLOGINTYPE = $0000503F;
  SQLDMO_E_CANTRESETPASSWORD = $00005040;
  SQLDMO_E_PRESQL70 = $00005041;
  SQLDMO_E_PROPBEFORECREATE = $00005042;
  SQLDMO_E_CANTRENAMEROLE = $00005043;
  SQLDMO_E_CANTDROPFIXEDROLE = $00005044;
  SQLDMO_E_CANTADDTOAPPROLE = $00005045;
  SQLDMO_E_CANTGETROLE = $00005046;
  SQLDMO_E_USERDBROLE = $00005047;
  SQLDMO_E_FIXEDDBROLE = $00005048;
  SQLDMO_E_CANTMODIFYFILTER = $00005049;
  SQLDMO_E_INVALIDACTION = $0000504A;
  SQLDMO_E_DBOPTION = $0000504B;
  SQLDMO_E_USEALTER = $0000504C;
  SQLDMO_E_CREATEDBPERM = $0000504D;
  SQLDMO_E_CANTCHECKFK = $0000504E;
  SQLDMO_E_NOTINMB = $0000504F;
  SQLDMO_E_CANTRENAMELSERVER = $00005050;
  SQLDMO_E_CANTRENAMELLOGIN = $00005051;
  SQLDMO_E_CANTRENAMEFULLTEXT = $00005052;
  SQLDMO_E_NOFULLTEXT = $00005053;
  SQLDMO_E_ACTIVATEFULLTEXT = $00005054;
  SQLDMO_E_NOTFULLTEXTENABLED = $00005055;
  SQLDMO_E_CANTDROPLOGFILE = $00005056;
  SQLDMO_E_CANTDROPLSLOGIN = $00005057;
  SQLDMO_E_SCRIPTPWD = $00005058;
  SQLDMO_E_DISTRIBUTORNOTINSTALLED = $00005059;
  SQLDMO_E_CANTRENAMESTAT = $0000505A;
  SQLDMO_E_CANTDROPAUTOINDEX = $0000505B;
  SQLDMO_E_FROMGUEST = $0000505C;
  SQLDMO_E_INVALIDPROPDISTNOTLOCAL = $00005060;
  SQLDMO_E_INVALIDREMOVE = $00005061;
  SQLDMO_E_CANTRENAMEPRIMARY = $00005062;
  SQLDMO_E_CANTMODIFYNONTABLEARTTYPE = $00005064;
  SQLDMO_E_CANTMODIFYARTTYPE = $00005065;
  SQLDMO_E_REGERROR = $00005066;
  SQLDMO_E_NOCOLUMNALTER = $00005067;
  SQLDMO_E_INVALIDRESTORE = $00005068;
  SQLDMO_E_NONTRANSFERENCRYPTED = $00005069;
  SQLDMO_E_UDFSCRIPTERR = $0000506A;
  SQLDMO_E_SQL80SP3ONLY = $0000506B;
  SQLDMO_E_PRESQL90 = $0000506C;
  SQLDMO_ECAT_INVALIDOBJECT = $00005100;
  SQLDMO_E_OBJECTDROPPED = $00005100;
  SQLDMO_E_NOTSQLDMOOBJECT = $00005101;
  SQLDMO_E_OBJECTDETACHED = $00005102;
  SQLDMO_E_SERVERCLOSED = $00005103;
  SQLDMO_E_PRESQL75 = $00005104;
  SQLDMO_E_CANTRENAMEUDF = $00005105;
  SQLDMO_E_PRESQL80 = $00005106;
  SQLDMO_ECAT_INVALIDOBJECTDEFINITION = $00005200;
  SQLDMO_E_NOCOLUMNSADDED = $00005200;
  SQLDMO_E_COLUMNINCOMPLETE = $00005201;
  SQLDMO_E_TABLEINCOMPLETE = $00005202;
  SQLDMO_E_UDDTINCOMPLETE = $00005203;
  SQLDMO_E_RULEINCOMPLETE = $00005204;
  SQLDMO_E_DEFAULTINCOMPLETE = $00005205;
  SQLDMO_E_VIEWINCOMPLETE = $00005206;
  SQLDMO_E_USERINCOMPLETE = $00005207;
  SQLDMO_E_GROUPINCOMPLETE = $00005208;
  SQLDMO_E_PROCINCOMPLETE = $00005209;
  SQLDMO_E_USERALREADYEXISTS = $0000520A;
  SQLDMO_E_GROUPALREADYEXISTS = $0000520B;
  SQLDMO_E_COLUMNALREADYEXISTS = $0000520C;
  SQLDMO_E_OBJECTALREADYEXISTS = $0000520D;
  SQLDMO_E_INDEXALREADYEXISTS = $0000520E;
  SQLDMO_E_DBALREADYEXISTS = $0000520F;
  SQLDMO_E_LOGINALREADYEXISTS = $00005210;
  SQLDMO_E_DEVICEALREADYEXISTS = $00005211;
  SQLDMO_E_SKIPONLYTAPE = $00005212;
  SQLDMO_E_DEVICEINCOMPLETE = $00005213;
  SQLDMO_E_PROCALREADYEXISTS = $00005214;
  SQLDMO_E_UDDTALREADYEXISTS = $00005215;
  SQLDMO_E_TABLEALREADYEXISTS = $00005216;
  SQLDMO_E_RULEALREADYEXISTS = $00005217;
  SQLDMO_E_DEFAULTALREADYEXISTS = $00005218;
  SQLDMO_E_VIEWALREADYEXISTS = $00005219;
  SQLDMO_E_INDEXINCOMPLETE = $0000521A;
  SQLDMO_E_TRIGINCOMPLETE = $0000521B;
  SQLDMO_E_TRIGALREADYEXISTS = $0000521C;
  SQLDMO_E_LANGUAGEINCOMPLETE = $0000521D;
  SQLDMO_E_LANGUAGEALREADYEXISTS = $0000521E;
  SQLDMO_E_LOGININCOMPLETE = $0000521F;
  SQLDMO_E_RSERVERINCOMPLETE = $00005220;
  SQLDMO_E_RSERVERALREADYEXISTS = $00005221;
  SQLDMO_E_NULLRLOGINALREADYEXISTS = $00005222;
  SQLDMO_E_RLOGINALREADYEXISTS = $00005223;
  SQLDMO_E_REMOTENEEDSLOCAL = $00005224;
  SQLDMO_E_BACKUPNEEDSDEVICE = $00005225;
  SQLDMO_E_NEEDMANUALFILTERNAME = $00005226;
  SQLDMO_E_TASKINCOMPLETE = $00005227;
  SQLDMO_E_ARTINCOMPLETE = $00005228;
  SQLDMO_E_PUBINCOMPLETE = $00005229;
  SQLDMO_E_SUBINCOMPLETE = $0000522A;
  SQLDMO_E_ALERTINCOMPLETE = $0000522B;
  SQLDMO_E_OPERATORINCOMPLETE = $0000522C;
  SQLDMO_E_NAMEMUSTMATCH = $0000522D;
  SQLDMO_E_TRIGREQTABLENAME = $0000522E;
  SQLDMO_E_MUSTBESYNCTASK = $0000522F;
  SQLDMO_E_NOEVENTCOMPLETION = $00005230;
  SQLDMO_E_FKEYINCOMPLETE = $00005231;
  SQLDMO_E_KEYINCOMPLETE = $00005232;
  SQLDMO_E_KEYALREADYEXISTS = $00005233;
  SQLDMO_E_CHECKINCOMPLETE = $00005234;
  SQLDMO_E_DRIDEFAULTINCOMPLETE = $00005235;
  SQLDMO_E_CHECKALREADYEXISTS = $00005236;
  SQLDMO_E_ONLYONEPRIMARYKEY = $00005237;
  SQLDMO_E_NEEDMANUALVIEWNAME = $00005238;
  SQLDMO_E_SERVERGROUPINCOMPLETE = $00005239;
  SQLDMO_E_REGISTEREDSERVERINCOMPLETE = $0000523A;
  SQLDMO_E_SERVERGROUPALREADYEXISTS = $0000523B;
  SQLDMO_E_REGISTEREDSERVERALREADYEXISTS = $0000523C;
  SQLDMO_E_NEEDLOADTABLENAME = $0000523D;
  SQLDMO_E_DISTDBALREADYEXISTS = $0000523E;
  SQLDMO_E_DISTPUBALREADYEXISTS = $0000523F;
  SQLDMO_E_JOBSTEPINCOMPLETE = $00005240;
  SQLDMO_E_TARGETSERVERINCOMPLETE = $00005241;
  SQLDMO_E_TARGETSERVERGROUPINCOMPLETE = $00005242;
  SQLDMO_E_JOBINCOMPLETE = $00005243;
  SQLDMO_E_MUSTBESYNCJOB = $00005244;
  SQLDMO_E_JOBCATEGORYINCOMPLETE = $00005245;
  SQLDMO_E_REGPUBINCOMPLETE = $00005246;
  SQLDMO_E_REGSUBINCOMPLETE = $00005247;
  SQLDMO_E_DISTPUBINCOMPLETE = $00005248;
  SQLDMO_E_DISTDBINCOMPLETE = $00005249;
  SQLDMO_E_FILEGROUPINCOMPLETE = $0000524A;
  SQLDMO_E_DBFILEINCOMPLETE = $0000524B;
  SQLDMO_E_LOGFILEINCOMPLETE = $0000524C;
  SQLDMO_E_FILEGROUPALREADYEXISTS = $0000524D;
  SQLDMO_E_DATABASEINCOMPLETE = $00005250;
  SQLDMO_E_DATABASEROLEALREADYEXISTS = $00005251;
  SQLDMO_E_DATABASEROLEINCOMPLETE = $00005252;
  SQLDMO_E_SERVERROLEINCOMPLETE = $00005253;
  SQLDMO_E_DSNINFOINCOMPLETE = $00005254;
  SQLDMO_E_FILTERINCOMPLETE = $00005255;
  SQLDMO_E_OWNERMUSTMATCH = $00005256;
  SQLDMO_E_BACKUPNEEDSFILE = $00005257;
  SQLDMO_E_BACKUPNEEDSMEDIA = $00005258;
  SQLDMO_E_COLUMNCOMPUTEDINCOMPLETE = $00005259;
  SQLDMO_E_REMAPFILEINCOMPLETE = $0000525A;
  SQLDMO_E_SMALLMAXSIZE = $0000525B;
  SQLDMO_E_FILEALREADYEXISTS = $0000525C;
  SQLDMO_E_BADFILEGROUPNAME = $0000525D;
  SQLDMO_E_LINKEDSERVERINCOMPLETE = $0000525E;
  SQLDMO_E_LINKEDPROVIDERINCOMPLETE = $0000525F;
  SQLDMO_E_FULLTEXTINCOMPLETE = $00005260;
  SQLDMO_E_CATALOGALREADYEXISTS = $00005261;
  SQLDMO_E_CATALOGINCOMPLETE = $00005262;
  SQLDMO_E_BACKUPINIT = $00005263;
  SQLDMO_E_LINKEDSERVERLOGININCOMPLETE = $00005264;
  SQLDMO_E_NOSERVERBCP6 = $00005265;
  SQLDMO_E_JOBSTEPNAMEINCOMPLETE = $00005266;
  SQLDMO_E_MDFINCOMPLETE = $00005267;
  SQLDMO_E_UDFINCOMPLETE = $00005268;
  SQLDMO_E_FULLTEXTCOLUMNINCOMPLETE = $00005269;
  SQLDMO_E_CANTADDREGSUBTOSQLDISTPUBSHR = $00005270;
  SQLDMO_E_SNAPSHOTPUBCANNOTPUBWIN = $00005271;
  SQLDMO_E_DYNAMICSNAPSHOTJOBINCOMPLETE = $00005272;
  SQLDMO_ECAT_INVALIDPARAMETER = $00005300;
  SQLDMO_E_BADCOLLEN = $00005300;
  SQLDMO_E_INVALIDPERFMONSET = $00005301;
  SQLDMO_E_BADDEVICETYPE = $00005302;
  SQLDMO_E_SIZEGREATERTHAN0 = $00005303;
  SQLDMO_E_RESULTSETOUTOFRANGE = $00005304;
  SQLDMO_E_OUTPUTPARAMREQUIRED = $00005305;
  SQLDMO_E_PROPTEXTNONNULL = $00005306;
  SQLDMO_E_BADPROCTYPE = $00005307;
  SQLDMO_E_BADFILLFACTOR = $00005308;
  SQLDMO_E_INVALIDINDEXTYPE = $00005309;
  SQLDMO_E_INVALIDPRIVTYPE = $0000530A;
  SQLDMO_E_BADTRIGTYPE = $0000530B;
  SQLDMO_E_INVALIDDAYOFWEEK = $0000530C;
  SQLDMO_E_INVALIDMONTH = $0000530D;
  SQLDMO_E_BADDAYCOUNT = $0000530E;
  SQLDMO_E_BADMONTHCOUNT = $0000530F;
  SQLDMO_E_BADCONFIGVALUE = $00005310;
  SQLDMO_E_INVALIDPARAMINDEX = $00005311;
  SQLDMO_E_INVALIDPARAMRANGE = $00005312;
  SQLDMO_E_INVALIDDBOBJTYPE = $00005313;
  SQLDMO_E_ROWCOLOUTOFRANGE = $00005314;
  SQLDMO_E_NONUNIQUENAME = $00005315;
  SQLDMO_E_NOTIMESTAMPUDDT = $00005316;
  SQLDMO_E_INVALIDNAME = $00005317;
  SQLDMO_E_INVALIDCOMPLETION = $00005318;
  SQLDMO_E_NAMETOOLONG = $00005319;
  SQLDMO_E_INVALIDFREQTYPE = $0000531A;
  SQLDMO_E_INVALIDFREQSUBDAY = $0000531B;
  SQLDMO_E_INVALIDFREQRELINTERVAL = $0000531C;
  SQLDMO_E_BADWEEKLYINTERVAL = $0000531D;
  SQLDMO_E_BADMONTHLYINTERVAL = $0000531E;
  SQLDMO_E_BADMONTHLYRELINTERVAL = $0000531F;
  SQLDMO_E_INVALIDSRVOPTION = $00005320;
  SQLDMO_E_INVALIDRUNPRIORITY = $00005321;
  SQLDMO_E_DBNAMEREQUIRED = $00005322;
  SQLDMO_E_PUBNAMEREQUIRED = $00005323;
  SQLDMO_E_PROPINDEXOUTOFRANGE = $00005324;
  SQLDMO_E_INVALIDNOTIFYTYPE = $00005325;
  SQLDMO_E_INVALIDENUMNOTIFYTYPE = $00005326;
  SQLDMO_E_INVALIDWEEKDAY = $00005327;
  SQLDMO_E_INVALIDOBJECTTYPE = $00005328;
  SQLDMO_E_OBJECTREQUIRED = $00005329;
  SQLDMO_E_INVALIDEVENTTYPE = $0000532A;
  SQLDMO_E_INVALIDCOMPLETIONTYPE = $0000532B;
  SQLDMO_E_INVALIDKEYTYPE = $0000532C;
  SQLDMO_E_TABLEMUSTBECREATED = $0000532D;
  SQLDMO_E_INVALIDPREARTICLE = $0000532E;
  SQLDMO_E_INVALIDSECURITYMODE = $0000532F;
  SQLDMO_E_INVALIDPREC = $00005330;
  SQLDMO_E_INVALIDDEPENDENCYTYPE = $00005331;
  SQLDMO_E_INVALIDVERIFYCONNTYPE = $00005332;
  SQLDMO_E_INVALIDSTATUSINFOTYPE = $00005333;
  SQLDMO_E_INVALIDFORWARDINGSEVERITY = $00005334;
  SQLDMO_E_INVALIDFORWARDINGSERVER = $00005335;
  SQLDMO_E_INVALIDRESTARTINTERVAL = $00005336;
  SQLDMO_E_INVALIDHISTORYROWSMAX = $00005337;
  SQLDMO_E_NAMETOOSHORT = $00005338;
  SQLDMO_E_UNEXPECTED = $00005339;
  SQLDMO_E_INVALIDHISTORYROWSPERTASKMAX = $0000533A;
  SQLDMO_E_INVALIDOBJSORTTYPE = $0000533B;
  SQLDMO_E_INVALIDEXECTYPE = $0000533C;
  SQLDMO_E_INVALIDSUBSETFILTER = $0000533D;
  SQLDMO_E_INCOMPATIBLEPROPS = $0000533E;
  SQLDMO_E_FILEPATHREQUIRED = $0000533F;
  SQLDMO_E_INVALIDPROPALTER = $00005340;
  SQLDMO_E_INVALIDALTERDISTINSTALLED = $00005341;
  SQLDMO_E_SERVERNAMEREQUIRED = $00005342;
  SQLDMO_E_DISTSERVERNAMEREQUIRED = $00005343;
  SQLDMO_E_WORKINGDIRREQUIRED = $00005344;
  SQLDMO_E_DISTDBREQUIRED = $00005345;
  SQLDMO_E_INVALIDHISTORYROWSPERJOBMAX = $00005348;
  SQLDMO_E_INVALIDPUBATTRIB = $00005349;
  SQLDMO_E_INVALIDREPLICATIONTYPE = $0000534A;
  SQLDMO_E_INVALIDSCHEMAOPTION = $0000534B;
  SQLDMO_E_INVALIDFORREMDISTRIBUTOR = $0000534C;
  SQLDMO_E_INVALIDARTICLETYPE = $0000534D;
  SQLDMO_E_SIZEGREATERTHANNEG = $0000534E;
  SQLDMO_E_INVALIDLOGINTYPE = $0000534F;
  SQLDMO_E_CANTMODIFYAFTERCREATE = $00005350;
  SQLDMO_E_INVALIDDSN = $00005351;
  SQLDMO_E_INVALIDNAME70 = $00005352;
  SQLDMO_E_MUSTEVEN = $00005353;
  SQLDMO_E_MISSINGALTER = $00005354;
  SQLDMO_E_NOTGUID = $00005355;
  SQLDMO_E_DESTSERVERREQUIRED = $00005356;
  SQLDMO_E_CANTSHRINK = $00005357;
  SQLDMO_E_CANTDEFAULTOFF = $00005358;
  SQLDMO_E_INVALIDNTNAME = $00005359;
  SQLDMO_E_INVALIDOUTCOMETYPE = $0000535A;
  SQLDMO_E_NEEDSCOLUMNNAME = $0000535B;
  SQLDMO_E_INVALIDHYPOINDEXTYPE = $0000535C;
  SQLDMO_E_INVALIDPING = $0000535D;
  SQLDMO_E_USEFTPORALTSNAPSHOTFOLDER = $0000535E;
  SQLDMO_E_INTERNETENABLEDORALTFOLDER = $0000535F;
  SQLDMO_E_NOTSQLVARIANT = $00005361;
  SQLDMO_E_CANTCONVERTVARIANT = $00005362;
  SQLDMO_E_USEFTPORDYNAMICSNAPSHOT = $00005363;
  SQLDMO_E_ALTSNAPSHOTFOLDERORDYNSNAP = $00005364;
  SQLDMO_ECAT_INVALIDPLATFORM = $00005400;
  SQLDMO_E_BACKUPSQL60ONLY = $00005400;
  SQLDMO_E_MSSQLONLY = $00005401;
  SQLDMO_E_WIN95REQUIRESCONN = $00005402;
  SQLDMO_E_NOTONWIN95 = $00005403;
  SQLDMO_E_SQL60ONLY = $00005404;
  SQLDMO_E_REPLSQL60ONLY = $00005405;
  SQLDMO_E_STARTUPPROCSQL60ONLY = $00005406;
  SQLDMO_E_NEEDSQLDMOPROCS = $00005407;
  SQLDMO_E_ALTERSQL60ONLY = $00005408;
  SQLDMO_E_SORTEDDATAREORGSQL60ONLY = $00005409;
  SQLDMO_E_MSSQLNTONLY = $0000540A;
  SQLDMO_E_WIN95REQUIRESSQL60 = $0000540B;
  SQLDMO_E_BACKUPSQL65ONLY = $0000540C;
  SQLDMO_E_SQL65ONLY = $0000540D;
  SQLDMO_E_ALERTSQL65ONLY = $0000540E;
  SQLDMO_E_REMOTESQL65ONLY = $0000540F;
  SQLDMO_E_PIPEDEVSQL60ONLY = $00005410;
  SQLDMO_E_FKEYSQL65ONLY = $00005411;
  SQLDMO_E_XPIMPERSONATESQL65ONLY = $00005412;
  SQLDMO_E_SQL70ONLY = $00005413;
  SQLDMO_E_FKEYSQL70ONLY = $00005414;
  SQLDMO_E_BACKUPSQL70ONLY = $00005415;
  SQLDMO_E_NEEDSQLDMOUPGRADE = $00005416;
  SQLDMO_E_NEEDSERVERBUILDUPGRADE = $00005417;
  SQLDMO_E_SQL75ONLY = $00005418;
  SQLDMO_E_SQL80ONLY = $00005419;
  SQLDMO_ECAT_ITEMNOTFOUND = $00005500;
  SQLDMO_E_RULENOTFOUND = $00005500;
  SQLDMO_E_DEFAULTNOTFOUND = $00005501;
  SQLDMO_E_TYPENOTFOUND = $00005502;
  SQLDMO_E_LOGINNOTFOUND = $00005503;
  SQLDMO_E_GROUPNOTFOUND = $00005504;
  SQLDMO_E_LANGNOTFOUND = $00005505;
  SQLDMO_E_DBNOTFOUND = $00005506;
  SQLDMO_E_DEVICENOTFOUND = $00005507;
  SQLDMO_E_COLUMNNOTFOUND = $00005508;
  SQLDMO_E_ORDOUTOFRANGE = $00005509;
  SQLDMO_E_NAMENOTFOUND = $0000550A;
  SQLDMO_E_USERNOTFOUND = $0000550B;
  SQLDMO_E_NAMENOTINCACHE = $0000550C;
  SQLDMO_E_PROPNAMENOTFOUND = $0000550D;
  SQLDMO_E_IDNOTFOUND = $0000550E;
  SQLDMO_E_DATABASEROLENOTFOUND = $0000550F;
  SQLDMO_E_NAMENOTFOUNDQI = $00005510;
  SQLDMO_E_COLLATIONNOTFOUND = $00005511;
  SQLDMO_E_SERVERNOTFOUND = $00005512;
  SQLDMO_ECAT_UNPRIVILEGEDLOGIN = $00005600;
  SQLDMO_E_MUSTBESAORDBO = $00005600;
  SQLDMO_E_MUSTBESAORLOGIN = $00005601;
  SQLDMO_E_MUSTBESA = $00005602;
  SQLDMO_E_MUSTBESAORORSECORLOGIN = $00005603;
  SQLDMO_E_MUSTBESAORSEC = $00005604;
  SQLDMO_E_MUSTBESAORDBC = $00005605;
  SQLDMO_E_MUSTBESAORSRV = $00005606;
  SQLDMO_E_MUSTBESAORPRC = $00005607;
  SQLDMO_ECAT_EXECUTION = $00005700;
  SQLDMO_E_SYSPROCERROR = $00005700;
  SQLDMO_E_CACHEEXECERROR = $00005701;
  SQLDMO_E_INACCESSIBLEDB = $00005702;
  SQLDMO_E_BATCHCOMPLETEWITHERRORS = $00005703;
  SQLDMO_E_BCPCOLFMTFAILED = $00005704;
  SQLDMO_E_SUSPENDINDEX = $00005705;
  SQLDMO_E_RESUMEINDEX = $00005706;
  SQLDMO_E_BCPEXECFAILED = $00005707;
  SQLDMO_E_BCPINITFAILED = $00005708;
  SQLDMO_E_BCPCONTROLFAILED = $00005709;
  SQLDMO_E_USERABORTED = $0000570A;
  SQLDMO_E_QIERROR = $0000570B;
  SQLDMO_E_REGIONALERROR = $0000570C;
  SQLDMO_E_SINGLEUSERDB = $0000570D;
  SQLDMO_E_CANNOTCREATEARTICLEVIEW = $0000570E;
  SQLDMO_E_CANNOTCREATEARTICLEFILTER = $0000570F;
  SQLDMO_ECAT_CONNECTION = $00005800;
  SQLDMO_E_CANTRECONNDEADCONN = $00005800;
  SQLDMO_ECAT_RESOURCE = $00005900;
  SQLDMO_E_OUTOFMEMORY = $00005900;
  SQLDMO_E_NOMOREDEVNOS = $00005901;
  SQLDMO_E_SERVERLOCKTIMEDOUT = $00005902;
  SQLDMO_E_APPLOCKTIMEDOUT = $00005903;
  SQLDMO_E_LASTERROR = $00005AFF;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _IVSQLDMOStdObject = interface;
  _IVSQLDMOStdObjectDisp = dispinterface;
  _Application = interface;
  _ApplicationDisp = dispinterface;
  Properties = interface;
  PropertiesDisp = dispinterface;
  Property_ = interface;
  Property_Disp = dispinterface;
  SQLServers = interface;
  SQLServersDisp = dispinterface;
  _SQLServer = interface;
  _SQLServerDisp = dispinterface;
  _SQLServer2 = interface;
  _SQLServer2Disp = dispinterface;
  Databases = interface;
  DatabasesDisp = dispinterface;
  _Database = interface;
  _DatabaseDisp = dispinterface;
  _Database2 = interface;
  _Database2Disp = dispinterface;
  Tables = interface;
  TablesDisp = dispinterface;
  _Table = interface;
  _TableDisp = dispinterface;
  _Table2 = interface;
  _Table2Disp = dispinterface;
  Columns = interface;
  ColumnsDisp = dispinterface;
  _Column = interface;
  _ColumnDisp = dispinterface;
  _Column2 = interface;
  _Column2Disp = dispinterface;
  DRIDefault = interface;
  DRIDefaultDisp = dispinterface;
  SQLObjectList = interface;
  SQLObjectListDisp = dispinterface;
  Keys = interface;
  KeysDisp = dispinterface;
  _Key = interface;
  _KeyDisp = dispinterface;
  Names = interface;
  NamesDisp = dispinterface;
  Indexes = interface;
  IndexesDisp = dispinterface;
  _Index = interface;
  _IndexDisp = dispinterface;
  _Index2 = interface;
  _Index2Disp = dispinterface;
  QueryResults = interface;
  QueryResultsDisp = dispinterface;
  _View = interface;
  _ViewDisp = dispinterface;
  _View2 = interface;
  _View2Disp = dispinterface;
  _BulkCopy = interface;
  _BulkCopyDisp = dispinterface;
  _BulkCopy2 = interface;
  _BulkCopy2Disp = dispinterface;
  BulkCopySink = interface;
  Triggers = interface;
  TriggersDisp = dispinterface;
  _Trigger = interface;
  _TriggerDisp = dispinterface;
  _Trigger2 = interface;
  _Trigger2Disp = dispinterface;
  Checks = interface;
  ChecksDisp = dispinterface;
  _Check = interface;
  _CheckDisp = dispinterface;
  NameList = interface;
  NameListDisp = dispinterface;
  Views = interface;
  ViewsDisp = dispinterface;
  StoredProcedures = interface;
  StoredProceduresDisp = dispinterface;
  _StoredProcedure = interface;
  _StoredProcedureDisp = dispinterface;
  _StoredProcedure2 = interface;
  _StoredProcedure2Disp = dispinterface;
  Defaults = interface;
  DefaultsDisp = dispinterface;
  _Default = interface;
  _DefaultDisp = dispinterface;
  _Default2 = interface;
  _Default2Disp = dispinterface;
  Rules = interface;
  RulesDisp = dispinterface;
  _Rule = interface;
  _RuleDisp = dispinterface;
  _Rule2 = interface;
  _Rule2Disp = dispinterface;
  UserDefinedDatatypes = interface;
  UserDefinedDatatypesDisp = dispinterface;
  _UserDefinedDatatype = interface;
  _UserDefinedDatatypeDisp = dispinterface;
  _UserDefinedDatatype2 = interface;
  _UserDefinedDatatype2Disp = dispinterface;
  Users = interface;
  UsersDisp = dispinterface;
  _User = interface;
  _UserDisp = dispinterface;
  _User2 = interface;
  _User2Disp = dispinterface;
  Groups = interface;
  GroupsDisp = dispinterface;
  _Group = interface;
  _GroupDisp = dispinterface;
  SystemDatatypes = interface;
  SystemDatatypesDisp = dispinterface;
  SystemDatatype = interface;
  SystemDatatypeDisp = dispinterface;
  TransactionLog = interface;
  TransactionLogDisp = dispinterface;
  LogFiles = interface;
  LogFilesDisp = dispinterface;
  _LogFile = interface;
  _LogFileDisp = dispinterface;
  _LogFile2 = interface;
  _LogFile2Disp = dispinterface;
  DBOption = interface;
  DBOptionDisp = dispinterface;
  DBObject = interface;
  DBObjectDisp = dispinterface;
  _Transfer = interface;
  _TransferDisp = dispinterface;
  _Transfer2 = interface;
  _Transfer2Disp = dispinterface;
  TransferSink = interface;
  FileGroups = interface;
  FileGroupsDisp = dispinterface;
  _FileGroup = interface;
  _FileGroupDisp = dispinterface;
  _FileGroup2 = interface;
  _FileGroup2Disp = dispinterface;
  DBFiles = interface;
  DBFilesDisp = dispinterface;
  _DBFile = interface;
  _DBFileDisp = dispinterface;
  DatabaseRoles = interface;
  DatabaseRolesDisp = dispinterface;
  _DatabaseRole = interface;
  _DatabaseRoleDisp = dispinterface;
  _DatabaseRole2 = interface;
  _DatabaseRole2Disp = dispinterface;
  FullTextCatalogs = interface;
  FullTextCatalogsDisp = dispinterface;
  _FullTextCatalog = interface;
  _FullTextCatalogDisp = dispinterface;
  _FullTextCatalog2 = interface;
  _FullTextCatalog2Disp = dispinterface;
  UserDefinedFunctions = interface;
  UserDefinedFunctionsDisp = dispinterface;
  _UserDefinedFunction = interface;
  _UserDefinedFunctionDisp = dispinterface;
  BackupDevices = interface;
  BackupDevicesDisp = dispinterface;
  _BackupDevice = interface;
  _BackupDeviceDisp = dispinterface;
  IntegratedSecurity = interface;
  IntegratedSecurityDisp = dispinterface;
  Languages = interface;
  LanguagesDisp = dispinterface;
  _Language = interface;
  _LanguageDisp = dispinterface;
  RemoteServers = interface;
  RemoteServersDisp = dispinterface;
  _RemoteServer = interface;
  _RemoteServerDisp = dispinterface;
  _RemoteServer2 = interface;
  _RemoteServer2Disp = dispinterface;
  RemoteLogins = interface;
  RemoteLoginsDisp = dispinterface;
  _RemoteLogin = interface;
  _RemoteLoginDisp = dispinterface;
  Logins = interface;
  LoginsDisp = dispinterface;
  _Login = interface;
  _LoginDisp = dispinterface;
  _Login2 = interface;
  _Login2Disp = dispinterface;
  Registry = interface;
  RegistryDisp = dispinterface;
  Configuration = interface;
  ConfigurationDisp = dispinterface;
  ConfigValues = interface;
  ConfigValuesDisp = dispinterface;
  ConfigValue = interface;
  ConfigValueDisp = dispinterface;
  JobServer = interface;
  JobServerDisp = dispinterface;
  AlertSystem = interface;
  AlertSystemDisp = dispinterface;
  Operators = interface;
  OperatorsDisp = dispinterface;
  _Operator = interface;
  _OperatorDisp = dispinterface;
  Alerts = interface;
  AlertsDisp = dispinterface;
  _Alert = interface;
  _AlertDisp = dispinterface;
  Jobs = interface;
  JobsDisp = dispinterface;
  _Job = interface;
  _JobDisp = dispinterface;
  JobSteps = interface;
  JobStepsDisp = dispinterface;
  _JobStep = interface;
  _JobStepDisp = dispinterface;
  JobSchedules = interface;
  JobSchedulesDisp = dispinterface;
  _JobSchedule = interface;
  _JobScheduleDisp = dispinterface;
  Schedule = interface;
  ScheduleDisp = dispinterface;
  TargetServers = interface;
  TargetServersDisp = dispinterface;
  _TargetServer = interface;
  _TargetServerDisp = dispinterface;
  TargetServerGroups = interface;
  TargetServerGroupsDisp = dispinterface;
  _TargetServerGroup = interface;
  _TargetServerGroupDisp = dispinterface;
  JobFilter = interface;
  JobFilterDisp = dispinterface;
  JobHistoryFilter = interface;
  JobHistoryFilterDisp = dispinterface;
  JobCategories = interface;
  JobCategoriesDisp = dispinterface;
  _Category = interface;
  _CategoryDisp = dispinterface;
  AlertCategories = interface;
  AlertCategoriesDisp = dispinterface;
  OperatorCategories = interface;
  OperatorCategoriesDisp = dispinterface;
  _Restore = interface;
  _RestoreDisp = dispinterface;
  _Restore2 = interface;
  _Restore2Disp = dispinterface;
  RestoreSink = interface;
  _Replication = interface;
  _ReplicationDisp = dispinterface;
  _Replication2 = interface;
  _Replication2Disp = dispinterface;
  Publisher = interface;
  PublisherDisp = dispinterface;
  RegisteredSubscribers = interface;
  RegisteredSubscribersDisp = dispinterface;
  _RegisteredSubscriber = interface;
  _RegisteredSubscriberDisp = dispinterface;
  _ReplicationSecurity = interface;
  _ReplicationSecurityDisp = dispinterface;
  Subscriber = interface;
  SubscriberDisp = dispinterface;
  Distributor = interface;
  DistributorDisp = dispinterface;
  DistributionPublishers = interface;
  DistributionPublishersDisp = dispinterface;
  _DistributionPublisher = interface;
  _DistributionPublisherDisp = dispinterface;
  _DistributionPublisher2 = interface;
  _DistributionPublisher2Disp = dispinterface;
  DistributionPublications = interface;
  DistributionPublicationsDisp = dispinterface;
  _DistributionPublication = interface;
  _DistributionPublicationDisp = dispinterface;
  _DistributionPublication2 = interface;
  _DistributionPublication2Disp = dispinterface;
  DistributionArticles = interface;
  DistributionArticlesDisp = dispinterface;
  _DistributionArticle = interface;
  _DistributionArticleDisp = dispinterface;
  _DistributionArticle2 = interface;
  _DistributionArticle2Disp = dispinterface;
  DistributionSubscriptions = interface;
  DistributionSubscriptionsDisp = dispinterface;
  _DistributionSubscription = interface;
  _DistributionSubscriptionDisp = dispinterface;
  _DistributionSubscription2 = interface;
  _DistributionSubscription2Disp = dispinterface;
  DistributionDatabases = interface;
  DistributionDatabasesDisp = dispinterface;
  _DistributionDatabase = interface;
  _DistributionDatabaseDisp = dispinterface;
  _DistributionDatabase2 = interface;
  _DistributionDatabase2Disp = dispinterface;
  ReplicationDatabases = interface;
  ReplicationDatabasesDisp = dispinterface;
  ReplicationDatabase = interface;
  ReplicationDatabaseDisp = dispinterface;
  ReplicationTables = interface;
  ReplicationTablesDisp = dispinterface;
  ReplicationTable = interface;
  ReplicationTableDisp = dispinterface;
  ReplicationStoredProcedures = interface;
  ReplicationStoredProceduresDisp = dispinterface;
  ReplicationStoredProcedure = interface;
  ReplicationStoredProcedureDisp = dispinterface;
  TransPublications = interface;
  TransPublicationsDisp = dispinterface;
  _TransPublication = interface;
  _TransPublicationDisp = dispinterface;
  _TransPublication2 = interface;
  _TransPublication2Disp = dispinterface;
  TransArticles = interface;
  TransArticlesDisp = dispinterface;
  _TransArticle = interface;
  _TransArticleDisp = dispinterface;
  _TransArticle2 = interface;
  _TransArticle2Disp = dispinterface;
  TransSubscriptions = interface;
  TransSubscriptionsDisp = dispinterface;
  _TransSubscription = interface;
  _TransSubscriptionDisp = dispinterface;
  _TransSubscription2 = interface;
  _TransSubscription2Disp = dispinterface;
  MergePublications = interface;
  MergePublicationsDisp = dispinterface;
  _MergePublication = interface;
  _MergePublicationDisp = dispinterface;
  _MergePublication2 = interface;
  _MergePublication2Disp = dispinterface;
  MergeArticles = interface;
  MergeArticlesDisp = dispinterface;
  _MergeArticle = interface;
  _MergeArticleDisp = dispinterface;
  _MergeArticle2 = interface;
  _MergeArticle2Disp = dispinterface;
  MergeSubsetFilters = interface;
  MergeSubsetFiltersDisp = dispinterface;
  _MergeSubsetFilter = interface;
  _MergeSubsetFilterDisp = dispinterface;
  MergeSubscriptions = interface;
  MergeSubscriptionsDisp = dispinterface;
  _MergeSubscription = interface;
  _MergeSubscriptionDisp = dispinterface;
  _MergeSubscription2 = interface;
  _MergeSubscription2Disp = dispinterface;
  MergeDynamicSnapshotJobs = interface;
  MergeDynamicSnapshotJobsDisp = dispinterface;
  _MergeDynamicSnapshotJob = interface;
  _MergeDynamicSnapshotJobDisp = dispinterface;
  TransPullSubscriptions = interface;
  TransPullSubscriptionsDisp = dispinterface;
  _TransPullSubscription = interface;
  _TransPullSubscriptionDisp = dispinterface;
  _TransPullSubscription2 = interface;
  _TransPullSubscription2Disp = dispinterface;
  MergePullSubscriptions = interface;
  MergePullSubscriptionsDisp = dispinterface;
  _MergePullSubscription = interface;
  _MergePullSubscriptionDisp = dispinterface;
  _MergePullSubscription2 = interface;
  _MergePullSubscription2Disp = dispinterface;
  ReplicationSink = interface;
  ServerRoles = interface;
  ServerRolesDisp = dispinterface;
  _ServerRole = interface;
  _ServerRoleDisp = dispinterface;
  LinkedServers = interface;
  LinkedServersDisp = dispinterface;
  _LinkedServer = interface;
  _LinkedServerDisp = dispinterface;
  _LinkedServer2 = interface;
  _LinkedServer2Disp = dispinterface;
  LinkedServerLogins = interface;
  LinkedServerLoginsDisp = dispinterface;
  _LinkedServerLogin = interface;
  _LinkedServerLoginDisp = dispinterface;
  FullTextService = interface;
  FullTextServiceDisp = dispinterface;
  ServerSink = interface;
  ServerGroups = interface;
  ServerGroupsDisp = dispinterface;
  _ServerGroup = interface;
  _ServerGroupDisp = dispinterface;
  RegisteredServers = interface;
  RegisteredServersDisp = dispinterface;
  _RegisteredServer = interface;
  _RegisteredServerDisp = dispinterface;
  Permission = interface;
  PermissionDisp = dispinterface;
  _Backup = interface;
  _BackupDisp = dispinterface;
  DBOption2 = interface;
  DBOption2Disp = dispinterface;
  QueryResults2 = interface;
  QueryResults2Disp = dispinterface;
  Registry2 = interface;
  Registry2Disp = dispinterface;
  SystemDatatype2 = interface;
  SystemDatatype2Disp = dispinterface;
  Permission2 = interface;
  Permission2Disp = dispinterface;
  _Backup2 = interface;
  _Backup2Disp = dispinterface;
  BackupSink = interface;
  LogFiles2 = interface;
  LogFiles2Disp = dispinterface;
  Publisher2 = interface;
  Publisher2Disp = dispinterface;
  Subscriber2 = interface;
  Subscriber2Disp = dispinterface;
  Distributor2 = interface;
  Distributor2Disp = dispinterface;
  ReplicationDatabase2 = interface;
  ReplicationDatabase2Disp = dispinterface;
  ReplicationTable2 = interface;
  ReplicationTable2Disp = dispinterface;
  ReplicationStoredProcedure2 = interface;
  ReplicationStoredProcedure2Disp = dispinterface;
  JobServer2 = interface;
  JobServer2Disp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  Application = _Application;
  Column = _Column;
  Key = _Key;
  Index = _Index;
  BulkCopy = _BulkCopy;
  View = _View;
  Trigger = _Trigger;
  Check = _Check;
  Table = _Table;
  StoredProcedure = _StoredProcedure;
  Default = _Default;
  Rule = _Rule;
  UserDefinedDatatype = _UserDefinedDatatype;
  User = _User;
  Group = _Group;
  LogFile = _LogFile;
  Transfer = _Transfer;
  DBFile = _DBFile;
  FileGroup = _FileGroup;
  DatabaseRole = _DatabaseRole;
  FullTextCatalog = _FullTextCatalog;
  Database = _Database;
  UserDefinedFunction = _UserDefinedFunction;
  BackupDevice = _BackupDevice;
  Language = _Language;
  RemoteLogin = _RemoteLogin;
  RemoteServer = _RemoteServer;
  Login = _Login;
  Operator = _Operator;
  Alert = _Alert;
  Job = _Job;
  JobStep = _JobStep;
  JobSchedule = _JobSchedule;
  TargetServer = _TargetServer;
  TargetServerGroup = _TargetServerGroup;
  Category = _Category;
  Restore = _Restore;
  RegisteredSubscriber = _RegisteredSubscriber;
  ReplicationSecurity = _ReplicationSecurity;
  DistributionArticle = _DistributionArticle;
  DistributionSubscription = _DistributionSubscription;
  DistributionPublication = _DistributionPublication;
  DistributionPublisher = _DistributionPublisher;
  DistributionDatabase = _DistributionDatabase;
  TransSubscription = _TransSubscription;
  TransArticle = _TransArticle;
  TransPublication = _TransPublication;
  MergeSubsetFilter = _MergeSubsetFilter;
  MergeArticle = _MergeArticle;
  MergeSubscription = _MergeSubscription;
  MergePublication = _MergePublication;
  MergeDynamicSnapshotJob = _MergeDynamicSnapshotJob;
  TransPullSubscription = _TransPullSubscription;
  MergePullSubscription = _MergePullSubscription;
  Replication = _Replication;
  ServerRole = _ServerRole;
  LinkedServerLogin = _LinkedServerLogin;
  LinkedServer = _LinkedServer;
  SQLServer = _SQLServer;
  ServerGroup = _ServerGroup;
  RegisteredServer = _RegisteredServer;
  SQLServer2 = _SQLServer2;
  Database2 = _Database2;
  Table2 = _Table2;
  Column2 = _Column2;
  View2 = _View2;
  UserDefinedDatatype2 = _UserDefinedDatatype2;
  Default2 = _Default2;
  Rule2 = _Rule2;
  User2 = _User2;
  StoredProcedure2 = _StoredProcedure2;
  Index2 = _Index2;
  Trigger2 = _Trigger2;
  Login2 = _Login2;
  RemoteServer2 = _RemoteServer2;
  Transfer2 = _Transfer2;
  Backup = _Backup;
  Backup2 = _Backup2;
  BulkCopy2 = _BulkCopy2;
  FileGroup2 = _FileGroup2;
  LogFile2 = _LogFile2;
  DatabaseRole2 = _DatabaseRole2;
  Restore2 = _Restore2;
  LinkedServer2 = _LinkedServer2;
  FullTextCatalog2 = _FullTextCatalog2;
  Replication2 = _Replication2;
  DistributionPublisher2 = _DistributionPublisher2;
  DistributionDatabase2 = _DistributionDatabase2;
  TransPublication2 = _TransPublication2;
  TransArticle2 = _TransArticle2;
  TransSubscription2 = _TransSubscription2;
  TransPullSubscription2 = _TransPullSubscription2;
  MergePublication2 = _MergePublication2;
  MergeArticle2 = _MergeArticle2;
  MergeSubscription2 = _MergeSubscription2;
  MergePullSubscription2 = _MergePullSubscription2;
  DistributionPublication2 = _DistributionPublication2;
  DistributionArticle2 = _DistributionArticle2;
  DistributionSubscription2 = _DistributionSubscription2;


// *********************************************************************//
// Interface: _IVSQLDMOStdObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10010007-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _IVSQLDMOStdObject = interface(IDispatch)
    ['{10010007-E260-11CF-AE68-00AA004A34D5}']
  end;

// *********************************************************************//
// DispIntf:  _IVSQLDMOStdObjectDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10010007-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _IVSQLDMOStdObjectDisp = dispinterface
    ['{10010007-E260-11CF-AE68-00AA004A34D5}']
  end;

// *********************************************************************//
// Interface: _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Application = interface(_IVSQLDMOStdObject)
    ['{10020106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_FullName: WideString; safecall;
    function Get_SQLServers: SQLServers; safecall;
    function Get_ODBCVersionString: WideString; safecall;
    function Get_VersionMajor: Integer; safecall;
    function Get_VersionMinor: Integer; safecall;
    procedure Quit; safecall;
    function Get_GroupRegistrationServer: WideString; safecall;
    procedure Set_GroupRegistrationServer(const pRetVal: WideString); safecall;
    function Get_ServerGroups: ServerGroups; safecall;
    function Get_GroupRegistrationVersion: Integer; safecall;
    function Get_VersionBuild: Integer; safecall;
    function Get_UseCurrentUserServerGroups: WordBool; safecall;
    procedure Set_UseCurrentUserServerGroups(pRetVal: WordBool); safecall;
    function ListAvailableSQLServers: NameList; safecall;
    function Get_BlockingTimeout: Integer; safecall;
    procedure Set_BlockingTimeout(pRetVal: Integer); safecall;
    function Get_Use80RegistryLocation: WordBool; safecall;
    procedure Set_Use80RegistryLocation(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property FullName: WideString read Get_FullName;
    property SQLServers: SQLServers read Get_SQLServers;
    property ODBCVersionString: WideString read Get_ODBCVersionString;
    property VersionMajor: Integer read Get_VersionMajor;
    property VersionMinor: Integer read Get_VersionMinor;
    property GroupRegistrationServer: WideString read Get_GroupRegistrationServer write Set_GroupRegistrationServer;
    property ServerGroups: ServerGroups read Get_ServerGroups;
    property GroupRegistrationVersion: Integer read Get_GroupRegistrationVersion;
    property VersionBuild: Integer read Get_VersionBuild;
    property UseCurrentUserServerGroups: WordBool read Get_UseCurrentUserServerGroups write Set_UseCurrentUserServerGroups;
    property BlockingTimeout: Integer read Get_BlockingTimeout write Set_BlockingTimeout;
    property Use80RegistryLocation: WordBool read Get_Use80RegistryLocation write Set_Use80RegistryLocation;
  end;

// *********************************************************************//
// DispIntf:  _ApplicationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ApplicationDisp = dispinterface
    ['{10020106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 0;
    property FullName: WideString readonly dispid 10;
    property SQLServers: SQLServers readonly dispid 11;
    property ODBCVersionString: WideString readonly dispid 12;
    property VersionMajor: Integer readonly dispid 13;
    property VersionMinor: Integer readonly dispid 14;
    procedure Quit; dispid 100;
    property GroupRegistrationServer: WideString dispid 15;
    property ServerGroups: ServerGroups readonly dispid 16;
    property GroupRegistrationVersion: Integer readonly dispid 17;
    property VersionBuild: Integer readonly dispid 18;
    property UseCurrentUserServerGroups: WordBool dispid 19;
    function ListAvailableSQLServers: NameList; dispid 102;
    property BlockingTimeout: Integer dispid 20;
    property Use80RegistryLocation: WordBool dispid 21;
  end;

// *********************************************************************//
// Interface: Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020001-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Properties = interface(_IVSQLDMOStdObject)
    ['{10020001-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Property_; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  PropertiesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020001-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  PropertiesDisp = dispinterface
    ['{10020001-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Property_; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: Property_
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020002-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Property_ = interface(_IVSQLDMOStdObject)
    ['{10020002-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRetVal: OleVariant); safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: Integer; safecall;
    function Get_Get: WordBool; safecall;
    function Get_Set_: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Value: OleVariant read Get_Value write Set_Value;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property type_: Integer read Get_type_;
    property Get: WordBool read Get_Get;
    property Set_: WordBool read Get_Set_;
  end;

// *********************************************************************//
// DispIntf:  Property_Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020002-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Property_Disp = dispinterface
    ['{10020002-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Value: OleVariant dispid 0;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 11;
    property type_: Integer readonly dispid 12;
    property Get: WordBool readonly dispid 13;
    property Set_: WordBool readonly dispid 14;
  end;

// *********************************************************************//
// Interface: SQLServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SQLServers = interface(_IVSQLDMOStdObject)
    ['{10020203-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): SQLServer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): SQLServer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  SQLServersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SQLServersDisp = dispinterface
    ['{10020203-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): SQLServer; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): SQLServer; dispid 6;
  end;

// *********************************************************************//
// Interface: _SQLServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _SQLServer = interface(_IVSQLDMOStdObject)
    ['{10020206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Databases: Databases; safecall;
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Login: WideString; safecall;
    procedure Set_Login(const pRetVal: WideString); safecall;
    function Get_VersionString: WideString; safecall;
    function Get_BackupDevices: BackupDevices; safecall;
    function Get_VersionMajor: Integer; safecall;
    function Get_VersionMinor: Integer; safecall;
    function Get_CommandTerminator: WideString; safecall;
    procedure Set_CommandTerminator(const pRetVal: WideString); safecall;
    function Get_TrueName: WideString; safecall;
    function Get_ConnectionID: Integer; safecall;
    function Get_TrueLogin: WideString; safecall;
    function Get_IntegratedSecurity: IntegratedSecurity; safecall;
    function Get_Languages: Languages; safecall;
    function Get_RemoteServers: RemoteServers; safecall;
    function Get_Logins: Logins; safecall;
    function Get_UserProfile: SQLDMO_SRVUSERPROFILE_TYPE; safecall;
    function Get_MaxNumericPrecision: Integer; safecall;
    function Get_NextDeviceNumber: Integer; safecall;
    function Get_QueryTimeout: Integer; safecall;
    procedure Set_QueryTimeout(pRetVal: Integer); safecall;
    function Get_LoginTimeout: Integer; safecall;
    procedure Set_LoginTimeout(pRetVal: Integer); safecall;
    function Get_NetPacketSize: Integer; safecall;
    procedure Set_NetPacketSize(pRetVal: Integer); safecall;
    function Get_HostName: WideString; safecall;
    procedure Set_HostName(const pRetVal: WideString); safecall;
    function Get_ApplicationName: WideString; safecall;
    procedure Set_ApplicationName(const pRetVal: WideString); safecall;
    function Get_LoginSecure: WordBool; safecall;
    procedure Set_LoginSecure(pRetVal: WordBool); safecall;
    function Get_ProcessID: Integer; safecall;
    function Get_Status: SQLDMO_SVCSTATUS_TYPE; safecall;
    function Get_Registry: Registry; safecall;
    function Get_Configuration: Configuration; safecall;
    function Get_JobServer: JobServer; safecall;
    function Get_ProcessInputBuffer(ProcessID: Integer): WideString; safecall;
    function Get_ProcessOutputBuffer(ProcessID: Integer): WideString; safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_AutoReConnect: WordBool; safecall;
    procedure Set_AutoReConnect(pRetVal: WordBool); safecall;
    function Get_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE): Integer; safecall;
    procedure Set_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE; pRetVal: Integer); safecall;
    function Get_SaLogin: WordBool; safecall;
    function Get_AnsiNulls: WordBool; safecall;
    procedure Set_AnsiNulls(pRetVal: WordBool); safecall;
    procedure Connect(ServerName: OleVariant; Login: OleVariant; Password: OleVariant); safecall;
    procedure Close; safecall;
    procedure DisConnect; safecall;
    procedure KillProcess(lProcessID: Integer); safecall;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); safecall;
    procedure ReConnect; safecall;
    procedure Shutdown(Wait: OleVariant); safecall;
    procedure Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant; Password: OleVariant); safecall;
    procedure UnloadODSDLL(const DLLName: WideString); safecall;
    procedure KillDatabase(const DatabaseName: WideString); safecall;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; safecall;
    function ListStartupProcedures: SQLObjectList; safecall;
    procedure BeginTransaction(TransactionName: OleVariant); safecall;
    procedure CommitTransaction(TransactionName: OleVariant); safecall;
    procedure SaveTransaction(const SavepointName: WideString); safecall;
    procedure RollbackTransaction(TransactionOrSavepointName: OleVariant); safecall;
    procedure CommandShellImmediate(const Command: WideString); safecall;
    function ReadErrorLog(LogNumber: OleVariant): QueryResults; safecall;
    function EnumErrorLogs: QueryResults; safecall;
    function EnumAvailableMedia(MediaType: SQLDMO_MEDIA_TYPE): QueryResults; safecall;
    function EnumDirectories(const PathName: WideString): QueryResults; safecall;
    function EnumServerAttributes: QueryResults; safecall;
    function EnumVersionInfo(Prefixes: OleVariant): QueryResults; safecall;
    function EnumLocks(WhoByID: OleVariant): QueryResults; safecall;
    function CommandShellWithResults(const Command: WideString): QueryResults; safecall;
    function ReadBackupHeader(const LoadSpec: Restore): QueryResults; safecall;
    function EnumProcesses(WhoByNameOrID: OleVariant): QueryResults; safecall;
    procedure Pause; safecall;
    procedure Continue; safecall;
    function VerifyConnection(ReconnectIfDead: OleVariant): WordBool; safecall;
    function IsOS(lType: SQLDMO_OS_TYPE): WordBool; safecall;
    procedure AddStartParameter(const NewParam: WideString); safecall;
    function Get_NetName: WideString; safecall;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; safecall;
    function EnumLoginMappings: QueryResults; safecall;
    function Get_Replication: Replication; safecall;
    function Get_EnableBcp: WordBool; safecall;
    procedure Set_EnableBcp(pRetVal: WordBool); safecall;
    function Get_BlockingTimeout: Integer; safecall;
    procedure Set_BlockingTimeout(pRetVal: Integer); safecall;
    function Get_ServerRoles: ServerRoles; safecall;
    function Get_Isdbcreator: WordBool; safecall;
    function Get_Isdiskadmin: WordBool; safecall;
    function Get_Isprocessadmin: WordBool; safecall;
    function Get_Issecurityadmin: WordBool; safecall;
    function Get_Isserveradmin: WordBool; safecall;
    function Get_Issetupadmin: WordBool; safecall;
    function Get_Issysadmin: WordBool; safecall;
    function EnumNTDomainGroups(Domain: OleVariant): QueryResults; safecall;
    function EnumAccountInfo(Account: OleVariant; ListAll: OleVariant): QueryResults; safecall;
    function ListMembers(Type_: SQLDMO_ROLE_TYPE): NameList; safecall;
    function IsLogin(const LoginName: WideString): WordBool; safecall;
    procedure Abort; safecall;
    function DetachDB(const DBName: WideString; bCheck: WordBool): WideString; safecall;
    function AttachDB(const DBName: WideString; const DataFiles: WideString): WideString; safecall;
    function Get_QuotedIdentifier: WordBool; safecall;
    procedure Set_QuotedIdentifier(pRetVal: WordBool); safecall;
    function Get_LinkedServers: LinkedServers; safecall;
    procedure Set_CodePageOverride(Param1: Integer); safecall;
    function Get_FullTextService: FullTextService; safecall;
    function Get_ODBCPrefix: WordBool; safecall;
    procedure Set_ODBCPrefix(pRetVal: WordBool); safecall;
    procedure Stop; safecall;
    function PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant; Password: OleVariant): SQLDMO_SQL_VER; safecall;
    function IsPackage: SQLDMO_PACKAGE_TYPE; safecall;
    function Get_RegionalSetting: WordBool; safecall;
    procedure Set_RegionalSetting(pRetVal: WordBool); safecall;
    function Get_CodePage: Integer; safecall;
    function AttachDBWithSingleFile(const DBName: WideString; const DataFile: WideString): WideString; safecall;
    function IsNTGroupMember(const NTGroup: WideString; const NTUser: WideString): WordBool; safecall;
    function Get_ServerTime: WideString; safecall;
    function Get_TranslateChar: WordBool; safecall;
    procedure Set_TranslateChar(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Databases: Databases read Get_Databases;
    property Password: WideString read Get_Password write Set_Password;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property VersionString: WideString read Get_VersionString;
    property BackupDevices: BackupDevices read Get_BackupDevices;
    property VersionMajor: Integer read Get_VersionMajor;
    property VersionMinor: Integer read Get_VersionMinor;
    property CommandTerminator: WideString read Get_CommandTerminator write Set_CommandTerminator;
    property TrueName: WideString read Get_TrueName;
    property ConnectionID: Integer read Get_ConnectionID;
    property TrueLogin: WideString read Get_TrueLogin;
    property IntegratedSecurity: IntegratedSecurity read Get_IntegratedSecurity;
    property Languages: Languages read Get_Languages;
    property RemoteServers: RemoteServers read Get_RemoteServers;
    property Logins: Logins read Get_Logins;
    property UserProfile: SQLDMO_SRVUSERPROFILE_TYPE read Get_UserProfile;
    property MaxNumericPrecision: Integer read Get_MaxNumericPrecision;
    property NextDeviceNumber: Integer read Get_NextDeviceNumber;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
    property LoginTimeout: Integer read Get_LoginTimeout write Set_LoginTimeout;
    property NetPacketSize: Integer read Get_NetPacketSize write Set_NetPacketSize;
    property HostName: WideString read Get_HostName write Set_HostName;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property LoginSecure: WordBool read Get_LoginSecure write Set_LoginSecure;
    property ProcessID: Integer read Get_ProcessID;
    property Status: SQLDMO_SVCSTATUS_TYPE read Get_Status;
    property Registry: Registry read Get_Registry;
    property Configuration: Configuration read Get_Configuration;
    property JobServer: JobServer read Get_JobServer;
    property ProcessInputBuffer[ProcessID: Integer]: WideString read Get_ProcessInputBuffer;
    property ProcessOutputBuffer[ProcessID: Integer]: WideString read Get_ProcessOutputBuffer;
    property Language: WideString read Get_Language write Set_Language;
    property AutoReConnect: WordBool read Get_AutoReConnect write Set_AutoReConnect;
    property StatusInfoRefetchInterval[StatusInfoType: SQLDMO_STATUSINFO_TYPE]: Integer read Get_StatusInfoRefetchInterval write Set_StatusInfoRefetchInterval;
    property SaLogin: WordBool read Get_SaLogin;
    property AnsiNulls: WordBool read Get_AnsiNulls write Set_AnsiNulls;
    property NetName: WideString read Get_NetName;
    property Replication: Replication read Get_Replication;
    property EnableBcp: WordBool read Get_EnableBcp write Set_EnableBcp;
    property BlockingTimeout: Integer read Get_BlockingTimeout write Set_BlockingTimeout;
    property ServerRoles: ServerRoles read Get_ServerRoles;
    property Isdbcreator: WordBool read Get_Isdbcreator;
    property Isdiskadmin: WordBool read Get_Isdiskadmin;
    property Isprocessadmin: WordBool read Get_Isprocessadmin;
    property Issecurityadmin: WordBool read Get_Issecurityadmin;
    property Isserveradmin: WordBool read Get_Isserveradmin;
    property Issetupadmin: WordBool read Get_Issetupadmin;
    property Issysadmin: WordBool read Get_Issysadmin;
    property QuotedIdentifier: WordBool read Get_QuotedIdentifier write Set_QuotedIdentifier;
    property LinkedServers: LinkedServers read Get_LinkedServers;
    property CodePageOverride: Integer write Set_CodePageOverride;
    property FullTextService: FullTextService read Get_FullTextService;
    property ODBCPrefix: WordBool read Get_ODBCPrefix write Set_ODBCPrefix;
    property RegionalSetting: WordBool read Get_RegionalSetting write Set_RegionalSetting;
    property CodePage: Integer read Get_CodePage;
    property ServerTime: WideString read Get_ServerTime;
    property TranslateChar: WordBool read Get_TranslateChar write Set_TranslateChar;
  end;

// *********************************************************************//
// DispIntf:  _SQLServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _SQLServerDisp = dispinterface
    ['{10020206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Databases: Databases readonly dispid 0;
    property Password: WideString dispid 12;
    property Name: WideString dispid 13;
    property Login: WideString dispid 14;
    property VersionString: WideString readonly dispid 15;
    property BackupDevices: BackupDevices readonly dispid 16;
    property VersionMajor: Integer readonly dispid 17;
    property VersionMinor: Integer readonly dispid 18;
    property CommandTerminator: WideString dispid 19;
    property TrueName: WideString readonly dispid 20;
    property ConnectionID: Integer readonly dispid 21;
    property TrueLogin: WideString readonly dispid 22;
    property IntegratedSecurity: IntegratedSecurity readonly dispid 26;
    property Languages: Languages readonly dispid 27;
    property RemoteServers: RemoteServers readonly dispid 28;
    property Logins: Logins readonly dispid 29;
    property UserProfile: SQLDMO_SRVUSERPROFILE_TYPE readonly dispid 30;
    property MaxNumericPrecision: Integer readonly dispid 31;
    property NextDeviceNumber: Integer readonly dispid 32;
    property QueryTimeout: Integer dispid 33;
    property LoginTimeout: Integer dispid 34;
    property NetPacketSize: Integer dispid 35;
    property HostName: WideString dispid 36;
    property ApplicationName: WideString dispid 37;
    property LoginSecure: WordBool dispid 38;
    property ProcessID: Integer readonly dispid 39;
    property Status: SQLDMO_SVCSTATUS_TYPE readonly dispid 40;
    property Registry: Registry readonly dispid 43;
    property Configuration: Configuration readonly dispid 44;
    property JobServer: JobServer readonly dispid 45;
    property ProcessInputBuffer[ProcessID: Integer]: WideString readonly dispid 46;
    property ProcessOutputBuffer[ProcessID: Integer]: WideString readonly dispid 47;
    property Language: WideString dispid 49;
    property AutoReConnect: WordBool dispid 50;
    property StatusInfoRefetchInterval[StatusInfoType: SQLDMO_STATUSINFO_TYPE]: Integer dispid 51;
    property SaLogin: WordBool readonly dispid 52;
    property AnsiNulls: WordBool dispid 57;
    procedure Connect(ServerName: OleVariant; Login: OleVariant; Password: OleVariant); dispid 100;
    procedure Close; dispid 101;
    procedure DisConnect; dispid 102;
    procedure KillProcess(lProcessID: Integer); dispid 103;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); dispid 104;
    procedure ReConnect; dispid 107;
    procedure Shutdown(Wait: OleVariant); dispid 108;
    procedure Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant; Password: OleVariant); dispid 109;
    procedure UnloadODSDLL(const DLLName: WideString); dispid 110;
    procedure KillDatabase(const DatabaseName: WideString); dispid 111;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 112;
    function ListStartupProcedures: SQLObjectList; dispid 113;
    procedure BeginTransaction(TransactionName: OleVariant); dispid 114;
    procedure CommitTransaction(TransactionName: OleVariant); dispid 115;
    procedure SaveTransaction(const SavepointName: WideString); dispid 116;
    procedure RollbackTransaction(TransactionOrSavepointName: OleVariant); dispid 117;
    procedure CommandShellImmediate(const Command: WideString); dispid 118;
    function ReadErrorLog(LogNumber: OleVariant): QueryResults; dispid 119;
    function EnumErrorLogs: QueryResults; dispid 120;
    function EnumAvailableMedia(MediaType: SQLDMO_MEDIA_TYPE): QueryResults; dispid 121;
    function EnumDirectories(const PathName: WideString): QueryResults; dispid 122;
    function EnumServerAttributes: QueryResults; dispid 123;
    function EnumVersionInfo(Prefixes: OleVariant): QueryResults; dispid 124;
    function EnumLocks(WhoByID: OleVariant): QueryResults; dispid 125;
    function CommandShellWithResults(const Command: WideString): QueryResults; dispid 126;
    function ReadBackupHeader(const LoadSpec: Restore): QueryResults; dispid 127;
    function EnumProcesses(WhoByNameOrID: OleVariant): QueryResults; dispid 130;
    procedure Pause; dispid 131;
    procedure Continue; dispid 132;
    function VerifyConnection(ReconnectIfDead: OleVariant): WordBool; dispid 136;
    function IsOS(lType: SQLDMO_OS_TYPE): WordBool; dispid 137;
    procedure AddStartParameter(const NewParam: WideString); dispid 138;
    property NetName: WideString readonly dispid 53;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 139;
    function EnumLoginMappings: QueryResults; dispid 140;
    property Replication: Replication readonly dispid 54;
    property EnableBcp: WordBool dispid 55;
    property BlockingTimeout: Integer dispid 56;
    property ServerRoles: ServerRoles readonly dispid 58;
    property Isdbcreator: WordBool readonly dispid 59;
    property Isdiskadmin: WordBool readonly dispid 60;
    property Isprocessadmin: WordBool readonly dispid 61;
    property Issecurityadmin: WordBool readonly dispid 62;
    property Isserveradmin: WordBool readonly dispid 63;
    property Issetupadmin: WordBool readonly dispid 64;
    property Issysadmin: WordBool readonly dispid 65;
    function EnumNTDomainGroups(Domain: OleVariant): QueryResults; dispid 142;
    function EnumAccountInfo(Account: OleVariant; ListAll: OleVariant): QueryResults; dispid 143;
    function ListMembers(Type_: SQLDMO_ROLE_TYPE): NameList; dispid 144;
    function IsLogin(const LoginName: WideString): WordBool; dispid 145;
    procedure Abort; dispid 146;
    function DetachDB(const DBName: WideString; bCheck: WordBool): WideString; dispid 147;
    function AttachDB(const DBName: WideString; const DataFiles: WideString): WideString; dispid 148;
    property QuotedIdentifier: WordBool dispid 66;
    property LinkedServers: LinkedServers readonly dispid 67;
    property CodePageOverride: Integer writeonly dispid 68;
    property FullTextService: FullTextService readonly dispid 69;
    property ODBCPrefix: WordBool dispid 70;
    procedure Stop; dispid 151;
    function PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant; Password: OleVariant): SQLDMO_SQL_VER; dispid 152;
    function IsPackage: SQLDMO_PACKAGE_TYPE; dispid 153;
    property RegionalSetting: WordBool dispid 71;
    property CodePage: Integer readonly dispid 72;
    function AttachDBWithSingleFile(const DBName: WideString; const DataFile: WideString): WideString; dispid 154;
    function IsNTGroupMember(const NTGroup: WideString; const NTUser: WideString): WordBool; dispid 155;
    property ServerTime: WideString readonly dispid 73;
    property TranslateChar: WordBool dispid 74;
  end;

// *********************************************************************//
// Interface: _SQLServer2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _SQLServer2 = interface(_SQLServer)
    ['{10020216-E260-11CF-AE68-00AA004A34D5}']
    function Get_AutoStart: WordBool; safecall;
    procedure Set_AutoStart(pRetVal: WordBool); safecall;
    function Get_StartupAccount: WideString; safecall;
    function IsDetachedPrimaryFile(const MDFName: WideString): WordBool; safecall;
    function ListDetachedDBFiles(const MDFName: WideString): NameList; safecall;
    function DetachedDBInfo(const MDFName: WideString): QueryResults; safecall;
    function ListCompatibilityLevels: NameList; safecall;
    function ListCollations: NameList; safecall;
    function ListDetachedLogFiles(const MDFName: WideString): NameList; safecall;
    function ServerLoginMode(const ServerName: WideString): SQLDMO_SECURITY_TYPE; safecall;
    function Get_InstanceName: WideString; safecall;
    function Get_ServiceName: WideString; safecall;
    function Get_PID: Integer; safecall;
    function Get_IsClustered: WordBool; safecall;
    function Get_Collation: WideString; safecall;
    function Get_IsFullTextInstalled: WordBool; safecall;
    function AttachDBWithSingleFile2(const DBName: WideString; const DataFile: WideString): WordBool; safecall;
    function ListInstalledInstances(ServerName: OleVariant): NameList; safecall;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; safecall;
    function EnumCollations: QueryResults; safecall;
    function Get_ProductLevel: WideString; safecall;
    function Get_Isbulkadmin: WordBool; safecall;
    property AutoStart: WordBool read Get_AutoStart write Set_AutoStart;
    property StartupAccount: WideString read Get_StartupAccount;
    property InstanceName: WideString read Get_InstanceName;
    property ServiceName: WideString read Get_ServiceName;
    property PID: Integer read Get_PID;
    property IsClustered: WordBool read Get_IsClustered;
    property Collation: WideString read Get_Collation;
    property IsFullTextInstalled: WordBool read Get_IsFullTextInstalled;
    property ProductLevel: WideString read Get_ProductLevel;
    property Isbulkadmin: WordBool read Get_Isbulkadmin;
  end;

// *********************************************************************//
// DispIntf:  _SQLServer2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _SQLServer2Disp = dispinterface
    ['{10020216-E260-11CF-AE68-00AA004A34D5}']
    property AutoStart: WordBool dispid 75;
    property StartupAccount: WideString readonly dispid 76;
    function IsDetachedPrimaryFile(const MDFName: WideString): WordBool; dispid 156;
    function ListDetachedDBFiles(const MDFName: WideString): NameList; dispid 157;
    function DetachedDBInfo(const MDFName: WideString): QueryResults; dispid 158;
    function ListCompatibilityLevels: NameList; dispid 159;
    function ListCollations: NameList; dispid 160;
    function ListDetachedLogFiles(const MDFName: WideString): NameList; dispid 161;
    function ServerLoginMode(const ServerName: WideString): SQLDMO_SECURITY_TYPE; dispid 162;
    property InstanceName: WideString readonly dispid 77;
    property ServiceName: WideString readonly dispid 78;
    property PID: Integer readonly dispid 79;
    property IsClustered: WordBool readonly dispid 80;
    property Collation: WideString readonly dispid 81;
    property IsFullTextInstalled: WordBool readonly dispid 82;
    function AttachDBWithSingleFile2(const DBName: WideString; const DataFile: WideString): WordBool; dispid 163;
    function ListInstalledInstances(ServerName: OleVariant): NameList; dispid 164;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; dispid 165;
    function EnumCollations: QueryResults; dispid 166;
    property ProductLevel: WideString readonly dispid 83;
    property Isbulkadmin: WordBool readonly dispid 84;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Databases: Databases readonly dispid 0;
    property Password: WideString dispid 12;
    property Name: WideString dispid 13;
    property Login: WideString dispid 14;
    property VersionString: WideString readonly dispid 15;
    property BackupDevices: BackupDevices readonly dispid 16;
    property VersionMajor: Integer readonly dispid 17;
    property VersionMinor: Integer readonly dispid 18;
    property CommandTerminator: WideString dispid 19;
    property TrueName: WideString readonly dispid 20;
    property ConnectionID: Integer readonly dispid 21;
    property TrueLogin: WideString readonly dispid 22;
    property IntegratedSecurity: IntegratedSecurity readonly dispid 26;
    property Languages: Languages readonly dispid 27;
    property RemoteServers: RemoteServers readonly dispid 28;
    property Logins: Logins readonly dispid 29;
    property UserProfile: SQLDMO_SRVUSERPROFILE_TYPE readonly dispid 30;
    property MaxNumericPrecision: Integer readonly dispid 31;
    property NextDeviceNumber: Integer readonly dispid 32;
    property QueryTimeout: Integer dispid 33;
    property LoginTimeout: Integer dispid 34;
    property NetPacketSize: Integer dispid 35;
    property HostName: WideString dispid 36;
    property ApplicationName: WideString dispid 37;
    property LoginSecure: WordBool dispid 38;
    property ProcessID: Integer readonly dispid 39;
    property Status: SQLDMO_SVCSTATUS_TYPE readonly dispid 40;
    property Registry: Registry readonly dispid 43;
    property Configuration: Configuration readonly dispid 44;
    property JobServer: JobServer readonly dispid 45;
    property ProcessInputBuffer[ProcessID: Integer]: WideString readonly dispid 46;
    property ProcessOutputBuffer[ProcessID: Integer]: WideString readonly dispid 47;
    property Language: WideString dispid 49;
    property AutoReConnect: WordBool dispid 50;
    property StatusInfoRefetchInterval[StatusInfoType: SQLDMO_STATUSINFO_TYPE]: Integer dispid 51;
    property SaLogin: WordBool readonly dispid 52;
    property AnsiNulls: WordBool dispid 57;
    procedure Connect(ServerName: OleVariant; Login: OleVariant; Password: OleVariant); dispid 100;
    procedure Close; dispid 101;
    procedure DisConnect; dispid 102;
    procedure KillProcess(lProcessID: Integer); dispid 103;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); dispid 104;
    procedure ReConnect; dispid 107;
    procedure Shutdown(Wait: OleVariant); dispid 108;
    procedure Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant; Password: OleVariant); dispid 109;
    procedure UnloadODSDLL(const DLLName: WideString); dispid 110;
    procedure KillDatabase(const DatabaseName: WideString); dispid 111;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 112;
    function ListStartupProcedures: SQLObjectList; dispid 113;
    procedure BeginTransaction(TransactionName: OleVariant); dispid 114;
    procedure CommitTransaction(TransactionName: OleVariant); dispid 115;
    procedure SaveTransaction(const SavepointName: WideString); dispid 116;
    procedure RollbackTransaction(TransactionOrSavepointName: OleVariant); dispid 117;
    procedure CommandShellImmediate(const Command: WideString); dispid 118;
    function ReadErrorLog(LogNumber: OleVariant): QueryResults; dispid 119;
    function EnumErrorLogs: QueryResults; dispid 120;
    function EnumAvailableMedia(MediaType: SQLDMO_MEDIA_TYPE): QueryResults; dispid 121;
    function EnumDirectories(const PathName: WideString): QueryResults; dispid 122;
    function EnumServerAttributes: QueryResults; dispid 123;
    function EnumVersionInfo(Prefixes: OleVariant): QueryResults; dispid 124;
    function EnumLocks(WhoByID: OleVariant): QueryResults; dispid 125;
    function CommandShellWithResults(const Command: WideString): QueryResults; dispid 126;
    function ReadBackupHeader(const LoadSpec: Restore): QueryResults; dispid 127;
    function EnumProcesses(WhoByNameOrID: OleVariant): QueryResults; dispid 130;
    procedure Pause; dispid 131;
    procedure Continue; dispid 132;
    function VerifyConnection(ReconnectIfDead: OleVariant): WordBool; dispid 136;
    function IsOS(lType: SQLDMO_OS_TYPE): WordBool; dispid 137;
    procedure AddStartParameter(const NewParam: WideString); dispid 138;
    property NetName: WideString readonly dispid 53;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 139;
    function EnumLoginMappings: QueryResults; dispid 140;
    property Replication: Replication readonly dispid 54;
    property EnableBcp: WordBool dispid 55;
    property BlockingTimeout: Integer dispid 56;
    property ServerRoles: ServerRoles readonly dispid 58;
    property Isdbcreator: WordBool readonly dispid 59;
    property Isdiskadmin: WordBool readonly dispid 60;
    property Isprocessadmin: WordBool readonly dispid 61;
    property Issecurityadmin: WordBool readonly dispid 62;
    property Isserveradmin: WordBool readonly dispid 63;
    property Issetupadmin: WordBool readonly dispid 64;
    property Issysadmin: WordBool readonly dispid 65;
    function EnumNTDomainGroups(Domain: OleVariant): QueryResults; dispid 142;
    function EnumAccountInfo(Account: OleVariant; ListAll: OleVariant): QueryResults; dispid 143;
    function ListMembers(Type_: SQLDMO_ROLE_TYPE): NameList; dispid 144;
    function IsLogin(const LoginName: WideString): WordBool; dispid 145;
    procedure Abort; dispid 146;
    function DetachDB(const DBName: WideString; bCheck: WordBool): WideString; dispid 147;
    function AttachDB(const DBName: WideString; const DataFiles: WideString): WideString; dispid 148;
    property QuotedIdentifier: WordBool dispid 66;
    property LinkedServers: LinkedServers readonly dispid 67;
    property CodePageOverride: Integer writeonly dispid 68;
    property FullTextService: FullTextService readonly dispid 69;
    property ODBCPrefix: WordBool dispid 70;
    procedure Stop; dispid 151;
    function PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant; Password: OleVariant): SQLDMO_SQL_VER; dispid 152;
    function IsPackage: SQLDMO_PACKAGE_TYPE; dispid 153;
    property RegionalSetting: WordBool dispid 71;
    property CodePage: Integer readonly dispid 72;
    function AttachDBWithSingleFile(const DBName: WideString; const DataFile: WideString): WideString; dispid 154;
    function IsNTGroupMember(const NTGroup: WideString; const NTUser: WideString): WordBool; dispid 155;
    property ServerTime: WideString readonly dispid 73;
    property TranslateChar: WordBool dispid 74;
  end;

// *********************************************************************//
// Interface: Databases
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Databases = interface(_IVSQLDMOStdObject)
    ['{10020303-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): Database; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Database; safecall;
    procedure Add(const Object_: Database); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DatabasesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DatabasesDisp = dispinterface
    ['{10020303-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): Database; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Database; dispid 6;
    procedure Add(const Object_: Database); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Database
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Database = interface(_IVSQLDMOStdObject)
    ['{10020306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Tables: Tables; safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_ID: Integer; safecall;
    function Get_UserProfile: SQLDMO_DBUSERPROFILE_TYPE; safecall;
    function Get_CreateForAttach: WordBool; safecall;
    procedure Set_CreateForAttach(pRetVal: WordBool); safecall;
    function Get_Owner: WideString; safecall;
    function Get_Version: Integer; safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_DataSpaceUsage: Single; safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const pRetVal: WideString); safecall;
    function Get_Status: SQLDMO_DBSTATUS_TYPE; safecall;
    function Get_Size: Integer; safecall;
    function Get_SpaceAvailable: Integer; safecall;
    function Get_IndexSpaceUsage: Single; safecall;
    function Get_SpaceAvailableInMB: Single; safecall;
    function Get_Views: Views; safecall;
    function Get_StoredProcedures: StoredProcedures; safecall;
    function Get_Defaults: Defaults; safecall;
    function Get_Rules: Rules; safecall;
    function Get_UserDefinedDatatypes: UserDefinedDatatypes; safecall;
    function Get_Users: Users; safecall;
    function Get_Groups: Groups; safecall;
    function Get_SystemDatatypes: SystemDatatypes; safecall;
    function Get_TransactionLog: TransactionLog; safecall;
    function Get_DBOption: DBOption; safecall;
    function Get_DboLogin: WordBool; safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); safecall;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); safecall;
    function GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                             Owner: OleVariant): DBObject; safecall;
    procedure Checkpoint; safecall;
    function CheckTables(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; safecall;
    function CheckAllocations(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; safecall;
    function CheckCatalog: WideString; safecall;
    function GetMemoryUsage: WideString; safecall;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; safecall;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function EnumLocks(Who: OleVariant): QueryResults; safecall;
    function ListObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    procedure SetOwner(const LoginName: WideString; TransferAliases: OleVariant; 
                       OverrideIfAlreadyUser: OleVariant); safecall;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    procedure Remove; safecall;
    procedure RecalcSpaceUsage; safecall;
    function EnumCandidateKeys: QueryResults; safecall;
    function IsValidKeyDatatype(const KeyColType: WideString; ReferencingColType: OleVariant): WordBool; safecall;
    function GetDatatypeByName(const TypeName: WideString): _IVSQLDMOStdObject; safecall;
    function ScriptTransfer(const TransferSpec: Transfer; 
                            ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE; ScriptFilePath: OleVariant): WideString; safecall;
    procedure Transfer(const TransferSpec: Transfer); safecall;
    procedure CheckIdentityValues; safecall;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function CheckTablesDataOnly: WideString; safecall;
    function CheckAllocationsDataOnly: WideString; safecall;
    procedure UpdateIndexStatistics; safecall;
    function EnumLoginMappings: QueryResults; safecall;
    function Get_PrimaryFilePath: WideString; safecall;
    function Get_FileGroups: FileGroups; safecall;
    function Get_DatabaseRoles: DatabaseRoles; safecall;
    function Get_Permissions: SQLDMO_PRIVILEGE_TYPE; safecall;
    function Get_Isdb_accessadmin: WordBool; safecall;
    function Get_Isdb_datareader: WordBool; safecall;
    function Get_Isdb_ddladmin: WordBool; safecall;
    function Get_Isdb_denydatareader: WordBool; safecall;
    function Get_Isdb_denydatawriter: WordBool; safecall;
    function Get_Isdb_backupoperator: WordBool; safecall;
    function Get_Isdb_owner: WordBool; safecall;
    function Get_Isdb_securityadmin: WordBool; safecall;
    function Get_Isdb_datawriter: WordBool; safecall;
    function EnumFiles: QueryResults; safecall;
    function EnumFileGroups: QueryResults; safecall;
    function EnumUsers(Who: OleVariant): QueryResults; safecall;
    function EnumNTGroups(Who: OleVariant): QueryResults; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); safecall;
    function IsUser(const UserName: WideString): WordBool; safecall;
    function GenerateSQL: WideString; safecall;
    procedure Shrink(FreeSpaceInPercent: Integer; Truncate: SQLDMO_SHRINK_TYPE); safecall;
    function CheckTextAllocsFast: WideString; safecall;
    function CheckTextAllocsFull: WideString; safecall;
    function EnumMatchingSPs(const Text: WideString; IncludeSystemSP: OleVariant): QueryResults; safecall;
    procedure EnableFullTextCatalogs; safecall;
    procedure RemoveFullTextCatalogs; safecall;
    function FullTextIndexScript: WideString; safecall;
    function Get_IsFullTextEnabled: WordBool; safecall;
    function Get_FullTextCatalogs: FullTextCatalogs; safecall;
    procedure DisableFullTextCatalogs; safecall;
    function Get_CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE; safecall;
    procedure Set_CompatibilityLevel(pRetVal: SQLDMO_COMP_LEVEL_TYPE); safecall;
    function Get_UseServerName: WideString; safecall;
    procedure Set_UseServerName(const pRetVal: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Tables: Tables read Get_Tables;
    property SystemObject: WordBool read Get_SystemObject;
    property ID: Integer read Get_ID;
    property UserProfile: SQLDMO_DBUSERPROFILE_TYPE read Get_UserProfile;
    property CreateForAttach: WordBool read Get_CreateForAttach write Set_CreateForAttach;
    property Owner: WideString read Get_Owner;
    property Version: Integer read Get_Version;
    property CreateDate: WideString read Get_CreateDate;
    property DataSpaceUsage: Single read Get_DataSpaceUsage;
    property UserName: WideString read Get_UserName write Set_UserName;
    property Status: SQLDMO_DBSTATUS_TYPE read Get_Status;
    property Size: Integer read Get_Size;
    property SpaceAvailable: Integer read Get_SpaceAvailable;
    property IndexSpaceUsage: Single read Get_IndexSpaceUsage;
    property SpaceAvailableInMB: Single read Get_SpaceAvailableInMB;
    property Views: Views read Get_Views;
    property StoredProcedures: StoredProcedures read Get_StoredProcedures;
    property Defaults: Defaults read Get_Defaults;
    property Rules: Rules read Get_Rules;
    property UserDefinedDatatypes: UserDefinedDatatypes read Get_UserDefinedDatatypes;
    property Users: Users read Get_Users;
    property Groups: Groups read Get_Groups;
    property SystemDatatypes: SystemDatatypes read Get_SystemDatatypes;
    property TransactionLog: TransactionLog read Get_TransactionLog;
    property DBOption: DBOption read Get_DBOption;
    property DboLogin: WordBool read Get_DboLogin;
    property PrimaryFilePath: WideString read Get_PrimaryFilePath;
    property FileGroups: FileGroups read Get_FileGroups;
    property DatabaseRoles: DatabaseRoles read Get_DatabaseRoles;
    property Permissions: SQLDMO_PRIVILEGE_TYPE read Get_Permissions;
    property Isdb_accessadmin: WordBool read Get_Isdb_accessadmin;
    property Isdb_datareader: WordBool read Get_Isdb_datareader;
    property Isdb_ddladmin: WordBool read Get_Isdb_ddladmin;
    property Isdb_denydatareader: WordBool read Get_Isdb_denydatareader;
    property Isdb_denydatawriter: WordBool read Get_Isdb_denydatawriter;
    property Isdb_backupoperator: WordBool read Get_Isdb_backupoperator;
    property Isdb_owner: WordBool read Get_Isdb_owner;
    property Isdb_securityadmin: WordBool read Get_Isdb_securityadmin;
    property Isdb_datawriter: WordBool read Get_Isdb_datawriter;
    property IsFullTextEnabled: WordBool read Get_IsFullTextEnabled;
    property FullTextCatalogs: FullTextCatalogs read Get_FullTextCatalogs;
    property CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE read Get_CompatibilityLevel write Set_CompatibilityLevel;
    property UseServerName: WideString read Get_UseServerName write Set_UseServerName;
  end;

// *********************************************************************//
// DispIntf:  _DatabaseDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DatabaseDisp = dispinterface
    ['{10020306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Tables: Tables readonly dispid 0;
    property SystemObject: WordBool readonly dispid 10;
    property ID: Integer readonly dispid 11;
    property UserProfile: SQLDMO_DBUSERPROFILE_TYPE readonly dispid 12;
    property CreateForAttach: WordBool dispid 13;
    property Owner: WideString readonly dispid 14;
    property Version: Integer readonly dispid 15;
    property CreateDate: WideString readonly dispid 16;
    property DataSpaceUsage: Single readonly dispid 17;
    property UserName: WideString dispid 18;
    property Status: SQLDMO_DBSTATUS_TYPE readonly dispid 19;
    property Size: Integer readonly dispid 20;
    property SpaceAvailable: Integer readonly dispid 21;
    property IndexSpaceUsage: Single readonly dispid 22;
    property SpaceAvailableInMB: Single readonly dispid 24;
    property Views: Views readonly dispid 25;
    property StoredProcedures: StoredProcedures readonly dispid 26;
    property Defaults: Defaults readonly dispid 27;
    property Rules: Rules readonly dispid 28;
    property UserDefinedDatatypes: UserDefinedDatatypes readonly dispid 29;
    property Users: Users readonly dispid 30;
    property Groups: Groups readonly dispid 31;
    property SystemDatatypes: SystemDatatypes readonly dispid 32;
    property TransactionLog: TransactionLog readonly dispid 35;
    property DBOption: DBOption readonly dispid 36;
    property DboLogin: WordBool readonly dispid 39;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); dispid 101;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); dispid 102;
    function GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                             Owner: OleVariant): DBObject; dispid 104;
    procedure Checkpoint; dispid 105;
    function CheckTables(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; dispid 106;
    function CheckAllocations(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; dispid 107;
    function CheckCatalog: WideString; dispid 108;
    function GetMemoryUsage: WideString; dispid 111;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 112;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 113;
    function EnumLocks(Who: OleVariant): QueryResults; dispid 114;
    function ListObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; dispid 116;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 117;
    procedure SetOwner(const LoginName: WideString; TransferAliases: OleVariant; 
                       OverrideIfAlreadyUser: OleVariant); dispid 118;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 119;
    procedure Remove; dispid 120;
    procedure RecalcSpaceUsage; dispid 121;
    function EnumCandidateKeys: QueryResults; dispid 127;
    function IsValidKeyDatatype(const KeyColType: WideString; ReferencingColType: OleVariant): WordBool; dispid 128;
    function GetDatatypeByName(const TypeName: WideString): _IVSQLDMOStdObject; dispid 129;
    function ScriptTransfer(const TransferSpec: Transfer; 
                            ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE; ScriptFilePath: OleVariant): WideString; dispid 131;
    procedure Transfer(const TransferSpec: Transfer); dispid 133;
    procedure CheckIdentityValues; dispid 132;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 134;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 135;
    function CheckTablesDataOnly: WideString; dispid 136;
    function CheckAllocationsDataOnly: WideString; dispid 137;
    procedure UpdateIndexStatistics; dispid 138;
    function EnumLoginMappings: QueryResults; dispid 139;
    property PrimaryFilePath: WideString readonly dispid 41;
    property FileGroups: FileGroups readonly dispid 42;
    property DatabaseRoles: DatabaseRoles readonly dispid 43;
    property Permissions: SQLDMO_PRIVILEGE_TYPE readonly dispid 44;
    property Isdb_accessadmin: WordBool readonly dispid 45;
    property Isdb_datareader: WordBool readonly dispid 46;
    property Isdb_ddladmin: WordBool readonly dispid 47;
    property Isdb_denydatareader: WordBool readonly dispid 48;
    property Isdb_denydatawriter: WordBool readonly dispid 49;
    property Isdb_backupoperator: WordBool readonly dispid 50;
    property Isdb_owner: WordBool readonly dispid 51;
    property Isdb_securityadmin: WordBool readonly dispid 52;
    property Isdb_datawriter: WordBool readonly dispid 53;
    function EnumFiles: QueryResults; dispid 140;
    function EnumFileGroups: QueryResults; dispid 141;
    function EnumUsers(Who: OleVariant): QueryResults; dispid 142;
    function EnumNTGroups(Who: OleVariant): QueryResults; dispid 143;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); dispid 144;
    function IsUser(const UserName: WideString): WordBool; dispid 145;
    function GenerateSQL: WideString; dispid 146;
    procedure Shrink(FreeSpaceInPercent: Integer; Truncate: SQLDMO_SHRINK_TYPE); dispid 147;
    function CheckTextAllocsFast: WideString; dispid 148;
    function CheckTextAllocsFull: WideString; dispid 149;
    function EnumMatchingSPs(const Text: WideString; IncludeSystemSP: OleVariant): QueryResults; dispid 150;
    procedure EnableFullTextCatalogs; dispid 151;
    procedure RemoveFullTextCatalogs; dispid 152;
    function FullTextIndexScript: WideString; dispid 153;
    property IsFullTextEnabled: WordBool readonly dispid 54;
    property FullTextCatalogs: FullTextCatalogs readonly dispid 55;
    procedure DisableFullTextCatalogs; dispid 154;
    property CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE dispid 56;
    property UseServerName: WideString dispid 57;
  end;

// *********************************************************************//
// Interface: _Database2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Database2 = interface(_Database)
    ['{10020316-E260-11CF-AE68-00AA004A34D5}']
    function CheckTablesWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults; safecall;
    function CheckAllocationsWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults; safecall;
    function CheckCatalogWithResult: QueryResults; safecall;
    function CheckTablesDataOnlyWithResult: QueryResults; safecall;
    function CheckAllocationsDataOnlyWithResult: QueryResults; safecall;
    function Get_CurrentCompatibility: WideString; safecall;
    procedure Set_CurrentCompatibility(const pRetVal: WideString); safecall;
    function Get_UserDefinedFunctions: UserDefinedFunctions; safecall;
    function Get_Collation: WideString; safecall;
    procedure Set_Collation(const pRetVal: WideString); safecall;
    function Get_SizeInKB: Single; safecall;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; safecall;
    procedure CheckRuleSyntax(const Rule: Rule); safecall;
    procedure CheckDefaultSyntax(const Default: Default); safecall;
    function Get_IsDeleted: WordBool; safecall;
    function IsObjectDeleted(ObjectType: SQLDMO_OBJECT_TYPE; const ObjectName: WideString; 
                             const ObjectOwner: WideString): WordBool; safecall;
    property CurrentCompatibility: WideString read Get_CurrentCompatibility write Set_CurrentCompatibility;
    property UserDefinedFunctions: UserDefinedFunctions read Get_UserDefinedFunctions;
    property Collation: WideString read Get_Collation write Set_Collation;
    property SizeInKB: Single read Get_SizeInKB;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _Database2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Database2Disp = dispinterface
    ['{10020316-E260-11CF-AE68-00AA004A34D5}']
    function CheckTablesWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults; dispid 155;
    function CheckAllocationsWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults; dispid 156;
    function CheckCatalogWithResult: QueryResults; dispid 157;
    function CheckTablesDataOnlyWithResult: QueryResults; dispid 158;
    function CheckAllocationsDataOnlyWithResult: QueryResults; dispid 159;
    property CurrentCompatibility: WideString dispid 58;
    property UserDefinedFunctions: UserDefinedFunctions readonly dispid 59;
    property Collation: WideString dispid 60;
    property SizeInKB: Single readonly dispid 63;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; dispid 160;
    procedure CheckRuleSyntax(const Rule: Rule); dispid 161;
    procedure CheckDefaultSyntax(const Default: Default); dispid 162;
    property IsDeleted: WordBool readonly dispid 64;
    function IsObjectDeleted(ObjectType: SQLDMO_OBJECT_TYPE; const ObjectName: WideString; 
                             const ObjectOwner: WideString): WordBool; dispid 163;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Tables: Tables readonly dispid 0;
    property SystemObject: WordBool readonly dispid 10;
    property ID: Integer readonly dispid 11;
    property UserProfile: SQLDMO_DBUSERPROFILE_TYPE readonly dispid 12;
    property CreateForAttach: WordBool dispid 13;
    property Owner: WideString readonly dispid 14;
    property Version: Integer readonly dispid 15;
    property CreateDate: WideString readonly dispid 16;
    property DataSpaceUsage: Single readonly dispid 17;
    property UserName: WideString dispid 18;
    property Status: SQLDMO_DBSTATUS_TYPE readonly dispid 19;
    property Size: Integer readonly dispid 20;
    property SpaceAvailable: Integer readonly dispid 21;
    property IndexSpaceUsage: Single readonly dispid 22;
    property SpaceAvailableInMB: Single readonly dispid 24;
    property Views: Views readonly dispid 25;
    property StoredProcedures: StoredProcedures readonly dispid 26;
    property Defaults: Defaults readonly dispid 27;
    property Rules: Rules readonly dispid 28;
    property UserDefinedDatatypes: UserDefinedDatatypes readonly dispid 29;
    property Users: Users readonly dispid 30;
    property Groups: Groups readonly dispid 31;
    property SystemDatatypes: SystemDatatypes readonly dispid 32;
    property TransactionLog: TransactionLog readonly dispid 35;
    property DBOption: DBOption readonly dispid 36;
    property DboLogin: WordBool readonly dispid 39;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); dispid 101;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); dispid 102;
    function GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                             Owner: OleVariant): DBObject; dispid 104;
    procedure Checkpoint; dispid 105;
    function CheckTables(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; dispid 106;
    function CheckAllocations(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString; dispid 107;
    function CheckCatalog: WideString; dispid 108;
    function GetMemoryUsage: WideString; dispid 111;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 112;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 113;
    function EnumLocks(Who: OleVariant): QueryResults; dispid 114;
    function ListObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; dispid 116;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 117;
    procedure SetOwner(const LoginName: WideString; TransferAliases: OleVariant; 
                       OverrideIfAlreadyUser: OleVariant); dispid 118;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 119;
    procedure Remove; dispid 120;
    procedure RecalcSpaceUsage; dispid 121;
    function EnumCandidateKeys: QueryResults; dispid 127;
    function IsValidKeyDatatype(const KeyColType: WideString; ReferencingColType: OleVariant): WordBool; dispid 128;
    function GetDatatypeByName(const TypeName: WideString): _IVSQLDMOStdObject; dispid 129;
    function ScriptTransfer(const TransferSpec: Transfer; 
                            ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE; ScriptFilePath: OleVariant): WideString; dispid 131;
    procedure Transfer(const TransferSpec: Transfer); dispid 133;
    procedure CheckIdentityValues; dispid 132;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 134;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 135;
    function CheckTablesDataOnly: WideString; dispid 136;
    function CheckAllocationsDataOnly: WideString; dispid 137;
    procedure UpdateIndexStatistics; dispid 138;
    function EnumLoginMappings: QueryResults; dispid 139;
    property PrimaryFilePath: WideString readonly dispid 41;
    property FileGroups: FileGroups readonly dispid 42;
    property DatabaseRoles: DatabaseRoles readonly dispid 43;
    property Permissions: SQLDMO_PRIVILEGE_TYPE readonly dispid 44;
    property Isdb_accessadmin: WordBool readonly dispid 45;
    property Isdb_datareader: WordBool readonly dispid 46;
    property Isdb_ddladmin: WordBool readonly dispid 47;
    property Isdb_denydatareader: WordBool readonly dispid 48;
    property Isdb_denydatawriter: WordBool readonly dispid 49;
    property Isdb_backupoperator: WordBool readonly dispid 50;
    property Isdb_owner: WordBool readonly dispid 51;
    property Isdb_securityadmin: WordBool readonly dispid 52;
    property Isdb_datawriter: WordBool readonly dispid 53;
    function EnumFiles: QueryResults; dispid 140;
    function EnumFileGroups: QueryResults; dispid 141;
    function EnumUsers(Who: OleVariant): QueryResults; dispid 142;
    function EnumNTGroups(Who: OleVariant): QueryResults; dispid 143;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); dispid 144;
    function IsUser(const UserName: WideString): WordBool; dispid 145;
    function GenerateSQL: WideString; dispid 146;
    procedure Shrink(FreeSpaceInPercent: Integer; Truncate: SQLDMO_SHRINK_TYPE); dispid 147;
    function CheckTextAllocsFast: WideString; dispid 148;
    function CheckTextAllocsFull: WideString; dispid 149;
    function EnumMatchingSPs(const Text: WideString; IncludeSystemSP: OleVariant): QueryResults; dispid 150;
    procedure EnableFullTextCatalogs; dispid 151;
    procedure RemoveFullTextCatalogs; dispid 152;
    function FullTextIndexScript: WideString; dispid 153;
    property IsFullTextEnabled: WordBool readonly dispid 54;
    property FullTextCatalogs: FullTextCatalogs readonly dispid 55;
    procedure DisableFullTextCatalogs; dispid 154;
    property CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE dispid 56;
    property UseServerName: WideString dispid 57;
  end;

// *********************************************************************//
// Interface: Tables
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Tables = interface(_IVSQLDMOStdObject)
    ['{10020403-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): Table; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Table; safecall;
    procedure Add(const Object_: Table); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TablesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TablesDisp = dispinterface
    ['{10020403-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): Table; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Table; dispid 6;
    procedure Add(const Object_: Table); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Table
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Table = interface(_IVSQLDMOStdObject)
    ['{10020406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Columns: Columns; safecall;
    function Get_DataSpaceUsed: Integer; safecall;
    function Get_IndexSpaceUsed: Integer; safecall;
    function Get_Attributes: SQLDMO_TABLEATT_TYPE; safecall;
    function Get_Keys: Keys; safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_PrimaryKey: Key; safecall;
    function Get_Indexes: Indexes; safecall;
    function Get_Triggers: Triggers; safecall;
    function Get_Checks: Checks; safecall;
    function Get_ClusteredIndex: Index; safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Rows: Integer; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure ReCompileReferences; safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function CheckTable: WideString; safecall;
    procedure TruncateData; safecall;
    procedure UpdateStatistics; safecall;
    procedure Remove; safecall;
    function EnumReferencedKeys(ReferencedTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; safecall;
    function EnumReferencedTables(IncludeAllCandidates: OleVariant): QueryResults; safecall;
    function EnumReferencingKeys(ReferencingTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; safecall;
    function EnumReferencingTables(IncludeAllCandidates: OleVariant): QueryResults; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    procedure InsertColumn(const NewColumn: Column; const BeforeColumnName: WideString); safecall;
    procedure RecalcSpaceUsage; safecall;
    function EnumLastStatisticsUpdates(IndexName: OleVariant): QueryResults; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewName: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    procedure DoAlterWithNoCheck; safecall;
    procedure Refresh; safecall;
    function ImportData(const Bcp: BulkCopy): Integer; safecall;
    function ExportData(const Bcp: BulkCopy): Integer; safecall;
    procedure RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE; FillFactor: OleVariant); safecall;
    procedure CheckIdentityValue; safecall;
    function CheckTableDataOnly: WideString; safecall;
    function Get_InAlter: WordBool; safecall;
    function Get_FileGroup: WideString; safecall;
    procedure Set_FileGroup(const pRetVal: WideString); safecall;
    function Get_TextFileGroup: WideString; safecall;
    procedure Set_TextFileGroup(const pRetVal: WideString); safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); safecall;
    function GenerateSQL(const pDB: Database): WideString; safecall;
    function CheckTextAllocsFast: WideString; safecall;
    function CheckTextAllocsFull: WideString; safecall;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); safecall;
    function Get_FullTextIndex: WordBool; safecall;
    procedure Set_FullTextIndex(pRetVal: WordBool); safecall;
    function Get_UniqueIndexForFullText: WideString; safecall;
    procedure Set_UniqueIndexForFullText(const pRetVal: WideString); safecall;
    function Get_FullTextCatalogName: WideString; safecall;
    procedure Set_FullTextCatalogName(const pRetVal: WideString); safecall;
    function Get_FullTextIndexActive: WordBool; safecall;
    procedure Set_FullTextIndexActive(pRetVal: WordBool); safecall;
    function Get_FullTextKeyColumn: Integer; safecall;
    function ListAvailableUniqueIndexesForFullText: NameList; safecall;
    function FullTextIndexScript: WideString; safecall;
    function Get_HasClusteredIndex: WordBool; safecall;
    function Get_HasIndex: WordBool; safecall;
    function Get_FakeSystemTable: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Columns: Columns read Get_Columns;
    property DataSpaceUsed: Integer read Get_DataSpaceUsed;
    property IndexSpaceUsed: Integer read Get_IndexSpaceUsed;
    property Attributes: SQLDMO_TABLEATT_TYPE read Get_Attributes;
    property Keys: Keys read Get_Keys;
    property Owner: WideString read Get_Owner write Set_Owner;
    property ID: Integer read Get_ID;
    property CreateDate: WideString read Get_CreateDate;
    property PrimaryKey: Key read Get_PrimaryKey;
    property Indexes: Indexes read Get_Indexes;
    property Triggers: Triggers read Get_Triggers;
    property Checks: Checks read Get_Checks;
    property ClusteredIndex: Index read Get_ClusteredIndex;
    property SystemObject: WordBool read Get_SystemObject;
    property Rows: Integer read Get_Rows;
    property InAlter: WordBool read Get_InAlter;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property TextFileGroup: WideString read Get_TextFileGroup write Set_TextFileGroup;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
    property UniqueIndexForFullText: WideString read Get_UniqueIndexForFullText write Set_UniqueIndexForFullText;
    property FullTextCatalogName: WideString read Get_FullTextCatalogName write Set_FullTextCatalogName;
    property FullTextIndexActive: WordBool read Get_FullTextIndexActive write Set_FullTextIndexActive;
    property FullTextKeyColumn: Integer read Get_FullTextKeyColumn;
    property HasClusteredIndex: WordBool read Get_HasClusteredIndex;
    property HasIndex: WordBool read Get_HasIndex;
    property FakeSystemTable: WordBool read Get_FakeSystemTable;
  end;

// *********************************************************************//
// DispIntf:  _TableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TableDisp = dispinterface
    ['{10020406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Columns: Columns readonly dispid 0;
    property DataSpaceUsed: Integer readonly dispid 10;
    property IndexSpaceUsed: Integer readonly dispid 11;
    property Attributes: SQLDMO_TABLEATT_TYPE readonly dispid 12;
    property Keys: Keys readonly dispid 13;
    property Owner: WideString dispid 14;
    property ID: Integer readonly dispid 15;
    property CreateDate: WideString readonly dispid 16;
    property PrimaryKey: Key readonly dispid 17;
    property Indexes: Indexes readonly dispid 18;
    property Triggers: Triggers readonly dispid 19;
    property Checks: Checks readonly dispid 20;
    property ClusteredIndex: Index readonly dispid 21;
    property SystemObject: WordBool readonly dispid 22;
    property Rows: Integer readonly dispid 23;
    procedure BeginAlter; dispid 100;
    procedure DoAlter; dispid 101;
    procedure CancelAlter; dispid 102;
    procedure ReCompileReferences; dispid 103;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); dispid 104;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 105;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 106;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 107;
    function CheckTable: WideString; dispid 108;
    procedure TruncateData; dispid 111;
    procedure UpdateStatistics; dispid 112;
    procedure Remove; dispid 113;
    function EnumReferencedKeys(ReferencedTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; dispid 115;
    function EnumReferencedTables(IncludeAllCandidates: OleVariant): QueryResults; dispid 116;
    function EnumReferencingKeys(ReferencingTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; dispid 117;
    function EnumReferencingTables(IncludeAllCandidates: OleVariant): QueryResults; dispid 118;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 119;
    procedure InsertColumn(const NewColumn: Column; const BeforeColumnName: WideString); dispid 120;
    procedure RecalcSpaceUsage; dispid 121;
    function EnumLastStatisticsUpdates(IndexName: OleVariant): QueryResults; dispid 122;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewName: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 123;
    procedure DoAlterWithNoCheck; dispid 124;
    procedure Refresh; dispid 125;
    function ImportData(const Bcp: BulkCopy): Integer; dispid 127;
    function ExportData(const Bcp: BulkCopy): Integer; dispid 128;
    procedure RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE; FillFactor: OleVariant); dispid 129;
    procedure CheckIdentityValue; dispid 130;
    function CheckTableDataOnly: WideString; dispid 131;
    property InAlter: WordBool readonly dispid 24;
    property FileGroup: WideString dispid 25;
    property TextFileGroup: WideString dispid 26;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); dispid 132;
    function GenerateSQL(const pDB: Database): WideString; dispid 133;
    function CheckTextAllocsFast: WideString; dispid 134;
    function CheckTextAllocsFull: WideString; dispid 135;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 136;
    property FullTextIndex: WordBool dispid 27;
    property UniqueIndexForFullText: WideString dispid 28;
    property FullTextCatalogName: WideString dispid 29;
    property FullTextIndexActive: WordBool dispid 30;
    property FullTextKeyColumn: Integer readonly dispid 31;
    function ListAvailableUniqueIndexesForFullText: NameList; dispid 137;
    function FullTextIndexScript: WideString; dispid 138;
    property HasClusteredIndex: WordBool readonly dispid 32;
    property HasIndex: WordBool readonly dispid 33;
    property FakeSystemTable: WordBool readonly dispid 34;
  end;

// *********************************************************************//
// Interface: _Table2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Table2 = interface(_Table)
    ['{10020416-E260-11CF-AE68-00AA004A34D5}']
    function CheckTableWithResult: QueryResults; safecall;
    function CheckTableDataOnlyWithResult: QueryResults; safecall;
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList; safecall;
    function Get_TableFullTextChangeTrackingOn: WordBool; safecall;
    procedure Set_TableFullTextChangeTrackingOn(pRetVal: WordBool); safecall;
    function Get_TableFullTextUpdateIndexOn: WordBool; safecall;
    procedure Set_TableFullTextUpdateIndexOn(pRetVal: WordBool); safecall;
    procedure FullTextUpdateIndex; safecall;
    procedure FullTextPopulation(Type_: SQLDMO_FULLTEXT_POPULATE_TYPE); safecall;
    function Get_FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS; safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function ListColumnPermissions: SQLObjectList; safecall;
    property TableFullTextChangeTrackingOn: WordBool read Get_TableFullTextChangeTrackingOn write Set_TableFullTextChangeTrackingOn;
    property TableFullTextUpdateIndexOn: WordBool read Get_TableFullTextUpdateIndexOn write Set_TableFullTextUpdateIndexOn;
    property FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS read Get_FullTextPopulateStatus;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _Table2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Table2Disp = dispinterface
    ['{10020416-E260-11CF-AE68-00AA004A34D5}']
    function CheckTableWithResult: QueryResults; dispid 139;
    function CheckTableDataOnlyWithResult: QueryResults; dispid 140;
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList; dispid 141;
    property TableFullTextChangeTrackingOn: WordBool dispid 35;
    property TableFullTextUpdateIndexOn: WordBool dispid 36;
    procedure FullTextUpdateIndex; dispid 144;
    procedure FullTextPopulation(Type_: SQLDMO_FULLTEXT_POPULATE_TYPE); dispid 145;
    property FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS readonly dispid 37;
    property QuotedIdentifierStatus: WordBool readonly dispid 38;
    property AnsiNullsStatus: WordBool readonly dispid 39;
    property IsDeleted: WordBool readonly dispid 40;
    function ListColumnPermissions: SQLObjectList; dispid 142;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Columns: Columns readonly dispid 0;
    property DataSpaceUsed: Integer readonly dispid 10;
    property IndexSpaceUsed: Integer readonly dispid 11;
    property Attributes: SQLDMO_TABLEATT_TYPE readonly dispid 12;
    property Keys: Keys readonly dispid 13;
    property Owner: WideString dispid 14;
    property ID: Integer readonly dispid 15;
    property CreateDate: WideString readonly dispid 16;
    property PrimaryKey: Key readonly dispid 17;
    property Indexes: Indexes readonly dispid 18;
    property Triggers: Triggers readonly dispid 19;
    property Checks: Checks readonly dispid 20;
    property ClusteredIndex: Index readonly dispid 21;
    property SystemObject: WordBool readonly dispid 22;
    property Rows: Integer readonly dispid 23;
    procedure BeginAlter; dispid 100;
    procedure DoAlter; dispid 101;
    procedure CancelAlter; dispid 102;
    procedure ReCompileReferences; dispid 103;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); dispid 104;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 105;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 106;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 107;
    function CheckTable: WideString; dispid 108;
    procedure TruncateData; dispid 111;
    procedure UpdateStatistics; dispid 112;
    procedure Remove; dispid 113;
    function EnumReferencedKeys(ReferencedTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; dispid 115;
    function EnumReferencedTables(IncludeAllCandidates: OleVariant): QueryResults; dispid 116;
    function EnumReferencingKeys(ReferencingTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; dispid 117;
    function EnumReferencingTables(IncludeAllCandidates: OleVariant): QueryResults; dispid 118;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 119;
    procedure InsertColumn(const NewColumn: Column; const BeforeColumnName: WideString); dispid 120;
    procedure RecalcSpaceUsage; dispid 121;
    function EnumLastStatisticsUpdates(IndexName: OleVariant): QueryResults; dispid 122;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewName: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 123;
    procedure DoAlterWithNoCheck; dispid 124;
    procedure Refresh; dispid 125;
    function ImportData(const Bcp: BulkCopy): Integer; dispid 127;
    function ExportData(const Bcp: BulkCopy): Integer; dispid 128;
    procedure RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE; FillFactor: OleVariant); dispid 129;
    procedure CheckIdentityValue; dispid 130;
    function CheckTableDataOnly: WideString; dispid 131;
    property InAlter: WordBool readonly dispid 24;
    property FileGroup: WideString dispid 25;
    property TextFileGroup: WideString dispid 26;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); dispid 132;
    function GenerateSQL(const pDB: Database): WideString; dispid 133;
    function CheckTextAllocsFast: WideString; dispid 134;
    function CheckTextAllocsFull: WideString; dispid 135;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 136;
    property FullTextIndex: WordBool dispid 27;
    property UniqueIndexForFullText: WideString dispid 28;
    property FullTextCatalogName: WideString dispid 29;
    property FullTextIndexActive: WordBool dispid 30;
    property FullTextKeyColumn: Integer readonly dispid 31;
    function ListAvailableUniqueIndexesForFullText: NameList; dispid 137;
    function FullTextIndexScript: WideString; dispid 138;
    property HasClusteredIndex: WordBool readonly dispid 32;
    property HasIndex: WordBool readonly dispid 33;
    property FakeSystemTable: WordBool readonly dispid 34;
  end;

// *********************************************************************//
// Interface: Columns
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Columns = interface(_IVSQLDMOStdObject)
    ['{10020503-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Column; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Column; safecall;
    procedure Add(const Object_: Column); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ColumnsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ColumnsDisp = dispinterface
    ['{10020503-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Column; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Column; dispid 6;
    procedure Add(const Object_: Column); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Column
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Column = interface(_IVSQLDMOStdObject)
    ['{10020506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_IdentityIncrement: Integer; safecall;
    procedure Set_IdentityIncrement(pRetVal: Integer); safecall;
    function Get_IdentitySeed: Integer; safecall;
    procedure Set_IdentitySeed(pRetVal: Integer); safecall;
    function Get_DRIDefault: DRIDefault; safecall;
    function Get_InPrimaryKey: WordBool; safecall;
    function Get_Datatype: WideString; safecall;
    procedure Set_Datatype(const pRetVal: WideString); safecall;
    function Get_PhysicalDatatype: WideString; safecall;
    function Get_Length: Integer; safecall;
    procedure Set_Length(pRetVal: Integer); safecall;
    function Get_Default: WideString; safecall;
    procedure Set_Default(const pRetVal: WideString); safecall;
    function Get_Rule: WideString; safecall;
    procedure Set_Rule(const pRetVal: WideString); safecall;
    function Get_AllowNulls: WordBool; safecall;
    procedure Set_AllowNulls(pRetVal: WordBool); safecall;
    function Get_ID: Integer; safecall;
    function Get_Identity: WordBool; safecall;
    procedure Set_Identity(pRetVal: WordBool); safecall;
    function Get_NumericPrecision: Integer; safecall;
    procedure Set_NumericPrecision(pRetVal: Integer); safecall;
    function Get_NumericScale: Integer; safecall;
    procedure Set_NumericScale(pRetVal: Integer); safecall;
    procedure Remove; safecall;
    function ListKeys: SQLObjectList; safecall;
    function Get_IsRowGuidCol: WordBool; safecall;
    procedure Set_IsRowGuidCol(pRetVal: WordBool); safecall;
    function Get_IsComputed: WordBool; safecall;
    procedure Set_IsComputed(pRetVal: WordBool); safecall;
    function Get_ComputedText: WideString; safecall;
    procedure Set_ComputedText(const pRetVal: WideString); safecall;
    function Get_NotForRepl: WordBool; safecall;
    procedure Set_NotForRepl(pRetVal: WordBool); safecall;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); safecall;
    function Get_FullTextIndex: WordBool; safecall;
    procedure Set_FullTextIndex(pRetVal: WordBool); safecall;
    function Get_AnsiPaddingStatus: WordBool; safecall;
    function Get_DefaultOwner: WideString; safecall;
    function Get_RuleOwner: WideString; safecall;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); safecall;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property IdentityIncrement: Integer read Get_IdentityIncrement write Set_IdentityIncrement;
    property IdentitySeed: Integer read Get_IdentitySeed write Set_IdentitySeed;
    property DRIDefault: DRIDefault read Get_DRIDefault;
    property InPrimaryKey: WordBool read Get_InPrimaryKey;
    property Datatype: WideString read Get_Datatype write Set_Datatype;
    property PhysicalDatatype: WideString read Get_PhysicalDatatype;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property ID: Integer read Get_ID;
    property Identity: WordBool read Get_Identity write Set_Identity;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
    property IsRowGuidCol: WordBool read Get_IsRowGuidCol write Set_IsRowGuidCol;
    property IsComputed: WordBool read Get_IsComputed write Set_IsComputed;
    property ComputedText: WideString read Get_ComputedText write Set_ComputedText;
    property NotForRepl: WordBool read Get_NotForRepl write Set_NotForRepl;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
    property AnsiPaddingStatus: WordBool read Get_AnsiPaddingStatus;
    property DefaultOwner: WideString read Get_DefaultOwner;
    property RuleOwner: WideString read Get_RuleOwner;
  end;

// *********************************************************************//
// DispIntf:  _ColumnDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ColumnDisp = dispinterface
    ['{10020506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property IdentityIncrement: Integer dispid 10;
    property IdentitySeed: Integer dispid 11;
    property DRIDefault: DRIDefault readonly dispid 12;
    property InPrimaryKey: WordBool readonly dispid 13;
    property Datatype: WideString dispid 14;
    property PhysicalDatatype: WideString readonly dispid 15;
    property Length: Integer dispid 16;
    property Default: WideString dispid 17;
    property Rule: WideString dispid 18;
    property AllowNulls: WordBool dispid 19;
    property ID: Integer readonly dispid 20;
    property Identity: WordBool dispid 21;
    property NumericPrecision: Integer dispid 22;
    property NumericScale: Integer dispid 23;
    procedure Remove; dispid 100;
    function ListKeys: SQLObjectList; dispid 101;
    property IsRowGuidCol: WordBool dispid 24;
    property IsComputed: WordBool dispid 25;
    property ComputedText: WideString dispid 26;
    property NotForRepl: WordBool dispid 27;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 102;
    property FullTextIndex: WordBool dispid 28;
    property AnsiPaddingStatus: WordBool readonly dispid 29;
    property DefaultOwner: WideString readonly dispid 30;
    property RuleOwner: WideString readonly dispid 31;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); dispid 103;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); dispid 104;
  end;

// *********************************************************************//
// Interface: _Column2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Column2 = interface(_Column)
    ['{10020516-E260-11CF-AE68-00AA004A34D5}']
    function Get_Collation: WideString; safecall;
    procedure Set_Collation(const pRetVal: WideString); safecall;
    procedure SetFullTextIndexWithOptions(Index: WordBool; LanguageID: Integer; 
                                          const ColumnType: WideString); safecall;
    function Get_FullTextImageColumnType: WideString; safecall;
    function Get_FullTextColumnLanguageID: Integer; safecall;
    procedure AlterDataType(const Datatype: WideString; Length: Integer; Precision: Integer; 
                            Scale: Integer); safecall;
    property Collation: WideString read Get_Collation write Set_Collation;
    property FullTextImageColumnType: WideString read Get_FullTextImageColumnType;
    property FullTextColumnLanguageID: Integer read Get_FullTextColumnLanguageID;
  end;

// *********************************************************************//
// DispIntf:  _Column2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Column2Disp = dispinterface
    ['{10020516-E260-11CF-AE68-00AA004A34D5}']
    property Collation: WideString dispid 32;
    procedure SetFullTextIndexWithOptions(Index: WordBool; LanguageID: Integer; 
                                          const ColumnType: WideString); dispid 105;
    property FullTextImageColumnType: WideString readonly dispid 33;
    property FullTextColumnLanguageID: Integer readonly dispid 34;
    procedure AlterDataType(const Datatype: WideString; Length: Integer; Precision: Integer; 
                            Scale: Integer); dispid 106;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property IdentityIncrement: Integer dispid 10;
    property IdentitySeed: Integer dispid 11;
    property DRIDefault: DRIDefault readonly dispid 12;
    property InPrimaryKey: WordBool readonly dispid 13;
    property Datatype: WideString dispid 14;
    property PhysicalDatatype: WideString readonly dispid 15;
    property Length: Integer dispid 16;
    property Default: WideString dispid 17;
    property Rule: WideString dispid 18;
    property AllowNulls: WordBool dispid 19;
    property ID: Integer readonly dispid 20;
    property Identity: WordBool dispid 21;
    property NumericPrecision: Integer dispid 22;
    property NumericScale: Integer dispid 23;
    procedure Remove; dispid 100;
    function ListKeys: SQLObjectList; dispid 101;
    property IsRowGuidCol: WordBool dispid 24;
    property IsComputed: WordBool dispid 25;
    property ComputedText: WideString dispid 26;
    property NotForRepl: WordBool dispid 27;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 102;
    property FullTextIndex: WordBool dispid 28;
    property AnsiPaddingStatus: WordBool readonly dispid 29;
    property DefaultOwner: WideString readonly dispid 30;
    property RuleOwner: WideString readonly dispid 31;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); dispid 103;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); dispid 104;
  end;

// *********************************************************************//
// Interface: DRIDefault
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DRIDefault = interface(_IVSQLDMOStdObject)
    ['{10022B06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  DRIDefaultDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DRIDefaultDisp = dispinterface
    ['{10022B06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Text: WideString dispid 10;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
  end;

// *********************************************************************//
// Interface: SQLObjectList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SQLObjectList = interface(_IVSQLDMOStdObject)
    ['{10022806-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): _IVSQLDMOStdObject; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  SQLObjectListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SQLObjectListDisp = dispinterface
    ['{10022806-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): _IVSQLDMOStdObject; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Refresh; dispid 102;
  end;

// *********************************************************************//
// Interface: Keys
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020F03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Keys = interface(_IVSQLDMOStdObject)
    ['{10020F03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): Key; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: Key); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  KeysDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020F03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  KeysDisp = dispinterface
    ['{10020F03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): Key; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: Key); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Key
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Key = interface(_IVSQLDMOStdObject)
    ['{10020F06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Clustered: WordBool; safecall;
    procedure Set_Clustered(pRetVal: WordBool); safecall;
    function Get_FillFactor: Integer; safecall;
    procedure Set_FillFactor(pRetVal: Integer); safecall;
    function Get_KeyColumns: Names; safecall;
    function Get_ReferencedTable: WideString; safecall;
    procedure Set_ReferencedTable(const pRetVal: WideString); safecall;
    function Get_ReferencedColumns: Names; safecall;
    function Get_type_: SQLDMO_KEY_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_KEY_TYPE); safecall;
    function Get_ReferencedKey: WideString; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    procedure RebuildIndex; safecall;
    function Get_ExcludeReplication: WordBool; safecall;
    procedure Set_ExcludeReplication(pRetVal: WordBool); safecall;
    function Get_FileGroup: WideString; safecall;
    procedure Set_FileGroup(const pRetVal: WideString); safecall;
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Clustered: WordBool read Get_Clustered write Set_Clustered;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property KeyColumns: Names read Get_KeyColumns;
    property ReferencedTable: WideString read Get_ReferencedTable write Set_ReferencedTable;
    property ReferencedColumns: Names read Get_ReferencedColumns;
    property type_: SQLDMO_KEY_TYPE read Get_type_ write Set_type_;
    property ReferencedKey: WideString read Get_ReferencedKey;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property Checked: WordBool read Get_Checked write Set_Checked;
  end;

// *********************************************************************//
// DispIntf:  _KeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _KeyDisp = dispinterface
    ['{10020F06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Clustered: WordBool dispid 10;
    property FillFactor: Integer dispid 11;
    property KeyColumns: Names readonly dispid 12;
    property ReferencedTable: WideString dispid 13;
    property ReferencedColumns: Names readonly dispid 14;
    property type_: SQLDMO_KEY_TYPE dispid 15;
    property ReferencedKey: WideString readonly dispid 16;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
    procedure RebuildIndex; dispid 102;
    property ExcludeReplication: WordBool dispid 17;
    property FileGroup: WideString dispid 18;
    property Checked: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: Names
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Names = interface(_IVSQLDMOStdObject)
    ['{10021D03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): WideString; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const NewName: WideString); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh; safecall;
    procedure Insert(const NewName: WideString; InsertBeforeItem: OleVariant); safecall;
    procedure Replace(const NewName: WideString; ReplaceItem: OleVariant); safecall;
    function FindName(const Name: WideString): Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  NamesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  NamesDisp = dispinterface
    ['{10021D03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): WideString; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const NewName: WideString); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh; dispid 102;
    procedure Insert(const NewName: WideString; InsertBeforeItem: OleVariant); dispid 103;
    procedure Replace(const NewName: WideString; ReplaceItem: OleVariant); dispid 104;
    function FindName(const Name: WideString): Integer; dispid 105;
  end;

// *********************************************************************//
// Interface: Indexes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Indexes = interface(_IVSQLDMOStdObject)
    ['{10020E03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): Index; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Index; safecall;
    procedure Add(const Object_: Index); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IndexesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  IndexesDisp = dispinterface
    ['{10020E03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): Index; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Index; dispid 6;
    procedure Add(const Object_: Index); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Index
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Index = interface(_IVSQLDMOStdObject)
    ['{10020E06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    procedure Set_IndexedColumns(const Param1: WideString); safecall;
    function Get_SpaceUsed: Integer; safecall;
    function Get_type_: SQLDMO_INDEX_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_INDEX_TYPE); safecall;
    function Get_ID: Integer; safecall;
    function Get_FillFactor: Integer; safecall;
    procedure Set_FillFactor(pRetVal: Integer); safecall;
    procedure UpdateStatistics; safecall;
    function ListIndexedColumns: SQLObjectList; safecall;
    procedure Remove; safecall;
    procedure Rebuild; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    procedure RecalcSpaceUsage; safecall;
    function EnumStatistics: QueryResults; safecall;
    function GenerateCreationSQL(const TargetTable: Table): WideString; safecall;
    function CheckIndex: WideString; safecall;
    function Get_FileGroup: WideString; safecall;
    procedure Set_FileGroup(const pRetVal: WideString); safecall;
    function GenerateSQL(const pTable: Table): WideString; safecall;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); safecall;
    function Get_IsFullTextKey: WordBool; safecall;
    function Get_NoRecompute: WordBool; safecall;
    procedure Set_NoRecompute(pRetVal: WordBool); safecall;
    function Get_StatisticsIndex: WordBool; safecall;
    procedure Set_StatisticsIndex(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property IndexedColumns: WideString write Set_IndexedColumns;
    property SpaceUsed: Integer read Get_SpaceUsed;
    property type_: SQLDMO_INDEX_TYPE read Get_type_ write Set_type_;
    property ID: Integer read Get_ID;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property IsFullTextKey: WordBool read Get_IsFullTextKey;
    property NoRecompute: WordBool read Get_NoRecompute write Set_NoRecompute;
    property StatisticsIndex: WordBool read Get_StatisticsIndex write Set_StatisticsIndex;
  end;

// *********************************************************************//
// DispIntf:  _IndexDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _IndexDisp = dispinterface
    ['{10020E06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property IndexedColumns: WideString writeonly dispid 11;
    property SpaceUsed: Integer readonly dispid 12;
    property type_: SQLDMO_INDEX_TYPE dispid 14;
    property ID: Integer readonly dispid 15;
    property FillFactor: Integer dispid 16;
    procedure UpdateStatistics; dispid 100;
    function ListIndexedColumns: SQLObjectList; dispid 102;
    procedure Remove; dispid 103;
    procedure Rebuild; dispid 104;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 105;
    procedure RecalcSpaceUsage; dispid 106;
    function EnumStatistics: QueryResults; dispid 107;
    function GenerateCreationSQL(const TargetTable: Table): WideString; dispid 108;
    function CheckIndex: WideString; dispid 109;
    property FileGroup: WideString dispid 17;
    function GenerateSQL(const pTable: Table): WideString; dispid 110;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 111;
    property IsFullTextKey: WordBool readonly dispid 18;
    property NoRecompute: WordBool dispid 19;
    property StatisticsIndex: WordBool dispid 20;
  end;

// *********************************************************************//
// Interface: _Index2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Index2 = interface(_Index)
    ['{10020E16-E260-11CF-AE68-00AA004A34D5}']
    function CheckIndexWithResult: QueryResults; safecall;
    procedure SetIndexedColumnDESC(const ColumnName: WideString; Descending: WordBool); safecall;
    function GetIndexedColumnDESC(const ColumnName: WideString): WordBool; safecall;
    function Get_IsOnComputed: WordBool; safecall;
    function GenerateCreationSQLOnView(const TargetView: View): WideString; safecall;
    function GenerateSQLOnView(const pView: View): WideString; safecall;
    function Get_IndexOnTable: WordBool; safecall;
    property IsOnComputed: WordBool read Get_IsOnComputed;
    property IndexOnTable: WordBool read Get_IndexOnTable;
  end;

// *********************************************************************//
// DispIntf:  _Index2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Index2Disp = dispinterface
    ['{10020E16-E260-11CF-AE68-00AA004A34D5}']
    function CheckIndexWithResult: QueryResults; dispid 112;
    procedure SetIndexedColumnDESC(const ColumnName: WideString; Descending: WordBool); dispid 113;
    function GetIndexedColumnDESC(const ColumnName: WideString): WordBool; dispid 114;
    property IsOnComputed: WordBool readonly dispid 21;
    function GenerateCreationSQLOnView(const TargetView: View): WideString; dispid 115;
    function GenerateSQLOnView(const pView: View): WideString; dispid 116;
    property IndexOnTable: WordBool readonly dispid 22;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property IndexedColumns: WideString writeonly dispid 11;
    property SpaceUsed: Integer readonly dispid 12;
    property type_: SQLDMO_INDEX_TYPE dispid 14;
    property ID: Integer readonly dispid 15;
    property FillFactor: Integer dispid 16;
    procedure UpdateStatistics; dispid 100;
    function ListIndexedColumns: SQLObjectList; dispid 102;
    procedure Remove; dispid 103;
    procedure Rebuild; dispid 104;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 105;
    procedure RecalcSpaceUsage; dispid 106;
    function EnumStatistics: QueryResults; dispid 107;
    function GenerateCreationSQL(const TargetTable: Table): WideString; dispid 108;
    function CheckIndex: WideString; dispid 109;
    property FileGroup: WideString dispid 17;
    function GenerateSQL(const pTable: Table): WideString; dispid 110;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); dispid 111;
    property IsFullTextKey: WordBool readonly dispid 18;
    property NoRecompute: WordBool dispid 19;
    property StatisticsIndex: WordBool dispid 20;
  end;

// *********************************************************************//
// Interface: QueryResults
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  QueryResults = interface(_IVSQLDMOStdObject)
    ['{10022506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ResultSets: Integer; safecall;
    function Get_CurrentResultSet: Integer; safecall;
    procedure Set_CurrentResultSet(pRetVal: Integer); safecall;
    function Get_Rows: Integer; safecall;
    function Get_Columns: Integer; safecall;
    function Get_ColumnName(Column: Integer): WideString; safecall;
    function Get_ColumnType(Column: Integer): SQLDMO_QUERY_DATATYPE; safecall;
    function Get_ColumnMaxLength(Column: Integer): Integer; safecall;
    function GetColumnLong(Row: Integer; Column: Integer): Integer; safecall;
    function GetColumnBool(Row: Integer; Column: Integer): WordBool; safecall;
    function GetColumnFloat(Row: Integer; Column: Integer): Single; safecall;
    function GetColumnDouble(Row: Integer; Column: Integer): Double; safecall;
    function GetColumnString(Row: Integer; Column: Integer): WideString; safecall;
    function GetRangeString(Top: OleVariant; Left: OleVariant; Bottom: OleVariant; 
                            Right: OleVariant; RowDelim: OleVariant; ColDelim: OleVariant; 
                            ColWidths: OleVariant): WideString; safecall;
    procedure Refresh; safecall;
    function GetColumnDate(Row: Integer; Column: Integer): TDateTime; safecall;
    function GetColumnBinary(Row: Integer; Column: Integer): PSafeArray; safecall;
    function GetColumnBinaryLength(Row: Integer; Column: Integer): Integer; safecall;
    function GetColumnGUID(Row: Integer; Column: Integer): PSafeArray; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ResultSets: Integer read Get_ResultSets;
    property CurrentResultSet: Integer read Get_CurrentResultSet write Set_CurrentResultSet;
    property Rows: Integer read Get_Rows;
    property Columns: Integer read Get_Columns;
    property ColumnName[Column: Integer]: WideString read Get_ColumnName;
    property ColumnType[Column: Integer]: SQLDMO_QUERY_DATATYPE read Get_ColumnType;
    property ColumnMaxLength[Column: Integer]: Integer read Get_ColumnMaxLength;
  end;

// *********************************************************************//
// DispIntf:  QueryResultsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  QueryResultsDisp = dispinterface
    ['{10022506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property ResultSets: Integer readonly dispid 10;
    property CurrentResultSet: Integer dispid 11;
    property Rows: Integer readonly dispid 12;
    property Columns: Integer readonly dispid 13;
    property ColumnName[Column: Integer]: WideString readonly dispid 14;
    property ColumnType[Column: Integer]: SQLDMO_QUERY_DATATYPE readonly dispid 15;
    property ColumnMaxLength[Column: Integer]: Integer readonly dispid 16;
    function GetColumnLong(Row: Integer; Column: Integer): Integer; dispid 100;
    function GetColumnBool(Row: Integer; Column: Integer): WordBool; dispid 101;
    function GetColumnFloat(Row: Integer; Column: Integer): Single; dispid 102;
    function GetColumnDouble(Row: Integer; Column: Integer): Double; dispid 103;
    function GetColumnString(Row: Integer; Column: Integer): WideString; dispid 104;
    function GetRangeString(Top: OleVariant; Left: OleVariant; Bottom: OleVariant; 
                            Right: OleVariant; RowDelim: OleVariant; ColDelim: OleVariant; 
                            ColWidths: OleVariant): WideString; dispid 105;
    procedure Refresh; dispid 106;
    function GetColumnDate(Row: Integer; Column: Integer): TDateTime; dispid 107;
    function GetColumnBinary(Row: Integer; Column: Integer): {??PSafeArray}OleVariant; dispid 108;
    function GetColumnBinaryLength(Row: Integer; Column: Integer): Integer; dispid 109;
    function GetColumnGUID(Row: Integer; Column: Integer): {??PSafeArray}OleVariant; dispid 110;
  end;

// *********************************************************************//
// Interface: _View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _View = interface(_IVSQLDMOStdObject)
    ['{10020706-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function ListColumns: SQLObjectList; safecall;
    function ExportData(const Bcp: BulkCopy): Integer; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property SystemObject: WordBool read Get_SystemObject;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
  end;

// *********************************************************************//
// DispIntf:  _ViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ViewDisp = dispinterface
    ['{10020706-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    property SystemObject: WordBool readonly dispid 22;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 101;
    procedure Remove; dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 104;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 105;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 106;
    function ListColumns: SQLObjectList; dispid 108;
    function ExportData(const Bcp: BulkCopy): Integer; dispid 107;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); dispid 109;
    procedure Alter(const NewText: WideString); dispid 110;
    property QuotedIdentifierStatus: WordBool readonly dispid 23;
    property AnsiNullsStatus: WordBool readonly dispid 24;
  end;

// *********************************************************************//
// Interface: _View2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _View2 = interface(_IVSQLDMOStdObject)
    ['{10020716-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function ListColumns: SQLObjectList; safecall;
    function ExportData(const Bcp: BulkCopy): Integer; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool); safecall;
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList; safecall;
    function Get_Indexes: Indexes; safecall;
    function Get_ClusteredIndex: Index; safecall;
    function Get_IsSchemaBound: WordBool; safecall;
    function Get_Triggers: Triggers; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function ListColumnPermissions: SQLObjectList; safecall;
    function Get_Encrypted: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property SystemObject: WordBool read Get_SystemObject;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
    property Indexes: Indexes read Get_Indexes;
    property ClusteredIndex: Index read Get_ClusteredIndex;
    property IsSchemaBound: WordBool read Get_IsSchemaBound;
    property Triggers: Triggers read Get_Triggers;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
  end;

// *********************************************************************//
// DispIntf:  _View2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _View2Disp = dispinterface
    ['{10020716-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    property SystemObject: WordBool readonly dispid 22;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 101;
    procedure Remove; dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 104;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 105;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 106;
    function ListColumns: SQLObjectList; dispid 108;
    function ExportData(const Bcp: BulkCopy): Integer; dispid 107;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); dispid 109;
    procedure Alter(const NewText: WideString); dispid 110;
    property QuotedIdentifierStatus: WordBool readonly dispid 23;
    property AnsiNullsStatus: WordBool dispid 24;
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList; dispid 111;
    property Indexes: Indexes readonly dispid 25;
    property ClusteredIndex: Index readonly dispid 26;
    property IsSchemaBound: WordBool readonly dispid 27;
    property Triggers: Triggers readonly dispid 28;
    property IsDeleted: WordBool readonly dispid 30;
    function ListColumnPermissions: SQLObjectList; dispid 112;
    property Encrypted: WordBool readonly dispid 31;
  end;

// *********************************************************************//
// Interface: _BulkCopy
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BulkCopy = interface(_IVSQLDMOStdObject)
    ['{10021C06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_DataFilePath: WideString; safecall;
    procedure Set_DataFilePath(const pRetVal: WideString); safecall;
    function Get_FormatFilePath: WideString; safecall;
    procedure Set_FormatFilePath(const pRetVal: WideString); safecall;
    function Get_ErrorFilePath: WideString; safecall;
    procedure Set_ErrorFilePath(const pRetVal: WideString); safecall;
    function Get_LogFilePath: WideString; safecall;
    procedure Set_LogFilePath(const pRetVal: WideString); safecall;
    function Get_ColumnDelimiter: WideString; safecall;
    procedure Set_ColumnDelimiter(const pRetVal: WideString); safecall;
    function Get_RowDelimiter: WideString; safecall;
    procedure Set_RowDelimiter(const pRetVal: WideString); safecall;
    function Get_DataFileType: SQLDMO_DATAFILE_TYPE; safecall;
    procedure Set_DataFileType(pRetVal: SQLDMO_DATAFILE_TYPE); safecall;
    function Get_FirstRow: Integer; safecall;
    procedure Set_FirstRow(pRetVal: Integer); safecall;
    function Get_LastRow: Integer; safecall;
    procedure Set_LastRow(pRetVal: Integer); safecall;
    function Get_MaximumErrorsBeforeAbort: Integer; safecall;
    procedure Set_MaximumErrorsBeforeAbort(pRetVal: Integer); safecall;
    function Get_IncludeIdentityValues: WordBool; safecall;
    procedure Set_IncludeIdentityValues(pRetVal: WordBool); safecall;
    function Get_ImportRowsPerBatch: Integer; safecall;
    procedure Set_ImportRowsPerBatch(pRetVal: Integer); safecall;
    function Get_UseBulkCopyOption: WordBool; safecall;
    procedure Set_UseBulkCopyOption(pRetVal: WordBool); safecall;
    function Get_SuspendIndexing: WordBool; safecall;
    procedure Set_SuspendIndexing(pRetVal: WordBool); safecall;
    function Get_TruncateLog: WordBool; safecall;
    procedure Set_TruncateLog(pRetVal: WordBool); safecall;
    function Get_UseExistingConnection: WordBool; safecall;
    procedure Set_UseExistingConnection(pRetVal: WordBool); safecall;
    procedure Abort; safecall;
    function Get_Use6xCompatible: WordBool; safecall;
    procedure Set_Use6xCompatible(pRetVal: WordBool); safecall;
    function Get_CodePage: Integer; safecall;
    procedure SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE; UserCodePage: OleVariant); safecall;
    function Get_UseServerSideBCP: WordBool; safecall;
    procedure Set_UseServerSideBCP(pRetVal: WordBool); safecall;
    function Get_ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE; safecall;
    procedure Set_ServerBCPDataFileType(pRetVal: SQLDMO_SERVERBCP_DATAFILE_TYPE); safecall;
    function Get_ServerBCPKeepIdentity: WordBool; safecall;
    procedure Set_ServerBCPKeepIdentity(pRetVal: WordBool); safecall;
    function Get_ServerBCPKeepNulls: WordBool; safecall;
    procedure Set_ServerBCPKeepNulls(pRetVal: WordBool); safecall;
    function Get_ExportWideChar: WordBool; safecall;
    procedure Set_ExportWideChar(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DataFilePath: WideString read Get_DataFilePath write Set_DataFilePath;
    property FormatFilePath: WideString read Get_FormatFilePath write Set_FormatFilePath;
    property ErrorFilePath: WideString read Get_ErrorFilePath write Set_ErrorFilePath;
    property LogFilePath: WideString read Get_LogFilePath write Set_LogFilePath;
    property ColumnDelimiter: WideString read Get_ColumnDelimiter write Set_ColumnDelimiter;
    property RowDelimiter: WideString read Get_RowDelimiter write Set_RowDelimiter;
    property DataFileType: SQLDMO_DATAFILE_TYPE read Get_DataFileType write Set_DataFileType;
    property FirstRow: Integer read Get_FirstRow write Set_FirstRow;
    property LastRow: Integer read Get_LastRow write Set_LastRow;
    property MaximumErrorsBeforeAbort: Integer read Get_MaximumErrorsBeforeAbort write Set_MaximumErrorsBeforeAbort;
    property IncludeIdentityValues: WordBool read Get_IncludeIdentityValues write Set_IncludeIdentityValues;
    property ImportRowsPerBatch: Integer read Get_ImportRowsPerBatch write Set_ImportRowsPerBatch;
    property UseBulkCopyOption: WordBool read Get_UseBulkCopyOption write Set_UseBulkCopyOption;
    property SuspendIndexing: WordBool read Get_SuspendIndexing write Set_SuspendIndexing;
    property TruncateLog: WordBool read Get_TruncateLog write Set_TruncateLog;
    property UseExistingConnection: WordBool read Get_UseExistingConnection write Set_UseExistingConnection;
    property Use6xCompatible: WordBool read Get_Use6xCompatible write Set_Use6xCompatible;
    property CodePage: Integer read Get_CodePage;
    property UseServerSideBCP: WordBool read Get_UseServerSideBCP write Set_UseServerSideBCP;
    property ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE read Get_ServerBCPDataFileType write Set_ServerBCPDataFileType;
    property ServerBCPKeepIdentity: WordBool read Get_ServerBCPKeepIdentity write Set_ServerBCPKeepIdentity;
    property ServerBCPKeepNulls: WordBool read Get_ServerBCPKeepNulls write Set_ServerBCPKeepNulls;
    property ExportWideChar: WordBool read Get_ExportWideChar write Set_ExportWideChar;
  end;

// *********************************************************************//
// DispIntf:  _BulkCopyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BulkCopyDisp = dispinterface
    ['{10021C06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DataFilePath: WideString dispid 10;
    property FormatFilePath: WideString dispid 11;
    property ErrorFilePath: WideString dispid 12;
    property LogFilePath: WideString dispid 13;
    property ColumnDelimiter: WideString dispid 14;
    property RowDelimiter: WideString dispid 15;
    property DataFileType: SQLDMO_DATAFILE_TYPE dispid 16;
    property FirstRow: Integer dispid 17;
    property LastRow: Integer dispid 18;
    property MaximumErrorsBeforeAbort: Integer dispid 19;
    property IncludeIdentityValues: WordBool dispid 20;
    property ImportRowsPerBatch: Integer dispid 21;
    property UseBulkCopyOption: WordBool dispid 22;
    property SuspendIndexing: WordBool dispid 23;
    property TruncateLog: WordBool dispid 24;
    property UseExistingConnection: WordBool dispid 25;
    procedure Abort; dispid 100;
    property Use6xCompatible: WordBool dispid 26;
    property CodePage: Integer readonly dispid 27;
    procedure SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE; UserCodePage: OleVariant); dispid 101;
    property UseServerSideBCP: WordBool dispid 28;
    property ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE dispid 29;
    property ServerBCPKeepIdentity: WordBool dispid 30;
    property ServerBCPKeepNulls: WordBool dispid 31;
    property ExportWideChar: WordBool dispid 32;
  end;

// *********************************************************************//
// Interface: _BulkCopy2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BulkCopy2 = interface(_BulkCopy)
    ['{10021C16-E260-11CF-AE68-00AA004A34D5}']
    function Get_TableLock: WordBool; safecall;
    procedure Set_TableLock(pRetVal: WordBool); safecall;
    property TableLock: WordBool read Get_TableLock write Set_TableLock;
  end;

// *********************************************************************//
// DispIntf:  _BulkCopy2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BulkCopy2Disp = dispinterface
    ['{10021C16-E260-11CF-AE68-00AA004A34D5}']
    property TableLock: WordBool dispid 33;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DataFilePath: WideString dispid 10;
    property FormatFilePath: WideString dispid 11;
    property ErrorFilePath: WideString dispid 12;
    property LogFilePath: WideString dispid 13;
    property ColumnDelimiter: WideString dispid 14;
    property RowDelimiter: WideString dispid 15;
    property DataFileType: SQLDMO_DATAFILE_TYPE dispid 16;
    property FirstRow: Integer dispid 17;
    property LastRow: Integer dispid 18;
    property MaximumErrorsBeforeAbort: Integer dispid 19;
    property IncludeIdentityValues: WordBool dispid 20;
    property ImportRowsPerBatch: Integer dispid 21;
    property UseBulkCopyOption: WordBool dispid 22;
    property SuspendIndexing: WordBool dispid 23;
    property TruncateLog: WordBool dispid 24;
    property UseExistingConnection: WordBool dispid 25;
    procedure Abort; dispid 100;
    property Use6xCompatible: WordBool dispid 26;
    property CodePage: Integer readonly dispid 27;
    procedure SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE; UserCodePage: OleVariant); dispid 101;
    property UseServerSideBCP: WordBool dispid 28;
    property ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE dispid 29;
    property ServerBCPKeepIdentity: WordBool dispid 30;
    property ServerBCPKeepNulls: WordBool dispid 31;
    property ExportWideChar: WordBool dispid 32;
  end;

// *********************************************************************//
// Interface: BulkCopySink
// Flags:     (256) OleAutomation
// GUID:      {10021C09-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  BulkCopySink = interface(IUnknown)
    ['{10021C09-E260-11CF-AE68-00AA004A34D5}']
    function RowsCopied(const Message: WideString; Rows: Integer): HResult; stdcall;
    function BatchImported(const Message: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Triggers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021003-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Triggers = interface(_IVSQLDMOStdObject)
    ['{10021003-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): Trigger; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Trigger; safecall;
    procedure Add(const Object_: Trigger); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TriggersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021003-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TriggersDisp = dispinterface
    ['{10021003-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): Trigger; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Trigger; dispid 6;
    procedure Add(const Object_: Trigger); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Trigger
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Trigger = interface(_IVSQLDMOStdObject)
    ['{10021006-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_type_: SQLDMO_TRIGGER_TYPE; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property type_: SQLDMO_TRIGGER_TYPE read Get_type_;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
  end;

// *********************************************************************//
// DispIntf:  _TriggerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TriggerDisp = dispinterface
    ['{10021006-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    property type_: SQLDMO_TRIGGER_TYPE readonly dispid 18;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 102;
    property Enabled: WordBool dispid 19;
    procedure Alter(const NewText: WideString); dispid 103;
    property QuotedIdentifierStatus: WordBool readonly dispid 20;
    property AnsiNullsStatus: WordBool readonly dispid 21;
  end;

// *********************************************************************//
// Interface: _Trigger2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021016-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Trigger2 = interface(_IVSQLDMOStdObject)
    ['{10021016-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_type_: SQLDMO_TRIGGER_TYPE; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool); safecall;
    function Get_InsteadOfTrigger: WordBool; safecall;
    function Get_AfterTrigger: WordBool; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_Encrypted: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property type_: SQLDMO_TRIGGER_TYPE read Get_type_;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
    property InsteadOfTrigger: WordBool read Get_InsteadOfTrigger;
    property AfterTrigger: WordBool read Get_AfterTrigger;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
  end;

// *********************************************************************//
// DispIntf:  _Trigger2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021016-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Trigger2Disp = dispinterface
    ['{10021016-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    property type_: SQLDMO_TRIGGER_TYPE readonly dispid 18;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 102;
    property Enabled: WordBool dispid 19;
    procedure Alter(const NewText: WideString); dispid 103;
    property QuotedIdentifierStatus: WordBool readonly dispid 20;
    property AnsiNullsStatus: WordBool dispid 21;
    property InsteadOfTrigger: WordBool readonly dispid 22;
    property AfterTrigger: WordBool readonly dispid 23;
    property IsDeleted: WordBool readonly dispid 25;
    property Encrypted: WordBool readonly dispid 26;
  end;

// *********************************************************************//
// Interface: Checks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Checks = interface(_IVSQLDMOStdObject)
    ['{10021703-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): Check; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: Check); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ChecksDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ChecksDisp = dispinterface
    ['{10021703-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): Check; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: Check); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Check
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Check = interface(_IVSQLDMOStdObject)
    ['{10021706-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_ExcludeReplication: WordBool; safecall;
    procedure Set_ExcludeReplication(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Text: WideString read Get_Text write Set_Text;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property Checked: WordBool read Get_Checked write Set_Checked;
  end;

// *********************************************************************//
// DispIntf:  _CheckDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _CheckDisp = dispinterface
    ['{10021706-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Text: WideString dispid 10;
    property ExcludeReplication: WordBool dispid 11;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
    property Checked: WordBool dispid 12;
  end;

// *********************************************************************//
// Interface: NameList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  NameList = interface(_IVSQLDMOStdObject)
    ['{10022406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): WideString; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Refresh; safecall;
    function FindName(const Name: WideString): Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  NameListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  NameListDisp = dispinterface
    ['{10022406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): WideString; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Refresh; dispid 102;
    function FindName(const Name: WideString): Integer; dispid 105;
  end;

// *********************************************************************//
// Interface: Views
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Views = interface(_IVSQLDMOStdObject)
    ['{10020703-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): View; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): View; safecall;
    procedure Add(const Object_: View); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ViewsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ViewsDisp = dispinterface
    ['{10020703-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): View; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): View; dispid 6;
    procedure Add(const Object_: View); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: StoredProcedures
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  StoredProcedures = interface(_IVSQLDMOStdObject)
    ['{10020D03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): StoredProcedure; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): StoredProcedure; safecall;
    procedure Add(const Object_: StoredProcedure); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  StoredProceduresDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  StoredProceduresDisp = dispinterface
    ['{10020D03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): StoredProcedure; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): StoredProcedure; dispid 6;
    procedure Add(const Object_: StoredProcedure); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _StoredProcedure
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _StoredProcedure = interface(_IVSQLDMOStdObject)
    ['{10020D06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_type_: SQLDMO_PROCEDURE_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE); safecall;
    function Get_Startup: WordBool; safecall;
    procedure Set_Startup(pRetVal: WordBool); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function EnumParameters: QueryResults; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
  end;

// *********************************************************************//
// DispIntf:  _StoredProcedureDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _StoredProcedureDisp = dispinterface
    ['{10020D06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 11;
    property type_: SQLDMO_PROCEDURE_TYPE dispid 12;
    property Startup: WordBool dispid 13;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 101;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 102;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 103;
    function EnumParameters: QueryResults; dispid 104;
    procedure Remove; dispid 105;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 106;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 107;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); dispid 108;
    procedure Alter(const NewText: WideString); dispid 109;
    property QuotedIdentifierStatus: WordBool readonly dispid 19;
    property AnsiNullsStatus: WordBool readonly dispid 20;
  end;

// *********************************************************************//
// Interface: _StoredProcedure2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _StoredProcedure2 = interface(_IVSQLDMOStdObject)
    ['{10020D16-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_type_: SQLDMO_PROCEDURE_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE); safecall;
    function Get_Startup: WordBool; safecall;
    procedure Set_Startup(pRetVal: WordBool); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function EnumParameters: QueryResults; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool); safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_Encrypted: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
  end;

// *********************************************************************//
// DispIntf:  _StoredProcedure2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020D16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _StoredProcedure2Disp = dispinterface
    ['{10020D16-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 11;
    property type_: SQLDMO_PROCEDURE_TYPE dispid 12;
    property Startup: WordBool dispid 13;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 101;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 102;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 103;
    function EnumParameters: QueryResults; dispid 104;
    procedure Remove; dispid 105;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 106;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 107;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); dispid 108;
    procedure Alter(const NewText: WideString); dispid 109;
    property QuotedIdentifierStatus: WordBool readonly dispid 19;
    property AnsiNullsStatus: WordBool dispid 20;
    property IsDeleted: WordBool readonly dispid 22;
    property Encrypted: WordBool readonly dispid 23;
  end;

// *********************************************************************//
// Interface: Defaults
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Defaults = interface(_IVSQLDMOStdObject)
    ['{10020903-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): Default; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Default; safecall;
    procedure Add(const Object_: Default); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DefaultsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DefaultsDisp = dispinterface
    ['{10020903-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): Default; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Default; dispid 6;
    procedure Add(const Object_: Default); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Default
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Default = interface(_IVSQLDMOStdObject)
    ['{10020906-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); safecall;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); safecall;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); safecall;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); safecall;
    function ListBoundColumns: SQLObjectList; safecall;
    function ListBoundDatatypes: SQLObjectList; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  _DefaultDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DefaultDisp = dispinterface
    ['{10020906-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); dispid 100;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 101;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); dispid 102;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 103;
    function ListBoundColumns: SQLObjectList; dispid 106;
    function ListBoundDatatypes: SQLObjectList; dispid 107;
    procedure Remove; dispid 108;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 109;
  end;

// *********************************************************************//
// Interface: _Default2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020916-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Default2 = interface(_Default)
    ['{10020916-E260-11CF-AE68-00AA004A34D5}']
    function Get_IsDeleted: WordBool; safecall;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _Default2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020916-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Default2Disp = dispinterface
    ['{10020916-E260-11CF-AE68-00AA004A34D5}']
    property IsDeleted: WordBool readonly dispid 18;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); dispid 100;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 101;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); dispid 102;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 103;
    function ListBoundColumns: SQLObjectList; dispid 106;
    function ListBoundDatatypes: SQLObjectList; dispid 107;
    procedure Remove; dispid 108;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 109;
  end;

// *********************************************************************//
// Interface: Rules
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Rules = interface(_IVSQLDMOStdObject)
    ['{10020A03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): Rule; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Rule; safecall;
    procedure Add(const Object_: Rule); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  RulesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RulesDisp = dispinterface
    ['{10020A03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): Rule; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Rule; dispid 6;
    procedure Add(const Object_: Rule); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Rule
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Rule = interface(_IVSQLDMOStdObject)
    ['{10020A06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); safecall;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); safecall;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); safecall;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); safecall;
    function ListBoundColumns: SQLObjectList; safecall;
    function ListBoundDatatypes: SQLObjectList; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  _RuleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RuleDisp = dispinterface
    ['{10020A06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); dispid 100;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 101;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); dispid 102;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 103;
    function ListBoundColumns: SQLObjectList; dispid 106;
    function ListBoundDatatypes: SQLObjectList; dispid 107;
    procedure Remove; dispid 108;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 109;
  end;

// *********************************************************************//
// Interface: _Rule2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Rule2 = interface(_Rule)
    ['{10020A16-E260-11CF-AE68-00AA004A34D5}']
    function Get_IsDeleted: WordBool; safecall;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _Rule2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Rule2Disp = dispinterface
    ['{10020A16-E260-11CF-AE68-00AA004A34D5}']
    property IsDeleted: WordBool readonly dispid 18;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString dispid 14;
    property CreateDate: WideString readonly dispid 15;
    property ID: Integer readonly dispid 16;
    property Text: WideString dispid 17;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString); dispid 100;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 101;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString); dispid 102;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); dispid 103;
    function ListBoundColumns: SQLObjectList; dispid 106;
    function ListBoundDatatypes: SQLObjectList; dispid 107;
    procedure Remove; dispid 108;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 109;
  end;

// *********************************************************************//
// Interface: UserDefinedDatatypes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  UserDefinedDatatypes = interface(_IVSQLDMOStdObject)
    ['{10020803-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): UserDefinedDatatype; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): UserDefinedDatatype; safecall;
    procedure Add(const Object_: UserDefinedDatatype); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  UserDefinedDatatypesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  UserDefinedDatatypesDisp = dispinterface
    ['{10020803-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): UserDefinedDatatype; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): UserDefinedDatatype; dispid 6;
    procedure Add(const Object_: UserDefinedDatatype); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _UserDefinedDatatype
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedDatatype = interface(_IVSQLDMOStdObject)
    ['{10020806-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    function Get_AllowNulls: WordBool; safecall;
    procedure Set_AllowNulls(pRetVal: WordBool); safecall;
    function Get_BaseType: WideString; safecall;
    procedure Set_BaseType(const pRetVal: WideString); safecall;
    function Get_Length: Integer; safecall;
    procedure Set_Length(pRetVal: Integer); safecall;
    function Get_Default: WideString; safecall;
    procedure Set_Default(const pRetVal: WideString); safecall;
    function Get_Rule: WideString; safecall;
    procedure Set_Rule(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_NumericPrecision: Integer; safecall;
    procedure Set_NumericPrecision(pRetVal: Integer); safecall;
    function Get_NumericScale: Integer; safecall;
    procedure Set_NumericScale(pRetVal: Integer); safecall;
    function Get_AllowIdentity: WordBool; safecall;
    function ListBoundColumns: SQLObjectList; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function Get_IsVariableLength: WordBool; safecall;
    function GenerateSQL(const pDB: Database): WideString; safecall;
    function Get_MaxSize: Integer; safecall;
    function Get_DefaultOwner: WideString; safecall;
    function Get_RuleOwner: WideString; safecall;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); safecall;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property BaseType: WideString read Get_BaseType write Set_BaseType;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property ID: Integer read Get_ID;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
    property AllowIdentity: WordBool read Get_AllowIdentity;
    property IsVariableLength: WordBool read Get_IsVariableLength;
    property MaxSize: Integer read Get_MaxSize;
    property DefaultOwner: WideString read Get_DefaultOwner;
    property RuleOwner: WideString read Get_RuleOwner;
  end;

// *********************************************************************//
// DispIntf:  _UserDefinedDatatypeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedDatatypeDisp = dispinterface
    ['{10020806-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString readonly dispid 14;
    property AllowNulls: WordBool dispid 15;
    property BaseType: WideString dispid 16;
    property Length: Integer dispid 17;
    property Default: WideString dispid 18;
    property Rule: WideString dispid 19;
    property ID: Integer readonly dispid 20;
    property NumericPrecision: Integer dispid 22;
    property NumericScale: Integer dispid 23;
    property AllowIdentity: WordBool readonly dispid 24;
    function ListBoundColumns: SQLObjectList; dispid 100;
    procedure Remove; dispid 101;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 102;
    property IsVariableLength: WordBool readonly dispid 25;
    function GenerateSQL(const pDB: Database): WideString; dispid 103;
    property MaxSize: Integer readonly dispid 26;
    property DefaultOwner: WideString readonly dispid 27;
    property RuleOwner: WideString readonly dispid 28;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); dispid 104;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); dispid 105;
  end;

// *********************************************************************//
// Interface: _UserDefinedDatatype2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020816-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedDatatype2 = interface(_UserDefinedDatatype)
    ['{10020816-E260-11CF-AE68-00AA004A34D5}']
    function Get_Collation: WideString; safecall;
    function Get_IsDeleted: WordBool; safecall;
    property Collation: WideString read Get_Collation;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _UserDefinedDatatype2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020816-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedDatatype2Disp = dispinterface
    ['{10020816-E260-11CF-AE68-00AA004A34D5}']
    property Collation: WideString readonly dispid 29;
    property IsDeleted: WordBool readonly dispid 30;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Owner: WideString readonly dispid 14;
    property AllowNulls: WordBool dispid 15;
    property BaseType: WideString dispid 16;
    property Length: Integer dispid 17;
    property Default: WideString dispid 18;
    property Rule: WideString dispid 19;
    property ID: Integer readonly dispid 20;
    property NumericPrecision: Integer dispid 22;
    property NumericScale: Integer dispid 23;
    property AllowIdentity: WordBool readonly dispid 24;
    function ListBoundColumns: SQLObjectList; dispid 100;
    procedure Remove; dispid 101;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 102;
    property IsVariableLength: WordBool readonly dispid 25;
    function GenerateSQL(const pDB: Database): WideString; dispid 103;
    property MaxSize: Integer readonly dispid 26;
    property DefaultOwner: WideString readonly dispid 27;
    property RuleOwner: WideString readonly dispid 28;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool); dispid 104;
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool); dispid 105;
  end;

// *********************************************************************//
// Interface: Users
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Users = interface(_IVSQLDMOStdObject)
    ['{10020B03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): User; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): User; safecall;
    procedure Add(const Object_: User); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  UsersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  UsersDisp = dispinterface
    ['{10020B03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): User; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): User; dispid 6;
    procedure Add(const Object_: User); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _User
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _User = interface(_IVSQLDMOStdObject)
    ['{10020B06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Login: WideString; safecall;
    procedure Set_Login(const pRetVal: WideString); safecall;
    function Get_Group: WideString; safecall;
    procedure Set_Group(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    procedure AddAlias(const LoginNames: WideString); safecall;
    procedure RemoveAlias(const LoginNames: WideString); safecall;
    function ListAliases: SQLObjectList; safecall;
    function ListOwnedObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; safecall;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function Get_Role: WideString; safecall;
    procedure Set_Role(const pRetVal: WideString); safecall;
    function ListMembers: NameList; safecall;
    function IsMember(const DatabaseRole: WideString): WordBool; safecall;
    function Get_HasDBAccess: WordBool; safecall;
    procedure GrantNTUserDBAccess; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Login: WideString read Get_Login write Set_Login;
    property Group: WideString read Get_Group write Set_Group;
    property ID: Integer read Get_ID;
    property Role: WideString read Get_Role write Set_Role;
    property HasDBAccess: WordBool read Get_HasDBAccess;
  end;

// *********************************************************************//
// DispIntf:  _UserDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDisp = dispinterface
    ['{10020B06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Login: WideString dispid 14;
    property Group: WideString dispid 15;
    property ID: Integer readonly dispid 16;
    procedure AddAlias(const LoginNames: WideString); dispid 100;
    procedure RemoveAlias(const LoginNames: WideString); dispid 101;
    function ListAliases: SQLObjectList; dispid 102;
    function ListOwnedObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; dispid 103;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 105;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 106;
    procedure Remove; dispid 107;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 108;
    property Role: WideString dispid 17;
    function ListMembers: NameList; dispid 109;
    function IsMember(const DatabaseRole: WideString): WordBool; dispid 110;
    property HasDBAccess: WordBool readonly dispid 18;
    procedure GrantNTUserDBAccess; dispid 111;
  end;

// *********************************************************************//
// Interface: _User2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _User2 = interface(_User)
    ['{10020B16-E260-11CF-AE68-00AA004A34D5}']
    function Get_IsDeleted: WordBool; safecall;
    function ListObjectColumnPermissions: QueryResults; safecall;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _User2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020B16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _User2Disp = dispinterface
    ['{10020B16-E260-11CF-AE68-00AA004A34D5}']
    property IsDeleted: WordBool readonly dispid 19;
    function ListObjectColumnPermissions: QueryResults; dispid 112;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Login: WideString dispid 14;
    property Group: WideString dispid 15;
    property ID: Integer readonly dispid 16;
    procedure AddAlias(const LoginNames: WideString); dispid 100;
    procedure RemoveAlias(const LoginNames: WideString); dispid 101;
    function ListAliases: SQLObjectList; dispid 102;
    function ListOwnedObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList; dispid 103;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 105;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 106;
    procedure Remove; dispid 107;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 108;
    property Role: WideString dispid 17;
    function ListMembers: NameList; dispid 109;
    function IsMember(const DatabaseRole: WideString): WordBool; dispid 110;
    property HasDBAccess: WordBool readonly dispid 18;
    procedure GrantNTUserDBAccess; dispid 111;
  end;

// *********************************************************************//
// Interface: Groups
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020C03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Groups = interface(_IVSQLDMOStdObject)
    ['{10020C03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Group; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Group; safecall;
    procedure Add(const Object_: Group); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  GroupsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020C03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  GroupsDisp = dispinterface
    ['{10020C03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Group; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Group; dispid 6;
    procedure Add(const Object_: Group); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Group
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Group = interface(_IVSQLDMOStdObject)
    ['{10020C06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_ID: Integer; safecall;
    function ListUsers: SQLObjectList; safecall;
    function ListDatabasePermissions(PrivilegeTypes: OleVariant): SQLObjectList; safecall;
    function ListObjectPermissions(PrivilegeTypes: OleVariant): SQLObjectList; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property ID: Integer read Get_ID;
  end;

// *********************************************************************//
// DispIntf:  _GroupDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10020C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _GroupDisp = dispinterface
    ['{10020C06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property ID: Integer readonly dispid 14;
    function ListUsers: SQLObjectList; dispid 100;
    function ListDatabasePermissions(PrivilegeTypes: OleVariant): SQLObjectList; dispid 101;
    function ListObjectPermissions(PrivilegeTypes: OleVariant): SQLObjectList; dispid 102;
    procedure Remove; dispid 103;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 104;
  end;

// *********************************************************************//
// Interface: SystemDatatypes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatypes = interface(_IVSQLDMOStdObject)
    ['{10021A03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): SystemDatatype; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  SystemDatatypesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatypesDisp = dispinterface
    ['{10021A03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): SystemDatatype; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
  end;

// *********************************************************************//
// Interface: SystemDatatype
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatype = interface(_IVSQLDMOStdObject)
    ['{10021A06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_MaximumLength: Integer; safecall;
    function Get_AllowNulls: WordBool; safecall;
    function Get_IsNumeric: WordBool; safecall;
    function Get_AllowIdentity: WordBool; safecall;
    function Get_IsVariableLength: WordBool; safecall;
    function Get_AllowLength: WordBool; safecall;
    function Get_MaximumChar: Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property MaximumLength: Integer read Get_MaximumLength;
    property AllowNulls: WordBool read Get_AllowNulls;
    property IsNumeric: WordBool read Get_IsNumeric;
    property AllowIdentity: WordBool read Get_AllowIdentity;
    property IsVariableLength: WordBool read Get_IsVariableLength;
    property AllowLength: WordBool read Get_AllowLength;
    property MaximumChar: Integer read Get_MaximumChar;
  end;

// *********************************************************************//
// DispIntf:  SystemDatatypeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatypeDisp = dispinterface
    ['{10021A06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 10;
    property MaximumLength: Integer readonly dispid 11;
    property AllowNulls: WordBool readonly dispid 12;
    property IsNumeric: WordBool readonly dispid 13;
    property AllowIdentity: WordBool readonly dispid 14;
    property IsVariableLength: WordBool readonly dispid 15;
    property AllowLength: WordBool readonly dispid 16;
    property MaximumChar: Integer readonly dispid 17;
  end;

// *********************************************************************//
// Interface: TransactionLog
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransactionLog = interface(_IVSQLDMOStdObject)
    ['{10022606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_LastBackup: WideString; safecall;
    function Get_Size: Integer; safecall;
    function Get_SpaceAvailable: Integer; safecall;
    function Get_SpaceAvailableInMB: Single; safecall;
    function Get_SpaceAllocatedOnFiles(const DatabaseName: WideString): Integer; safecall;
    procedure Truncate; safecall;
    function Get_LogFiles: LogFiles; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CreateDate: WideString read Get_CreateDate;
    property LastBackup: WideString read Get_LastBackup;
    property Size: Integer read Get_Size;
    property SpaceAvailable: Integer read Get_SpaceAvailable;
    property SpaceAvailableInMB: Single read Get_SpaceAvailableInMB;
    property SpaceAllocatedOnFiles[const DatabaseName: WideString]: Integer read Get_SpaceAllocatedOnFiles;
    property LogFiles: LogFiles read Get_LogFiles;
  end;

// *********************************************************************//
// DispIntf:  TransactionLogDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransactionLogDisp = dispinterface
    ['{10022606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property CreateDate: WideString readonly dispid 10;
    property LastBackup: WideString readonly dispid 11;
    property Size: Integer readonly dispid 12;
    property SpaceAvailable: Integer readonly dispid 13;
    property SpaceAvailableInMB: Single readonly dispid 14;
    property SpaceAllocatedOnFiles[const DatabaseName: WideString]: Integer readonly dispid 15;
    procedure Truncate; dispid 104;
    property LogFiles: LogFiles readonly dispid 16;
  end;

// *********************************************************************//
// Interface: LogFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LogFiles = interface(_IVSQLDMOStdObject)
    ['{10022E03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): LogFile; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): LogFile; safecall;
    procedure Add(const Object_: LogFile); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  LogFilesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LogFilesDisp = dispinterface
    ['{10022E03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): LogFile; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): LogFile; dispid 6;
    procedure Add(const Object_: LogFile); dispid 100;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _LogFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LogFile = interface(_IVSQLDMOStdObject)
    ['{10022E06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_PhysicalName: WideString; safecall;
    procedure Set_PhysicalName(const pRetVal: WideString); safecall;
    function Get_Size: Integer; safecall;
    procedure Set_Size(pRetVal: Integer); safecall;
    function Get_ID: Integer; safecall;
    function Get_FileGrowth: Integer; safecall;
    procedure Set_FileGrowth(pRetVal: Integer); safecall;
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE; safecall;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE); safecall;
    function Get_FileGrowthInKB: Single; safecall;
    function Get_MaximumSize: Integer; safecall;
    procedure Set_MaximumSize(pRetVal: Integer); safecall;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE); safecall;
    function Get_SizeInKB: Single; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property Size: Integer read Get_Size write Set_Size;
    property ID: Integer read Get_ID;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
    property FileGrowthInKB: Single read Get_FileGrowthInKB;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
    property SizeInKB: Single read Get_SizeInKB;
  end;

// *********************************************************************//
// DispIntf:  _LogFileDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LogFileDisp = dispinterface
    ['{10022E06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property PhysicalName: WideString dispid 10;
    property Size: Integer dispid 12;
    property ID: Integer readonly dispid 13;
    property FileGrowth: Integer dispid 14;
    property FileGrowthType: SQLDMO_GROWTH_TYPE dispid 15;
    property FileGrowthInKB: Single readonly dispid 16;
    property MaximumSize: Integer dispid 17;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE); dispid 101;
    property SizeInKB: Single readonly dispid 18;
  end;

// *********************************************************************//
// Interface: _LogFile2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LogFile2 = interface(_LogFile)
    ['{10022E16-E260-11CF-AE68-00AA004A34D5}']
    procedure Remove; safecall;
  end;

// *********************************************************************//
// DispIntf:  _LogFile2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LogFile2Disp = dispinterface
    ['{10022E16-E260-11CF-AE68-00AA004A34D5}']
    procedure Remove; dispid 100;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property PhysicalName: WideString dispid 10;
    property Size: Integer dispid 12;
    property ID: Integer readonly dispid 13;
    property FileGrowth: Integer dispid 14;
    property FileGrowthType: SQLDMO_GROWTH_TYPE dispid 15;
    property FileGrowthInKB: Single readonly dispid 16;
    property MaximumSize: Integer dispid 17;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE); dispid 101;
    property SizeInKB: Single readonly dispid 18;
  end;

// *********************************************************************//
// Interface: DBOption
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBOption = interface(_IVSQLDMOStdObject)
    ['{10022206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_SelectIntoBulkCopy: WordBool; safecall;
    procedure Set_SelectIntoBulkCopy(pRetVal: WordBool); safecall;
    function Get_DBOUseOnly: WordBool; safecall;
    procedure Set_DBOUseOnly(pRetVal: WordBool); safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(pRetVal: WordBool); safecall;
    function Get_SingleUser: WordBool; safecall;
    procedure Set_SingleUser(pRetVal: WordBool); safecall;
    function Get_TruncateLogOnCheckpoint: WordBool; safecall;
    procedure Set_TruncateLogOnCheckpoint(pRetVal: WordBool); safecall;
    function Get_ColumnsNullByDefault: WordBool; safecall;
    procedure Set_ColumnsNullByDefault(pRetVal: WordBool); safecall;
    function Get_Offline: WordBool; safecall;
    procedure Set_Offline(pRetVal: WordBool); safecall;
    procedure Refresh; safecall;
    function Get_RecursiveTriggers: WordBool; safecall;
    procedure Set_RecursiveTriggers(pRetVal: WordBool); safecall;
    function Get_AutoShrink: WordBool; safecall;
    procedure Set_AutoShrink(pRetVal: WordBool); safecall;
    function Get_CompareNull: WordBool; safecall;
    procedure Set_CompareNull(pRetVal: WordBool); safecall;
    function Get_ContactNull: WordBool; safecall;
    procedure Set_ContactNull(pRetVal: WordBool); safecall;
    function Get_CursorCloseOnCommit: WordBool; safecall;
    procedure Set_CursorCloseOnCommit(pRetVal: WordBool); safecall;
    function Get_DefaultCursor: WordBool; safecall;
    procedure Set_DefaultCursor(pRetVal: WordBool); safecall;
    function Get_QuoteDelimiter: WordBool; safecall;
    procedure Set_QuoteDelimiter(pRetVal: WordBool); safecall;
    function Get_AssignmentDiag: WordBool; safecall;
    procedure Set_AssignmentDiag(pRetVal: WordBool); safecall;
    function Get_TornPageDetection: WordBool; safecall;
    procedure Set_TornPageDetection(pRetVal: WordBool); safecall;
    function Get_AutoClose: WordBool; safecall;
    procedure Set_AutoClose(pRetVal: WordBool); safecall;
    function Get_AutoCreateStat: WordBool; safecall;
    procedure Set_AutoCreateStat(pRetVal: WordBool); safecall;
    function Get_AutoUpdateStat: WordBool; safecall;
    procedure Set_AutoUpdateStat(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SelectIntoBulkCopy: WordBool read Get_SelectIntoBulkCopy write Set_SelectIntoBulkCopy;
    property DBOUseOnly: WordBool read Get_DBOUseOnly write Set_DBOUseOnly;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property SingleUser: WordBool read Get_SingleUser write Set_SingleUser;
    property TruncateLogOnCheckpoint: WordBool read Get_TruncateLogOnCheckpoint write Set_TruncateLogOnCheckpoint;
    property ColumnsNullByDefault: WordBool read Get_ColumnsNullByDefault write Set_ColumnsNullByDefault;
    property Offline: WordBool read Get_Offline write Set_Offline;
    property RecursiveTriggers: WordBool read Get_RecursiveTriggers write Set_RecursiveTriggers;
    property AutoShrink: WordBool read Get_AutoShrink write Set_AutoShrink;
    property CompareNull: WordBool read Get_CompareNull write Set_CompareNull;
    property ContactNull: WordBool read Get_ContactNull write Set_ContactNull;
    property CursorCloseOnCommit: WordBool read Get_CursorCloseOnCommit write Set_CursorCloseOnCommit;
    property DefaultCursor: WordBool read Get_DefaultCursor write Set_DefaultCursor;
    property QuoteDelimiter: WordBool read Get_QuoteDelimiter write Set_QuoteDelimiter;
    property AssignmentDiag: WordBool read Get_AssignmentDiag write Set_AssignmentDiag;
    property TornPageDetection: WordBool read Get_TornPageDetection write Set_TornPageDetection;
    property AutoClose: WordBool read Get_AutoClose write Set_AutoClose;
    property AutoCreateStat: WordBool read Get_AutoCreateStat write Set_AutoCreateStat;
    property AutoUpdateStat: WordBool read Get_AutoUpdateStat write Set_AutoUpdateStat;
  end;

// *********************************************************************//
// DispIntf:  DBOptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBOptionDisp = dispinterface
    ['{10022206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property SelectIntoBulkCopy: WordBool dispid 10;
    property DBOUseOnly: WordBool dispid 11;
    property ReadOnly: WordBool dispid 13;
    property SingleUser: WordBool dispid 14;
    property TruncateLogOnCheckpoint: WordBool dispid 15;
    property ColumnsNullByDefault: WordBool dispid 17;
    property Offline: WordBool dispid 18;
    procedure Refresh; dispid 101;
    property RecursiveTriggers: WordBool dispid 20;
    property AutoShrink: WordBool dispid 21;
    property CompareNull: WordBool dispid 22;
    property ContactNull: WordBool dispid 23;
    property CursorCloseOnCommit: WordBool dispid 24;
    property DefaultCursor: WordBool dispid 25;
    property QuoteDelimiter: WordBool dispid 26;
    property AssignmentDiag: WordBool dispid 27;
    property TornPageDetection: WordBool dispid 28;
    property AutoClose: WordBool dispid 29;
    property AutoCreateStat: WordBool dispid 30;
    property AutoUpdateStat: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface: DBObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBObject = interface(_IVSQLDMOStdObject)
    ['{10022106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    function Get_TypeName: WideString; safecall;
    function Get_type_: SQLDMO_OBJECT_TYPE; safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_SystemObject: WordBool; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner;
    property TypeName: WideString read Get_TypeName;
    property type_: SQLDMO_OBJECT_TYPE read Get_type_;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property SystemObject: WordBool read Get_SystemObject;
  end;

// *********************************************************************//
// DispIntf:  DBObjectDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBObjectDisp = dispinterface
    ['{10022106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property Owner: WideString readonly dispid 11;
    property TypeName: WideString readonly dispid 12;
    property type_: SQLDMO_OBJECT_TYPE readonly dispid 13;
    property CreateDate: WideString readonly dispid 14;
    property ID: Integer readonly dispid 15;
    property SystemObject: WordBool readonly dispid 16;
    procedure Remove; dispid 100;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 101;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 102;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 103;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 104;
  end;

// *********************************************************************//
// Interface: _Transfer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Transfer = interface(_IVSQLDMOStdObject)
    ['{10021E06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_DestServer: WideString; safecall;
    procedure Set_DestServer(const pRetVal: WideString); safecall;
    function Get_DestLogin: WideString; safecall;
    procedure Set_DestLogin(const pRetVal: WideString); safecall;
    function Get_DestPassword: WideString; safecall;
    procedure Set_DestPassword(const pRetVal: WideString); safecall;
    function Get_DestDatabase: WideString; safecall;
    procedure Set_DestDatabase(const pRetVal: WideString); safecall;
    function Get_CopyData: SQLDMO_COPYDATA_TYPE; safecall;
    procedure Set_CopyData(pRetVal: SQLDMO_COPYDATA_TYPE); safecall;
    function Get_CopySchema: WordBool; safecall;
    procedure Set_CopySchema(pRetVal: WordBool); safecall;
    function Get_CopyAllObjects: WordBool; safecall;
    procedure Set_CopyAllObjects(pRetVal: WordBool); safecall;
    function Get_CopyAllTables: WordBool; safecall;
    procedure Set_CopyAllTables(pRetVal: WordBool); safecall;
    function Get_CopyAllViews: WordBool; safecall;
    procedure Set_CopyAllViews(pRetVal: WordBool); safecall;
    function Get_CopyAllStoredProcedures: WordBool; safecall;
    procedure Set_CopyAllStoredProcedures(pRetVal: WordBool); safecall;
    function Get_CopyAllUserDefinedDatatypes: WordBool; safecall;
    procedure Set_CopyAllUserDefinedDatatypes(pRetVal: WordBool); safecall;
    function Get_CopyAllRules: WordBool; safecall;
    procedure Set_CopyAllRules(pRetVal: WordBool); safecall;
    function Get_CopyAllDefaults: WordBool; safecall;
    procedure Set_CopyAllDefaults(pRetVal: WordBool); safecall;
    function Get_CopyAllTriggers: WordBool; safecall;
    procedure Set_CopyAllTriggers(pRetVal: WordBool); safecall;
    function Get_IncludeDependencies: WordBool; safecall;
    procedure Set_IncludeDependencies(pRetVal: WordBool); safecall;
    function Get_IncludeUsers: WordBool; safecall;
    procedure Set_IncludeUsers(pRetVal: WordBool); safecall;
    function Get_IncludeGroups: WordBool; safecall;
    procedure Set_IncludeGroups(pRetVal: WordBool); safecall;
    function Get_IncludeLogins: WordBool; safecall;
    procedure Set_IncludeLogins(pRetVal: WordBool); safecall;
    function Get_DropDestObjectsFirst: WordBool; safecall;
    procedure Set_DropDestObjectsFirst(pRetVal: WordBool); safecall;
    function Get_ScriptType: SQLDMO_SCRIPT_TYPE; safecall;
    procedure Set_ScriptType(pRetVal: SQLDMO_SCRIPT_TYPE); safecall;
    function Get_DestUseTrustedConnection: WordBool; safecall;
    procedure Set_DestUseTrustedConnection(pRetVal: WordBool); safecall;
    procedure AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                              Owner: OleVariant); safecall;
    procedure AddObject(const DBObject: DBObject); safecall;
    function ListObjectNames(ObjectType: SQLDMO_OBJECT_TYPE): NameList; safecall;
    procedure Abort; safecall;
    function Get_Script2Type: SQLDMO_SCRIPT2_TYPE; safecall;
    procedure Set_Script2Type(pRetVal: SQLDMO_SCRIPT2_TYPE); safecall;
    function RetrieveErrors: WideString; safecall;
    function RetrieveWriteFileErrors: WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DestServer: WideString read Get_DestServer write Set_DestServer;
    property DestLogin: WideString read Get_DestLogin write Set_DestLogin;
    property DestPassword: WideString read Get_DestPassword write Set_DestPassword;
    property DestDatabase: WideString read Get_DestDatabase write Set_DestDatabase;
    property CopyData: SQLDMO_COPYDATA_TYPE read Get_CopyData write Set_CopyData;
    property CopySchema: WordBool read Get_CopySchema write Set_CopySchema;
    property CopyAllObjects: WordBool read Get_CopyAllObjects write Set_CopyAllObjects;
    property CopyAllTables: WordBool read Get_CopyAllTables write Set_CopyAllTables;
    property CopyAllViews: WordBool read Get_CopyAllViews write Set_CopyAllViews;
    property CopyAllStoredProcedures: WordBool read Get_CopyAllStoredProcedures write Set_CopyAllStoredProcedures;
    property CopyAllUserDefinedDatatypes: WordBool read Get_CopyAllUserDefinedDatatypes write Set_CopyAllUserDefinedDatatypes;
    property CopyAllRules: WordBool read Get_CopyAllRules write Set_CopyAllRules;
    property CopyAllDefaults: WordBool read Get_CopyAllDefaults write Set_CopyAllDefaults;
    property CopyAllTriggers: WordBool read Get_CopyAllTriggers write Set_CopyAllTriggers;
    property IncludeDependencies: WordBool read Get_IncludeDependencies write Set_IncludeDependencies;
    property IncludeUsers: WordBool read Get_IncludeUsers write Set_IncludeUsers;
    property IncludeGroups: WordBool read Get_IncludeGroups write Set_IncludeGroups;
    property IncludeLogins: WordBool read Get_IncludeLogins write Set_IncludeLogins;
    property DropDestObjectsFirst: WordBool read Get_DropDestObjectsFirst write Set_DropDestObjectsFirst;
    property ScriptType: SQLDMO_SCRIPT_TYPE read Get_ScriptType write Set_ScriptType;
    property DestUseTrustedConnection: WordBool read Get_DestUseTrustedConnection write Set_DestUseTrustedConnection;
    property Script2Type: SQLDMO_SCRIPT2_TYPE read Get_Script2Type write Set_Script2Type;
  end;

// *********************************************************************//
// DispIntf:  _TransferDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransferDisp = dispinterface
    ['{10021E06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DestServer: WideString dispid 10;
    property DestLogin: WideString dispid 11;
    property DestPassword: WideString dispid 12;
    property DestDatabase: WideString dispid 13;
    property CopyData: SQLDMO_COPYDATA_TYPE dispid 14;
    property CopySchema: WordBool dispid 15;
    property CopyAllObjects: WordBool dispid 16;
    property CopyAllTables: WordBool dispid 17;
    property CopyAllViews: WordBool dispid 18;
    property CopyAllStoredProcedures: WordBool dispid 19;
    property CopyAllUserDefinedDatatypes: WordBool dispid 20;
    property CopyAllRules: WordBool dispid 21;
    property CopyAllDefaults: WordBool dispid 22;
    property CopyAllTriggers: WordBool dispid 23;
    property IncludeDependencies: WordBool dispid 24;
    property IncludeUsers: WordBool dispid 25;
    property IncludeGroups: WordBool dispid 26;
    property IncludeLogins: WordBool dispid 27;
    property DropDestObjectsFirst: WordBool dispid 28;
    property ScriptType: SQLDMO_SCRIPT_TYPE dispid 29;
    property DestUseTrustedConnection: WordBool dispid 30;
    procedure AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                              Owner: OleVariant); dispid 100;
    procedure AddObject(const DBObject: DBObject); dispid 101;
    function ListObjectNames(ObjectType: SQLDMO_OBJECT_TYPE): NameList; dispid 102;
    procedure Abort; dispid 103;
    property Script2Type: SQLDMO_SCRIPT2_TYPE dispid 31;
    function RetrieveErrors: WideString; dispid 104;
    function RetrieveWriteFileErrors: WideString; dispid 105;
  end;

// *********************************************************************//
// Interface: _Transfer2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Transfer2 = interface(_Transfer)
    ['{10021E16-E260-11CF-AE68-00AA004A34D5}']
    function Get_SourceTranslateChar: WordBool; safecall;
    procedure Set_SourceTranslateChar(pRetVal: WordBool); safecall;
    function Get_DestTranslateChar: WordBool; safecall;
    procedure Set_DestTranslateChar(pRetVal: WordBool); safecall;
    function Get_IncludeDB: WordBool; safecall;
    procedure Set_IncludeDB(pRetVal: WordBool); safecall;
    function Get_CopyAllFunctions: WordBool; safecall;
    procedure Set_CopyAllFunctions(pRetVal: WordBool); safecall;
    procedure RemoveAllObjects; safecall;
    function Get_UseCollation: WordBool; safecall;
    procedure Set_UseCollation(pRetVal: WordBool); safecall;
    function Get_UseDestTransaction: WordBool; safecall;
    procedure Set_UseDestTransaction(pRetVal: WordBool); safecall;
    property SourceTranslateChar: WordBool read Get_SourceTranslateChar write Set_SourceTranslateChar;
    property DestTranslateChar: WordBool read Get_DestTranslateChar write Set_DestTranslateChar;
    property IncludeDB: WordBool read Get_IncludeDB write Set_IncludeDB;
    property CopyAllFunctions: WordBool read Get_CopyAllFunctions write Set_CopyAllFunctions;
    property UseCollation: WordBool read Get_UseCollation write Set_UseCollation;
    property UseDestTransaction: WordBool read Get_UseDestTransaction write Set_UseDestTransaction;
  end;

// *********************************************************************//
// DispIntf:  _Transfer2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Transfer2Disp = dispinterface
    ['{10021E16-E260-11CF-AE68-00AA004A34D5}']
    property SourceTranslateChar: WordBool dispid 32;
    property DestTranslateChar: WordBool dispid 33;
    property IncludeDB: WordBool dispid 34;
    property CopyAllFunctions: WordBool dispid 35;
    procedure RemoveAllObjects; dispid 106;
    property UseCollation: WordBool dispid 36;
    property UseDestTransaction: WordBool dispid 37;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DestServer: WideString dispid 10;
    property DestLogin: WideString dispid 11;
    property DestPassword: WideString dispid 12;
    property DestDatabase: WideString dispid 13;
    property CopyData: SQLDMO_COPYDATA_TYPE dispid 14;
    property CopySchema: WordBool dispid 15;
    property CopyAllObjects: WordBool dispid 16;
    property CopyAllTables: WordBool dispid 17;
    property CopyAllViews: WordBool dispid 18;
    property CopyAllStoredProcedures: WordBool dispid 19;
    property CopyAllUserDefinedDatatypes: WordBool dispid 20;
    property CopyAllRules: WordBool dispid 21;
    property CopyAllDefaults: WordBool dispid 22;
    property CopyAllTriggers: WordBool dispid 23;
    property IncludeDependencies: WordBool dispid 24;
    property IncludeUsers: WordBool dispid 25;
    property IncludeGroups: WordBool dispid 26;
    property IncludeLogins: WordBool dispid 27;
    property DropDestObjectsFirst: WordBool dispid 28;
    property ScriptType: SQLDMO_SCRIPT_TYPE dispid 29;
    property DestUseTrustedConnection: WordBool dispid 30;
    procedure AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                              Owner: OleVariant); dispid 100;
    procedure AddObject(const DBObject: DBObject); dispid 101;
    function ListObjectNames(ObjectType: SQLDMO_OBJECT_TYPE): NameList; dispid 102;
    procedure Abort; dispid 103;
    property Script2Type: SQLDMO_SCRIPT2_TYPE dispid 31;
    function RetrieveErrors: WideString; dispid 104;
    function RetrieveWriteFileErrors: WideString; dispid 105;
  end;

// *********************************************************************//
// Interface: TransferSink
// Flags:     (256) OleAutomation
// GUID:      {10021E09-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransferSink = interface(IUnknown)
    ['{10021E09-E260-11CF-AE68-00AA004A34D5}']
    function StatusMessage(const Message: WideString): HResult; stdcall;
    function PercentCompleteAtStep(const Message: WideString; Percent: Integer): HResult; stdcall;
    function ScriptTransferPercentComplete(const Message: WideString; Percent: Integer): HResult; stdcall;
    function TransferPercentComplete(const Message: WideString; Percent: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: FileGroups
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FileGroups = interface(_IVSQLDMOStdObject)
    ['{10022C03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): FileGroup; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): FileGroup; safecall;
    procedure Add(const Object_: FileGroup); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  FileGroupsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FileGroupsDisp = dispinterface
    ['{10022C03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): FileGroup; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): FileGroup; dispid 6;
    procedure Add(const Object_: FileGroup); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _FileGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FileGroup = interface(_IVSQLDMOStdObject)
    ['{10022C06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_DBFiles: DBFiles; safecall;
    function Get_Size: Integer; safecall;
    function Get_ID: Integer; safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    function EnumObjects: QueryResults; safecall;
    function EnumFiles: QueryResults; safecall;
    function CheckFilegroup: WideString; safecall;
    function CheckFilegroupDataOnly: WideString; safecall;
    function Get_Default: WordBool; safecall;
    procedure Set_Default(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property DBFiles: DBFiles read Get_DBFiles;
    property Size: Integer read Get_Size;
    property ID: Integer read Get_ID;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property Default: WordBool read Get_Default write Set_Default;
  end;

// *********************************************************************//
// DispIntf:  _FileGroupDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FileGroupDisp = dispinterface
    ['{10022C06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property DBFiles: DBFiles readonly dispid 0;
    property Size: Integer readonly dispid 10;
    property ID: Integer readonly dispid 11;
    property ReadOnly: WordBool dispid 12;
    procedure Remove; dispid 100;
    function EnumObjects: QueryResults; dispid 101;
    function EnumFiles: QueryResults; dispid 102;
    function CheckFilegroup: WideString; dispid 103;
    function CheckFilegroupDataOnly: WideString; dispid 104;
    property Default: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface: _FileGroup2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FileGroup2 = interface(_FileGroup)
    ['{10022C16-E260-11CF-AE68-00AA004A34D5}']
    function CheckFilegroupWithResult: QueryResults; safecall;
    function CheckFilegroupDataOnlyWithResult: QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  _FileGroup2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FileGroup2Disp = dispinterface
    ['{10022C16-E260-11CF-AE68-00AA004A34D5}']
    function CheckFilegroupWithResult: QueryResults; dispid 105;
    function CheckFilegroupDataOnlyWithResult: QueryResults; dispid 106;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property DBFiles: DBFiles readonly dispid 0;
    property Size: Integer readonly dispid 10;
    property ID: Integer readonly dispid 11;
    property ReadOnly: WordBool dispid 12;
    procedure Remove; dispid 100;
    function EnumObjects: QueryResults; dispid 101;
    function EnumFiles: QueryResults; dispid 102;
    function CheckFilegroup: WideString; dispid 103;
    function CheckFilegroupDataOnly: WideString; dispid 104;
    property Default: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface: DBFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBFiles = interface(_IVSQLDMOStdObject)
    ['{10022D03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): DBFile; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): DBFile; safecall;
    procedure Add(const Object_: DBFile); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DBFilesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022D03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBFilesDisp = dispinterface
    ['{10022D03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): DBFile; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): DBFile; dispid 6;
    procedure Add(const Object_: DBFile); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _DBFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DBFile = interface(_IVSQLDMOStdObject)
    ['{10022D06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_PhysicalName: WideString; safecall;
    procedure Set_PhysicalName(const pRetVal: WideString); safecall;
    function Get_PrimaryFile: WordBool; safecall;
    procedure Set_PrimaryFile(pRetVal: WordBool); safecall;
    function Get_FileGrowth: Integer; safecall;
    procedure Set_FileGrowth(pRetVal: Integer); safecall;
    function Get_MaximumSize: Integer; safecall;
    procedure Set_MaximumSize(pRetVal: Integer); safecall;
    function Get_SpaceAvailableInMB: Integer; safecall;
    function Get_Size: Integer; safecall;
    procedure Set_Size(pRetVal: Integer); safecall;
    function Get_ID: Integer; safecall;
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE; safecall;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE); safecall;
    function Get_FileGrowthInKB: Single; safecall;
    procedure Remove; safecall;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE); safecall;
    function Get_SizeInKB: Single; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property PrimaryFile: WordBool read Get_PrimaryFile write Set_PrimaryFile;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
    property SpaceAvailableInMB: Integer read Get_SpaceAvailableInMB;
    property Size: Integer read Get_Size write Set_Size;
    property ID: Integer read Get_ID;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
    property FileGrowthInKB: Single read Get_FileGrowthInKB;
    property SizeInKB: Single read Get_SizeInKB;
  end;

// *********************************************************************//
// DispIntf:  _DBFileDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DBFileDisp = dispinterface
    ['{10022D06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property PhysicalName: WideString dispid 10;
    property PrimaryFile: WordBool dispid 11;
    property FileGrowth: Integer dispid 12;
    property MaximumSize: Integer dispid 13;
    property SpaceAvailableInMB: Integer readonly dispid 14;
    property Size: Integer dispid 15;
    property ID: Integer readonly dispid 16;
    property FileGrowthType: SQLDMO_GROWTH_TYPE dispid 17;
    property FileGrowthInKB: Single readonly dispid 18;
    procedure Remove; dispid 100;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE); dispid 101;
    property SizeInKB: Single readonly dispid 19;
  end;

// *********************************************************************//
// Interface: DatabaseRoles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DatabaseRoles = interface(_IVSQLDMOStdObject)
    ['{10023103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): DatabaseRole; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: DatabaseRole); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DatabaseRolesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DatabaseRolesDisp = dispinterface
    ['{10023103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): DatabaseRole; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: DatabaseRole); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _DatabaseRole
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DatabaseRole = interface(_IVSQLDMOStdObject)
    ['{10023106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_AppRole: WordBool; safecall;
    procedure Set_AppRole(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    function EnumDatabaseRoleMember: QueryResults; safecall;
    procedure AddMember(const UserName: WideString); safecall;
    procedure DropMember(const UserName: WideString); safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumFixedDatabaseRolePermission: QueryResults; safecall;
    function IsFixedRole: WordBool; safecall;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Password: WideString read Get_Password write Set_Password;
    property AppRole: WordBool read Get_AppRole write Set_AppRole;
  end;

// *********************************************************************//
// DispIntf:  _DatabaseRoleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DatabaseRoleDisp = dispinterface
    ['{10023106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Password: WideString dispid 10;
    property AppRole: WordBool dispid 11;
    procedure Remove; dispid 100;
    function EnumDatabaseRoleMember: QueryResults; dispid 101;
    procedure AddMember(const UserName: WideString); dispid 102;
    procedure DropMember(const UserName: WideString); dispid 103;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 104;
    function EnumFixedDatabaseRolePermission: QueryResults; dispid 105;
    function IsFixedRole: WordBool; dispid 106;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 107;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 108;
  end;

// *********************************************************************//
// Interface: _DatabaseRole2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DatabaseRole2 = interface(_DatabaseRole)
    ['{10023116-E260-11CF-AE68-00AA004A34D5}']
    function Get_IsDeleted: WordBool; safecall;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _DatabaseRole2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DatabaseRole2Disp = dispinterface
    ['{10023116-E260-11CF-AE68-00AA004A34D5}']
    property IsDeleted: WordBool readonly dispid 12;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Password: WideString dispid 10;
    property AppRole: WordBool dispid 11;
    procedure Remove; dispid 100;
    function EnumDatabaseRoleMember: QueryResults; dispid 101;
    procedure AddMember(const UserName: WideString); dispid 102;
    procedure DropMember(const UserName: WideString); dispid 103;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 104;
    function EnumFixedDatabaseRolePermission: QueryResults; dispid 105;
    function IsFixedRole: WordBool; dispid 106;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 107;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 108;
  end;

// *********************************************************************//
// Interface: FullTextCatalogs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FullTextCatalogs = interface(_IVSQLDMOStdObject)
    ['{10023503-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): FullTextCatalog; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: FullTextCatalog); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  FullTextCatalogsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FullTextCatalogsDisp = dispinterface
    ['{10023503-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): FullTextCatalog; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: FullTextCatalog); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _FullTextCatalog
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FullTextCatalog = interface(_IVSQLDMOStdObject)
    ['{10023506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_RootPath: WideString; safecall;
    procedure Set_RootPath(const pRetVal: WideString); safecall;
    function Get_ItemCount: Integer; safecall;
    function Get_PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE; safecall;
    function Get_FullTextIndexSize: Integer; safecall;
    function Get_UniqueKeyCount: Integer; safecall;
    function Get_PopulateCompletionDate: WideString; safecall;
    function Get_ErrorLogSize: Integer; safecall;
    function Get_HasFullTextIndexedTables: WordBool; safecall;
    procedure Remove; safecall;
    procedure Start(StartType: SQLDMO_FULLTEXT_START_TYPE); safecall;
    procedure Stop; safecall;
    function GenerateSQL: WideString; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    procedure Rebuild; safecall;
    function Get_FullTextCatalogID: Integer; safecall;
    function Get_PopulateCompletionAge: Integer; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property RootPath: WideString read Get_RootPath write Set_RootPath;
    property ItemCount: Integer read Get_ItemCount;
    property PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE read Get_PopulateStatus;
    property FullTextIndexSize: Integer read Get_FullTextIndexSize;
    property UniqueKeyCount: Integer read Get_UniqueKeyCount;
    property PopulateCompletionDate: WideString read Get_PopulateCompletionDate;
    property ErrorLogSize: Integer read Get_ErrorLogSize;
    property HasFullTextIndexedTables: WordBool read Get_HasFullTextIndexedTables;
    property FullTextCatalogID: Integer read Get_FullTextCatalogID;
    property PopulateCompletionAge: Integer read Get_PopulateCompletionAge;
  end;

// *********************************************************************//
// DispIntf:  _FullTextCatalogDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FullTextCatalogDisp = dispinterface
    ['{10023506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property RootPath: WideString dispid 10;
    property ItemCount: Integer readonly dispid 11;
    property PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE readonly dispid 12;
    property FullTextIndexSize: Integer readonly dispid 13;
    property UniqueKeyCount: Integer readonly dispid 14;
    property PopulateCompletionDate: WideString readonly dispid 15;
    property ErrorLogSize: Integer readonly dispid 16;
    property HasFullTextIndexedTables: WordBool readonly dispid 17;
    procedure Remove; dispid 100;
    procedure Start(StartType: SQLDMO_FULLTEXT_START_TYPE); dispid 101;
    procedure Stop; dispid 102;
    function GenerateSQL: WideString; dispid 103;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 104;
    procedure Rebuild; dispid 105;
    property FullTextCatalogID: Integer readonly dispid 18;
    property PopulateCompletionAge: Integer readonly dispid 19;
  end;

// *********************************************************************//
// Interface: _FullTextCatalog2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FullTextCatalog2 = interface(_FullTextCatalog)
    ['{10023516-E260-11CF-AE68-00AA004A34D5}']
    procedure Refresh; safecall;
  end;

// *********************************************************************//
// DispIntf:  _FullTextCatalog2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _FullTextCatalog2Disp = dispinterface
    ['{10023516-E260-11CF-AE68-00AA004A34D5}']
    procedure Refresh; dispid 106;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property RootPath: WideString dispid 10;
    property ItemCount: Integer readonly dispid 11;
    property PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE readonly dispid 12;
    property FullTextIndexSize: Integer readonly dispid 13;
    property UniqueKeyCount: Integer readonly dispid 14;
    property PopulateCompletionDate: WideString readonly dispid 15;
    property ErrorLogSize: Integer readonly dispid 16;
    property HasFullTextIndexedTables: WordBool readonly dispid 17;
    procedure Remove; dispid 100;
    procedure Start(StartType: SQLDMO_FULLTEXT_START_TYPE); dispid 101;
    procedure Stop; dispid 102;
    function GenerateSQL: WideString; dispid 103;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 104;
    procedure Rebuild; dispid 105;
    property FullTextCatalogID: Integer readonly dispid 18;
    property PopulateCompletionAge: Integer readonly dispid 19;
  end;

// *********************************************************************//
// Interface: UserDefinedFunctions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  UserDefinedFunctions = interface(_IVSQLDMOStdObject)
    ['{10023703-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): UserDefinedFunction; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): UserDefinedFunction; safecall;
    procedure Add(const Object_: UserDefinedFunction); safecall;
    procedure Remove(Index: OleVariant; Owner: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  UserDefinedFunctionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  UserDefinedFunctionsDisp = dispinterface
    ['{10023703-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): UserDefinedFunction; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): UserDefinedFunction; dispid 6;
    procedure Add(const Object_: UserDefinedFunction); dispid 100;
    procedure Remove(Index: OleVariant; Owner: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _UserDefinedFunction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedFunction = interface(_IVSQLDMOStdObject)
    ['{10023706-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_CreateDate: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRetVal: WideString); safecall;
    function Get_QuotedIdentifierStatus: WordBool; safecall;
    function Get_AnsiNullsStatus: WordBool; safecall;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool); safecall;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); safecall;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); safecall;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; safecall;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; safecall;
    function EnumParameters: QueryResults; safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; safecall;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); safecall;
    procedure Alter(const NewText: WideString); safecall;
    function Get_type_: SQLDMO_UDF_TYPE; safecall;
    function Get_IsDeterministic: WordBool; safecall;
    function Get_IsSchemaBound: WordBool; safecall;
    function EnumOutputs: QueryResults; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_Encrypted: WordBool; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Owner: WideString read Get_Owner write Set_Owner;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property Text: WideString read Get_Text write Set_Text;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
    property type_: SQLDMO_UDF_TYPE read Get_type_;
    property IsDeterministic: WordBool read Get_IsDeterministic;
    property IsSchemaBound: WordBool read Get_IsSchemaBound;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
  end;

// *********************************************************************//
// DispIntf:  _UserDefinedFunctionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _UserDefinedFunctionDisp = dispinterface
    ['{10023706-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 10;
    property Owner: WideString dispid 12;
    property CreateDate: WideString readonly dispid 13;
    property ID: Integer readonly dispid 14;
    property Text: WideString dispid 15;
    property QuotedIdentifierStatus: WordBool readonly dispid 16;
    property AnsiNullsStatus: WordBool dispid 17;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); dispid 100;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); dispid 101;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList; dispid 102;
    function ListUserPermissions(const UserName: WideString): SQLObjectList; dispid 103;
    function EnumParameters: QueryResults; dispid 104;
    procedure Remove; dispid 105;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 106;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults; dispid 107;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); dispid 108;
    procedure Alter(const NewText: WideString); dispid 109;
    property type_: SQLDMO_UDF_TYPE readonly dispid 18;
    property IsDeterministic: WordBool readonly dispid 19;
    property IsSchemaBound: WordBool readonly dispid 20;
    function EnumOutputs: QueryResults; dispid 110;
    property IsDeleted: WordBool readonly dispid 22;
    property Encrypted: WordBool readonly dispid 23;
  end;

// *********************************************************************//
// Interface: BackupDevices
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  BackupDevices = interface(_IVSQLDMOStdObject)
    ['{10021103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): BackupDevice; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: BackupDevice); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  BackupDevicesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  BackupDevicesDisp = dispinterface
    ['{10021103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): BackupDevice; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: BackupDevice); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _BackupDevice
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BackupDevice = interface(_IVSQLDMOStdObject)
    ['{10021106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_DeviceNumber: Integer; safecall;
    function Get_SkipTapeLabel: WordBool; safecall;
    procedure Set_SkipTapeLabel(pRetVal: WordBool); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_PhysicalLocation: WideString; safecall;
    procedure Set_PhysicalLocation(const pRetVal: WideString); safecall;
    function Get_type_: SQLDMO_DEVICE_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_DEVICE_TYPE); safecall;
    function Get_Status: Integer; safecall;
    procedure Remove; safecall;
    function ReadBackupHeader: QueryResults; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewPhysicalLocation: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function ReadMediaHeader: QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property DeviceNumber: Integer read Get_DeviceNumber;
    property SkipTapeLabel: WordBool read Get_SkipTapeLabel write Set_SkipTapeLabel;
    property SystemObject: WordBool read Get_SystemObject;
    property PhysicalLocation: WideString read Get_PhysicalLocation write Set_PhysicalLocation;
    property type_: SQLDMO_DEVICE_TYPE read Get_type_ write Set_type_;
    property Status: Integer read Get_Status;
  end;

// *********************************************************************//
// DispIntf:  _BackupDeviceDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BackupDeviceDisp = dispinterface
    ['{10021106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property DeviceNumber: Integer readonly dispid 10;
    property SkipTapeLabel: WordBool dispid 12;
    property SystemObject: WordBool readonly dispid 13;
    property PhysicalLocation: WideString dispid 14;
    property type_: SQLDMO_DEVICE_TYPE dispid 17;
    property Status: Integer readonly dispid 18;
    procedure Remove; dispid 108;
    function ReadBackupHeader: QueryResults; dispid 109;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewPhysicalLocation: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 110;
    function ReadMediaHeader: QueryResults; dispid 111;
  end;

// *********************************************************************//
// Interface: IntegratedSecurity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  IntegratedSecurity = interface(_IVSQLDMOStdObject)
    ['{10022A06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_MapUnderscore: WideString; safecall;
    procedure Set_MapUnderscore(const pRetVal: WideString); safecall;
    function Get_MapDollarSign: WideString; safecall;
    procedure Set_MapDollarSign(const pRetVal: WideString); safecall;
    function Get_MapPoundSign: WideString; safecall;
    procedure Set_MapPoundSign(const pRetVal: WideString); safecall;
    function Get_SecurityMode: SQLDMO_SECURITY_TYPE; safecall;
    procedure Set_SecurityMode(pRetVal: SQLDMO_SECURITY_TYPE); safecall;
    function Get_DefaultLogin: WideString; safecall;
    procedure Set_DefaultLogin(const pRetVal: WideString); safecall;
    function Get_ImpersonateClient: WordBool; safecall;
    procedure Set_ImpersonateClient(pRetVal: WordBool); safecall;
    function Get_DefaultDomain: WideString; safecall;
    procedure Set_DefaultDomain(const pRetVal: WideString); safecall;
    function Get_AuditLevel: SQLDMO_AUDIT_TYPE; safecall;
    procedure Set_AuditLevel(pRetVal: SQLDMO_AUDIT_TYPE); safecall;
    function Get_SetHostName: WordBool; safecall;
    procedure Set_SetHostName(pRetVal: WordBool); safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property MapUnderscore: WideString read Get_MapUnderscore write Set_MapUnderscore;
    property MapDollarSign: WideString read Get_MapDollarSign write Set_MapDollarSign;
    property MapPoundSign: WideString read Get_MapPoundSign write Set_MapPoundSign;
    property SecurityMode: SQLDMO_SECURITY_TYPE read Get_SecurityMode write Set_SecurityMode;
    property DefaultLogin: WideString read Get_DefaultLogin write Set_DefaultLogin;
    property ImpersonateClient: WordBool read Get_ImpersonateClient write Set_ImpersonateClient;
    property DefaultDomain: WideString read Get_DefaultDomain write Set_DefaultDomain;
    property AuditLevel: SQLDMO_AUDIT_TYPE read Get_AuditLevel write Set_AuditLevel;
    property SetHostName: WordBool read Get_SetHostName write Set_SetHostName;
  end;

// *********************************************************************//
// DispIntf:  IntegratedSecurityDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  IntegratedSecurityDisp = dispinterface
    ['{10022A06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property MapUnderscore: WideString dispid 10;
    property MapDollarSign: WideString dispid 11;
    property MapPoundSign: WideString dispid 12;
    property SecurityMode: SQLDMO_SECURITY_TYPE dispid 13;
    property DefaultLogin: WideString dispid 14;
    property ImpersonateClient: WordBool dispid 15;
    property DefaultDomain: WideString dispid 16;
    property AuditLevel: SQLDMO_AUDIT_TYPE dispid 17;
    property SetHostName: WordBool dispid 18;
    procedure Refresh; dispid 100;
  end;

// *********************************************************************//
// Interface: Languages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Languages = interface(_IVSQLDMOStdObject)
    ['{10021403-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Language; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Language; safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  LanguagesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LanguagesDisp = dispinterface
    ['{10021403-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Language; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Language; dispid 6;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Language
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Language = interface(_IVSQLDMOStdObject)
    ['{10021406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Upgrade: Integer; safecall;
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const pRetVal: WideString); safecall;
    function Get_Months: WideString; safecall;
    function Get_ShortMonths: WideString; safecall;
    function Get_Days: WideString; safecall;
    function Get_LangDateFormat: WideString; safecall;
    function Get_FirstDayOfWeek: SYSINT; safecall;
    function Get_Month(Month: SYSINT): WideString; safecall;
    function Get_ShortMonth(Month: SYSINT): WideString; safecall;
    function Get_Day(Day: SYSINT): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property ID: Integer read Get_ID;
    property Upgrade: Integer read Get_Upgrade;
    property Alias: WideString read Get_Alias write Set_Alias;
    property Months: WideString read Get_Months;
    property ShortMonths: WideString read Get_ShortMonths;
    property Days: WideString read Get_Days;
    property LangDateFormat: WideString read Get_LangDateFormat;
    property FirstDayOfWeek: SYSINT read Get_FirstDayOfWeek;
    property Month[Month: SYSINT]: WideString read Get_Month;
    property ShortMonth[Month: SYSINT]: WideString read Get_ShortMonth;
    property Day[Day: SYSINT]: WideString read Get_Day;
  end;

// *********************************************************************//
// DispIntf:  _LanguageDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LanguageDisp = dispinterface
    ['{10021406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property ID: Integer readonly dispid 14;
    property Upgrade: Integer readonly dispid 15;
    property Alias: WideString dispid 16;
    property Months: WideString readonly dispid 17;
    property ShortMonths: WideString readonly dispid 18;
    property Days: WideString readonly dispid 19;
    property LangDateFormat: WideString readonly dispid 20;
    property FirstDayOfWeek: SYSINT readonly dispid 21;
    property Month[Month: SYSINT]: WideString readonly dispid 22;
    property ShortMonth[Month: SYSINT]: WideString readonly dispid 23;
    property Day[Day: SYSINT]: WideString readonly dispid 24;
  end;

// *********************************************************************//
// Interface: RemoteServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RemoteServers = interface(_IVSQLDMOStdObject)
    ['{10021503-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): RemoteServer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): RemoteServer; safecall;
    procedure Add(const Object_: RemoteServer); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  RemoteServersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RemoteServersDisp = dispinterface
    ['{10021503-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): RemoteServer; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): RemoteServer; dispid 6;
    procedure Add(const Object_: RemoteServer); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _RemoteServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteServer = interface(_IVSQLDMOStdObject)
    ['{10021506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_NetName: WideString; safecall;
    procedure Set_NetName(const pRetVal: WideString); safecall;
    function Get_RemoteLogins: RemoteLogins; safecall;
    function Get_Options: SQLDMO_SRVOPTION_TYPE; safecall;
    function Get_TopologyX: Integer; safecall;
    function Get_TopologyY: Integer; safecall;
    procedure Remove; safecall;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); safecall;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; safecall;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); safecall;
    procedure SetTopologyXY(X: Integer; Y: Integer); safecall;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property NetName: WideString read Get_NetName write Set_NetName;
    property RemoteLogins: RemoteLogins read Get_RemoteLogins;
    property Options: SQLDMO_SRVOPTION_TYPE read Get_Options;
    property TopologyX: Integer read Get_TopologyX;
    property TopologyY: Integer read Get_TopologyY;
  end;

// *********************************************************************//
// DispIntf:  _RemoteServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteServerDisp = dispinterface
    ['{10021506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 14;
    property NetName: WideString dispid 15;
    property RemoteLogins: RemoteLogins readonly dispid 17;
    property Options: SQLDMO_SRVOPTION_TYPE readonly dispid 19;
    property TopologyX: Integer readonly dispid 20;
    property TopologyY: Integer readonly dispid 21;
    procedure Remove; dispid 100;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); dispid 105;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 106;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); dispid 109;
    procedure SetTopologyXY(X: Integer; Y: Integer); dispid 112;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 114;
  end;

// *********************************************************************//
// Interface: _RemoteServer2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteServer2 = interface(_RemoteServer)
    ['{10021516-E260-11CF-AE68-00AA004A34D5}']
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  _RemoteServer2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteServer2Disp = dispinterface
    ['{10021516-E260-11CF-AE68-00AA004A34D5}']
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; dispid 115;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 14;
    property NetName: WideString dispid 15;
    property RemoteLogins: RemoteLogins readonly dispid 17;
    property Options: SQLDMO_SRVOPTION_TYPE readonly dispid 19;
    property TopologyX: Integer readonly dispid 20;
    property TopologyY: Integer readonly dispid 21;
    procedure Remove; dispid 100;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); dispid 105;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 106;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); dispid 109;
    procedure SetTopologyXY(X: Integer; Y: Integer); dispid 112;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 114;
  end;

// *********************************************************************//
// Interface: RemoteLogins
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RemoteLogins = interface(_IVSQLDMOStdObject)
    ['{10021603-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): RemoteLogin; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: RemoteLogin); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  RemoteLoginsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RemoteLoginsDisp = dispinterface
    ['{10021603-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): RemoteLogin; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: RemoteLogin); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _RemoteLogin
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteLogin = interface(_IVSQLDMOStdObject)
    ['{10021606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_LocalName: WideString; safecall;
    procedure Set_LocalName(const pRetVal: WideString); safecall;
    function Get_RemoteName: WideString; safecall;
    procedure Set_RemoteName(const pRetVal: WideString); safecall;
    function Get_Trusted: WordBool; safecall;
    procedure Set_Trusted(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property RemoteName: WideString read Get_RemoteName write Set_RemoteName;
    property Trusted: WordBool read Get_Trusted write Set_Trusted;
  end;

// *********************************************************************//
// DispIntf:  _RemoteLoginDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RemoteLoginDisp = dispinterface
    ['{10021606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property LocalName: WideString dispid 13;
    property RemoteName: WideString dispid 14;
    property Trusted: WordBool dispid 15;
    procedure Remove; dispid 100;
  end;

// *********************************************************************//
// Interface: Logins
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Logins = interface(_IVSQLDMOStdObject)
    ['{10021303-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Login; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: Login); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  LoginsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LoginsDisp = dispinterface
    ['{10021303-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Login; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: Login); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Login
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Login = interface(_IVSQLDMOStdObject)
    ['{10021306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_Database: WideString; safecall;
    procedure Set_Database(const pRetVal: WideString); safecall;
    procedure Remove; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    procedure SetPassword(const OldPassword: WideString; const NewPassword: WideString); safecall;
    function EnumDatabaseMappings: QueryResults; safecall;
    function Get_type_: SQLDMO_LOGIN_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_LOGIN_TYPE); safecall;
    function Get_DenyNTLogin: WordBool; safecall;
    procedure Set_DenyNTLogin(pRetVal: WordBool); safecall;
    function ListMembers: NameList; safecall;
    function IsMember(const ServerRole: WideString): WordBool; safecall;
    function GetUserName(const DatabaseName: WideString): WideString; safecall;
    function GetAliasName(const DatabaseName: WideString): WideString; safecall;
    function Get_LanguageAlias: WideString; safecall;
    function Get_NTLoginAccessType: SQLDMO_NTACCESS_TYPE; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Language: WideString read Get_Language write Set_Language;
    property Database: WideString read Get_Database write Set_Database;
    property type_: SQLDMO_LOGIN_TYPE read Get_type_ write Set_type_;
    property DenyNTLogin: WordBool read Get_DenyNTLogin write Set_DenyNTLogin;
    property LanguageAlias: WideString read Get_LanguageAlias;
    property NTLoginAccessType: SQLDMO_NTACCESS_TYPE read Get_NTLoginAccessType;
  end;

// *********************************************************************//
// DispIntf:  _LoginDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LoginDisp = dispinterface
    ['{10021306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Language: WideString dispid 15;
    property Database: WideString dispid 16;
    procedure Remove; dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
    procedure SetPassword(const OldPassword: WideString; const NewPassword: WideString); dispid 104;
    function EnumDatabaseMappings: QueryResults; dispid 105;
    property type_: SQLDMO_LOGIN_TYPE dispid 20;
    property DenyNTLogin: WordBool dispid 21;
    function ListMembers: NameList; dispid 106;
    function IsMember(const ServerRole: WideString): WordBool; dispid 107;
    function GetUserName(const DatabaseName: WideString): WideString; dispid 108;
    function GetAliasName(const DatabaseName: WideString): WideString; dispid 109;
    property LanguageAlias: WideString readonly dispid 22;
    property NTLoginAccessType: SQLDMO_NTACCESS_TYPE readonly dispid 23;
  end;

// *********************************************************************//
// Interface: _Login2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Login2 = interface(_Login)
    ['{10021316-E260-11CF-AE68-00AA004A34D5}']
    function Get_IsDeleted: WordBool; safecall;
    property IsDeleted: WordBool read Get_IsDeleted;
  end;

// *********************************************************************//
// DispIntf:  _Login2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Login2Disp = dispinterface
    ['{10021316-E260-11CF-AE68-00AA004A34D5}']
    property IsDeleted: WordBool readonly dispid 24;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SystemObject: WordBool readonly dispid 12;
    property Language: WideString dispid 15;
    property Database: WideString dispid 16;
    procedure Remove; dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
    procedure SetPassword(const OldPassword: WideString; const NewPassword: WideString); dispid 104;
    function EnumDatabaseMappings: QueryResults; dispid 105;
    property type_: SQLDMO_LOGIN_TYPE dispid 20;
    property DenyNTLogin: WordBool dispid 21;
    function ListMembers: NameList; dispid 106;
    function IsMember(const ServerRole: WideString): WordBool; dispid 107;
    function GetUserName(const DatabaseName: WideString): WideString; dispid 108;
    function GetAliasName(const DatabaseName: WideString): WideString; dispid 109;
    property LanguageAlias: WideString readonly dispid 22;
    property NTLoginAccessType: SQLDMO_NTACCESS_TYPE readonly dispid 23;
  end;

// *********************************************************************//
// Interface: Registry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Registry = interface(_IVSQLDMOStdObject)
    ['{10022706-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_AutostartMail: WordBool; safecall;
    procedure Set_AutostartMail(pRetVal: WordBool); safecall;
    function Get_AutostartServer: WordBool; safecall;
    procedure Set_AutostartServer(pRetVal: WordBool); safecall;
    function Get_CaseSensitive: WordBool; safecall;
    function Get_CharacterSet: WideString; safecall;
    function Get_ErrorLogPath: WideString; safecall;
    procedure Set_ErrorLogPath(const pRetVal: WideString); safecall;
    function Get_MailAccountName: WideString; safecall;
    procedure Set_MailAccountName(const pRetVal: WideString); safecall;
    function Get_MailPassword: WideString; safecall;
    procedure Set_MailPassword(const pRetVal: WideString); safecall;
    function Get_MasterDBPath: WideString; safecall;
    procedure Set_MasterDBPath(const pRetVal: WideString); safecall;
    function Get_NTEventLogging: WordBool; safecall;
    function Get_NumberOfProcessors: Integer; safecall;
    function Get_PerfMonMode: SQLDMO_PERFMON_TYPE; safecall;
    procedure Set_PerfMonMode(pRetVal: SQLDMO_PERFMON_TYPE); safecall;
    function Get_PhysicalMemory: Integer; safecall;
    function Get_AutostartLicensing: WordBool; safecall;
    procedure Set_AutostartLicensing(pRetVal: WordBool); safecall;
    function Get_RegisteredOrganization: WideString; safecall;
    function Get_RegisteredOwner: WideString; safecall;
    function Get_SortOrder: WideString; safecall;
    function Get_SQLRootPath: WideString; safecall;
    procedure Set_SQLRootPath(const pRetVal: WideString); safecall;
    function Get_SQLDataRoot: WideString; safecall;
    procedure Set_SQLDataRoot(const pRetVal: WideString); safecall;
    function Get_TapeLoadWaitTime: Integer; safecall;
    procedure Set_TapeLoadWaitTime(pRetVal: Integer); safecall;
    function Get_ReplicationInstalled: WordBool; safecall;
    function Get_AutostartDTC: WordBool; safecall;
    procedure Set_AutostartDTC(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property AutostartMail: WordBool read Get_AutostartMail write Set_AutostartMail;
    property AutostartServer: WordBool read Get_AutostartServer write Set_AutostartServer;
    property CaseSensitive: WordBool read Get_CaseSensitive;
    property CharacterSet: WideString read Get_CharacterSet;
    property ErrorLogPath: WideString read Get_ErrorLogPath write Set_ErrorLogPath;
    property MailAccountName: WideString read Get_MailAccountName write Set_MailAccountName;
    property MailPassword: WideString read Get_MailPassword write Set_MailPassword;
    property MasterDBPath: WideString read Get_MasterDBPath write Set_MasterDBPath;
    property NTEventLogging: WordBool read Get_NTEventLogging;
    property NumberOfProcessors: Integer read Get_NumberOfProcessors;
    property PerfMonMode: SQLDMO_PERFMON_TYPE read Get_PerfMonMode write Set_PerfMonMode;
    property PhysicalMemory: Integer read Get_PhysicalMemory;
    property AutostartLicensing: WordBool read Get_AutostartLicensing write Set_AutostartLicensing;
    property RegisteredOrganization: WideString read Get_RegisteredOrganization;
    property RegisteredOwner: WideString read Get_RegisteredOwner;
    property SortOrder: WideString read Get_SortOrder;
    property SQLRootPath: WideString read Get_SQLRootPath write Set_SQLRootPath;
    property SQLDataRoot: WideString read Get_SQLDataRoot write Set_SQLDataRoot;
    property TapeLoadWaitTime: Integer read Get_TapeLoadWaitTime write Set_TapeLoadWaitTime;
    property ReplicationInstalled: WordBool read Get_ReplicationInstalled;
    property AutostartDTC: WordBool read Get_AutostartDTC write Set_AutostartDTC;
  end;

// *********************************************************************//
// DispIntf:  RegistryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RegistryDisp = dispinterface
    ['{10022706-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property AutostartMail: WordBool dispid 10;
    property AutostartServer: WordBool dispid 11;
    property CaseSensitive: WordBool readonly dispid 12;
    property CharacterSet: WideString readonly dispid 13;
    property ErrorLogPath: WideString dispid 15;
    property MailAccountName: WideString dispid 16;
    property MailPassword: WideString dispid 17;
    property MasterDBPath: WideString dispid 18;
    property NTEventLogging: WordBool readonly dispid 19;
    property NumberOfProcessors: Integer readonly dispid 20;
    property PerfMonMode: SQLDMO_PERFMON_TYPE dispid 21;
    property PhysicalMemory: Integer readonly dispid 22;
    property AutostartLicensing: WordBool dispid 24;
    property RegisteredOrganization: WideString readonly dispid 25;
    property RegisteredOwner: WideString readonly dispid 26;
    property SortOrder: WideString readonly dispid 27;
    property SQLRootPath: WideString dispid 28;
    property SQLDataRoot: WideString dispid 29;
    property TapeLoadWaitTime: Integer dispid 30;
    property ReplicationInstalled: WordBool readonly dispid 31;
    property AutostartDTC: WordBool dispid 32;
  end;

// *********************************************************************//
// Interface: Configuration
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Configuration = interface(_IVSQLDMOStdObject)
    ['{10022306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ConfigValues: ConfigValues; safecall;
    function Get_ShowAdvancedOptions: WordBool; safecall;
    procedure Set_ShowAdvancedOptions(pRetVal: WordBool); safecall;
    function Get_Parameters: Names; safecall;
    procedure ReconfigureCurrentValues; safecall;
    procedure ReconfigureWithOverride; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ConfigValues: ConfigValues read Get_ConfigValues;
    property ShowAdvancedOptions: WordBool read Get_ShowAdvancedOptions write Set_ShowAdvancedOptions;
    property Parameters: Names read Get_Parameters;
  end;

// *********************************************************************//
// DispIntf:  ConfigurationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ConfigurationDisp = dispinterface
    ['{10022306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property ConfigValues: ConfigValues readonly dispid 0;
    property ShowAdvancedOptions: WordBool dispid 10;
    property Parameters: Names readonly dispid 11;
    procedure ReconfigureCurrentValues; dispid 100;
    procedure ReconfigureWithOverride; dispid 101;
  end;

// *********************************************************************//
// Interface: ConfigValues
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ConfigValues = interface(_IVSQLDMOStdObject)
    ['{10021B03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): ConfigValue; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): ConfigValue; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ConfigValuesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ConfigValuesDisp = dispinterface
    ['{10021B03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): ConfigValue; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): ConfigValue; dispid 6;
    procedure Refresh; dispid 100;
  end;

// *********************************************************************//
// Interface: ConfigValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ConfigValue = interface(_IVSQLDMOStdObject)
    ['{10021B06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_MinimumValue: Integer; safecall;
    function Get_MaximumValue: Integer; safecall;
    function Get_DynamicReconfigure: WordBool; safecall;
    function Get_CurrentValue: Integer; safecall;
    procedure Set_CurrentValue(pRetVal: Integer); safecall;
    function Get_RunningValue: Integer; safecall;
    function Get_Description: WideString; safecall;
    function Get_ID: SQLDMO_CONFIGVALUE_TYPE; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property MinimumValue: Integer read Get_MinimumValue;
    property MaximumValue: Integer read Get_MaximumValue;
    property DynamicReconfigure: WordBool read Get_DynamicReconfigure;
    property CurrentValue: Integer read Get_CurrentValue write Set_CurrentValue;
    property RunningValue: Integer read Get_RunningValue;
    property Description: WideString read Get_Description;
    property ID: SQLDMO_CONFIGVALUE_TYPE read Get_ID;
  end;

// *********************************************************************//
// DispIntf:  ConfigValueDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ConfigValueDisp = dispinterface
    ['{10021B06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 10;
    property MinimumValue: Integer readonly dispid 11;
    property MaximumValue: Integer readonly dispid 12;
    property DynamicReconfigure: WordBool readonly dispid 13;
    property CurrentValue: Integer dispid 14;
    property RunningValue: Integer readonly dispid 15;
    property Description: WideString readonly dispid 16;
    property ID: SQLDMO_CONFIGVALUE_TYPE readonly dispid 17;
  end;

// *********************************************************************//
// Interface: JobServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobServer = interface(_IVSQLDMOStdObject)
    ['{10040406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Status: SQLDMO_SVCSTATUS_TYPE; safecall;
    function Get_AutoStart: WordBool; safecall;
    procedure Set_AutoStart(pRetVal: WordBool); safecall;
    function Get_AlertSystem: AlertSystem; safecall;
    function Get_Operators: Operators; safecall;
    function Get_Alerts: Alerts; safecall;
    function Get_Jobs: Jobs; safecall;
    function Get_TargetServers: TargetServers; safecall;
    function Get_TargetServerGroups: TargetServerGroups; safecall;
    function Get_JobFilter: JobFilter; safecall;
    function Get_JobHistoryFilter: JobHistoryFilter; safecall;
    function Get_JobCategories: JobCategories; safecall;
    function Get_MSXServerName: WideString; safecall;
    function Get_type_: SQLDMO_JOBSERVER_TYPE; safecall;
    function Get_StartupAccount: WideString; safecall;
    function Get_AlertCategories: AlertCategories; safecall;
    function Get_OperatorCategories: OperatorCategories; safecall;
    procedure Stop; safecall;
    procedure Start; safecall;
    function EnumSubSystems: QueryResults; safecall;
    procedure ReAssignJobsByLogin(const OldLogin: WideString; const NewLogin: WideString); safecall;
    procedure RemoveJobsByLogin(const Login: WideString); safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function EnumJobHistory(JobHistoryFilter: OleVariant): QueryResults; safecall;
    procedure PurgeJobHistory(JobHistoryFilter: OleVariant); safecall;
    function EnumJobs(JobFilter: OleVariant): QueryResults; safecall;
    procedure RemoveJobsByServer(const Login: WideString); safecall;
    procedure MSXEnlist(const TSXServerName: WideString; const Location: WideString); safecall;
    procedure MSXDefect; safecall;
    procedure RemoveJobByID(const JobID: WideString); safecall;
    procedure StartMonitor(const NetSendAddress: WideString; RestartAttempts: Integer); safecall;
    procedure StopMonitor; safecall;
    function GetJobByID(const JobID: WideString; Flag: OleVariant): Job; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Status: SQLDMO_SVCSTATUS_TYPE read Get_Status;
    property AutoStart: WordBool read Get_AutoStart write Set_AutoStart;
    property AlertSystem: AlertSystem read Get_AlertSystem;
    property Operators: Operators read Get_Operators;
    property Alerts: Alerts read Get_Alerts;
    property Jobs: Jobs read Get_Jobs;
    property TargetServers: TargetServers read Get_TargetServers;
    property TargetServerGroups: TargetServerGroups read Get_TargetServerGroups;
    property JobFilter: JobFilter read Get_JobFilter;
    property JobHistoryFilter: JobHistoryFilter read Get_JobHistoryFilter;
    property JobCategories: JobCategories read Get_JobCategories;
    property MSXServerName: WideString read Get_MSXServerName;
    property type_: SQLDMO_JOBSERVER_TYPE read Get_type_;
    property StartupAccount: WideString read Get_StartupAccount;
    property AlertCategories: AlertCategories read Get_AlertCategories;
    property OperatorCategories: OperatorCategories read Get_OperatorCategories;
  end;

// *********************************************************************//
// DispIntf:  JobServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobServerDisp = dispinterface
    ['{10040406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Status: SQLDMO_SVCSTATUS_TYPE readonly dispid 11;
    property AutoStart: WordBool dispid 12;
    property AlertSystem: AlertSystem readonly dispid 14;
    property Operators: Operators readonly dispid 19;
    property Alerts: Alerts readonly dispid 20;
    property Jobs: Jobs readonly dispid 21;
    property TargetServers: TargetServers readonly dispid 22;
    property TargetServerGroups: TargetServerGroups readonly dispid 23;
    property JobFilter: JobFilter readonly dispid 24;
    property JobHistoryFilter: JobHistoryFilter readonly dispid 25;
    property JobCategories: JobCategories readonly dispid 28;
    property MSXServerName: WideString readonly dispid 29;
    property type_: SQLDMO_JOBSERVER_TYPE readonly dispid 30;
    property StartupAccount: WideString readonly dispid 31;
    property AlertCategories: AlertCategories readonly dispid 32;
    property OperatorCategories: OperatorCategories readonly dispid 33;
    procedure Stop; dispid 100;
    procedure Start; dispid 101;
    function EnumSubSystems: QueryResults; dispid 104;
    procedure ReAssignJobsByLogin(const OldLogin: WideString; const NewLogin: WideString); dispid 107;
    procedure RemoveJobsByLogin(const Login: WideString); dispid 108;
    procedure Refresh; dispid 110;
    procedure BeginAlter; dispid 111;
    procedure DoAlter; dispid 112;
    procedure CancelAlter; dispid 113;
    function EnumJobHistory(JobHistoryFilter: OleVariant): QueryResults; dispid 114;
    procedure PurgeJobHistory(JobHistoryFilter: OleVariant); dispid 115;
    function EnumJobs(JobFilter: OleVariant): QueryResults; dispid 118;
    procedure RemoveJobsByServer(const Login: WideString); dispid 120;
    procedure MSXEnlist(const TSXServerName: WideString; const Location: WideString); dispid 121;
    procedure MSXDefect; dispid 122;
    procedure RemoveJobByID(const JobID: WideString); dispid 123;
    procedure StartMonitor(const NetSendAddress: WideString; RestartAttempts: Integer); dispid 124;
    procedure StopMonitor; dispid 125;
    function GetJobByID(const JobID: WideString; Flag: OleVariant): Job; dispid 126;
  end;

// *********************************************************************//
// Interface: AlertSystem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  AlertSystem = interface(_IVSQLDMOStdObject)
    ['{10040506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_FailSafeOperator: WideString; safecall;
    procedure Set_FailSafeOperator(const pRetVal: WideString); safecall;
    function Get_NotificationMethod: SQLDMO_NOTIFY_TYPE; safecall;
    procedure Set_NotificationMethod(pRetVal: SQLDMO_NOTIFY_TYPE); safecall;
    function Get_ForwardingServer: WideString; safecall;
    procedure Set_ForwardingServer(const pRetVal: WideString); safecall;
    function Get_ForwardingSeverity: Integer; safecall;
    procedure Set_ForwardingSeverity(pRetVal: Integer); safecall;
    function Get_PagerToTemplate: WideString; safecall;
    procedure Set_PagerToTemplate(const pRetVal: WideString); safecall;
    function Get_PagerCCTemplate: WideString; safecall;
    procedure Set_PagerCCTemplate(const pRetVal: WideString); safecall;
    function Get_PagerSubjectTemplate: WideString; safecall;
    procedure Set_PagerSubjectTemplate(const pRetVal: WideString); safecall;
    function Get_PagerSendSubjectOnly: WordBool; safecall;
    procedure Set_PagerSendSubjectOnly(pRetVal: WordBool); safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Get_ForwardAlways: WordBool; safecall;
    procedure Set_ForwardAlways(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property FailSafeOperator: WideString read Get_FailSafeOperator write Set_FailSafeOperator;
    property NotificationMethod: SQLDMO_NOTIFY_TYPE read Get_NotificationMethod write Set_NotificationMethod;
    property ForwardingServer: WideString read Get_ForwardingServer write Set_ForwardingServer;
    property ForwardingSeverity: Integer read Get_ForwardingSeverity write Set_ForwardingSeverity;
    property PagerToTemplate: WideString read Get_PagerToTemplate write Set_PagerToTemplate;
    property PagerCCTemplate: WideString read Get_PagerCCTemplate write Set_PagerCCTemplate;
    property PagerSubjectTemplate: WideString read Get_PagerSubjectTemplate write Set_PagerSubjectTemplate;
    property PagerSendSubjectOnly: WordBool read Get_PagerSendSubjectOnly write Set_PagerSendSubjectOnly;
    property ForwardAlways: WordBool read Get_ForwardAlways write Set_ForwardAlways;
  end;

// *********************************************************************//
// DispIntf:  AlertSystemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  AlertSystemDisp = dispinterface
    ['{10040506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property FailSafeOperator: WideString dispid 10;
    property NotificationMethod: SQLDMO_NOTIFY_TYPE dispid 11;
    property ForwardingServer: WideString dispid 12;
    property ForwardingSeverity: Integer dispid 13;
    property PagerToTemplate: WideString dispid 14;
    property PagerCCTemplate: WideString dispid 15;
    property PagerSubjectTemplate: WideString dispid 16;
    property PagerSendSubjectOnly: WordBool dispid 17;
    procedure Refresh; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    property ForwardAlways: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: Operators
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Operators = interface(_IVSQLDMOStdObject)
    ['{10040203-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Operator; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Operator; safecall;
    procedure Add(const Object_: Operator); safecall;
    procedure Remove(Index: OleVariant; NewName: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  OperatorsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  OperatorsDisp = dispinterface
    ['{10040203-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Operator; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Operator; dispid 6;
    procedure Add(const Object_: Operator); dispid 100;
    procedure Remove(Index: OleVariant; NewName: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _Operator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Operator = interface(_IVSQLDMOStdObject)
    ['{10040206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_EmailAddress: WideString; safecall;
    procedure Set_EmailAddress(const pRetVal: WideString); safecall;
    function Get_LastEmailDate: TDateTime; safecall;
    function Get_PagerAddress: WideString; safecall;
    procedure Set_PagerAddress(const pRetVal: WideString); safecall;
    function Get_LastPageDate: TDateTime; safecall;
    function Get_WeekdayPagerStartTime: TDateTime; safecall;
    procedure Set_WeekdayPagerStartTime(pRetVal: TDateTime); safecall;
    function Get_WeekdayPagerEndTime: TDateTime; safecall;
    procedure Set_WeekdayPagerEndTime(pRetVal: TDateTime); safecall;
    function Get_SaturdayPagerStartTime: TDateTime; safecall;
    procedure Set_SaturdayPagerStartTime(pRetVal: TDateTime); safecall;
    function Get_SaturdayPagerEndTime: TDateTime; safecall;
    procedure Set_SaturdayPagerEndTime(pRetVal: TDateTime); safecall;
    function Get_SundayPagerStartTime: TDateTime; safecall;
    procedure Set_SundayPagerStartTime(pRetVal: TDateTime); safecall;
    function Get_SundayPagerEndTime: TDateTime; safecall;
    procedure Set_SundayPagerEndTime(pRetVal: TDateTime); safecall;
    function Get_PagerDays: SQLDMO_WEEKDAY_TYPE; safecall;
    procedure Set_PagerDays(pRetVal: SQLDMO_WEEKDAY_TYPE); safecall;
    function Get_Category: WideString; safecall;
    procedure Set_Category(const pRetVal: WideString); safecall;
    function Get_NetSendAddress: WideString; safecall;
    procedure Set_NetSendAddress(const pRetVal: WideString); safecall;
    function Get_LastNetSendDate: Integer; safecall;
    function Get_LastNetSendTime: Integer; safecall;
    procedure AddNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); safecall;
    procedure UpdateNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); safecall;
    procedure RemoveNotification(const AlertName: WideString); safecall;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE; AlertName: OleVariant): QueryResults; safecall;
    procedure Remove(NewName: OleVariant); safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    function EnumJobNotifications: QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property EmailAddress: WideString read Get_EmailAddress write Set_EmailAddress;
    property LastEmailDate: TDateTime read Get_LastEmailDate;
    property PagerAddress: WideString read Get_PagerAddress write Set_PagerAddress;
    property LastPageDate: TDateTime read Get_LastPageDate;
    property WeekdayPagerStartTime: TDateTime read Get_WeekdayPagerStartTime write Set_WeekdayPagerStartTime;
    property WeekdayPagerEndTime: TDateTime read Get_WeekdayPagerEndTime write Set_WeekdayPagerEndTime;
    property SaturdayPagerStartTime: TDateTime read Get_SaturdayPagerStartTime write Set_SaturdayPagerStartTime;
    property SaturdayPagerEndTime: TDateTime read Get_SaturdayPagerEndTime write Set_SaturdayPagerEndTime;
    property SundayPagerStartTime: TDateTime read Get_SundayPagerStartTime write Set_SundayPagerStartTime;
    property SundayPagerEndTime: TDateTime read Get_SundayPagerEndTime write Set_SundayPagerEndTime;
    property PagerDays: SQLDMO_WEEKDAY_TYPE read Get_PagerDays write Set_PagerDays;
    property Category: WideString read Get_Category write Set_Category;
    property NetSendAddress: WideString read Get_NetSendAddress write Set_NetSendAddress;
    property LastNetSendDate: Integer read Get_LastNetSendDate;
    property LastNetSendTime: Integer read Get_LastNetSendTime;
  end;

// *********************************************************************//
// DispIntf:  _OperatorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _OperatorDisp = dispinterface
    ['{10040206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property Enabled: WordBool dispid 11;
    property EmailAddress: WideString dispid 12;
    property LastEmailDate: TDateTime readonly dispid 13;
    property PagerAddress: WideString dispid 14;
    property LastPageDate: TDateTime readonly dispid 15;
    property WeekdayPagerStartTime: TDateTime dispid 16;
    property WeekdayPagerEndTime: TDateTime dispid 17;
    property SaturdayPagerStartTime: TDateTime dispid 18;
    property SaturdayPagerEndTime: TDateTime dispid 19;
    property SundayPagerStartTime: TDateTime dispid 20;
    property SundayPagerEndTime: TDateTime dispid 21;
    property PagerDays: SQLDMO_WEEKDAY_TYPE dispid 22;
    property Category: WideString dispid 23;
    property NetSendAddress: WideString dispid 24;
    property LastNetSendDate: Integer readonly dispid 25;
    property LastNetSendTime: Integer readonly dispid 26;
    procedure AddNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); dispid 100;
    procedure UpdateNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); dispid 101;
    procedure RemoveNotification(const AlertName: WideString); dispid 102;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE; AlertName: OleVariant): QueryResults; dispid 103;
    procedure Remove(NewName: OleVariant); dispid 104;
    procedure BeginAlter; dispid 105;
    procedure DoAlter; dispid 106;
    procedure CancelAlter; dispid 107;
    procedure Refresh; dispid 108;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 109;
    function EnumJobNotifications: QueryResults; dispid 110;
  end;

// *********************************************************************//
// Interface: Alerts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Alerts = interface(_IVSQLDMOStdObject)
    ['{10040603-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Alert; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Alert; safecall;
    procedure Add(const Object_: Alert); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  AlertsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  AlertsDisp = dispinterface
    ['{10040603-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Alert; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Alert; dispid 6;
    procedure Add(const Object_: Alert); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _Alert
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Alert = interface(_IVSQLDMOStdObject)
    ['{10040606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_EventSource: WideString; safecall;
    function Get_EventCategoryID: Integer; safecall;
    function Get_EventID: Integer; safecall;
    function Get_MessageID: Integer; safecall;
    procedure Set_MessageID(pRetVal: Integer); safecall;
    function Get_Severity: Integer; safecall;
    procedure Set_Severity(pRetVal: Integer); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_DelayBetweenResponses: Integer; safecall;
    procedure Set_DelayBetweenResponses(pRetVal: Integer); safecall;
    function Get_LastOccurrenceDate: TDateTime; safecall;
    procedure Set_LastOccurrenceDate(pRetVal: TDateTime); safecall;
    function Get_LastResponseDate: TDateTime; safecall;
    procedure Set_LastResponseDate(pRetVal: TDateTime); safecall;
    function Get_NotificationMessage: WideString; safecall;
    procedure Set_NotificationMessage(const pRetVal: WideString); safecall;
    function Get_IncludeEventDescription: SQLDMO_NOTIFY_TYPE; safecall;
    procedure Set_IncludeEventDescription(pRetVal: SQLDMO_NOTIFY_TYPE); safecall;
    function Get_DatabaseName: WideString; safecall;
    procedure Set_DatabaseName(const pRetVal: WideString); safecall;
    function Get_EventDescriptionKeyword: WideString; safecall;
    procedure Set_EventDescriptionKeyword(const pRetVal: WideString); safecall;
    function Get_OccurrenceCount: Integer; safecall;
    function Get_CountResetDate: TDateTime; safecall;
    function Get_JobName: WideString; safecall;
    function Get_HasNotification: Integer; safecall;
    procedure AddNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); safecall;
    procedure UpdateNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); safecall;
    procedure RemoveNotification(const OperatorName: WideString); safecall;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE; OperatorName: OleVariant): QueryResults; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    function Get_RaiseSNMPTrap: WordBool; safecall;
    procedure Set_RaiseSNMPTrap(pRetVal: WordBool); safecall;
    function Get_PerformanceCondition: WideString; safecall;
    procedure Set_PerformanceCondition(const pRetVal: WideString); safecall;
    function Get_JobID: WideString; safecall;
    procedure Set_JobID(const pRetVal: WideString); safecall;
    function Get_Category: WideString; safecall;
    procedure Set_Category(const pRetVal: WideString); safecall;
    function Get_type_: SQLDMO_ALERT_TYPE; safecall;
    procedure ResetOccurrenceCount; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property EventSource: WideString read Get_EventSource;
    property EventCategoryID: Integer read Get_EventCategoryID;
    property EventID: Integer read Get_EventID;
    property MessageID: Integer read Get_MessageID write Set_MessageID;
    property Severity: Integer read Get_Severity write Set_Severity;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DelayBetweenResponses: Integer read Get_DelayBetweenResponses write Set_DelayBetweenResponses;
    property LastOccurrenceDate: TDateTime read Get_LastOccurrenceDate write Set_LastOccurrenceDate;
    property LastResponseDate: TDateTime read Get_LastResponseDate write Set_LastResponseDate;
    property NotificationMessage: WideString read Get_NotificationMessage write Set_NotificationMessage;
    property IncludeEventDescription: SQLDMO_NOTIFY_TYPE read Get_IncludeEventDescription write Set_IncludeEventDescription;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property EventDescriptionKeyword: WideString read Get_EventDescriptionKeyword write Set_EventDescriptionKeyword;
    property OccurrenceCount: Integer read Get_OccurrenceCount;
    property CountResetDate: TDateTime read Get_CountResetDate;
    property JobName: WideString read Get_JobName;
    property HasNotification: Integer read Get_HasNotification;
    property RaiseSNMPTrap: WordBool read Get_RaiseSNMPTrap write Set_RaiseSNMPTrap;
    property PerformanceCondition: WideString read Get_PerformanceCondition write Set_PerformanceCondition;
    property JobID: WideString read Get_JobID write Set_JobID;
    property Category: WideString read Get_Category write Set_Category;
    property type_: SQLDMO_ALERT_TYPE read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  _AlertDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _AlertDisp = dispinterface
    ['{10040606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property EventSource: WideString readonly dispid 11;
    property EventCategoryID: Integer readonly dispid 12;
    property EventID: Integer readonly dispid 13;
    property MessageID: Integer dispid 14;
    property Severity: Integer dispid 15;
    property Enabled: WordBool dispid 16;
    property DelayBetweenResponses: Integer dispid 17;
    property LastOccurrenceDate: TDateTime dispid 18;
    property LastResponseDate: TDateTime dispid 19;
    property NotificationMessage: WideString dispid 20;
    property IncludeEventDescription: SQLDMO_NOTIFY_TYPE dispid 21;
    property DatabaseName: WideString dispid 22;
    property EventDescriptionKeyword: WideString dispid 23;
    property OccurrenceCount: Integer readonly dispid 24;
    property CountResetDate: TDateTime readonly dispid 25;
    property JobName: WideString readonly dispid 26;
    property HasNotification: Integer readonly dispid 27;
    procedure AddNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); dispid 100;
    procedure UpdateNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE); dispid 101;
    procedure RemoveNotification(const OperatorName: WideString); dispid 102;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE; OperatorName: OleVariant): QueryResults; dispid 103;
    procedure Remove; dispid 104;
    procedure BeginAlter; dispid 105;
    procedure DoAlter; dispid 106;
    procedure CancelAlter; dispid 107;
    procedure Refresh; dispid 108;
    property RaiseSNMPTrap: WordBool dispid 29;
    property PerformanceCondition: WideString dispid 30;
    property JobID: WideString dispid 31;
    property Category: WideString dispid 32;
    property type_: SQLDMO_ALERT_TYPE readonly dispid 33;
    procedure ResetOccurrenceCount; dispid 109;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 110;
  end;

// *********************************************************************//
// Interface: Jobs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Jobs = interface(_IVSQLDMOStdObject)
    ['{10040803-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Job; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: Job); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  JobsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobsDisp = dispinterface
    ['{10040803-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Job; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: Job); dispid 100;
    procedure Remove(Index: Integer); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _Job
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Job = interface(_IVSQLDMOStdObject)
    ['{10040806-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_JobSteps: JobSteps; safecall;
    function Get_JobID: WideString; safecall;
    function Get_OriginatingServer: WideString; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_StartStepID: Integer; safecall;
    procedure Set_StartStepID(pRetVal: Integer); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_Category: WideString; safecall;
    procedure Set_Category(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_EventlogLevel: SQLDMO_COMPLETION_TYPE; safecall;
    procedure Set_EventlogLevel(pRetVal: SQLDMO_COMPLETION_TYPE); safecall;
    function Get_EmailLevel: SQLDMO_COMPLETION_TYPE; safecall;
    procedure Set_EmailLevel(pRetVal: SQLDMO_COMPLETION_TYPE); safecall;
    function Get_OperatorToEmail: WideString; safecall;
    procedure Set_OperatorToEmail(const pRetVal: WideString); safecall;
    function Get_DateCreated: WideString; safecall;
    function Get_DateLastModified: WideString; safecall;
    function Get_LastRunDate: Integer; safecall;
    function Get_LastRunTime: Integer; safecall;
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE; safecall;
    function Get_CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS; safecall;
    function Get_CurrentRunStep: WideString; safecall;
    function Get_NetSendLevel: SQLDMO_COMPLETION_TYPE; safecall;
    procedure Set_NetSendLevel(pRetVal: SQLDMO_COMPLETION_TYPE); safecall;
    function Get_DeleteLevel: SQLDMO_COMPLETION_TYPE; safecall;
    procedure Set_DeleteLevel(pRetVal: SQLDMO_COMPLETION_TYPE); safecall;
    function Get_HasStep: WordBool; safecall;
    function Get_HasServer: WordBool; safecall;
    function Get_type_: SQLDMO_JOB_TYPE; safecall;
    function Get_JobSchedules: JobSchedules; safecall;
    function Get_HasSchedule: WordBool; safecall;
    function Get_VersionNumber: Integer; safecall;
    function Get_NextRunDate: Integer; safecall;
    function Get_NextRunTime: Integer; safecall;
    function Get_CurrentRunRetryAttempt: Integer; safecall;
    function Get_NextRunScheduleID: Integer; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    procedure ApplyToTargetServer(const Val: WideString); safecall;
    procedure RemoveFromTargetServer(const Val: WideString); safecall;
    function EnumTargetServers: QueryResults; safecall;
    procedure ApplyToTargetServerGroup(const Val: WideString); safecall;
    function EnumHistory(JobHistoryFilter: OleVariant): QueryResults; safecall;
    procedure PurgeHistory; safecall;
    procedure Invoke_; safecall;
    procedure AddStepToJob(const JobStep: JobStep); safecall;
    procedure RemoveFromTargetServerGroup(const Val: WideString); safecall;
    procedure RemoveAllJobSteps; safecall;
    procedure Start(Val: OleVariant); safecall;
    procedure Stop; safecall;
    procedure RemoveAllJobSchedules; safecall;
    function Get_PageLevel: SQLDMO_COMPLETION_TYPE; safecall;
    procedure Set_PageLevel(pRetVal: SQLDMO_COMPLETION_TYPE); safecall;
    function Get_OperatorToNetSend: WideString; safecall;
    procedure Set_OperatorToNetSend(const pRetVal: WideString); safecall;
    function Get_OperatorToPage: WideString; safecall;
    procedure Set_OperatorToPage(const pRetVal: WideString); safecall;
    function EnumAlerts: QueryResults; safecall;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property JobSteps: JobSteps read Get_JobSteps;
    property JobID: WideString read Get_JobID;
    property OriginatingServer: WideString read Get_OriginatingServer;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property StartStepID: Integer read Get_StartStepID write Set_StartStepID;
    property Description: WideString read Get_Description write Set_Description;
    property Category: WideString read Get_Category write Set_Category;
    property Owner: WideString read Get_Owner write Set_Owner;
    property EventlogLevel: SQLDMO_COMPLETION_TYPE read Get_EventlogLevel write Set_EventlogLevel;
    property EmailLevel: SQLDMO_COMPLETION_TYPE read Get_EmailLevel write Set_EmailLevel;
    property OperatorToEmail: WideString read Get_OperatorToEmail write Set_OperatorToEmail;
    property DateCreated: WideString read Get_DateCreated;
    property DateLastModified: WideString read Get_DateLastModified;
    property LastRunDate: Integer read Get_LastRunDate;
    property LastRunTime: Integer read Get_LastRunTime;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE read Get_LastRunOutcome;
    property CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS read Get_CurrentRunStatus;
    property CurrentRunStep: WideString read Get_CurrentRunStep;
    property NetSendLevel: SQLDMO_COMPLETION_TYPE read Get_NetSendLevel write Set_NetSendLevel;
    property DeleteLevel: SQLDMO_COMPLETION_TYPE read Get_DeleteLevel write Set_DeleteLevel;
    property HasStep: WordBool read Get_HasStep;
    property HasServer: WordBool read Get_HasServer;
    property type_: SQLDMO_JOB_TYPE read Get_type_;
    property JobSchedules: JobSchedules read Get_JobSchedules;
    property HasSchedule: WordBool read Get_HasSchedule;
    property VersionNumber: Integer read Get_VersionNumber;
    property NextRunDate: Integer read Get_NextRunDate;
    property NextRunTime: Integer read Get_NextRunTime;
    property CurrentRunRetryAttempt: Integer read Get_CurrentRunRetryAttempt;
    property NextRunScheduleID: Integer read Get_NextRunScheduleID;
    property PageLevel: SQLDMO_COMPLETION_TYPE read Get_PageLevel write Set_PageLevel;
    property OperatorToNetSend: WideString read Get_OperatorToNetSend write Set_OperatorToNetSend;
    property OperatorToPage: WideString read Get_OperatorToPage write Set_OperatorToPage;
  end;

// *********************************************************************//
// DispIntf:  _JobDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _JobDisp = dispinterface
    ['{10040806-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property JobSteps: JobSteps readonly dispid 0;
    property JobID: WideString readonly dispid 13;
    property OriginatingServer: WideString readonly dispid 14;
    property Name: WideString dispid 15;
    property Enabled: WordBool dispid 16;
    property StartStepID: Integer dispid 17;
    property Description: WideString dispid 18;
    property Category: WideString dispid 19;
    property Owner: WideString dispid 20;
    property EventlogLevel: SQLDMO_COMPLETION_TYPE dispid 21;
    property EmailLevel: SQLDMO_COMPLETION_TYPE dispid 22;
    property OperatorToEmail: WideString dispid 23;
    property DateCreated: WideString readonly dispid 25;
    property DateLastModified: WideString readonly dispid 26;
    property LastRunDate: Integer readonly dispid 27;
    property LastRunTime: Integer readonly dispid 28;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE readonly dispid 29;
    property CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS readonly dispid 30;
    property CurrentRunStep: WideString readonly dispid 31;
    property NetSendLevel: SQLDMO_COMPLETION_TYPE dispid 32;
    property DeleteLevel: SQLDMO_COMPLETION_TYPE dispid 34;
    property HasStep: WordBool readonly dispid 35;
    property HasServer: WordBool readonly dispid 36;
    property type_: SQLDMO_JOB_TYPE readonly dispid 37;
    property JobSchedules: JobSchedules readonly dispid 38;
    property HasSchedule: WordBool readonly dispid 39;
    property VersionNumber: Integer readonly dispid 40;
    property NextRunDate: Integer readonly dispid 41;
    property NextRunTime: Integer readonly dispid 42;
    property CurrentRunRetryAttempt: Integer readonly dispid 43;
    property NextRunScheduleID: Integer readonly dispid 44;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    procedure Refresh; dispid 104;
    procedure ApplyToTargetServer(const Val: WideString); dispid 106;
    procedure RemoveFromTargetServer(const Val: WideString); dispid 107;
    function EnumTargetServers: QueryResults; dispid 108;
    procedure ApplyToTargetServerGroup(const Val: WideString); dispid 109;
    function EnumHistory(JobHistoryFilter: OleVariant): QueryResults; dispid 110;
    procedure PurgeHistory; dispid 111;
    procedure Invoke_; dispid 112;
    procedure AddStepToJob(const JobStep: JobStep); dispid 114;
    procedure RemoveFromTargetServerGroup(const Val: WideString); dispid 116;
    procedure RemoveAllJobSteps; dispid 118;
    procedure Start(Val: OleVariant); dispid 119;
    procedure Stop; dispid 120;
    procedure RemoveAllJobSchedules; dispid 121;
    property PageLevel: SQLDMO_COMPLETION_TYPE dispid 45;
    property OperatorToNetSend: WideString dispid 46;
    property OperatorToPage: WideString dispid 47;
    function EnumAlerts: QueryResults; dispid 122;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString; dispid 123;
  end;

// *********************************************************************//
// Interface: JobSteps
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobSteps = interface(_IVSQLDMOStdObject)
    ['{10040903-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): JobStep; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): JobStep; safecall;
    procedure Add(const Object_: JobStep); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  JobStepsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobStepsDisp = dispinterface
    ['{10040903-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): JobStep; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): JobStep; dispid 6;
    procedure Add(const Object_: JobStep); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _JobStep
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _JobStep = interface(_IVSQLDMOStdObject)
    ['{10040906-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_StepID: Integer; safecall;
    procedure Set_StepID(pRetVal: Integer); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_SubSystem: WideString; safecall;
    procedure Set_SubSystem(const pRetVal: WideString); safecall;
    function Get_Command: WideString; safecall;
    procedure Set_Command(const pRetVal: WideString); safecall;
    function Get_Flags: Integer; safecall;
    procedure Set_Flags(pRetVal: Integer); safecall;
    function Get_AdditionalParameters: WideString; safecall;
    procedure Set_AdditionalParameters(const pRetVal: WideString); safecall;
    function Get_CmdExecSuccessCode: Integer; safecall;
    procedure Set_CmdExecSuccessCode(pRetVal: Integer); safecall;
    function Get_OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE; safecall;
    procedure Set_OnSuccessAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE); safecall;
    function Get_OnSuccessStep: Integer; safecall;
    procedure Set_OnSuccessStep(pRetVal: Integer); safecall;
    function Get_OnFailAction: SQLDMO_JOBSTEPACTION_TYPE; safecall;
    procedure Set_OnFailAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE); safecall;
    function Get_OnFailStep: Integer; safecall;
    procedure Set_OnFailStep(pRetVal: Integer); safecall;
    function Get_Server: WideString; safecall;
    procedure Set_Server(const pRetVal: WideString); safecall;
    function Get_DatabaseName: WideString; safecall;
    procedure Set_DatabaseName(const pRetVal: WideString); safecall;
    function Get_DatabaseUserName: WideString; safecall;
    procedure Set_DatabaseUserName(const pRetVal: WideString); safecall;
    function Get_RetryAttempts: Integer; safecall;
    procedure Set_RetryAttempts(pRetVal: Integer); safecall;
    function Get_RetryInterval: Integer; safecall;
    procedure Set_RetryInterval(pRetVal: Integer); safecall;
    function Get_OSRunPriority: SQLDMO_RUNPRIORITY_TYPE; safecall;
    procedure Set_OSRunPriority(pRetVal: SQLDMO_RUNPRIORITY_TYPE); safecall;
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE; safecall;
    function Get_LastRunDuration: Integer; safecall;
    function Get_LastRunRetries: Integer; safecall;
    function Get_LastRunDate: Integer; safecall;
    function Get_LastRunTime: Integer; safecall;
    function Get_OutputFileName: WideString; safecall;
    procedure Set_OutputFileName(const pRetVal: WideString); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property StepID: Integer read Get_StepID write Set_StepID;
    property Name: WideString read Get_Name write Set_Name;
    property SubSystem: WideString read Get_SubSystem write Set_SubSystem;
    property Command: WideString read Get_Command write Set_Command;
    property Flags: Integer read Get_Flags write Set_Flags;
    property AdditionalParameters: WideString read Get_AdditionalParameters write Set_AdditionalParameters;
    property CmdExecSuccessCode: Integer read Get_CmdExecSuccessCode write Set_CmdExecSuccessCode;
    property OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnSuccessAction write Set_OnSuccessAction;
    property OnSuccessStep: Integer read Get_OnSuccessStep write Set_OnSuccessStep;
    property OnFailAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnFailAction write Set_OnFailAction;
    property OnFailStep: Integer read Get_OnFailStep write Set_OnFailStep;
    property Server: WideString read Get_Server write Set_Server;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property DatabaseUserName: WideString read Get_DatabaseUserName write Set_DatabaseUserName;
    property RetryAttempts: Integer read Get_RetryAttempts write Set_RetryAttempts;
    property RetryInterval: Integer read Get_RetryInterval write Set_RetryInterval;
    property OSRunPriority: SQLDMO_RUNPRIORITY_TYPE read Get_OSRunPriority write Set_OSRunPriority;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE read Get_LastRunOutcome;
    property LastRunDuration: Integer read Get_LastRunDuration;
    property LastRunRetries: Integer read Get_LastRunRetries;
    property LastRunDate: Integer read Get_LastRunDate;
    property LastRunTime: Integer read Get_LastRunTime;
    property OutputFileName: WideString read Get_OutputFileName write Set_OutputFileName;
  end;

// *********************************************************************//
// DispIntf:  _JobStepDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _JobStepDisp = dispinterface
    ['{10040906-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property StepID: Integer dispid 13;
    property Name: WideString dispid 14;
    property SubSystem: WideString dispid 15;
    property Command: WideString dispid 16;
    property Flags: Integer dispid 17;
    property AdditionalParameters: WideString dispid 18;
    property CmdExecSuccessCode: Integer dispid 19;
    property OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE dispid 21;
    property OnSuccessStep: Integer dispid 22;
    property OnFailAction: SQLDMO_JOBSTEPACTION_TYPE dispid 23;
    property OnFailStep: Integer dispid 24;
    property Server: WideString dispid 25;
    property DatabaseName: WideString dispid 26;
    property DatabaseUserName: WideString dispid 27;
    property RetryAttempts: Integer dispid 28;
    property RetryInterval: Integer dispid 29;
    property OSRunPriority: SQLDMO_RUNPRIORITY_TYPE dispid 30;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE readonly dispid 31;
    property LastRunDuration: Integer readonly dispid 32;
    property LastRunRetries: Integer readonly dispid 33;
    property LastRunDate: Integer readonly dispid 34;
    property LastRunTime: Integer readonly dispid 35;
    property OutputFileName: WideString dispid 36;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    procedure Refresh; dispid 104;
  end;

// *********************************************************************//
// Interface: JobSchedules
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobSchedules = interface(_IVSQLDMOStdObject)
    ['{10041603-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): JobSchedule; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): JobSchedule; safecall;
    procedure Add(const Object_: JobSchedule); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  JobSchedulesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobSchedulesDisp = dispinterface
    ['{10041603-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): JobSchedule; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): JobSchedule; dispid 6;
    procedure Add(const Object_: JobSchedule); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _JobSchedule
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _JobSchedule = interface(_IVSQLDMOStdObject)
    ['{10041606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_Schedule: Schedule; safecall;
    function Get_DateCreated: WideString; safecall;
    function Get_ScheduleID: Integer; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Schedule: Schedule read Get_Schedule;
    property DateCreated: WideString read Get_DateCreated;
    property ScheduleID: Integer read Get_ScheduleID;
  end;

// *********************************************************************//
// DispIntf:  _JobScheduleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _JobScheduleDisp = dispinterface
    ['{10041606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Enabled: WordBool dispid 11;
    property Schedule: Schedule readonly dispid 12;
    property DateCreated: WideString readonly dispid 13;
    property ScheduleID: Integer readonly dispid 14;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    procedure Refresh; dispid 104;
  end;

// *********************************************************************//
// Interface: Schedule
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Schedule = interface(_IVSQLDMOStdObject)
    ['{10041206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_FrequencyType: SQLDMO_FREQUENCY_TYPE; safecall;
    procedure Set_FrequencyType(pRetVal: SQLDMO_FREQUENCY_TYPE); safecall;
    function Get_FrequencyInterval: Integer; safecall;
    procedure Set_FrequencyInterval(pRetVal: Integer); safecall;
    function Get_FrequencySubDay: SQLDMO_FREQSUB_TYPE; safecall;
    procedure Set_FrequencySubDay(pRetVal: SQLDMO_FREQSUB_TYPE); safecall;
    function Get_FrequencySubDayInterval: Integer; safecall;
    procedure Set_FrequencySubDayInterval(pRetVal: Integer); safecall;
    function Get_FrequencyRelativeInterval: SQLDMO_FREQRELATIVE_TYPE; safecall;
    procedure Set_FrequencyRelativeInterval(pRetVal: SQLDMO_FREQRELATIVE_TYPE); safecall;
    function Get_FrequencyRecurrenceFactor: Integer; safecall;
    procedure Set_FrequencyRecurrenceFactor(pRetVal: Integer); safecall;
    function Get_ActiveStartDate: Integer; safecall;
    procedure Set_ActiveStartDate(pRetVal: Integer); safecall;
    function Get_ActiveEndDate: Integer; safecall;
    procedure Set_ActiveEndDate(pRetVal: Integer); safecall;
    function Get_ActiveStartTimeOfDay: Integer; safecall;
    procedure Set_ActiveStartTimeOfDay(pRetVal: Integer); safecall;
    function Get_ActiveEndTimeOfDay: Integer; safecall;
    procedure Set_ActiveEndTimeOfDay(pRetVal: Integer); safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property FrequencyType: SQLDMO_FREQUENCY_TYPE read Get_FrequencyType write Set_FrequencyType;
    property FrequencyInterval: Integer read Get_FrequencyInterval write Set_FrequencyInterval;
    property FrequencySubDay: SQLDMO_FREQSUB_TYPE read Get_FrequencySubDay write Set_FrequencySubDay;
    property FrequencySubDayInterval: Integer read Get_FrequencySubDayInterval write Set_FrequencySubDayInterval;
    property FrequencyRelativeInterval: SQLDMO_FREQRELATIVE_TYPE read Get_FrequencyRelativeInterval write Set_FrequencyRelativeInterval;
    property FrequencyRecurrenceFactor: Integer read Get_FrequencyRecurrenceFactor write Set_FrequencyRecurrenceFactor;
    property ActiveStartDate: Integer read Get_ActiveStartDate write Set_ActiveStartDate;
    property ActiveEndDate: Integer read Get_ActiveEndDate write Set_ActiveEndDate;
    property ActiveStartTimeOfDay: Integer read Get_ActiveStartTimeOfDay write Set_ActiveStartTimeOfDay;
    property ActiveEndTimeOfDay: Integer read Get_ActiveEndTimeOfDay write Set_ActiveEndTimeOfDay;
  end;

// *********************************************************************//
// DispIntf:  ScheduleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ScheduleDisp = dispinterface
    ['{10041206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property FrequencyType: SQLDMO_FREQUENCY_TYPE dispid 9;
    property FrequencyInterval: Integer dispid 10;
    property FrequencySubDay: SQLDMO_FREQSUB_TYPE dispid 11;
    property FrequencySubDayInterval: Integer dispid 12;
    property FrequencyRelativeInterval: SQLDMO_FREQRELATIVE_TYPE dispid 13;
    property FrequencyRecurrenceFactor: Integer dispid 14;
    property ActiveStartDate: Integer dispid 15;
    property ActiveEndDate: Integer dispid 16;
    property ActiveStartTimeOfDay: Integer dispid 17;
    property ActiveEndTimeOfDay: Integer dispid 18;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
  end;

// *********************************************************************//
// Interface: TargetServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041003-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TargetServers = interface(_IVSQLDMOStdObject)
    ['{10041003-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TargetServer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): TargetServer; safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TargetServersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041003-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TargetServersDisp = dispinterface
    ['{10041003-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TargetServer; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): TargetServer; dispid 6;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _TargetServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TargetServer = interface(_IVSQLDMOStdObject)
    ['{10041006-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ServerID: Integer; safecall;
    function Get_ServerName: WideString; safecall;
    function Get_EnlistDate: WideString; safecall;
    function Get_LastPollDate: WideString; safecall;
    function Get_Status: Integer; safecall;
    function Get_Location: WideString; safecall;
    procedure Set_Location(const pRetVal: WideString); safecall;
    function Get_TimeZoneAdjustment: Integer; safecall;
    function Get_PendingInstructions: Integer; safecall;
    function Get_LocalTime: WideString; safecall;
    function Get_PollingInterval: Integer; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ServerID: Integer read Get_ServerID;
    property ServerName: WideString read Get_ServerName;
    property EnlistDate: WideString read Get_EnlistDate;
    property LastPollDate: WideString read Get_LastPollDate;
    property Status: Integer read Get_Status;
    property Location: WideString read Get_Location write Set_Location;
    property TimeZoneAdjustment: Integer read Get_TimeZoneAdjustment;
    property PendingInstructions: Integer read Get_PendingInstructions;
    property LocalTime: WideString read Get_LocalTime;
    property PollingInterval: Integer read Get_PollingInterval;
  end;

// *********************************************************************//
// DispIntf:  _TargetServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TargetServerDisp = dispinterface
    ['{10041006-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property ServerID: Integer readonly dispid 10;
    property ServerName: WideString readonly dispid 11;
    property EnlistDate: WideString readonly dispid 12;
    property LastPollDate: WideString readonly dispid 13;
    property Status: Integer readonly dispid 14;
    property Location: WideString dispid 15;
    property TimeZoneAdjustment: Integer readonly dispid 16;
    property PendingInstructions: Integer readonly dispid 17;
    property LocalTime: WideString readonly dispid 18;
    property PollingInterval: Integer readonly dispid 19;
    procedure Refresh; dispid 100;
  end;

// *********************************************************************//
// Interface: TargetServerGroups
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TargetServerGroups = interface(_IVSQLDMOStdObject)
    ['{10041103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TargetServerGroup; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): TargetServerGroup; safecall;
    procedure Add(const Object_: TargetServerGroup); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TargetServerGroupsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TargetServerGroupsDisp = dispinterface
    ['{10041103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TargetServerGroup; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): TargetServerGroup; dispid 6;
    procedure Add(const Object_: TargetServerGroup); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _TargetServerGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TargetServerGroup = interface(_IVSQLDMOStdObject)
    ['{10041106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_GroupID: Integer; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    function ListMemberServers: NameList; safecall;
    procedure AddMemberServer(const Val: WideString); safecall;
    procedure RemoveMemberServer(const Val: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property GroupID: Integer read Get_GroupID;
  end;

// *********************************************************************//
// DispIntf:  _TargetServerGroupDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TargetServerGroupDisp = dispinterface
    ['{10041106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property GroupID: Integer readonly dispid 10;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    procedure Refresh; dispid 104;
    function ListMemberServers: NameList; dispid 105;
    procedure AddMemberServer(const Val: WideString); dispid 106;
    procedure RemoveMemberServer(const Val: WideString); dispid 107;
  end;

// *********************************************************************//
// Interface: JobFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobFilter = interface(_IVSQLDMOStdObject)
    ['{10041306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_CurrentExecutionStatus: SQLDMO_JOBEXECUTION_STATUS; safecall;
    procedure Set_CurrentExecutionStatus(pRetVal: SQLDMO_JOBEXECUTION_STATUS); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_Category: WideString; safecall;
    procedure Set_Category(const pRetVal: WideString); safecall;
    function Get_Owner: WideString; safecall;
    procedure Set_Owner(const pRetVal: WideString); safecall;
    function Get_StepSubsystem: WideString; safecall;
    procedure Set_StepSubsystem(const pRetVal: WideString); safecall;
    function Get_DateJobCreated: WideString; safecall;
    procedure Set_DateJobCreated(const pRetVal: WideString); safecall;
    function Get_DateJobLastModified: WideString; safecall;
    procedure Set_DateJobLastModified(const pRetVal: WideString); safecall;
    function Get_DateFindOperand: SQLDMO_FIND_OPERAND; safecall;
    procedure Set_DateFindOperand(pRetVal: SQLDMO_FIND_OPERAND); safecall;
    function Get_type_: SQLDMO_JOB_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_JOB_TYPE); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CurrentExecutionStatus: SQLDMO_JOBEXECUTION_STATUS read Get_CurrentExecutionStatus write Set_CurrentExecutionStatus;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Category: WideString read Get_Category write Set_Category;
    property Owner: WideString read Get_Owner write Set_Owner;
    property StepSubsystem: WideString read Get_StepSubsystem write Set_StepSubsystem;
    property DateJobCreated: WideString read Get_DateJobCreated write Set_DateJobCreated;
    property DateJobLastModified: WideString read Get_DateJobLastModified write Set_DateJobLastModified;
    property DateFindOperand: SQLDMO_FIND_OPERAND read Get_DateFindOperand write Set_DateFindOperand;
    property type_: SQLDMO_JOB_TYPE read Get_type_ write Set_type_;
  end;

// *********************************************************************//
// DispIntf:  JobFilterDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobFilterDisp = dispinterface
    ['{10041306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property CurrentExecutionStatus: SQLDMO_JOBEXECUTION_STATUS dispid 10;
    property Enabled: WordBool dispid 11;
    property Category: WideString dispid 12;
    property Owner: WideString dispid 13;
    property StepSubsystem: WideString dispid 14;
    property DateJobCreated: WideString dispid 15;
    property DateJobLastModified: WideString dispid 16;
    property DateFindOperand: SQLDMO_FIND_OPERAND dispid 17;
    property type_: SQLDMO_JOB_TYPE dispid 18;
  end;

// *********************************************************************//
// Interface: JobHistoryFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobHistoryFilter = interface(_IVSQLDMOStdObject)
    ['{10041406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_JobName: WideString; safecall;
    procedure Set_JobName(const pRetVal: WideString); safecall;
    function Get_StartRunDate: Integer; safecall;
    procedure Set_StartRunDate(pRetVal: Integer); safecall;
    function Get_OutcomeTypes: SQLDMO_JOBOUTCOME_TYPE; safecall;
    procedure Set_OutcomeTypes(pRetVal: SQLDMO_JOBOUTCOME_TYPE); safecall;
    function Get_SQLMessageID: Integer; safecall;
    procedure Set_SQLMessageID(pRetVal: Integer); safecall;
    function Get_SQLSeverity: Integer; safecall;
    procedure Set_SQLSeverity(pRetVal: Integer); safecall;
    function Get_MinimumRunDuration: Integer; safecall;
    procedure Set_MinimumRunDuration(pRetVal: Integer); safecall;
    function Get_OldestFirst: WordBool; safecall;
    procedure Set_OldestFirst(pRetVal: WordBool); safecall;
    function Get_EndRunDate: Integer; safecall;
    procedure Set_EndRunDate(pRetVal: Integer); safecall;
    function Get_MinimumRetries: Integer; safecall;
    procedure Set_MinimumRetries(pRetVal: Integer); safecall;
    function Get_StartRunTime: Integer; safecall;
    procedure Set_StartRunTime(pRetVal: Integer); safecall;
    function Get_EndRunTime: Integer; safecall;
    procedure Set_EndRunTime(pRetVal: Integer); safecall;
    function Get_JobID: WideString; safecall;
    procedure Set_JobID(const pRetVal: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property JobName: WideString read Get_JobName write Set_JobName;
    property StartRunDate: Integer read Get_StartRunDate write Set_StartRunDate;
    property OutcomeTypes: SQLDMO_JOBOUTCOME_TYPE read Get_OutcomeTypes write Set_OutcomeTypes;
    property SQLMessageID: Integer read Get_SQLMessageID write Set_SQLMessageID;
    property SQLSeverity: Integer read Get_SQLSeverity write Set_SQLSeverity;
    property MinimumRunDuration: Integer read Get_MinimumRunDuration write Set_MinimumRunDuration;
    property OldestFirst: WordBool read Get_OldestFirst write Set_OldestFirst;
    property EndRunDate: Integer read Get_EndRunDate write Set_EndRunDate;
    property MinimumRetries: Integer read Get_MinimumRetries write Set_MinimumRetries;
    property StartRunTime: Integer read Get_StartRunTime write Set_StartRunTime;
    property EndRunTime: Integer read Get_EndRunTime write Set_EndRunTime;
    property JobID: WideString read Get_JobID write Set_JobID;
  end;

// *********************************************************************//
// DispIntf:  JobHistoryFilterDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobHistoryFilterDisp = dispinterface
    ['{10041406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property JobName: WideString dispid 9;
    property StartRunDate: Integer dispid 10;
    property OutcomeTypes: SQLDMO_JOBOUTCOME_TYPE dispid 12;
    property SQLMessageID: Integer dispid 14;
    property SQLSeverity: Integer dispid 15;
    property MinimumRunDuration: Integer dispid 16;
    property OldestFirst: WordBool dispid 17;
    property EndRunDate: Integer dispid 18;
    property MinimumRetries: Integer dispid 19;
    property StartRunTime: Integer dispid 20;
    property EndRunTime: Integer dispid 21;
    property JobID: WideString dispid 23;
  end;

// *********************************************************************//
// Interface: JobCategories
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobCategories = interface(_IVSQLDMOStdObject)
    ['{10041503-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Category; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Category; safecall;
    procedure Add(const Object_: Category); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  JobCategoriesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobCategoriesDisp = dispinterface
    ['{10041503-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Category; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Category; dispid 6;
    procedure Add(const Object_: Category); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Category
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041512-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Category = interface(_IVSQLDMOStdObject)
    ['{10041512-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_type_: SQLDMO_CATEGORYTYPE_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_CATEGORYTYPE_TYPE); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure Refresh; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property type_: SQLDMO_CATEGORYTYPE_TYPE read Get_type_ write Set_type_;
  end;

// *********************************************************************//
// DispIntf:  _CategoryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041512-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _CategoryDisp = dispinterface
    ['{10041512-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property type_: SQLDMO_CATEGORYTYPE_TYPE dispid 11;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    procedure Refresh; dispid 104;
  end;

// *********************************************************************//
// Interface: AlertCategories
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  AlertCategories = interface(_IVSQLDMOStdObject)
    ['{10041506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Category; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Category; safecall;
    procedure Add(const Object_: Category); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  AlertCategoriesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  AlertCategoriesDisp = dispinterface
    ['{10041506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Category; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Category; dispid 6;
    procedure Add(const Object_: Category); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: OperatorCategories
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041509-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  OperatorCategories = interface(_IVSQLDMOStdObject)
    ['{10041509-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): Category; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): Category; safecall;
    procedure Add(const Object_: Category); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  OperatorCategoriesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10041509-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  OperatorCategoriesDisp = dispinterface
    ['{10041509-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): Category; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): Category; dispid 6;
    procedure Add(const Object_: Category); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _Restore
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Restore = interface(_IVSQLDMOStdObject)
    ['{10023203-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_PercentCompleteNotification: Integer; safecall;
    procedure Set_PercentCompleteNotification(pRetVal: Integer); safecall;
    function Get_UnloadTapeAfter: WordBool; safecall;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool); safecall;
    function Get_Database: WideString; safecall;
    procedure Set_Database(const pRetVal: WideString); safecall;
    function Get_Devices: WideString; safecall;
    procedure Set_Devices(const pRetVal: WideString); safecall;
    function Get_Files: WideString; safecall;
    procedure Set_Files(const pRetVal: WideString); safecall;
    function Get_Tapes: WideString; safecall;
    procedure Set_Tapes(const pRetVal: WideString); safecall;
    function Get_Pipes: WideString; safecall;
    procedure Set_Pipes(const pRetVal: WideString); safecall;
    function Get_DatabaseFileGroups: WideString; safecall;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString); safecall;
    function Get_DatabaseFiles: WideString; safecall;
    procedure Set_DatabaseFiles(const pRetVal: WideString); safecall;
    function Get_Action: SQLDMO_RESTORE_TYPE; safecall;
    procedure Set_Action(pRetVal: SQLDMO_RESTORE_TYPE); safecall;
    function Get_BackupSetName: WideString; safecall;
    procedure Set_BackupSetName(const pRetVal: WideString); safecall;
    function Get_RelocateFiles: WideString; safecall;
    procedure Set_RelocateFiles(const pRetVal: WideString); safecall;
    function Get_ReplaceDatabase: WordBool; safecall;
    procedure Set_ReplaceDatabase(pRetVal: WordBool); safecall;
    function Get_LastRestore: WordBool; safecall;
    procedure Set_LastRestore(pRetVal: WordBool); safecall;
    function Get_Restart: WordBool; safecall;
    procedure Set_Restart(pRetVal: WordBool); safecall;
    function Get_MediaName: WideString; safecall;
    procedure Set_MediaName(const pRetVal: WideString); safecall;
    function Get_LoadHistory: WordBool; safecall;
    procedure Set_LoadHistory(pRetVal: WordBool); safecall;
    function Get_FileNumber: Integer; safecall;
    procedure Set_FileNumber(pRetVal: Integer); safecall;
    function Get_ToPointInTime: WideString; safecall;
    procedure Set_ToPointInTime(const pRetVal: WideString); safecall;
    function Get_StandbyFiles: WideString; safecall;
    procedure Set_StandbyFiles(const pRetVal: WideString); safecall;
    procedure Abort; safecall;
    procedure SQLRestore(const ServerObject: SQLServer); safecall;
    procedure SQLVerify(const ServerObject: SQLServer); safecall;
    function GenerateSQL: WideString; safecall;
    function ReadBackupHeader(const ServerObject: SQLServer): QueryResults; safecall;
    function ReadFileList(const ServerObject: SQLServer): QueryResults; safecall;
    function ReadMediaHeader(const ServerObject: SQLServer): QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Files: WideString read Get_Files write Set_Files;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_RESTORE_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property RelocateFiles: WideString read Get_RelocateFiles write Set_RelocateFiles;
    property ReplaceDatabase: WordBool read Get_ReplaceDatabase write Set_ReplaceDatabase;
    property LastRestore: WordBool read Get_LastRestore write Set_LastRestore;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property LoadHistory: WordBool read Get_LoadHistory write Set_LoadHistory;
    property FileNumber: Integer read Get_FileNumber write Set_FileNumber;
    property ToPointInTime: WideString read Get_ToPointInTime write Set_ToPointInTime;
    property StandbyFiles: WideString read Get_StandbyFiles write Set_StandbyFiles;
  end;

// *********************************************************************//
// DispIntf:  _RestoreDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RestoreDisp = dispinterface
    ['{10023203-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PercentCompleteNotification: Integer dispid 9;
    property UnloadTapeAfter: WordBool dispid 10;
    property Database: WideString dispid 11;
    property Devices: WideString dispid 12;
    property Files: WideString dispid 13;
    property Tapes: WideString dispid 14;
    property Pipes: WideString dispid 15;
    property DatabaseFileGroups: WideString dispid 16;
    property DatabaseFiles: WideString dispid 17;
    property Action: SQLDMO_RESTORE_TYPE dispid 18;
    property BackupSetName: WideString dispid 19;
    property RelocateFiles: WideString dispid 20;
    property ReplaceDatabase: WordBool dispid 21;
    property LastRestore: WordBool dispid 22;
    property Restart: WordBool dispid 23;
    property MediaName: WideString dispid 24;
    property LoadHistory: WordBool dispid 25;
    property FileNumber: Integer dispid 26;
    property ToPointInTime: WideString dispid 27;
    property StandbyFiles: WideString dispid 28;
    procedure Abort; dispid 100;
    procedure SQLRestore(const ServerObject: SQLServer); dispid 101;
    procedure SQLVerify(const ServerObject: SQLServer); dispid 102;
    function GenerateSQL: WideString; dispid 103;
    function ReadBackupHeader(const ServerObject: SQLServer): QueryResults; dispid 104;
    function ReadFileList(const ServerObject: SQLServer): QueryResults; dispid 105;
    function ReadMediaHeader(const ServerObject: SQLServer): QueryResults; dispid 106;
  end;

// *********************************************************************//
// Interface: _Restore2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023213-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Restore2 = interface(_Restore)
    ['{10023213-E260-11CF-AE68-00AA004A34D5}']
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_MediaPassword: WideString; safecall;
    procedure Set_MediaPassword(const pRetVal: WideString); safecall;
    function Get_KeepReplication: WordBool; safecall;
    procedure Set_KeepReplication(pRetVal: WordBool); safecall;
    function Get_NoRewind: WordBool; safecall;
    procedure Set_NoRewind(pRetVal: WordBool); safecall;
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property KeepReplication: WordBool read Get_KeepReplication write Set_KeepReplication;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  end;

// *********************************************************************//
// DispIntf:  _Restore2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023213-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Restore2Disp = dispinterface
    ['{10023213-E260-11CF-AE68-00AA004A34D5}']
    property Password: WideString dispid 29;
    property MediaPassword: WideString dispid 30;
    property KeepReplication: WordBool dispid 31;
    property NoRewind: WordBool dispid 32;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PercentCompleteNotification: Integer dispid 9;
    property UnloadTapeAfter: WordBool dispid 10;
    property Database: WideString dispid 11;
    property Devices: WideString dispid 12;
    property Files: WideString dispid 13;
    property Tapes: WideString dispid 14;
    property Pipes: WideString dispid 15;
    property DatabaseFileGroups: WideString dispid 16;
    property DatabaseFiles: WideString dispid 17;
    property Action: SQLDMO_RESTORE_TYPE dispid 18;
    property BackupSetName: WideString dispid 19;
    property RelocateFiles: WideString dispid 20;
    property ReplaceDatabase: WordBool dispid 21;
    property LastRestore: WordBool dispid 22;
    property Restart: WordBool dispid 23;
    property MediaName: WideString dispid 24;
    property LoadHistory: WordBool dispid 25;
    property FileNumber: Integer dispid 26;
    property ToPointInTime: WideString dispid 27;
    property StandbyFiles: WideString dispid 28;
    procedure Abort; dispid 100;
    procedure SQLRestore(const ServerObject: SQLServer); dispid 101;
    procedure SQLVerify(const ServerObject: SQLServer); dispid 102;
    function GenerateSQL: WideString; dispid 103;
    function ReadBackupHeader(const ServerObject: SQLServer): QueryResults; dispid 104;
    function ReadFileList(const ServerObject: SQLServer): QueryResults; dispid 105;
    function ReadMediaHeader(const ServerObject: SQLServer): QueryResults; dispid 106;
  end;

// *********************************************************************//
// Interface: RestoreSink
// Flags:     (256) OleAutomation
// GUID:      {10023206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RestoreSink = interface(IUnknown)
    ['{10023206-E260-11CF-AE68-00AA004A34D5}']
    function PercentComplete(const Message: WideString; Percent: Integer): HResult; stdcall;
    function NextMedia(const Message: WideString): HResult; stdcall;
    function Complete(const Message: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Replication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Replication = interface(_IVSQLDMOStdObject)
    ['{10031006-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Publisher: Publisher; safecall;
    function Get_Subscriber: Subscriber; safecall;
    function Get_Distributor: Distributor; safecall;
    function Get_ReplicationDatabases: ReplicationDatabases; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumDataSourceNames: QueryResults; safecall;
    procedure Uninstall(bIgnoreDistributor: WordBool); safecall;
    function EnumCustomResolvers(const Distributor: WideString): QueryResults; safecall;
    procedure ValidateDataSource(const DataSourceName: WideString; const Login: WideString; 
                                 const Password: WideString; SubscriberType: SQLDMO_SUBSCRIBER_TYPE); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Publisher: Publisher read Get_Publisher;
    property Subscriber: Subscriber read Get_Subscriber;
    property Distributor: Distributor read Get_Distributor;
    property ReplicationDatabases: ReplicationDatabases read Get_ReplicationDatabases;
  end;

// *********************************************************************//
// DispIntf:  _ReplicationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031006-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ReplicationDisp = dispinterface
    ['{10031006-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Publisher: Publisher readonly dispid 10;
    property Subscriber: Subscriber readonly dispid 11;
    property Distributor: Distributor readonly dispid 12;
    property ReplicationDatabases: ReplicationDatabases readonly dispid 50;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
    function EnumDataSourceNames: QueryResults; dispid 102;
    procedure Uninstall(bIgnoreDistributor: WordBool); dispid 103;
    function EnumCustomResolvers(const Distributor: WideString): QueryResults; dispid 106;
    procedure ValidateDataSource(const DataSourceName: WideString; const Login: WideString; 
                                 const Password: WideString; SubscriberType: SQLDMO_SUBSCRIBER_TYPE); dispid 107;
  end;

// *********************************************************************//
// Interface: _Replication2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031016-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Replication2 = interface(_Replication)
    ['{10031016-E260-11CF-AE68-00AA004A34D5}']
    procedure AttachSubscriptionDatabase(const szDatabaseName: WideString; 
                                         const szFileName: WideString; 
                                         SubscriberSecurityType: SQLDMO_SECURITY_TYPE; 
                                         const szSubscriberLogin: WideString; 
                                         const szSubscriberPassword: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  _Replication2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031016-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Replication2Disp = dispinterface
    ['{10031016-E260-11CF-AE68-00AA004A34D5}']
    procedure AttachSubscriptionDatabase(const szDatabaseName: WideString; 
                                         const szFileName: WideString; 
                                         SubscriberSecurityType: SQLDMO_SECURITY_TYPE; 
                                         const szSubscriberLogin: WideString; 
                                         const szSubscriberPassword: WideString); dispid 108;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Publisher: Publisher readonly dispid 10;
    property Subscriber: Subscriber readonly dispid 11;
    property Distributor: Distributor readonly dispid 12;
    property ReplicationDatabases: ReplicationDatabases readonly dispid 50;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
    function EnumDataSourceNames: QueryResults; dispid 102;
    procedure Uninstall(bIgnoreDistributor: WordBool); dispid 103;
    function EnumCustomResolvers(const Distributor: WideString): QueryResults; dispid 106;
    procedure ValidateDataSource(const DataSourceName: WideString; const Login: WideString; 
                                 const Password: WideString; SubscriberType: SQLDMO_SUBSCRIBER_TYPE); dispid 107;
  end;

// *********************************************************************//
// Interface: Publisher
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Publisher = interface(_IVSQLDMOStdObject)
    ['{10030C06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_RegisteredSubscribers: RegisteredSubscribers; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    procedure Uninstall; safecall;
    function EnumPublications(ReplicationType: SQLDMO_REPLICATION_TYPE; const Database: WideString; 
                              const AgentLogin: WideString; bSecurityCheck: WordBool): QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property RegisteredSubscribers: RegisteredSubscribers read Get_RegisteredSubscribers;
  end;

// *********************************************************************//
// DispIntf:  PublisherDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030C06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  PublisherDisp = dispinterface
    ['{10030C06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property RegisteredSubscribers: RegisteredSubscribers readonly dispid 50;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
    procedure Uninstall; dispid 102;
    function EnumPublications(ReplicationType: SQLDMO_REPLICATION_TYPE; const Database: WideString; 
                              const AgentLogin: WideString; bSecurityCheck: WordBool): QueryResults; dispid 103;
  end;

// *********************************************************************//
// Interface: RegisteredSubscribers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RegisteredSubscribers = interface(_IVSQLDMOStdObject)
    ['{10030903-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): RegisteredSubscriber; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: RegisteredSubscriber); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  RegisteredSubscribersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RegisteredSubscribersDisp = dispinterface
    ['{10030903-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): RegisteredSubscriber; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: RegisteredSubscriber); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _RegisteredSubscriber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RegisteredSubscriber = interface(_IVSQLDMOStdObject)
    ['{10030906-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_type_: SQLDMO_SUBSCRIBER_TYPE; safecall;
    procedure Set_type_(pRetVal: SQLDMO_SUBSCRIBER_TYPE); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_ReplicationSecurity: ReplicationSecurity; safecall;
    function Get_DefaultDistributionSchedule: Schedule; safecall;
    function Get_DefaultMergeSchedule: Schedule; safecall;
    procedure Remove; safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_SUBSCRIBER_TYPE read Get_type_ write Set_type_;
    property Description: WideString read Get_Description write Set_Description;
    property ReplicationSecurity: ReplicationSecurity read Get_ReplicationSecurity;
    property DefaultDistributionSchedule: Schedule read Get_DefaultDistributionSchedule;
    property DefaultMergeSchedule: Schedule read Get_DefaultMergeSchedule;
  end;

// *********************************************************************//
// DispIntf:  _RegisteredSubscriberDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RegisteredSubscriberDisp = dispinterface
    ['{10030906-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property type_: SQLDMO_SUBSCRIBER_TYPE dispid 11;
    property Description: WideString dispid 12;
    property ReplicationSecurity: ReplicationSecurity readonly dispid 15;
    property DefaultDistributionSchedule: Schedule readonly dispid 16;
    property DefaultMergeSchedule: Schedule readonly dispid 17;
    procedure Remove; dispid 100;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
  end;

// *********************************************************************//
// Interface: _ReplicationSecurity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ReplicationSecurity = interface(_IVSQLDMOStdObject)
    ['{10031206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_SecurityMode: SQLDMO_REPLSECURITY_TYPE; safecall;
    procedure Set_SecurityMode(pRetVal: SQLDMO_REPLSECURITY_TYPE); safecall;
    function Get_StandardLogin: WideString; safecall;
    procedure Set_StandardLogin(const pRetVal: WideString); safecall;
    function Get_StandardPassword: WideString; safecall;
    procedure Set_StandardPassword(const pRetVal: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SecurityMode: SQLDMO_REPLSECURITY_TYPE read Get_SecurityMode write Set_SecurityMode;
    property StandardLogin: WideString read Get_StandardLogin write Set_StandardLogin;
    property StandardPassword: WideString read Get_StandardPassword write Set_StandardPassword;
  end;

// *********************************************************************//
// DispIntf:  _ReplicationSecurityDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ReplicationSecurityDisp = dispinterface
    ['{10031206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property SecurityMode: SQLDMO_REPLSECURITY_TYPE dispid 10;
    property StandardLogin: WideString dispid 12;
    property StandardPassword: WideString dispid 13;
  end;

// *********************************************************************//
// Interface: Subscriber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Subscriber = interface(_IVSQLDMOStdObject)
    ['{10030D06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
  end;

// *********************************************************************//
// DispIntf:  SubscriberDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030D06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SubscriberDisp = dispinterface
    ['{10030D06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
  end;

// *********************************************************************//
// Interface: Distributor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Distributor = interface(_IVSQLDMOStdObject)
    ['{10030E06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_DistributorInstalled: WordBool; safecall;
    function Get_DistributorAvailable: WordBool; safecall;
    function Get_DistributorLocal: WordBool; safecall;
    function Get_DistributionServer: WideString; safecall;
    procedure Set_DistributionServer(const pRetVal: WideString); safecall;
    function Get_DistributionDatabase: WideString; safecall;
    function Get_AgentCheckupInterval: Integer; safecall;
    procedure Set_AgentCheckupInterval(pRetVal: Integer); safecall;
    function Get_IsDistributionPublisher: WordBool; safecall;
    function Get_HasRemoteDistributionPublisher: WordBool; safecall;
    function Get_DistributionPublishers: DistributionPublishers; safecall;
    function Get_DistributionDatabases: DistributionDatabases; safecall;
    procedure Refresh; safecall;
    procedure Install; safecall;
    procedure Uninstall; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumSnapshotAgentViews: QueryResults; safecall;
    function EnumLogReaderAgentViews: QueryResults; safecall;
    function EnumDistributionAgentViews: QueryResults; safecall;
    function EnumMergeAgentViews: QueryResults; safecall;
    function EnumMiscellaneousAgentViews: QueryResults; safecall;
    function CreateAgentProfile(const bstrName: WideString; const bstrDescription: WideString; 
                                ReplAgentType: SQLDMO_REPLAGENT_TYPE): Integer; safecall;
    procedure DeleteAgentProfile(lProfileID: Integer); safecall;
    procedure ChangeAgentProfile(lProfileID: Integer; const bstrDescription: WideString); safecall;
    function EnumAgentProfiles(ReplAgentType: SQLDMO_REPLAGENT_TYPE): QueryResults; safecall;
    procedure ChangeAgentParameter(lProfileID: Integer; const bstrParameterName: WideString; 
                                   const bstrParameterValue: WideString); safecall;
    function EnumAgentParameters(lProfileID: Integer): QueryResults; safecall;
    procedure UpdateAgentProfile(const DistributionDBName: WideString; 
                                 AgentType: SQLDMO_REPLAGENT_TYPE; lAgentID: Integer; 
                                 lProfileID: Integer); safecall;
    procedure UpdateDefaultAgentProfile(lProfileID: Integer); safecall;
    procedure GetAgentsStatus(ReplAgentType: SQLDMO_REPLAGENT_TYPE; 
                              out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); safecall;
    procedure CleanUpDistributionPublisherByName(const bstrName: WideString); safecall;
    procedure SetUpDistributorPassword(const bstrName: WideString); safecall;
    function EnumThirdPartyPublications(const DistributionDBName: WideString): QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DistributorInstalled: WordBool read Get_DistributorInstalled;
    property DistributorAvailable: WordBool read Get_DistributorAvailable;
    property DistributorLocal: WordBool read Get_DistributorLocal;
    property DistributionServer: WideString read Get_DistributionServer write Set_DistributionServer;
    property DistributionDatabase: WideString read Get_DistributionDatabase;
    property AgentCheckupInterval: Integer read Get_AgentCheckupInterval write Set_AgentCheckupInterval;
    property IsDistributionPublisher: WordBool read Get_IsDistributionPublisher;
    property HasRemoteDistributionPublisher: WordBool read Get_HasRemoteDistributionPublisher;
    property DistributionPublishers: DistributionPublishers read Get_DistributionPublishers;
    property DistributionDatabases: DistributionDatabases read Get_DistributionDatabases;
  end;

// *********************************************************************//
// DispIntf:  DistributorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030E06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributorDisp = dispinterface
    ['{10030E06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DistributorInstalled: WordBool readonly dispid 10;
    property DistributorAvailable: WordBool readonly dispid 11;
    property DistributorLocal: WordBool readonly dispid 12;
    property DistributionServer: WideString dispid 13;
    property DistributionDatabase: WideString readonly dispid 14;
    property AgentCheckupInterval: Integer dispid 15;
    property IsDistributionPublisher: WordBool readonly dispid 16;
    property HasRemoteDistributionPublisher: WordBool readonly dispid 17;
    property DistributionPublishers: DistributionPublishers readonly dispid 50;
    property DistributionDatabases: DistributionDatabases readonly dispid 51;
    procedure Refresh; dispid 101;
    procedure Install; dispid 105;
    procedure Uninstall; dispid 106;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 107;
    function EnumSnapshotAgentViews: QueryResults; dispid 108;
    function EnumLogReaderAgentViews: QueryResults; dispid 109;
    function EnumDistributionAgentViews: QueryResults; dispid 110;
    function EnumMergeAgentViews: QueryResults; dispid 111;
    function EnumMiscellaneousAgentViews: QueryResults; dispid 112;
    function CreateAgentProfile(const bstrName: WideString; const bstrDescription: WideString; 
                                ReplAgentType: SQLDMO_REPLAGENT_TYPE): Integer; dispid 113;
    procedure DeleteAgentProfile(lProfileID: Integer); dispid 114;
    procedure ChangeAgentProfile(lProfileID: Integer; const bstrDescription: WideString); dispid 115;
    function EnumAgentProfiles(ReplAgentType: SQLDMO_REPLAGENT_TYPE): QueryResults; dispid 116;
    procedure ChangeAgentParameter(lProfileID: Integer; const bstrParameterName: WideString; 
                                   const bstrParameterValue: WideString); dispid 117;
    function EnumAgentParameters(lProfileID: Integer): QueryResults; dispid 118;
    procedure UpdateAgentProfile(const DistributionDBName: WideString; 
                                 AgentType: SQLDMO_REPLAGENT_TYPE; lAgentID: Integer; 
                                 lProfileID: Integer); dispid 119;
    procedure UpdateDefaultAgentProfile(lProfileID: Integer); dispid 120;
    procedure GetAgentsStatus(ReplAgentType: SQLDMO_REPLAGENT_TYPE; 
                              out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 121;
    procedure CleanUpDistributionPublisherByName(const bstrName: WideString); dispid 122;
    procedure SetUpDistributorPassword(const bstrName: WideString); dispid 123;
    function EnumThirdPartyPublications(const DistributionDBName: WideString): QueryResults; dispid 124;
  end;

// *********************************************************************//
// Interface: DistributionPublishers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionPublishers = interface(_IVSQLDMOStdObject)
    ['{10030703-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): DistributionPublisher; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: DistributionPublisher); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DistributionPublishersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030703-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionPublishersDisp = dispinterface
    ['{10030703-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): DistributionPublisher; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: DistributionPublisher); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _DistributionPublisher
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublisher = interface(_IVSQLDMOStdObject)
    ['{10030706-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_DistributionDatabase: WideString; safecall;
    procedure Set_DistributionDatabase(const pRetVal: WideString); safecall;
    function Get_PublisherSecurity: ReplicationSecurity; safecall;
    function Get_Enabled: WordBool; safecall;
    function Get_DistributionWorkingDirectory: WideString; safecall;
    procedure Set_DistributionWorkingDirectory(const pRetVal: WideString); safecall;
    function Get_TrustedDistributorConnection: WordBool; safecall;
    procedure Set_TrustedDistributorConnection(pRetVal: WordBool); safecall;
    function Get_ThirdParty: WordBool; safecall;
    procedure Set_ThirdParty(pRetVal: WordBool); safecall;
    function Get_DistributionPublications: DistributionPublications; safecall;
    function Get_RegisteredSubscribers: RegisteredSubscribers; safecall;
    procedure Remove; safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumSnapshotAgentSessions(const AgentName: WideString; 
                                       SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; safecall;
    function EnumLogReaderAgentSessions(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; safecall;
    function EnumDistributionAgentSessions(const AgentName: WideString; 
                                           SessionType: SQLDMO_SESSION_TYPE; 
                                           SessionDuration: Integer): QueryResults; safecall;
    function EnumMergeAgentSessions(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                    SessionDuration: Integer): QueryResults; safecall;
    function EnumSnapshotAgentSessionDetails(const AgentName: WideString; 
                                             const SessionID: WideString): QueryResults; safecall;
    function EnumLogReaderAgentSessionDetails(const AgentName: WideString; 
                                              const SessionID: WideString): QueryResults; safecall;
    function EnumDistributionAgentSessionDetails(const AgentName: WideString; 
                                                 const SessionID: WideString): QueryResults; safecall;
    function EnumMergeAgentSessionDetails(const AgentName: WideString; const SessionID: WideString): QueryResults; safecall;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults; safecall;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property DistributionDatabase: WideString read Get_DistributionDatabase write Set_DistributionDatabase;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property Enabled: WordBool read Get_Enabled;
    property DistributionWorkingDirectory: WideString read Get_DistributionWorkingDirectory write Set_DistributionWorkingDirectory;
    property TrustedDistributorConnection: WordBool read Get_TrustedDistributorConnection write Set_TrustedDistributorConnection;
    property ThirdParty: WordBool read Get_ThirdParty write Set_ThirdParty;
    property DistributionPublications: DistributionPublications read Get_DistributionPublications;
    property RegisteredSubscribers: RegisteredSubscribers read Get_RegisteredSubscribers;
  end;

// *********************************************************************//
// DispIntf:  _DistributionPublisherDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030706-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublisherDisp = dispinterface
    ['{10030706-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property DistributionDatabase: WideString dispid 11;
    property PublisherSecurity: ReplicationSecurity readonly dispid 12;
    property Enabled: WordBool readonly dispid 14;
    property DistributionWorkingDirectory: WideString dispid 15;
    property TrustedDistributorConnection: WordBool dispid 16;
    property ThirdParty: WordBool dispid 17;
    property DistributionPublications: DistributionPublications readonly dispid 50;
    property RegisteredSubscribers: RegisteredSubscribers readonly dispid 51;
    procedure Remove; dispid 100;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    function EnumSnapshotAgentSessions(const AgentName: WideString; 
                                       SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; dispid 106;
    function EnumLogReaderAgentSessions(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; dispid 107;
    function EnumDistributionAgentSessions(const AgentName: WideString; 
                                           SessionType: SQLDMO_SESSION_TYPE; 
                                           SessionDuration: Integer): QueryResults; dispid 108;
    function EnumMergeAgentSessions(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                    SessionDuration: Integer): QueryResults; dispid 109;
    function EnumSnapshotAgentSessionDetails(const AgentName: WideString; 
                                             const SessionID: WideString): QueryResults; dispid 110;
    function EnumLogReaderAgentSessionDetails(const AgentName: WideString; 
                                              const SessionID: WideString): QueryResults; dispid 111;
    function EnumDistributionAgentSessionDetails(const AgentName: WideString; 
                                                 const SessionID: WideString): QueryResults; dispid 112;
    function EnumMergeAgentSessionDetails(const AgentName: WideString; const SessionID: WideString): QueryResults; dispid 113;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults; dispid 114;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 115;
  end;

// *********************************************************************//
// Interface: _DistributionPublisher2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublisher2 = interface(_DistributionPublisher)
    ['{10030716-E260-11CF-AE68-00AA004A34D5}']
    procedure ReadAgentOffloadInfo(const bstrJobID: WideString; out pbAgentOffload: WordBool; 
                                   out pszServerNetworkName: WideString; 
                                   out pbIndependentAgent: WordBool); safecall;
    procedure EnableAgentOffload(const bstrJobID: WideString; const szServerNetworkName: WideString); safecall;
    procedure DisableAgentOffload(const bstrJobID: WideString); safecall;
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); safecall;
    function EnumSnapshotAgentSessions2(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer; 
                                        lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumLogReaderAgentSessions2(const AgentName: WideString; 
                                         SessionType: SQLDMO_SESSION_TYPE; 
                                         SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumDistributionAgentSessions2(const AgentName: WideString; 
                                            SessionType: SQLDMO_SESSION_TYPE; 
                                            SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumMergeAgentSessions2(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                     SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumSnapshotAgentSessionDetails2(const AgentName: WideString; 
                                              const SessionID: WideString; 
                                              lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumLogReaderAgentSessionDetails2(const AgentName: WideString; 
                                               const SessionID: WideString; 
                                               lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumDistributionAgentSessionDetails2(const AgentName: WideString; 
                                                  const SessionID: WideString; 
                                                  lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumMergeAgentSessionDetails2(const AgentName: WideString; 
                                           const SessionID: WideString; 
                                           lEstimatedNumRecords: Integer): QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  _DistributionPublisher2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublisher2Disp = dispinterface
    ['{10030716-E260-11CF-AE68-00AA004A34D5}']
    procedure ReadAgentOffloadInfo(const bstrJobID: WideString; out pbAgentOffload: WordBool; 
                                   out pszServerNetworkName: WideString; 
                                   out pbIndependentAgent: WordBool); dispid 116;
    procedure EnableAgentOffload(const bstrJobID: WideString; const szServerNetworkName: WideString); dispid 117;
    procedure DisableAgentOffload(const bstrJobID: WideString); dispid 118;
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); dispid 119;
    function EnumSnapshotAgentSessions2(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer; 
                                        lEstimatedNumRecords: Integer): QueryResults; dispid 120;
    function EnumLogReaderAgentSessions2(const AgentName: WideString; 
                                         SessionType: SQLDMO_SESSION_TYPE; 
                                         SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; dispid 121;
    function EnumDistributionAgentSessions2(const AgentName: WideString; 
                                            SessionType: SQLDMO_SESSION_TYPE; 
                                            SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; dispid 122;
    function EnumMergeAgentSessions2(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                     SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; dispid 123;
    function EnumSnapshotAgentSessionDetails2(const AgentName: WideString; 
                                              const SessionID: WideString; 
                                              lEstimatedNumRecords: Integer): QueryResults; dispid 124;
    function EnumLogReaderAgentSessionDetails2(const AgentName: WideString; 
                                               const SessionID: WideString; 
                                               lEstimatedNumRecords: Integer): QueryResults; dispid 125;
    function EnumDistributionAgentSessionDetails2(const AgentName: WideString; 
                                                  const SessionID: WideString; 
                                                  lEstimatedNumRecords: Integer): QueryResults; dispid 126;
    function EnumMergeAgentSessionDetails2(const AgentName: WideString; 
                                           const SessionID: WideString; 
                                           lEstimatedNumRecords: Integer): QueryResults; dispid 127;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property DistributionDatabase: WideString dispid 11;
    property PublisherSecurity: ReplicationSecurity readonly dispid 12;
    property Enabled: WordBool readonly dispid 14;
    property DistributionWorkingDirectory: WideString dispid 15;
    property TrustedDistributorConnection: WordBool dispid 16;
    property ThirdParty: WordBool dispid 17;
    property DistributionPublications: DistributionPublications readonly dispid 50;
    property RegisteredSubscribers: RegisteredSubscribers readonly dispid 51;
    procedure Remove; dispid 100;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    function EnumSnapshotAgentSessions(const AgentName: WideString; 
                                       SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; dispid 106;
    function EnumLogReaderAgentSessions(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults; dispid 107;
    function EnumDistributionAgentSessions(const AgentName: WideString; 
                                           SessionType: SQLDMO_SESSION_TYPE; 
                                           SessionDuration: Integer): QueryResults; dispid 108;
    function EnumMergeAgentSessions(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                    SessionDuration: Integer): QueryResults; dispid 109;
    function EnumSnapshotAgentSessionDetails(const AgentName: WideString; 
                                             const SessionID: WideString): QueryResults; dispid 110;
    function EnumLogReaderAgentSessionDetails(const AgentName: WideString; 
                                              const SessionID: WideString): QueryResults; dispid 111;
    function EnumDistributionAgentSessionDetails(const AgentName: WideString; 
                                                 const SessionID: WideString): QueryResults; dispid 112;
    function EnumMergeAgentSessionDetails(const AgentName: WideString; const SessionID: WideString): QueryResults; dispid 113;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults; dispid 114;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 115;
  end;

// *********************************************************************//
// Interface: DistributionPublications
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionPublications = interface(_IVSQLDMOStdObject)
    ['{10032103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant; Owner: OleVariant): DistributionPublication; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): DistributionPublication; safecall;
    procedure Add(const Object_: DistributionPublication); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DistributionPublicationsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionPublicationsDisp = dispinterface
    ['{10032103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant; Owner: OleVariant): DistributionPublication; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): DistributionPublication; dispid 6;
    procedure Add(const Object_: DistributionPublication); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _DistributionPublication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublication = interface(_IVSQLDMOStdObject)
    ['{10032106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_PublicationDB: WideString; safecall;
    procedure Set_PublicationDB(const pRetVal: WideString); safecall;
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE; safecall;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE); safecall;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE; safecall;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE); safecall;
    function Get_SnapshotAgent: WideString; safecall;
    procedure Set_SnapshotAgent(const pRetVal: WideString); safecall;
    function Get_LogReaderAgent: WideString; safecall;
    procedure Set_LogReaderAgent(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_VendorName: WideString; safecall;
    procedure Set_VendorName(const pRetVal: WideString); safecall;
    function Get_DistributionArticles: DistributionArticles; safecall;
    function Get_DistributionSubscriptions: DistributionSubscriptions; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function EnumSubscriptionViews: QueryResults; safecall;
    function EnumSnapshotAgentView: QueryResults; safecall;
    function EnumLogReaderAgentView: QueryResults; safecall;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property SnapshotAgent: WideString read Get_SnapshotAgent write Set_SnapshotAgent;
    property LogReaderAgent: WideString read Get_LogReaderAgent write Set_LogReaderAgent;
    property Description: WideString read Get_Description write Set_Description;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
    property DistributionArticles: DistributionArticles read Get_DistributionArticles;
    property DistributionSubscriptions: DistributionSubscriptions read Get_DistributionSubscriptions;
  end;

// *********************************************************************//
// DispIntf:  _DistributionPublicationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublicationDisp = dispinterface
    ['{10032106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property PublicationDB: WideString dispid 11;
    property PublicationType: SQLDMO_PUBLICATION_TYPE dispid 12;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 14;
    property SnapshotAgent: WideString dispid 15;
    property LogReaderAgent: WideString dispid 16;
    property Description: WideString dispid 17;
    property VendorName: WideString dispid 18;
    property DistributionArticles: DistributionArticles readonly dispid 50;
    property DistributionSubscriptions: DistributionSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    function EnumSubscriptionViews: QueryResults; dispid 104;
    function EnumSnapshotAgentView: QueryResults; dispid 105;
    function EnumLogReaderAgentView: QueryResults; dispid 106;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 107;
  end;

// *********************************************************************//
// Interface: _DistributionPublication2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublication2 = interface(_DistributionPublication)
    ['{10032116-E260-11CF-AE68-00AA004A34D5}']
    function Get_ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE; safecall;
    procedure Set_ThirdPartyOptions(pRetVal: SQLDMO_THIRDPARTYOPTION_TYPE); safecall;
    function Get_SnapshotJobID: WideString; safecall;
    function EnumQueueReaderAgentView: QueryResults; safecall;
    function EnumSubscriptionViews2(fExcludeAnonymous: WordBool): QueryResults; safecall;
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); safecall;
    property ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE read Get_ThirdPartyOptions write Set_ThirdPartyOptions;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
  end;

// *********************************************************************//
// DispIntf:  _DistributionPublication2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10032116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionPublication2Disp = dispinterface
    ['{10032116-E260-11CF-AE68-00AA004A34D5}']
    property ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE dispid 19;
    property SnapshotJobID: WideString readonly dispid 20;
    function EnumQueueReaderAgentView: QueryResults; dispid 108;
    function EnumSubscriptionViews2(fExcludeAnonymous: WordBool): QueryResults; dispid 109;
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); dispid 110;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property PublicationDB: WideString dispid 11;
    property PublicationType: SQLDMO_PUBLICATION_TYPE dispid 12;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 14;
    property SnapshotAgent: WideString dispid 15;
    property LogReaderAgent: WideString dispid 16;
    property Description: WideString dispid 17;
    property VendorName: WideString dispid 18;
    property DistributionArticles: DistributionArticles readonly dispid 50;
    property DistributionSubscriptions: DistributionSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    function EnumSubscriptionViews: QueryResults; dispid 104;
    function EnumSnapshotAgentView: QueryResults; dispid 105;
    function EnumLogReaderAgentView: QueryResults; dispid 106;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 107;
  end;

// *********************************************************************//
// Interface: DistributionArticles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionArticles = interface(_IVSQLDMOStdObject)
    ['{10033103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): DistributionArticle; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): DistributionArticle; safecall;
    procedure Add(const Object_: DistributionArticle); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DistributionArticlesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionArticlesDisp = dispinterface
    ['{10033103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): DistributionArticle; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): DistributionArticle; dispid 6;
    procedure Add(const Object_: DistributionArticle); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _DistributionArticle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionArticle = interface(_IVSQLDMOStdObject)
    ['{10033106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_SourceObjectOwner: WideString; safecall;
    procedure Set_SourceObjectOwner(const pRetVal: WideString); safecall;
    function Get_SourceObjectName: WideString; safecall;
    procedure Set_SourceObjectName(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  _DistributionArticleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionArticleDisp = dispinterface
    ['{10033106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Description: WideString dispid 13;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
  end;

// *********************************************************************//
// Interface: _DistributionArticle2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionArticle2 = interface(_DistributionArticle)
    ['{10033116-E260-11CF-AE68-00AA004A34D5}']
    procedure Set_ID(Param1: Integer); safecall;
    property ID: Integer write Set_ID;
  end;

// *********************************************************************//
// DispIntf:  _DistributionArticle2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10033116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionArticle2Disp = dispinterface
    ['{10033116-E260-11CF-AE68-00AA004A34D5}']
    property ID: Integer writeonly dispid 14;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Description: WideString dispid 13;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
  end;

// *********************************************************************//
// Interface: DistributionSubscriptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionSubscriptions = interface(_IVSQLDMOStdObject)
    ['{10034103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): DistributionSubscription; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: DistributionSubscription); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DistributionSubscriptionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionSubscriptionsDisp = dispinterface
    ['{10034103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): DistributionSubscription; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: DistributionSubscription); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _DistributionSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionSubscription = interface(_IVSQLDMOStdObject)
    ['{10034106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_Subscriber: WideString; safecall;
    procedure Set_Subscriber(const pRetVal: WideString); safecall;
    function Get_SubscriptionDB: WideString; safecall;
    procedure Set_SubscriptionDB(const pRetVal: WideString); safecall;
    function Get_Status: SQLDMO_SUBSTATUS_TYPE; safecall;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE); safecall;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE; safecall;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE); safecall;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; safecall;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE); safecall;
    function Get_DistributionSchedule: Schedule; safecall;
    function Get_DistributionAgent: WideString; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property DistributionAgent: WideString read Get_DistributionAgent;
  end;

// *********************************************************************//
// DispIntf:  _DistributionSubscriptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionSubscriptionDisp = dispinterface
    ['{10034106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Subscriber: WideString dispid 10;
    property SubscriptionDB: WideString dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property DistributionSchedule: Schedule readonly dispid 15;
    property DistributionAgent: WideString readonly dispid 16;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
  end;

// *********************************************************************//
// Interface: _DistributionSubscription2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionSubscription2 = interface(_DistributionSubscription)
    ['{10034116-E260-11CF-AE68-00AA004A34D5}']
    function Get_DistributionJobID: WideString; safecall;
    property DistributionJobID: WideString read Get_DistributionJobID;
  end;

// *********************************************************************//
// DispIntf:  _DistributionSubscription2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10034116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionSubscription2Disp = dispinterface
    ['{10034116-E260-11CF-AE68-00AA004A34D5}']
    property DistributionJobID: WideString readonly dispid 17;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Subscriber: WideString dispid 10;
    property SubscriptionDB: WideString dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property DistributionSchedule: Schedule readonly dispid 15;
    property DistributionAgent: WideString readonly dispid 16;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
  end;

// *********************************************************************//
// Interface: DistributionDatabases
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionDatabases = interface(_IVSQLDMOStdObject)
    ['{10031303-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): DistributionDatabase; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: DistributionDatabase); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DistributionDatabasesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DistributionDatabasesDisp = dispinterface
    ['{10031303-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): DistributionDatabase; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: DistributionDatabase); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _DistributionDatabase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionDatabase = interface(_IVSQLDMOStdObject)
    ['{10031306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_MinDistributionRetention: Integer; safecall;
    procedure Set_MinDistributionRetention(pRetVal: Integer); safecall;
    function Get_MaxDistributionRetention: Integer; safecall;
    procedure Set_MaxDistributionRetention(pRetVal: Integer); safecall;
    function Get_HistoryRetention: Integer; safecall;
    procedure Set_HistoryRetention(pRetVal: Integer); safecall;
    function Get_HistoryCleanupTaskName: WideString; safecall;
    function Get_DistributionCleanupTaskName: WideString; safecall;
    function Get_AgentsStatus: SQLDMO_TASKSTATUS_TYPE; safecall;
    function Get_DataFolder: WideString; safecall;
    procedure Set_DataFolder(const pRetVal: WideString); safecall;
    function Get_DataFile: WideString; safecall;
    procedure Set_DataFile(const pRetVal: WideString); safecall;
    function Get_DataFileSize: Integer; safecall;
    procedure Set_DataFileSize(pRetVal: Integer); safecall;
    function Get_LogFolder: WideString; safecall;
    procedure Set_LogFolder(const pRetVal: WideString); safecall;
    function Get_LogFile: WideString; safecall;
    procedure Set_LogFile(const pRetVal: WideString); safecall;
    function Get_LogFileSize: Integer; safecall;
    procedure Set_LogFileSize(pRetVal: Integer); safecall;
    procedure Set_SecurityMode(Param1: SQLDMO_SECURITY_TYPE); safecall;
    procedure Set_StandardLogin(const Param1: WideString); safecall;
    procedure Set_StandardPassword(const Param1: WideString); safecall;
    procedure Remove; safecall;
    procedure Refresh; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property MinDistributionRetention: Integer read Get_MinDistributionRetention write Set_MinDistributionRetention;
    property MaxDistributionRetention: Integer read Get_MaxDistributionRetention write Set_MaxDistributionRetention;
    property HistoryRetention: Integer read Get_HistoryRetention write Set_HistoryRetention;
    property HistoryCleanupTaskName: WideString read Get_HistoryCleanupTaskName;
    property DistributionCleanupTaskName: WideString read Get_DistributionCleanupTaskName;
    property AgentsStatus: SQLDMO_TASKSTATUS_TYPE read Get_AgentsStatus;
    property DataFolder: WideString read Get_DataFolder write Set_DataFolder;
    property DataFile: WideString read Get_DataFile write Set_DataFile;
    property DataFileSize: Integer read Get_DataFileSize write Set_DataFileSize;
    property LogFolder: WideString read Get_LogFolder write Set_LogFolder;
    property LogFile: WideString read Get_LogFile write Set_LogFile;
    property LogFileSize: Integer read Get_LogFileSize write Set_LogFileSize;
    property SecurityMode: SQLDMO_SECURITY_TYPE write Set_SecurityMode;
    property StandardLogin: WideString write Set_StandardLogin;
    property StandardPassword: WideString write Set_StandardPassword;
  end;

// *********************************************************************//
// DispIntf:  _DistributionDatabaseDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionDatabaseDisp = dispinterface
    ['{10031306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property MinDistributionRetention: Integer dispid 14;
    property MaxDistributionRetention: Integer dispid 15;
    property HistoryRetention: Integer dispid 16;
    property HistoryCleanupTaskName: WideString readonly dispid 17;
    property DistributionCleanupTaskName: WideString readonly dispid 18;
    property AgentsStatus: SQLDMO_TASKSTATUS_TYPE readonly dispid 20;
    property DataFolder: WideString dispid 21;
    property DataFile: WideString dispid 22;
    property DataFileSize: Integer dispid 23;
    property LogFolder: WideString dispid 24;
    property LogFile: WideString dispid 25;
    property LogFileSize: Integer dispid 26;
    property SecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 27;
    property StandardLogin: WideString writeonly dispid 28;
    property StandardPassword: WideString writeonly dispid 29;
    procedure Remove; dispid 100;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
  end;

// *********************************************************************//
// Interface: _DistributionDatabase2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionDatabase2 = interface(_DistributionDatabase)
    ['{10031316-E260-11CF-AE68-00AA004A34D5}']
    function EnumQueueReaderAgentSessions(lPublicationID: Integer; 
                                          SessionType: SQLDMO_SESSION_TYPE; 
                                          SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumQueueReaderAgentSessionDetails(lPublicationID: Integer; 
                                                const SessionID: WideString; 
                                                lEstimatedNumRecords: Integer): QueryResults; safecall;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  _DistributionDatabase2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _DistributionDatabase2Disp = dispinterface
    ['{10031316-E260-11CF-AE68-00AA004A34D5}']
    function EnumQueueReaderAgentSessions(lPublicationID: Integer; 
                                          SessionType: SQLDMO_SESSION_TYPE; 
                                          SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults; dispid 107;
    function EnumQueueReaderAgentSessionDetails(lPublicationID: Integer; 
                                                const SessionID: WideString; 
                                                lEstimatedNumRecords: Integer): QueryResults; dispid 108;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults; dispid 109;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 10;
    property MinDistributionRetention: Integer dispid 14;
    property MaxDistributionRetention: Integer dispid 15;
    property HistoryRetention: Integer dispid 16;
    property HistoryCleanupTaskName: WideString readonly dispid 17;
    property DistributionCleanupTaskName: WideString readonly dispid 18;
    property AgentsStatus: SQLDMO_TASKSTATUS_TYPE readonly dispid 20;
    property DataFolder: WideString dispid 21;
    property DataFile: WideString dispid 22;
    property DataFileSize: Integer dispid 23;
    property LogFolder: WideString dispid 24;
    property LogFile: WideString dispid 25;
    property LogFileSize: Integer dispid 26;
    property SecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 27;
    property StandardLogin: WideString writeonly dispid 28;
    property StandardPassword: WideString writeonly dispid 29;
    procedure Remove; dispid 100;
    procedure Refresh; dispid 101;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
  end;

// *********************************************************************//
// Interface: ReplicationDatabases
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabases = interface(_IVSQLDMOStdObject)
    ['{10030A03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): ReplicationDatabase; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): ReplicationDatabase; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ReplicationDatabasesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabasesDisp = dispinterface
    ['{10030A03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): ReplicationDatabase; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): ReplicationDatabase; dispid 6;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: ReplicationDatabase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabase = interface(_IVSQLDMOStdObject)
    ['{10030A06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_EnableTransPublishing: WordBool; safecall;
    procedure Set_EnableTransPublishing(pRetVal: WordBool); safecall;
    function Get_EnableMergePublishing: WordBool; safecall;
    procedure Set_EnableMergePublishing(pRetVal: WordBool); safecall;
    function Get_DBOwner: WordBool; safecall;
    function Get_AllowMergePublication: WordBool; safecall;
    function Get_ReplicationTables: ReplicationTables; safecall;
    function Get_ReplicationStoredProcedures: ReplicationStoredProcedures; safecall;
    function Get_TransPublications: TransPublications; safecall;
    function Get_MergePublications: MergePublications; safecall;
    function Get_TransPullSubscriptions: TransPullSubscriptions; safecall;
    function Get_MergePullSubscriptions: MergePullSubscriptions; safecall;
    procedure EnableTransSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant); safecall;
    procedure DisableTransSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); safecall;
    procedure EnableMergeSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant; SubscriptionPriority: OleVariant); safecall;
    procedure DisableMergeSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    procedure RefreshChildren; safecall;
    function EnumConflictTables(const Publication: WideString): QueryResults; safecall;
    function EnumInitialAccesses: QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property EnableTransPublishing: WordBool read Get_EnableTransPublishing write Set_EnableTransPublishing;
    property EnableMergePublishing: WordBool read Get_EnableMergePublishing write Set_EnableMergePublishing;
    property DBOwner: WordBool read Get_DBOwner;
    property AllowMergePublication: WordBool read Get_AllowMergePublication;
    property ReplicationTables: ReplicationTables read Get_ReplicationTables;
    property ReplicationStoredProcedures: ReplicationStoredProcedures read Get_ReplicationStoredProcedures;
    property TransPublications: TransPublications read Get_TransPublications;
    property MergePublications: MergePublications read Get_MergePublications;
    property TransPullSubscriptions: TransPullSubscriptions read Get_TransPullSubscriptions;
    property MergePullSubscriptions: MergePullSubscriptions read Get_MergePullSubscriptions;
  end;

// *********************************************************************//
// DispIntf:  ReplicationDatabaseDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabaseDisp = dispinterface
    ['{10030A06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property EnableTransPublishing: WordBool dispid 10;
    property EnableMergePublishing: WordBool dispid 11;
    property DBOwner: WordBool readonly dispid 12;
    property AllowMergePublication: WordBool readonly dispid 13;
    property ReplicationTables: ReplicationTables readonly dispid 50;
    property ReplicationStoredProcedures: ReplicationStoredProcedures readonly dispid 51;
    property TransPublications: TransPublications readonly dispid 52;
    property MergePublications: MergePublications readonly dispid 53;
    property TransPullSubscriptions: TransPullSubscriptions readonly dispid 54;
    property MergePullSubscriptions: MergePullSubscriptions readonly dispid 55;
    procedure EnableTransSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant); dispid 100;
    procedure DisableTransSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); dispid 101;
    procedure EnableMergeSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant; SubscriptionPriority: OleVariant); dispid 102;
    procedure DisableMergeSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); dispid 103;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure RefreshChildren; dispid 106;
    function EnumConflictTables(const Publication: WideString): QueryResults; dispid 107;
    function EnumInitialAccesses: QueryResults; dispid 108;
  end;

// *********************************************************************//
// Interface: ReplicationTables
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTables = interface(_IVSQLDMOStdObject)
    ['{10031403-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): ReplicationTable; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ReplicationTablesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTablesDisp = dispinterface
    ['{10031403-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): ReplicationTable; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: ReplicationTable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTable = interface(_IVSQLDMOStdObject)
    ['{10031406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_Owner: WideString; safecall;
    function Get_HasPrimaryKey: WordBool; safecall;
    function Get_Columns: Columns; safecall;
    function Get_HasGuidColumn: WordBool; safecall;
    function Get_HasTimeStampColumn: WordBool; safecall;
    function EnumPublicationArticles: QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property Owner: WideString read Get_Owner;
    property HasPrimaryKey: WordBool read Get_HasPrimaryKey;
    property Columns: Columns read Get_Columns;
    property HasGuidColumn: WordBool read Get_HasGuidColumn;
    property HasTimeStampColumn: WordBool read Get_HasTimeStampColumn;
  end;

// *********************************************************************//
// DispIntf:  ReplicationTableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTableDisp = dispinterface
    ['{10031406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Owner: WideString readonly dispid 10;
    property HasPrimaryKey: WordBool readonly dispid 11;
    property Columns: Columns readonly dispid 12;
    property HasGuidColumn: WordBool readonly dispid 13;
    property HasTimeStampColumn: WordBool readonly dispid 14;
    function EnumPublicationArticles: QueryResults; dispid 101;
  end;

// *********************************************************************//
// Interface: ReplicationStoredProcedures
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProcedures = interface(_IVSQLDMOStdObject)
    ['{10031603-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): ReplicationStoredProcedure; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ReplicationStoredProceduresDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProceduresDisp = dispinterface
    ['{10031603-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): ReplicationStoredProcedure; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: ReplicationStoredProcedure
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProcedure = interface(_IVSQLDMOStdObject)
    ['{10031606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_SystemObject: WordBool; safecall;
    function Get_Owner: WideString; safecall;
    function EnumPublicationArticles: QueryResults; safecall;
    function EnumDependencies(DependencyType: OleVariant): QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property SystemObject: WordBool read Get_SystemObject;
    property Owner: WideString read Get_Owner;
  end;

// *********************************************************************//
// DispIntf:  ReplicationStoredProcedureDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProcedureDisp = dispinterface
    ['{10031606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property SystemObject: WordBool readonly dispid 11;
    property Owner: WideString readonly dispid 12;
    function EnumPublicationArticles: QueryResults; dispid 101;
    function EnumDependencies(DependencyType: OleVariant): QueryResults; dispid 102;
  end;

// *********************************************************************//
// Interface: TransPublications
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransPublications = interface(_IVSQLDMOStdObject)
    ['{10030103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TransPublication; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): TransPublication; safecall;
    procedure Add(const Object_: TransPublication); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TransPublicationsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransPublicationsDisp = dispinterface
    ['{10030103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TransPublication; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): TransPublication; dispid 6;
    procedure Add(const Object_: TransPublication); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _TransPublication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPublication = interface(_IVSQLDMOStdObject)
    ['{10030106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_RetentionPeriod: Integer; safecall;
    procedure Set_RetentionPeriod(pRetVal: Integer); safecall;
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE; safecall;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE); safecall;
    function Get_SnapshotAvailable: WordBool; safecall;
    procedure Set_SnapshotAvailable(pRetVal: WordBool); safecall;
    function Get_SnapshotSchedule: Schedule; safecall;
    function Get_SnapshotJobID: WideString; safecall;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE; safecall;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE); safecall;
    function Get_HasSubscription: WordBool; safecall;
    function Get_AllowSynchronousTransactions: WordBool; safecall;
    procedure Set_AllowSynchronousTransactions(pRetVal: WordBool); safecall;
    function Get_AutogenerateSyncProcedures: WordBool; safecall;
    procedure Set_AutogenerateSyncProcedures(pRetVal: WordBool); safecall;
    function Get_ReplicationFrequency: SQLDMO_REPFREQ_TYPE; safecall;
    procedure Set_ReplicationFrequency(pRetVal: SQLDMO_REPFREQ_TYPE); safecall;
    function Get_TransArticles: TransArticles; safecall;
    function Get_TransSubscriptions: TransSubscriptions; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    procedure ActivateSubscriptions; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumSubscriptions: QueryResults; safecall;
    procedure RefreshChildren; safecall;
    procedure ReInitializeAllSubscriptions; safecall;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; safecall;
    procedure GrantPublicationAccess(const szLoginName: WideString); safecall;
    procedure RevokePublicationAccess(const szLoginName: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property HasSubscription: WordBool read Get_HasSubscription;
    property AllowSynchronousTransactions: WordBool read Get_AllowSynchronousTransactions write Set_AllowSynchronousTransactions;
    property AutogenerateSyncProcedures: WordBool read Get_AutogenerateSyncProcedures write Set_AutogenerateSyncProcedures;
    property ReplicationFrequency: SQLDMO_REPFREQ_TYPE read Get_ReplicationFrequency write Set_ReplicationFrequency;
    property TransArticles: TransArticles read Get_TransArticles;
    property TransSubscriptions: TransSubscriptions read Get_TransSubscriptions;
  end;

// *********************************************************************//
// DispIntf:  _TransPublicationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPublicationDisp = dispinterface
    ['{10030106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property Description: WideString dispid 11;
    property Enabled: WordBool dispid 12;
    property RetentionPeriod: Integer dispid 13;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE dispid 14;
    property SnapshotAvailable: WordBool dispid 15;
    property SnapshotSchedule: Schedule readonly dispid 16;
    property SnapshotJobID: WideString readonly dispid 17;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 18;
    property HasSubscription: WordBool readonly dispid 20;
    property AllowSynchronousTransactions: WordBool dispid 30;
    property AutogenerateSyncProcedures: WordBool dispid 31;
    property ReplicationFrequency: SQLDMO_REPFREQ_TYPE dispid 32;
    property TransArticles: TransArticles readonly dispid 50;
    property TransSubscriptions: TransSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    procedure ActivateSubscriptions; dispid 107;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 108;
    function EnumSubscriptions: QueryResults; dispid 109;
    procedure RefreshChildren; dispid 110;
    procedure ReInitializeAllSubscriptions; dispid 111;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; dispid 112;
    procedure GrantPublicationAccess(const szLoginName: WideString); dispid 113;
    procedure RevokePublicationAccess(const szLoginName: WideString); dispid 114;
  end;

// *********************************************************************//
// Interface: _TransPublication2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPublication2 = interface(_TransPublication)
    ['{10030116-E260-11CF-AE68-00AA004A34D5}']
    function Get_AllowQueuedTransactions: WordBool; safecall;
    procedure Set_AllowQueuedTransactions(pRetVal: WordBool); safecall;
    function Get_AltSnapshotFolder: WideString; safecall;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString); safecall;
    function Get_PreSnapshotScript: WideString; safecall;
    procedure Set_PreSnapshotScript(const pRetVal: WideString); safecall;
    function Get_PostSnapshotScript: WideString; safecall;
    procedure Set_PostSnapshotScript(const pRetVal: WideString); safecall;
    function Get_FTPAddress: WideString; safecall;
    procedure Set_FTPAddress(const pRetVal: WideString); safecall;
    function Get_FTPPort: Integer; safecall;
    procedure Set_FTPPort(pRetVal: Integer); safecall;
    function Get_FTPSubdirectory: WideString; safecall;
    procedure Set_FTPSubdirectory(const pRetVal: WideString); safecall;
    function Get_FTPLogin: WideString; safecall;
    procedure Set_FTPLogin(const pRetVal: WideString); safecall;
    procedure Set_FTPPassword(const Param1: WideString); safecall;
    function Get_AllowDTS: WordBool; safecall;
    procedure Set_AllowDTS(pRetVal: WordBool); safecall;
    function Get_CentralizedConflicts: WordBool; safecall;
    procedure Set_CentralizedConflicts(pRetVal: WordBool); safecall;
    function Get_ConflictRetention: Integer; safecall;
    procedure Set_ConflictRetention(pRetVal: Integer); safecall;
    function Get_ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE; safecall;
    procedure Set_ConflictPolicy(pRetVal: SQLDMO_CONFLICTPOLICY_TYPE); safecall;
    function Get_QueueType: SQLDMO_REPLQUEUE_TYPE; safecall;
    procedure Set_QueueType(pRetVal: SQLDMO_REPLQUEUE_TYPE); safecall;
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE; safecall;
    function Get_InActiveDirectory: WordBool; safecall;
    procedure Set_InActiveDirectory(pRetVal: WordBool); safecall;
    function BrowseSnapshotFolder(const szSubscriberName: WideString; 
                                  const szSubscriberDB: WideString): WideString; safecall;
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                  ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                  fShutDownAgent: WordBool); safecall;
    procedure ValidateSubscriptions(const szSubscriberNames: WideString; 
                                    const szSubscriberDBs: WideString; 
                                    ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                    ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                    fShutDownAgent: WordBool); safecall;
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString); safecall;
    procedure CopySnapshot(const szDestinationFolder: WideString; 
                           const szSubscriberName: WideString; const szSubscriberDB: WideString); safecall;
    property AllowQueuedTransactions: WordBool read Get_AllowQueuedTransactions write Set_AllowQueuedTransactions;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property FTPPassword: WideString write Set_FTPPassword;
    property AllowDTS: WordBool read Get_AllowDTS write Set_AllowDTS;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE read Get_ConflictPolicy write Set_ConflictPolicy;
    property QueueType: SQLDMO_REPLQUEUE_TYPE read Get_QueueType write Set_QueueType;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE read Get_CompatibilityLevel;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
  end;

// *********************************************************************//
// DispIntf:  _TransPublication2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPublication2Disp = dispinterface
    ['{10030116-E260-11CF-AE68-00AA004A34D5}']
    property AllowQueuedTransactions: WordBool dispid 33;
    property AltSnapshotFolder: WideString dispid 34;
    property PreSnapshotScript: WideString dispid 35;
    property PostSnapshotScript: WideString dispid 36;
    property FTPAddress: WideString dispid 37;
    property FTPPort: Integer dispid 38;
    property FTPSubdirectory: WideString dispid 39;
    property FTPLogin: WideString dispid 40;
    property FTPPassword: WideString writeonly dispid 41;
    property AllowDTS: WordBool dispid 42;
    property CentralizedConflicts: WordBool dispid 43;
    property ConflictRetention: Integer dispid 44;
    property ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE dispid 45;
    property QueueType: SQLDMO_REPLQUEUE_TYPE dispid 46;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE readonly dispid 47;
    property InActiveDirectory: WordBool dispid 48;
    function BrowseSnapshotFolder(const szSubscriberName: WideString; 
                                  const szSubscriberDB: WideString): WideString; dispid 115;
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                  ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                  fShutDownAgent: WordBool); dispid 116;
    procedure ValidateSubscriptions(const szSubscriberNames: WideString; 
                                    const szSubscriberDBs: WideString; 
                                    ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                    ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                    fShutDownAgent: WordBool); dispid 117;
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString); dispid 118;
    procedure CopySnapshot(const szDestinationFolder: WideString; 
                           const szSubscriberName: WideString; const szSubscriberDB: WideString); dispid 119;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property Description: WideString dispid 11;
    property Enabled: WordBool dispid 12;
    property RetentionPeriod: Integer dispid 13;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE dispid 14;
    property SnapshotAvailable: WordBool dispid 15;
    property SnapshotSchedule: Schedule readonly dispid 16;
    property SnapshotJobID: WideString readonly dispid 17;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 18;
    property HasSubscription: WordBool readonly dispid 20;
    property AllowSynchronousTransactions: WordBool dispid 30;
    property AutogenerateSyncProcedures: WordBool dispid 31;
    property ReplicationFrequency: SQLDMO_REPFREQ_TYPE dispid 32;
    property TransArticles: TransArticles readonly dispid 50;
    property TransSubscriptions: TransSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    procedure ActivateSubscriptions; dispid 107;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 108;
    function EnumSubscriptions: QueryResults; dispid 109;
    procedure RefreshChildren; dispid 110;
    procedure ReInitializeAllSubscriptions; dispid 111;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; dispid 112;
    procedure GrantPublicationAccess(const szLoginName: WideString); dispid 113;
    procedure RevokePublicationAccess(const szLoginName: WideString); dispid 114;
  end;

// *********************************************************************//
// Interface: TransArticles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransArticles = interface(_IVSQLDMOStdObject)
    ['{10030203-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TransArticle; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): TransArticle; safecall;
    procedure Add(const Object_: TransArticle); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TransArticlesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030203-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransArticlesDisp = dispinterface
    ['{10030203-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TransArticle; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): TransArticle; dispid 6;
    procedure Add(const Object_: TransArticle); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _TransArticle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransArticle = interface(_IVSQLDMOStdObject)
    ['{10030206-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_SourceObjectOwner: WideString; safecall;
    procedure Set_SourceObjectOwner(const pRetVal: WideString); safecall;
    function Get_SourceObjectName: WideString; safecall;
    procedure Set_SourceObjectName(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_ReplicateAllColumns: WordBool; safecall;
    function Get_SnapshotObjectOwner: WideString; safecall;
    procedure Set_SnapshotObjectOwner(const pRetVal: WideString); safecall;
    function Get_SnapshotObjectName: WideString; safecall;
    procedure Set_SnapshotObjectName(const pRetVal: WideString); safecall;
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE; safecall;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE); safecall;
    function Get_InsertCommand: WideString; safecall;
    procedure Set_InsertCommand(const pRetVal: WideString); safecall;
    function Get_UpdateCommand: WideString; safecall;
    procedure Set_UpdateCommand(const pRetVal: WideString); safecall;
    function Get_DeleteCommand: WideString; safecall;
    procedure Set_DeleteCommand(const pRetVal: WideString); safecall;
    function Get_ReplicationFilterProcOwner: WideString; safecall;
    procedure Set_ReplicationFilterProcOwner(const pRetVal: WideString); safecall;
    function Get_ReplicationFilterProcName: WideString; safecall;
    procedure Set_ReplicationFilterProcName(const pRetVal: WideString); safecall;
    function Get_CreationScriptPath: WideString; safecall;
    procedure Set_CreationScriptPath(const pRetVal: WideString); safecall;
    function Get_DestinationOwnerName: WideString; safecall;
    procedure Set_DestinationOwnerName(const pRetVal: WideString); safecall;
    function Get_DestinationObjectName: WideString; safecall;
    procedure Set_DestinationObjectName(const pRetVal: WideString); safecall;
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE; safecall;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE); safecall;
    function Get_FilterClause: WideString; safecall;
    procedure Set_FilterClause(const pRetVal: WideString); safecall;
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE; safecall;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE); safecall;
    function Get_CommandOptions: SQLDMO_COMMANDOPTION_TYPE; safecall;
    procedure Set_CommandOptions(pRetVal: SQLDMO_COMMANDOPTION_TYPE); safecall;
    function Get_TransSubscriptions: TransSubscriptions; safecall;
    procedure Remove; safecall;
    function ListReplicatedColumns: SQLObjectList; safecall;
    procedure AddReplicatedColumns(const Columns: WideString); safecall;
    procedure RemoveReplicatedColumns(const Columns: WideString); safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
    property ReplicateAllColumns: WordBool read Get_ReplicateAllColumns;
    property SnapshotObjectOwner: WideString read Get_SnapshotObjectOwner write Set_SnapshotObjectOwner;
    property SnapshotObjectName: WideString read Get_SnapshotObjectName write Set_SnapshotObjectName;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property InsertCommand: WideString read Get_InsertCommand write Set_InsertCommand;
    property UpdateCommand: WideString read Get_UpdateCommand write Set_UpdateCommand;
    property DeleteCommand: WideString read Get_DeleteCommand write Set_DeleteCommand;
    property ReplicationFilterProcOwner: WideString read Get_ReplicationFilterProcOwner write Set_ReplicationFilterProcOwner;
    property ReplicationFilterProcName: WideString read Get_ReplicationFilterProcName write Set_ReplicationFilterProcName;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property FilterClause: WideString read Get_FilterClause write Set_FilterClause;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property CommandOptions: SQLDMO_COMMANDOPTION_TYPE read Get_CommandOptions write Set_CommandOptions;
    property TransSubscriptions: TransSubscriptions read Get_TransSubscriptions;
  end;

// *********************************************************************//
// DispIntf:  _TransArticleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030206-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransArticleDisp = dispinterface
    ['{10030206-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Description: WideString dispid 13;
    property ReplicateAllColumns: WordBool readonly dispid 14;
    property SnapshotObjectOwner: WideString dispid 15;
    property SnapshotObjectName: WideString dispid 16;
    property ArticleType: SQLDMO_ARTICLE_TYPE dispid 17;
    property InsertCommand: WideString dispid 18;
    property UpdateCommand: WideString dispid 19;
    property DeleteCommand: WideString dispid 20;
    property ReplicationFilterProcOwner: WideString dispid 21;
    property ReplicationFilterProcName: WideString dispid 22;
    property CreationScriptPath: WideString dispid 23;
    property DestinationOwnerName: WideString dispid 24;
    property DestinationObjectName: WideString dispid 25;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE dispid 26;
    property FilterClause: WideString dispid 27;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE dispid 28;
    property CommandOptions: SQLDMO_COMMANDOPTION_TYPE dispid 29;
    property TransSubscriptions: TransSubscriptions readonly dispid 50;
    procedure Remove; dispid 100;
    function ListReplicatedColumns: SQLObjectList; dispid 101;
    procedure AddReplicatedColumns(const Columns: WideString); dispid 102;
    procedure RemoveReplicatedColumns(const Columns: WideString); dispid 103;
    procedure BeginAlter; dispid 104;
    procedure DoAlter; dispid 105;
    procedure CancelAlter; dispid 106;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; dispid 107;
  end;

// *********************************************************************//
// Interface: _TransArticle2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransArticle2 = interface(_TransArticle)
    ['{10030216-E260-11CF-AE68-00AA004A34D5}']
    function Get_AutoIdentityRange: WordBool; safecall;
    procedure Set_AutoIdentityRange(pRetVal: WordBool); safecall;
    function Get_PublisherIdentityRangeSize: WideString; safecall;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString); safecall;
    function Get_SubscriberIdentityRangeSize: WideString; safecall;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString); safecall;
    function Get_IdentityRangeThreshold: Integer; safecall;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer); safecall;
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
  end;

// *********************************************************************//
// DispIntf:  _TransArticle2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransArticle2Disp = dispinterface
    ['{10030216-E260-11CF-AE68-00AA004A34D5}']
    property AutoIdentityRange: WordBool dispid 30;
    property PublisherIdentityRangeSize: WideString dispid 31;
    property SubscriberIdentityRangeSize: WideString dispid 32;
    property IdentityRangeThreshold: Integer dispid 33;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Description: WideString dispid 13;
    property ReplicateAllColumns: WordBool readonly dispid 14;
    property SnapshotObjectOwner: WideString dispid 15;
    property SnapshotObjectName: WideString dispid 16;
    property ArticleType: SQLDMO_ARTICLE_TYPE dispid 17;
    property InsertCommand: WideString dispid 18;
    property UpdateCommand: WideString dispid 19;
    property DeleteCommand: WideString dispid 20;
    property ReplicationFilterProcOwner: WideString dispid 21;
    property ReplicationFilterProcName: WideString dispid 22;
    property CreationScriptPath: WideString dispid 23;
    property DestinationOwnerName: WideString dispid 24;
    property DestinationObjectName: WideString dispid 25;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE dispid 26;
    property FilterClause: WideString dispid 27;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE dispid 28;
    property CommandOptions: SQLDMO_COMMANDOPTION_TYPE dispid 29;
    property TransSubscriptions: TransSubscriptions readonly dispid 50;
    procedure Remove; dispid 100;
    function ListReplicatedColumns: SQLObjectList; dispid 101;
    procedure AddReplicatedColumns(const Columns: WideString); dispid 102;
    procedure RemoveReplicatedColumns(const Columns: WideString); dispid 103;
    procedure BeginAlter; dispid 104;
    procedure DoAlter; dispid 105;
    procedure CancelAlter; dispid 106;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; dispid 107;
  end;

// *********************************************************************//
// Interface: TransSubscriptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransSubscriptions = interface(_IVSQLDMOStdObject)
    ['{10030303-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TransSubscription; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: TransSubscription); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TransSubscriptionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransSubscriptionsDisp = dispinterface
    ['{10030303-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TransSubscription; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: TransSubscription); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _TransSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransSubscription = interface(_IVSQLDMOStdObject)
    ['{10030306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Subscriber: WideString; safecall;
    procedure Set_Subscriber(const pRetVal: WideString); safecall;
    function Get_SubscriptionDB: WideString; safecall;
    procedure Set_SubscriptionDB(const pRetVal: WideString); safecall;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE; safecall;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE); safecall;
    function Get_Status: SQLDMO_SUBSTATUS_TYPE; safecall;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE); safecall;
    function Get_FullSubscription: WordBool; safecall;
    function Get_DistributionSchedule: Schedule; safecall;
    function Get_Name: WideString; safecall;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; safecall;
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE; safecall;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE); safecall;
    function Get_DistributionJobID: WideString; safecall;
    procedure Set_EnabledForSyncMgr(Param1: WordBool); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    procedure ReInitialize; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property FullSubscription: WordBool read Get_FullSubscription;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property Name: WideString read Get_Name;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property DistributionJobID: WideString read Get_DistributionJobID;
    property EnabledForSyncMgr: WordBool write Set_EnabledForSyncMgr;
  end;

// *********************************************************************//
// DispIntf:  _TransSubscriptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransSubscriptionDisp = dispinterface
    ['{10030306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Subscriber: WideString dispid 9;
    property SubscriptionDB: WideString dispid 10;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property FullSubscription: WordBool readonly dispid 13;
    property DistributionSchedule: Schedule readonly dispid 14;
    property Name: WideString readonly dispid 15;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE readonly dispid 16;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE dispid 17;
    property DistributionJobID: WideString readonly dispid 19;
    property EnabledForSyncMgr: WordBool writeonly dispid 20;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure ReInitialize; dispid 106;
  end;

// *********************************************************************//
// Interface: _TransSubscription2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransSubscription2 = interface(_TransSubscription)
    ['{10030316-E260-11CF-AE68-00AA004A34D5}']
    function Get_AgentOffload: WordBool; safecall;
    procedure Set_AgentOffload(pRetVal: WordBool); safecall;
    function Get_AgentOffloadServer: WideString; safecall;
    procedure Set_AgentOffloadServer(const pRetVal: WideString); safecall;
    function Get_DTSPackageName: WideString; safecall;
    procedure Set_DTSPackageName(const pRetVal: WideString); safecall;
    procedure Set_DTSPackagePassword(const Param1: WideString); safecall;
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE; safecall;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE); safecall;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackagePassword: WideString write Set_DTSPackagePassword;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
  end;

// *********************************************************************//
// DispIntf:  _TransSubscription2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransSubscription2Disp = dispinterface
    ['{10030316-E260-11CF-AE68-00AA004A34D5}']
    property AgentOffload: WordBool dispid 21;
    property AgentOffloadServer: WideString dispid 22;
    property DTSPackageName: WideString dispid 23;
    property DTSPackagePassword: WideString writeonly dispid 24;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE dispid 25;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Subscriber: WideString dispid 9;
    property SubscriptionDB: WideString dispid 10;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property FullSubscription: WordBool readonly dispid 13;
    property DistributionSchedule: Schedule readonly dispid 14;
    property Name: WideString readonly dispid 15;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE readonly dispid 16;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE dispid 17;
    property DistributionJobID: WideString readonly dispid 19;
    property EnabledForSyncMgr: WordBool writeonly dispid 20;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure ReInitialize; dispid 106;
  end;

// *********************************************************************//
// Interface: MergePublications
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergePublications = interface(_IVSQLDMOStdObject)
    ['{10030403-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergePublication; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): MergePublication; safecall;
    procedure Add(const Object_: MergePublication); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergePublicationsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergePublicationsDisp = dispinterface
    ['{10030403-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergePublication; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): MergePublication; dispid 6;
    procedure Add(const Object_: MergePublication); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _MergePublication
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePublication = interface(_IVSQLDMOStdObject)
    ['{10030406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_RetentionPeriod: Integer; safecall;
    procedure Set_RetentionPeriod(pRetVal: Integer); safecall;
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE; safecall;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE); safecall;
    function Get_SnapshotAvailable: WordBool; safecall;
    procedure Set_SnapshotAvailable(pRetVal: WordBool); safecall;
    function Get_SnapshotSchedule: Schedule; safecall;
    function Get_SnapshotJobID: WideString; safecall;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE; safecall;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE); safecall;
    function Get_HasSubscription: WordBool; safecall;
    function Get_CentralizedConflicts: WordBool; safecall;
    procedure Set_CentralizedConflicts(pRetVal: WordBool); safecall;
    function Get_Priority: Single; safecall;
    function Get_DynamicFilters: WordBool; safecall;
    procedure Set_DynamicFilters(pRetVal: WordBool); safecall;
    function Get_MergeArticles: MergeArticles; safecall;
    function Get_MergeSubscriptions: MergeSubscriptions; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumSubscriptions: QueryResults; safecall;
    procedure RefreshChildren; safecall;
    function EnumPublicationReferences: QueryResults; safecall;
    procedure ReInitializeAllSubscriptions; safecall;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; safecall;
    procedure GrantPublicationAccess(const szLoginName: WideString); safecall;
    procedure RevokePublicationAccess(const szLoginName: WideString); safecall;
    procedure GenerateFilters; safecall;
    function EnumGeneratedSubsetFilters(const ArticleName: WideString; 
                                        const SubsetFilterClause: WideString): QueryResults; safecall;
    function EnumAllSubsetFilters: QueryResults; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property HasSubscription: WordBool read Get_HasSubscription;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property Priority: Single read Get_Priority;
    property DynamicFilters: WordBool read Get_DynamicFilters write Set_DynamicFilters;
    property MergeArticles: MergeArticles read Get_MergeArticles;
    property MergeSubscriptions: MergeSubscriptions read Get_MergeSubscriptions;
  end;

// *********************************************************************//
// DispIntf:  _MergePublicationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePublicationDisp = dispinterface
    ['{10030406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property Description: WideString dispid 11;
    property Enabled: WordBool dispid 12;
    property RetentionPeriod: Integer dispid 13;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE dispid 14;
    property SnapshotAvailable: WordBool dispid 15;
    property SnapshotSchedule: Schedule readonly dispid 16;
    property SnapshotJobID: WideString readonly dispid 17;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 18;
    property HasSubscription: WordBool readonly dispid 20;
    property CentralizedConflicts: WordBool dispid 30;
    property Priority: Single readonly dispid 31;
    property DynamicFilters: WordBool dispid 32;
    property MergeArticles: MergeArticles readonly dispid 50;
    property MergeSubscriptions: MergeSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 104;
    function EnumSubscriptions: QueryResults; dispid 105;
    procedure RefreshChildren; dispid 106;
    function EnumPublicationReferences: QueryResults; dispid 107;
    procedure ReInitializeAllSubscriptions; dispid 108;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; dispid 109;
    procedure GrantPublicationAccess(const szLoginName: WideString); dispid 110;
    procedure RevokePublicationAccess(const szLoginName: WideString); dispid 111;
    procedure GenerateFilters; dispid 112;
    function EnumGeneratedSubsetFilters(const ArticleName: WideString; 
                                        const SubsetFilterClause: WideString): QueryResults; dispid 113;
    function EnumAllSubsetFilters: QueryResults; dispid 114;
  end;

// *********************************************************************//
// Interface: _MergePublication2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePublication2 = interface(_MergePublication)
    ['{10030416-E260-11CF-AE68-00AA004A34D5}']
    function Get_AltSnapshotFolder: WideString; safecall;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString); safecall;
    function Get_PreSnapshotScript: WideString; safecall;
    procedure Set_PreSnapshotScript(const pRetVal: WideString); safecall;
    function Get_PostSnapshotScript: WideString; safecall;
    procedure Set_PostSnapshotScript(const pRetVal: WideString); safecall;
    function Get_FTPAddress: WideString; safecall;
    procedure Set_FTPAddress(const pRetVal: WideString); safecall;
    function Get_FTPPort: Integer; safecall;
    procedure Set_FTPPort(pRetVal: Integer); safecall;
    function Get_FTPSubdirectory: WideString; safecall;
    procedure Set_FTPSubdirectory(const pRetVal: WideString); safecall;
    function Get_FTPLogin: WideString; safecall;
    procedure Set_FTPLogin(const pRetVal: WideString); safecall;
    procedure Set_FTPPassword(const Param1: WideString); safecall;
    function Get_ConflictRetention: Integer; safecall;
    procedure Set_ConflictRetention(pRetVal: Integer); safecall;
    function Get_KeepPartitionChanges: WordBool; safecall;
    procedure Set_KeepPartitionChanges(pRetVal: WordBool); safecall;
    function Get_AllowSyncToAlternate: WordBool; safecall;
    procedure Set_AllowSyncToAlternate(pRetVal: WordBool); safecall;
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE; safecall;
    function Get_ValidateSubscriberInfo: WideString; safecall;
    procedure Set_ValidateSubscriberInfo(const pRetVal: WideString); safecall;
    function Get_InActiveDirectory: WordBool; safecall;
    procedure Set_InActiveDirectory(pRetVal: WordBool); safecall;
    function Get_MaxConcurrentMerge: Integer; safecall;
    procedure Set_MaxConcurrentMerge(pRetVal: Integer); safecall;
    function Get_MaxConcurrentDynamicSnapshots: Integer; safecall;
    procedure Set_MaxConcurrentDynamicSnapshots(pRetVal: Integer); safecall;
    function Get_MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs; safecall;
    function BrowseSnapshotFolder: WideString; safecall;
    procedure AddAlternatePublisher(const szAlternatePublisher: WideString; 
                                    const szAlternatePublicationDB: WideString; 
                                    const szAlternatePublication: WideString; 
                                    const szAlternateDistributor: WideString; 
                                    const szFriendlyName: WideString); safecall;
    procedure RemoveAlternatePublisher(const szAlternatePublisher: WideString; 
                                       const szAlternatePublicationDB: WideString; 
                                       const szAlternatePublication: WideString); safecall;
    function EnumAlternatePublishers: QueryResults; safecall;
    procedure ReInitializeAllSubscriptions2(bUploadFirst: WordBool); safecall;
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE); safecall;
    procedure ValidateSubscription(const szSubscriberName: WideString; 
                                   const szSubscriberDB: WideString; 
                                   ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE); safecall;
    procedure ReSynchronizeSubscription(const szSubscriberName: WideString; 
                                        const szSubscriberDB: WideString; 
                                        ResyncType: SQLDMO_RESYNC_TYPE; const szDateTime: WideString); safecall;
    procedure ReadLastValidationDateTimes(const szSubscriberName: WideString; 
                                          const szSubscriberDB: WideString; 
                                          out pszSuccessfulDateTime: WideString; 
                                          out pszAttemptedDateTime: WideString); safecall;
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString); safecall;
    procedure CopySnapshot(const szDestinationFolder: WideString); safecall;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property FTPPassword: WideString write Set_FTPPassword;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property KeepPartitionChanges: WordBool read Get_KeepPartitionChanges write Set_KeepPartitionChanges;
    property AllowSyncToAlternate: WordBool read Get_AllowSyncToAlternate write Set_AllowSyncToAlternate;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE read Get_CompatibilityLevel;
    property ValidateSubscriberInfo: WideString read Get_ValidateSubscriberInfo write Set_ValidateSubscriberInfo;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
    property MaxConcurrentMerge: Integer read Get_MaxConcurrentMerge write Set_MaxConcurrentMerge;
    property MaxConcurrentDynamicSnapshots: Integer read Get_MaxConcurrentDynamicSnapshots write Set_MaxConcurrentDynamicSnapshots;
    property MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs read Get_MergeDynamicSnapshotJobs;
  end;

// *********************************************************************//
// DispIntf:  _MergePublication2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePublication2Disp = dispinterface
    ['{10030416-E260-11CF-AE68-00AA004A34D5}']
    property AltSnapshotFolder: WideString dispid 33;
    property PreSnapshotScript: WideString dispid 34;
    property PostSnapshotScript: WideString dispid 35;
    property FTPAddress: WideString dispid 36;
    property FTPPort: Integer dispid 37;
    property FTPSubdirectory: WideString dispid 38;
    property FTPLogin: WideString dispid 39;
    property FTPPassword: WideString writeonly dispid 40;
    property ConflictRetention: Integer dispid 41;
    property KeepPartitionChanges: WordBool dispid 42;
    property AllowSyncToAlternate: WordBool dispid 43;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE readonly dispid 44;
    property ValidateSubscriberInfo: WideString dispid 45;
    property InActiveDirectory: WordBool dispid 46;
    property MaxConcurrentMerge: Integer dispid 47;
    property MaxConcurrentDynamicSnapshots: Integer dispid 48;
    property MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs readonly dispid 52;
    function BrowseSnapshotFolder: WideString; dispid 115;
    procedure AddAlternatePublisher(const szAlternatePublisher: WideString; 
                                    const szAlternatePublicationDB: WideString; 
                                    const szAlternatePublication: WideString; 
                                    const szAlternateDistributor: WideString; 
                                    const szFriendlyName: WideString); dispid 116;
    procedure RemoveAlternatePublisher(const szAlternatePublisher: WideString; 
                                       const szAlternatePublicationDB: WideString; 
                                       const szAlternatePublication: WideString); dispid 117;
    function EnumAlternatePublishers: QueryResults; dispid 118;
    procedure ReInitializeAllSubscriptions2(bUploadFirst: WordBool); dispid 119;
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE); dispid 120;
    procedure ValidateSubscription(const szSubscriberName: WideString; 
                                   const szSubscriberDB: WideString; 
                                   ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE); dispid 121;
    procedure ReSynchronizeSubscription(const szSubscriberName: WideString; 
                                        const szSubscriberDB: WideString; 
                                        ResyncType: SQLDMO_RESYNC_TYPE; const szDateTime: WideString); dispid 122;
    procedure ReadLastValidationDateTimes(const szSubscriberName: WideString; 
                                          const szSubscriberDB: WideString; 
                                          out pszSuccessfulDateTime: WideString; 
                                          out pszAttemptedDateTime: WideString); dispid 123;
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString); dispid 124;
    procedure CopySnapshot(const szDestinationFolder: WideString); dispid 125;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property Description: WideString dispid 11;
    property Enabled: WordBool dispid 12;
    property RetentionPeriod: Integer dispid 13;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE dispid 14;
    property SnapshotAvailable: WordBool dispid 15;
    property SnapshotSchedule: Schedule readonly dispid 16;
    property SnapshotJobID: WideString readonly dispid 17;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 18;
    property HasSubscription: WordBool readonly dispid 20;
    property CentralizedConflicts: WordBool dispid 30;
    property Priority: Single readonly dispid 31;
    property DynamicFilters: WordBool dispid 32;
    property MergeArticles: MergeArticles readonly dispid 50;
    property MergeSubscriptions: MergeSubscriptions readonly dispid 51;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 101;
    procedure DoAlter; dispid 102;
    procedure CancelAlter; dispid 103;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 104;
    function EnumSubscriptions: QueryResults; dispid 105;
    procedure RefreshChildren; dispid 106;
    function EnumPublicationReferences: QueryResults; dispid 107;
    procedure ReInitializeAllSubscriptions; dispid 108;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults; dispid 109;
    procedure GrantPublicationAccess(const szLoginName: WideString); dispid 110;
    procedure RevokePublicationAccess(const szLoginName: WideString); dispid 111;
    procedure GenerateFilters; dispid 112;
    function EnumGeneratedSubsetFilters(const ArticleName: WideString; 
                                        const SubsetFilterClause: WideString): QueryResults; dispid 113;
    function EnumAllSubsetFilters: QueryResults; dispid 114;
  end;

// *********************************************************************//
// Interface: MergeArticles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeArticles = interface(_IVSQLDMOStdObject)
    ['{10030503-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergeArticle; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): MergeArticle; safecall;
    procedure Add(const Object_: MergeArticle); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergeArticlesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030503-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeArticlesDisp = dispinterface
    ['{10030503-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergeArticle; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): MergeArticle; dispid 6;
    procedure Add(const Object_: MergeArticle); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _MergeArticle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeArticle = interface(_IVSQLDMOStdObject)
    ['{10030506-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_SourceObjectOwner: WideString; safecall;
    procedure Set_SourceObjectOwner(const pRetVal: WideString); safecall;
    function Get_SourceObjectName: WideString; safecall;
    procedure Set_SourceObjectName(const pRetVal: WideString); safecall;
    function Get_Status: SQLDMO_ARTSTATUS_TYPE; safecall;
    procedure Set_Status(pRetVal: SQLDMO_ARTSTATUS_TYPE); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_ConflictTable: WideString; safecall;
    function Get_ArticleResolver: WideString; safecall;
    procedure Set_ArticleResolver(const pRetVal: WideString); safecall;
    function Get_SubsetFilterClause: WideString; safecall;
    procedure Set_SubsetFilterClause(const pRetVal: WideString); safecall;
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE; safecall;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE); safecall;
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE; safecall;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE); safecall;
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE; safecall;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE); safecall;
    function Get_ColumnTracking: WordBool; safecall;
    procedure Set_ColumnTracking(pRetVal: WordBool); safecall;
    function Get_CreationScriptPath: WideString; safecall;
    procedure Set_CreationScriptPath(const pRetVal: WideString); safecall;
    function Get_SnapshotObjectOwner: WideString; safecall;
    function Get_SnapshotObjectName: WideString; safecall;
    function Get_ResolverInfo: WideString; safecall;
    procedure Set_ResolverInfo(const pRetVal: WideString); safecall;
    function Get_MergeSubsetFilters: MergeSubsetFilters; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ID: Integer read Get_ID;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Status: SQLDMO_ARTSTATUS_TYPE read Get_Status write Set_Status;
    property Description: WideString read Get_Description write Set_Description;
    property ConflictTable: WideString read Get_ConflictTable;
    property ArticleResolver: WideString read Get_ArticleResolver write Set_ArticleResolver;
    property SubsetFilterClause: WideString read Get_SubsetFilterClause write Set_SubsetFilterClause;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property ColumnTracking: WordBool read Get_ColumnTracking write Set_ColumnTracking;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property SnapshotObjectOwner: WideString read Get_SnapshotObjectOwner;
    property SnapshotObjectName: WideString read Get_SnapshotObjectName;
    property ResolverInfo: WideString read Get_ResolverInfo write Set_ResolverInfo;
    property MergeSubsetFilters: MergeSubsetFilters read Get_MergeSubsetFilters;
  end;

// *********************************************************************//
// DispIntf:  _MergeArticleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030506-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeArticleDisp = dispinterface
    ['{10030506-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Status: SQLDMO_ARTSTATUS_TYPE dispid 13;
    property Description: WideString dispid 14;
    property ConflictTable: WideString readonly dispid 15;
    property ArticleResolver: WideString dispid 16;
    property SubsetFilterClause: WideString dispid 17;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE dispid 18;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE dispid 19;
    property ArticleType: SQLDMO_ARTICLE_TYPE dispid 20;
    property ColumnTracking: WordBool dispid 21;
    property CreationScriptPath: WideString dispid 23;
    property SnapshotObjectOwner: WideString readonly dispid 24;
    property SnapshotObjectName: WideString readonly dispid 25;
    property ResolverInfo: WideString dispid 26;
    property MergeSubsetFilters: MergeSubsetFilters readonly dispid 50;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 104;
    procedure DoAlter; dispid 105;
    procedure CancelAlter; dispid 106;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 107;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; dispid 108;
  end;

// *********************************************************************//
// Interface: _MergeArticle2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeArticle2 = interface(_MergeArticle)
    ['{10030516-E260-11CF-AE68-00AA004A34D5}']
    function Get_DestinationOwnerName: WideString; safecall;
    procedure Set_DestinationOwnerName(const pRetVal: WideString); safecall;
    function Get_AutoIdentityRange: WordBool; safecall;
    procedure Set_AutoIdentityRange(pRetVal: WordBool); safecall;
    function Get_PublisherIdentityRangeSize: WideString; safecall;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString); safecall;
    function Get_SubscriberIdentityRangeSize: WideString; safecall;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString); safecall;
    function Get_IdentityRangeThreshold: Integer; safecall;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer); safecall;
    function Get_VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE; safecall;
    procedure Set_VerifyResolverSignature(pRetVal: SQLDMO_VERIFYSIGNATURE_TYPE); safecall;
    function Get_DestinationObjectName: WideString; safecall;
    procedure Set_DestinationObjectName(const pRetVal: WideString); safecall;
    function Get_AllowInteractiveResolver: WordBool; safecall;
    procedure Set_AllowInteractiveResolver(pRetVal: WordBool); safecall;
    function Get_MultipleColumnUpdate: WordBool; safecall;
    procedure Set_MultipleColumnUpdate(pRetVal: WordBool); safecall;
    function Get_CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE; safecall;
    procedure Set_CheckPermissions(pRetVal: SQLDMO_CHECKPERMISSIONS_TYPE); safecall;
    function ListReplicatedColumns: SQLObjectList; safecall;
    procedure AddReplicatedColumns(const Columns: WideString); safecall;
    procedure RemoveReplicatedColumns(const Columns: WideString); safecall;
    function ScriptDestinationObject2(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                      Script2Type: OleVariant; 
                                      const bstrDestinationObject: WideString): WideString; safecall;
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
    property VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE read Get_VerifyResolverSignature write Set_VerifyResolverSignature;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property AllowInteractiveResolver: WordBool read Get_AllowInteractiveResolver write Set_AllowInteractiveResolver;
    property MultipleColumnUpdate: WordBool read Get_MultipleColumnUpdate write Set_MultipleColumnUpdate;
    property CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE read Get_CheckPermissions write Set_CheckPermissions;
  end;

// *********************************************************************//
// DispIntf:  _MergeArticle2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeArticle2Disp = dispinterface
    ['{10030516-E260-11CF-AE68-00AA004A34D5}']
    property DestinationOwnerName: WideString dispid 27;
    property AutoIdentityRange: WordBool dispid 28;
    property PublisherIdentityRangeSize: WideString dispid 29;
    property SubscriberIdentityRangeSize: WideString dispid 30;
    property IdentityRangeThreshold: Integer dispid 31;
    property VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE dispid 32;
    property DestinationObjectName: WideString dispid 33;
    property AllowInteractiveResolver: WordBool dispid 34;
    property MultipleColumnUpdate: WordBool dispid 35;
    property CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE dispid 36;
    function ListReplicatedColumns: SQLObjectList; dispid 109;
    procedure AddReplicatedColumns(const Columns: WideString); dispid 110;
    procedure RemoveReplicatedColumns(const Columns: WideString); dispid 111;
    function ScriptDestinationObject2(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                      Script2Type: OleVariant; 
                                      const bstrDestinationObject: WideString): WideString; dispid 112;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ID: Integer readonly dispid 10;
    property SourceObjectOwner: WideString dispid 11;
    property SourceObjectName: WideString dispid 12;
    property Status: SQLDMO_ARTSTATUS_TYPE dispid 13;
    property Description: WideString dispid 14;
    property ConflictTable: WideString readonly dispid 15;
    property ArticleResolver: WideString dispid 16;
    property SubsetFilterClause: WideString dispid 17;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE dispid 18;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE dispid 19;
    property ArticleType: SQLDMO_ARTICLE_TYPE dispid 20;
    property ColumnTracking: WordBool dispid 21;
    property CreationScriptPath: WideString dispid 23;
    property SnapshotObjectOwner: WideString readonly dispid 24;
    property SnapshotObjectName: WideString readonly dispid 25;
    property ResolverInfo: WideString dispid 26;
    property MergeSubsetFilters: MergeSubsetFilters readonly dispid 50;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 104;
    procedure DoAlter; dispid 105;
    procedure CancelAlter; dispid 106;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 107;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; dispid 108;
  end;

// *********************************************************************//
// Interface: MergeSubsetFilters
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10035103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeSubsetFilters = interface(_IVSQLDMOStdObject)
    ['{10035103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergeSubsetFilter; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): MergeSubsetFilter; safecall;
    procedure Add(const Object_: MergeSubsetFilter); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergeSubsetFiltersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10035103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeSubsetFiltersDisp = dispinterface
    ['{10035103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergeSubsetFilter; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): MergeSubsetFilter; dispid 6;
    procedure Add(const Object_: MergeSubsetFilter); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _MergeSubsetFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10035106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubsetFilter = interface(_IVSQLDMOStdObject)
    ['{10035106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_JoinArticleName: WideString; safecall;
    procedure Set_JoinArticleName(const pRetVal: WideString); safecall;
    function Get_JoinFilterClause: WideString; safecall;
    procedure Set_JoinFilterClause(const pRetVal: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_JoinUniqueKey: WordBool; safecall;
    procedure Set_JoinUniqueKey(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property JoinArticleName: WideString read Get_JoinArticleName write Set_JoinArticleName;
    property JoinFilterClause: WideString read Get_JoinFilterClause write Set_JoinFilterClause;
    property ID: Integer read Get_ID;
    property JoinUniqueKey: WordBool read Get_JoinUniqueKey write Set_JoinUniqueKey;
  end;

// *********************************************************************//
// DispIntf:  _MergeSubsetFilterDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10035106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubsetFilterDisp = dispinterface
    ['{10035106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property JoinArticleName: WideString dispid 10;
    property JoinFilterClause: WideString dispid 11;
    property ID: Integer readonly dispid 12;
    property JoinUniqueKey: WordBool dispid 13;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
  end;

// *********************************************************************//
// Interface: MergeSubscriptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeSubscriptions = interface(_IVSQLDMOStdObject)
    ['{10030603-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergeSubscription; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: MergeSubscription); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergeSubscriptionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030603-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeSubscriptionsDisp = dispinterface
    ['{10030603-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergeSubscription; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: MergeSubscription); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _MergeSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubscription = interface(_IVSQLDMOStdObject)
    ['{10030606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_Subscriber: WideString; safecall;
    procedure Set_Subscriber(const pRetVal: WideString); safecall;
    function Get_SubscriptionDB: WideString; safecall;
    procedure Set_SubscriptionDB(const pRetVal: WideString); safecall;
    function Get_Status: SQLDMO_SUBSTATUS_TYPE; safecall;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE); safecall;
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE; safecall;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE); safecall;
    function Get_Priority: Single; safecall;
    procedure Set_Priority(pRetVal: Single); safecall;
    function Get_MergeSchedule: Schedule; safecall;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE; safecall;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE); safecall;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; safecall;
    function Get_MergeJobID: WideString; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    procedure Set_EnabledForSyncMgr(Param1: WordBool); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    procedure ReInitialize; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Priority: Single read Get_Priority write Set_Priority;
    property MergeSchedule: Schedule read Get_MergeSchedule;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType;
    property MergeJobID: WideString read Get_MergeJobID;
    property Description: WideString read Get_Description write Set_Description;
    property EnabledForSyncMgr: WordBool write Set_EnabledForSyncMgr;
  end;

// *********************************************************************//
// DispIntf:  _MergeSubscriptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubscriptionDisp = dispinterface
    ['{10030606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Subscriber: WideString dispid 10;
    property SubscriptionDB: WideString dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE dispid 13;
    property Priority: Single dispid 14;
    property MergeSchedule: Schedule readonly dispid 15;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 16;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE readonly dispid 17;
    property MergeJobID: WideString readonly dispid 18;
    property Description: WideString dispid 19;
    property EnabledForSyncMgr: WordBool writeonly dispid 20;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure ReInitialize; dispid 106;
  end;

// *********************************************************************//
// Interface: _MergeSubscription2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030616-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubscription2 = interface(_MergeSubscription)
    ['{10030616-E260-11CF-AE68-00AA004A34D5}']
    function Get_AgentOffload: WordBool; safecall;
    procedure Set_AgentOffload(pRetVal: WordBool); safecall;
    function Get_AgentOffloadServer: WideString; safecall;
    procedure Set_AgentOffloadServer(const pRetVal: WideString); safecall;
    function Get_UseInteractiveResolver: WordBool; safecall;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool); safecall;
    procedure ReInitialize2(bUploadFirst: WordBool); safecall;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
  end;

// *********************************************************************//
// DispIntf:  _MergeSubscription2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030616-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeSubscription2Disp = dispinterface
    ['{10030616-E260-11CF-AE68-00AA004A34D5}']
    property AgentOffload: WordBool dispid 21;
    property AgentOffloadServer: WideString dispid 22;
    property UseInteractiveResolver: WordBool dispid 23;
    procedure ReInitialize2(bUploadFirst: WordBool); dispid 107;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Subscriber: WideString dispid 10;
    property SubscriptionDB: WideString dispid 11;
    property Status: SQLDMO_SUBSTATUS_TYPE dispid 12;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE dispid 13;
    property Priority: Single dispid 14;
    property MergeSchedule: Schedule readonly dispid 15;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 16;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE readonly dispid 17;
    property MergeJobID: WideString readonly dispid 18;
    property Description: WideString dispid 19;
    property EnabledForSyncMgr: WordBool writeonly dispid 20;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure ReInitialize; dispid 106;
  end;

// *********************************************************************//
// Interface: MergeDynamicSnapshotJobs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10036103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeDynamicSnapshotJobs = interface(_IVSQLDMOStdObject)
    ['{10036103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergeDynamicSnapshotJob; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    function ItemByID(ID: Integer): MergeDynamicSnapshotJob; safecall;
    procedure Add(const Object_: MergeDynamicSnapshotJob); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergeDynamicSnapshotJobsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10036103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergeDynamicSnapshotJobsDisp = dispinterface
    ['{10036103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergeDynamicSnapshotJob; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): MergeDynamicSnapshotJob; dispid 6;
    procedure Add(const Object_: MergeDynamicSnapshotJob); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _MergeDynamicSnapshotJob
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10036106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeDynamicSnapshotJob = interface(_IVSQLDMOStdObject)
    ['{10036106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_DynamicSnapshotJobID: WideString; safecall;
    function Get_DynamicFilterLogin: WideString; safecall;
    procedure Set_DynamicFilterLogin(const pRetVal: WideString); safecall;
    function Get_DynamicFilterHostName: WideString; safecall;
    procedure Set_DynamicFilterHostName(const pRetVal: WideString); safecall;
    function Get_DynamicSnapshotLocation: WideString; safecall;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString); safecall;
    function Get_SnapshotSchedule: Schedule; safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property DynamicSnapshotJobID: WideString read Get_DynamicSnapshotJobID;
    property DynamicFilterLogin: WideString read Get_DynamicFilterLogin write Set_DynamicFilterLogin;
    property DynamicFilterHostName: WideString read Get_DynamicFilterHostName write Set_DynamicFilterHostName;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
  end;

// *********************************************************************//
// DispIntf:  _MergeDynamicSnapshotJobDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10036106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergeDynamicSnapshotJobDisp = dispinterface
    ['{10036106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property DynamicSnapshotJobID: WideString readonly dispid 10;
    property DynamicFilterLogin: WideString dispid 11;
    property DynamicFilterHostName: WideString dispid 12;
    property DynamicSnapshotLocation: WideString dispid 13;
    property SnapshotSchedule: Schedule readonly dispid 14;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
  end;

// *********************************************************************//
// Interface: TransPullSubscriptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransPullSubscriptions = interface(_IVSQLDMOStdObject)
    ['{10030B03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): TransPullSubscription; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: TransPullSubscription); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  TransPullSubscriptionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  TransPullSubscriptionsDisp = dispinterface
    ['{10030B03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): TransPullSubscription; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: TransPullSubscription); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _TransPullSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPullSubscription = interface(_IVSQLDMOStdObject)
    ['{10030B06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_Publisher: WideString; safecall;
    procedure Set_Publisher(const pRetVal: WideString); safecall;
    function Get_PublicationDB: WideString; safecall;
    procedure Set_PublicationDB(const pRetVal: WideString); safecall;
    function Get_Publication: WideString; safecall;
    procedure Set_Publication(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; safecall;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE); safecall;
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE; safecall;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE); safecall;
    function Get_Distributor: WideString; safecall;
    procedure Set_Distributor(const pRetVal: WideString); safecall;
    function Get_PublisherSecurity: ReplicationSecurity; safecall;
    function Get_DistributorSecurity: ReplicationSecurity; safecall;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE); safecall;
    procedure Set_SubscriberLogin(const Param1: WideString); safecall;
    procedure Set_SubscriberPassword(const Param1: WideString); safecall;
    function Get_EnabledForSyncMgr: WordBool; safecall;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool); safecall;
    function Get_FTPAddress: WideString; safecall;
    procedure Set_FTPAddress(const pRetVal: WideString); safecall;
    function Get_FTPPort: LongWord; safecall;
    procedure Set_FTPPort(pRetVal: LongWord); safecall;
    function Get_FTPLogin: WideString; safecall;
    procedure Set_FTPLogin(const pRetVal: WideString); safecall;
    procedure Set_FTPPassword(const Param1: WideString); safecall;
    function Get_DistributionSchedule: Schedule; safecall;
    function Get_DistributionJobID: WideString; safecall;
    function Get_LastDistributionDate: WideString; safecall;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE; safecall;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumJobInfo: QueryResults; safecall;
    procedure ReInitialize; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property DistributorSecurity: ReplicationSecurity read Get_DistributorSecurity;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE write Set_SubscriberSecurityMode;
    property SubscriberLogin: WideString write Set_SubscriberLogin;
    property SubscriberPassword: WideString write Set_SubscriberPassword;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property FTPPassword: WideString write Set_FTPPassword;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property DistributionJobID: WideString read Get_DistributionJobID;
    property LastDistributionDate: WideString read Get_LastDistributionDate;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
  end;

// *********************************************************************//
// DispIntf:  _TransPullSubscriptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPullSubscriptionDisp = dispinterface
    ['{10030B06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Publisher: WideString dispid 10;
    property PublicationDB: WideString dispid 11;
    property Publication: WideString dispid 12;
    property Description: WideString dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE dispid 15;
    property Distributor: WideString dispid 16;
    property PublisherSecurity: ReplicationSecurity readonly dispid 17;
    property DistributorSecurity: ReplicationSecurity readonly dispid 18;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 19;
    property SubscriberLogin: WideString writeonly dispid 20;
    property SubscriberPassword: WideString writeonly dispid 21;
    property EnabledForSyncMgr: WordBool dispid 22;
    property FTPAddress: WideString dispid 23;
    property FTPPort: LongWord dispid 24;
    property FTPLogin: WideString dispid 25;
    property FTPPassword: WideString writeonly dispid 26;
    property DistributionSchedule: Schedule readonly dispid 30;
    property DistributionJobID: WideString readonly dispid 31;
    property LastDistributionDate: WideString readonly dispid 32;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 33;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
    function EnumJobInfo: QueryResults; dispid 107;
    procedure ReInitialize; dispid 108;
  end;

// *********************************************************************//
// Interface: _TransPullSubscription2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPullSubscription2 = interface(_TransPullSubscription)
    ['{10030B16-E260-11CF-AE68-00AA004A34D5}']
    function Get_AltSnapshotFolder: WideString; safecall;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString); safecall;
    function Get_WorkingDirectory: WideString; safecall;
    procedure Set_WorkingDirectory(const pRetVal: WideString); safecall;
    function Get_UseFTP: WordBool; safecall;
    procedure Set_UseFTP(pRetVal: WordBool); safecall;
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE; safecall;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE); safecall;
    function Get_DTSPackageName: WideString; safecall;
    procedure Set_DTSPackageName(const pRetVal: WideString); safecall;
    procedure Set_DTSPackagePassword(const Param1: WideString); safecall;
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE; safecall;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE); safecall;
    function Get_AgentOffload: WordBool; safecall;
    procedure Set_AgentOffload(pRetVal: WordBool); safecall;
    function Get_AgentOffloadServer: WideString; safecall;
    procedure Set_AgentOffloadServer(const pRetVal: WideString); safecall;
    function Get_SubscriptionID: WideString; safecall;
    function Get_LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE; safecall;
    function Get_LastDistributionSummary: WideString; safecall;
    function Get_LastDistributionSummaryTime: WideString; safecall;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackagePassword: WideString write Set_DTSPackagePassword;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property SubscriptionID: WideString read Get_SubscriptionID;
    property LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE read Get_LastDistributionStatus;
    property LastDistributionSummary: WideString read Get_LastDistributionSummary;
    property LastDistributionSummaryTime: WideString read Get_LastDistributionSummaryTime;
  end;

// *********************************************************************//
// DispIntf:  _TransPullSubscription2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030B16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _TransPullSubscription2Disp = dispinterface
    ['{10030B16-E260-11CF-AE68-00AA004A34D5}']
    property AltSnapshotFolder: WideString dispid 27;
    property WorkingDirectory: WideString dispid 28;
    property UseFTP: WordBool dispid 29;
    property PublicationType: SQLDMO_PUBLICATION_TYPE dispid 34;
    property DTSPackageName: WideString dispid 35;
    property DTSPackagePassword: WideString writeonly dispid 36;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE dispid 37;
    property AgentOffload: WordBool dispid 38;
    property AgentOffloadServer: WideString dispid 39;
    property SubscriptionID: WideString readonly dispid 40;
    property LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE readonly dispid 41;
    property LastDistributionSummary: WideString readonly dispid 42;
    property LastDistributionSummaryTime: WideString readonly dispid 43;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Publisher: WideString dispid 10;
    property PublicationDB: WideString dispid 11;
    property Publication: WideString dispid 12;
    property Description: WideString dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE dispid 15;
    property Distributor: WideString dispid 16;
    property PublisherSecurity: ReplicationSecurity readonly dispid 17;
    property DistributorSecurity: ReplicationSecurity readonly dispid 18;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 19;
    property SubscriberLogin: WideString writeonly dispid 20;
    property SubscriberPassword: WideString writeonly dispid 21;
    property EnabledForSyncMgr: WordBool dispid 22;
    property FTPAddress: WideString dispid 23;
    property FTPPort: LongWord dispid 24;
    property FTPLogin: WideString dispid 25;
    property FTPPassword: WideString writeonly dispid 26;
    property DistributionSchedule: Schedule readonly dispid 30;
    property DistributionJobID: WideString readonly dispid 31;
    property LastDistributionDate: WideString readonly dispid 32;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE dispid 33;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
    function EnumJobInfo: QueryResults; dispid 107;
    procedure ReInitialize; dispid 108;
  end;

// *********************************************************************//
// Interface: MergePullSubscriptions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergePullSubscriptions = interface(_IVSQLDMOStdObject)
    ['{10031103-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): MergePullSubscription; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: MergePullSubscription); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  MergePullSubscriptionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031103-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  MergePullSubscriptionsDisp = dispinterface
    ['{10031103-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): MergePullSubscription; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: MergePullSubscription); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: _MergePullSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePullSubscription = interface(_IVSQLDMOStdObject)
    ['{10031106-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_Publisher: WideString; safecall;
    procedure Set_Publisher(const pRetVal: WideString); safecall;
    function Get_PublicationDB: WideString; safecall;
    procedure Set_PublicationDB(const pRetVal: WideString); safecall;
    function Get_Publication: WideString; safecall;
    procedure Set_Publication(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; safecall;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE); safecall;
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE; safecall;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE); safecall;
    function Get_Distributor: WideString; safecall;
    procedure Set_Distributor(const pRetVal: WideString); safecall;
    function Get_PublisherSecurity: ReplicationSecurity; safecall;
    function Get_DistributorSecurity: ReplicationSecurity; safecall;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE); safecall;
    procedure Set_SubscriberLogin(const Param1: WideString); safecall;
    procedure Set_SubscriberPassword(const Param1: WideString); safecall;
    function Get_EnabledForSyncMgr: WordBool; safecall;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool); safecall;
    function Get_FTPAddress: WideString; safecall;
    procedure Set_FTPAddress(const pRetVal: WideString); safecall;
    function Get_FTPPort: LongWord; safecall;
    procedure Set_FTPPort(pRetVal: LongWord); safecall;
    function Get_FTPLogin: WideString; safecall;
    procedure Set_FTPLogin(const pRetVal: WideString); safecall;
    procedure Set_FTPPassword(const Param1: WideString); safecall;
    function Get_MergeSchedule: Schedule; safecall;
    function Get_MergeJobID: WideString; safecall;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE; safecall;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE); safecall;
    function Get_Priority: Single; safecall;
    procedure Set_Priority(pRetVal: Single); safecall;
    procedure Remove; safecall;
    procedure BeginAlter; safecall;
    procedure DoAlter; safecall;
    procedure CancelAlter; safecall;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; safecall;
    function EnumJobInfo: QueryResults; safecall;
    procedure ReInitialize; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property DistributorSecurity: ReplicationSecurity read Get_DistributorSecurity;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE write Set_SubscriberSecurityMode;
    property SubscriberLogin: WideString write Set_SubscriberLogin;
    property SubscriberPassword: WideString write Set_SubscriberPassword;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property FTPPassword: WideString write Set_FTPPassword;
    property MergeSchedule: Schedule read Get_MergeSchedule;
    property MergeJobID: WideString read Get_MergeJobID;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Priority: Single read Get_Priority write Set_Priority;
  end;

// *********************************************************************//
// DispIntf:  _MergePullSubscriptionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031106-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePullSubscriptionDisp = dispinterface
    ['{10031106-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Publisher: WideString dispid 10;
    property PublicationDB: WideString dispid 11;
    property Publication: WideString dispid 12;
    property Description: WideString dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE dispid 15;
    property Distributor: WideString dispid 16;
    property PublisherSecurity: ReplicationSecurity readonly dispid 17;
    property DistributorSecurity: ReplicationSecurity readonly dispid 18;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 19;
    property SubscriberLogin: WideString writeonly dispid 20;
    property SubscriberPassword: WideString writeonly dispid 21;
    property EnabledForSyncMgr: WordBool dispid 22;
    property FTPAddress: WideString dispid 23;
    property FTPPort: LongWord dispid 24;
    property FTPLogin: WideString dispid 25;
    property FTPPassword: WideString writeonly dispid 26;
    property MergeSchedule: Schedule readonly dispid 30;
    property MergeJobID: WideString readonly dispid 31;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 32;
    property Priority: Single dispid 33;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
    function EnumJobInfo: QueryResults; dispid 107;
    procedure ReInitialize; dispid 108;
  end;

// *********************************************************************//
// Interface: _MergePullSubscription2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePullSubscription2 = interface(_MergePullSubscription)
    ['{10031116-E260-11CF-AE68-00AA004A34D5}']
    function Get_LastMergedTime: WideString; safecall;
    function Get_AltSnapshotFolder: WideString; safecall;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString); safecall;
    function Get_WorkingDirectory: WideString; safecall;
    procedure Set_WorkingDirectory(const pRetVal: WideString); safecall;
    function Get_UseFTP: WordBool; safecall;
    procedure Set_UseFTP(pRetVal: WordBool); safecall;
    function Get_AgentOffload: WordBool; safecall;
    procedure Set_AgentOffload(pRetVal: WordBool); safecall;
    function Get_AgentOffloadServer: WideString; safecall;
    procedure Set_AgentOffloadServer(const pRetVal: WideString); safecall;
    function Get_UseInteractiveResolver: WordBool; safecall;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool); safecall;
    function Get_SubscriptionID: WideString; safecall;
    function Get_DynamicSnapshotLocation: WideString; safecall;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString); safecall;
    function Get_LastMergedStatus: SQLDMO_TASKSTATUS_TYPE; safecall;
    function Get_LastMergedSummary: WideString; safecall;
    procedure ReInitialize2(bUploadFirst: WordBool); safecall;
    function EnumAlternatePublishers: QueryResults; safecall;
    property LastMergedTime: WideString read Get_LastMergedTime;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
    property SubscriptionID: WideString read Get_SubscriptionID;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
    property LastMergedStatus: SQLDMO_TASKSTATUS_TYPE read Get_LastMergedStatus;
    property LastMergedSummary: WideString read Get_LastMergedSummary;
  end;

// *********************************************************************//
// DispIntf:  _MergePullSubscription2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031116-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _MergePullSubscription2Disp = dispinterface
    ['{10031116-E260-11CF-AE68-00AA004A34D5}']
    property LastMergedTime: WideString readonly dispid 34;
    property AltSnapshotFolder: WideString dispid 35;
    property WorkingDirectory: WideString dispid 36;
    property UseFTP: WordBool dispid 37;
    property AgentOffload: WordBool dispid 38;
    property AgentOffloadServer: WideString dispid 39;
    property UseInteractiveResolver: WordBool dispid 40;
    property SubscriptionID: WideString readonly dispid 41;
    property DynamicSnapshotLocation: WideString dispid 42;
    property LastMergedStatus: SQLDMO_TASKSTATUS_TYPE readonly dispid 43;
    property LastMergedSummary: WideString readonly dispid 44;
    procedure ReInitialize2(bUploadFirst: WordBool); dispid 109;
    function EnumAlternatePublishers: QueryResults; dispid 110;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Publisher: WideString dispid 10;
    property PublicationDB: WideString dispid 11;
    property Publication: WideString dispid 12;
    property Description: WideString dispid 13;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE dispid 14;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE dispid 15;
    property Distributor: WideString dispid 16;
    property PublisherSecurity: ReplicationSecurity readonly dispid 17;
    property DistributorSecurity: ReplicationSecurity readonly dispid 18;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE writeonly dispid 19;
    property SubscriberLogin: WideString writeonly dispid 20;
    property SubscriberPassword: WideString writeonly dispid 21;
    property EnabledForSyncMgr: WordBool dispid 22;
    property FTPAddress: WideString dispid 23;
    property FTPPort: LongWord dispid 24;
    property FTPLogin: WideString dispid 25;
    property FTPPassword: WideString writeonly dispid 26;
    property MergeSchedule: Schedule readonly dispid 30;
    property MergeJobID: WideString readonly dispid 31;
    property SyncType: SQLDMO_SUBSYNC_TYPE dispid 32;
    property Priority: Single dispid 33;
    procedure Remove; dispid 100;
    procedure BeginAlter; dispid 102;
    procedure DoAlter; dispid 103;
    procedure CancelAlter; dispid 104;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 106;
    function EnumJobInfo: QueryResults; dispid 107;
    procedure ReInitialize; dispid 108;
  end;

// *********************************************************************//
// Interface: ReplicationSink
// Flags:     (256) OleAutomation
// GUID:      {10031009-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationSink = interface(IUnknown)
    ['{10031009-E260-11CF-AE68-00AA004A34D5}']
    function StatusMessage(const Message: WideString): HResult; stdcall;
    function PercentComplete(const Message: WideString; Percent: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ServerRoles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022F03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ServerRoles = interface(_IVSQLDMOStdObject)
    ['{10022F03-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): ServerRole; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ServerRolesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022F03-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ServerRolesDisp = dispinterface
    ['{10022F03-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): ServerRole; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _ServerRole
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ServerRole = interface(_IVSQLDMOStdObject)
    ['{10022F06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    function Get_FullName: WideString; safecall;
    function Get_Description: WideString; safecall;
    function EnumServerRolePermission: QueryResults; safecall;
    function EnumServerRoleMember: QueryResults; safecall;
    procedure AddMember(const LoginName: WideString); safecall;
    procedure DropMember(const LoginName: WideString); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property FullName: WideString read Get_FullName;
    property Description: WideString read Get_Description;
  end;

// *********************************************************************//
// DispIntf:  _ServerRoleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ServerRoleDisp = dispinterface
    ['{10022F06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property FullName: WideString readonly dispid 10;
    property Description: WideString readonly dispid 11;
    function EnumServerRolePermission: QueryResults; dispid 100;
    function EnumServerRoleMember: QueryResults; dispid 101;
    procedure AddMember(const LoginName: WideString); dispid 102;
    procedure DropMember(const LoginName: WideString); dispid 103;
  end;

// *********************************************************************//
// Interface: LinkedServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LinkedServers = interface(_IVSQLDMOStdObject)
    ['{10023303-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): LinkedServer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: LinkedServer); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  LinkedServersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023303-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LinkedServersDisp = dispinterface
    ['{10023303-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): LinkedServer; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: LinkedServer); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _LinkedServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServer = interface(_IVSQLDMOStdObject)
    ['{10023306-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ProductName: WideString; safecall;
    procedure Set_ProductName(const pRetVal: WideString); safecall;
    function Get_LinkedServerLogins: LinkedServerLogins; safecall;
    function Get_ProviderName: WideString; safecall;
    procedure Set_ProviderName(const pRetVal: WideString); safecall;
    function Get_DataSource: WideString; safecall;
    procedure Set_DataSource(const pRetVal: WideString); safecall;
    function Get_Location: WideString; safecall;
    procedure Set_Location(const pRetVal: WideString); safecall;
    function Get_ProviderString: WideString; safecall;
    procedure Set_ProviderString(const pRetVal: WideString); safecall;
    function Get_Options: SQLDMO_SRVOPTION_TYPE; safecall;
    procedure Remove; safecall;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); safecall;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; safecall;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; safecall;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); safecall;
    function Get_Catalog: WideString; safecall;
    procedure Set_Catalog(const pRetVal: WideString); safecall;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                        TableType: OleVariant): QueryResults; safecall;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                         ColumnName: OleVariant): QueryResults; safecall;
    function Get_DropLogins: WordBool; safecall;
    procedure Set_DropLogins(pRetVal: WordBool); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ProductName: WideString read Get_ProductName write Set_ProductName;
    property LinkedServerLogins: LinkedServerLogins read Get_LinkedServerLogins;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property DataSource: WideString read Get_DataSource write Set_DataSource;
    property Location: WideString read Get_Location write Set_Location;
    property ProviderString: WideString read Get_ProviderString write Set_ProviderString;
    property Options: SQLDMO_SRVOPTION_TYPE read Get_Options;
    property Catalog: WideString read Get_Catalog write Set_Catalog;
    property DropLogins: WordBool read Get_DropLogins write Set_DropLogins;
  end;

// *********************************************************************//
// DispIntf:  _LinkedServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023306-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServerDisp = dispinterface
    ['{10023306-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ProductName: WideString dispid 11;
    property LinkedServerLogins: LinkedServerLogins readonly dispid 12;
    property ProviderName: WideString dispid 13;
    property DataSource: WideString dispid 14;
    property Location: WideString dispid 15;
    property ProviderString: WideString dispid 16;
    property Options: SQLDMO_SRVOPTION_TYPE readonly dispid 17;
    procedure Remove; dispid 100;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); dispid 101;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 102;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 103;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); dispid 104;
    property Catalog: WideString dispid 18;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                        TableType: OleVariant): QueryResults; dispid 105;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                         ColumnName: OleVariant): QueryResults; dispid 106;
    property DropLogins: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: _LinkedServer2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServer2 = interface(_LinkedServer)
    ['{10023316-E260-11CF-AE68-00AA004A34D5}']
    function Get_CollationName: WideString; safecall;
    procedure Set_CollationName(const pRetVal: WideString); safecall;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; safecall;
    procedure Refresh; safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pRetVal: Integer); safecall;
    function Get_QueryTimeout: Integer; safecall;
    procedure Set_QueryTimeout(pRetVal: Integer); safecall;
    property CollationName: WideString read Get_CollationName write Set_CollationName;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
  end;

// *********************************************************************//
// DispIntf:  _LinkedServer2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023316-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServer2Disp = dispinterface
    ['{10023316-E260-11CF-AE68-00AA004A34D5}']
    property CollationName: WideString dispid 20;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; dispid 107;
    procedure Refresh; dispid 108;
    property ConnectTimeout: Integer dispid 21;
    property QueryTimeout: Integer dispid 22;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ProductName: WideString dispid 11;
    property LinkedServerLogins: LinkedServerLogins readonly dispid 12;
    property ProviderName: WideString dispid 13;
    property DataSource: WideString dispid 14;
    property Location: WideString dispid 15;
    property ProviderString: WideString dispid 16;
    property Options: SQLDMO_SRVOPTION_TYPE readonly dispid 17;
    procedure Remove; dispid 100;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); dispid 101;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; dispid 102;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults; dispid 103;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool); dispid 104;
    property Catalog: WideString dispid 18;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                        TableType: OleVariant): QueryResults; dispid 105;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                         ColumnName: OleVariant): QueryResults; dispid 106;
    property DropLogins: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: LinkedServerLogins
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LinkedServerLogins = interface(_IVSQLDMOStdObject)
    ['{10023403-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(Index: OleVariant): LinkedServerLogin; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: LinkedServerLogin); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  LinkedServerLoginsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023403-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LinkedServerLoginsDisp = dispinterface
    ['{10023403-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(Index: OleVariant): LinkedServerLogin; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: LinkedServerLogin); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _LinkedServerLogin
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServerLogin = interface(_IVSQLDMOStdObject)
    ['{10023406-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_LocalLogin: WideString; safecall;
    procedure Set_LocalLogin(const pRetVal: WideString); safecall;
    function Get_RemoteUser: WideString; safecall;
    procedure Set_RemoteUser(const pRetVal: WideString); safecall;
    procedure Set_RemotePassword(const Param1: WideString); safecall;
    function Get_Impersonate: WordBool; safecall;
    procedure Set_Impersonate(pRetVal: WordBool); safecall;
    procedure Remove; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property LocalLogin: WideString read Get_LocalLogin write Set_LocalLogin;
    property RemoteUser: WideString read Get_RemoteUser write Set_RemoteUser;
    property RemotePassword: WideString write Set_RemotePassword;
    property Impersonate: WordBool read Get_Impersonate write Set_Impersonate;
  end;

// *********************************************************************//
// DispIntf:  _LinkedServerLoginDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023406-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _LinkedServerLoginDisp = dispinterface
    ['{10023406-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property LocalLogin: WideString dispid 11;
    property RemoteUser: WideString dispid 12;
    property RemotePassword: WideString writeonly dispid 13;
    property Impersonate: WordBool dispid 14;
    procedure Remove; dispid 100;
  end;

// *********************************************************************//
// Interface: FullTextService
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FullTextService = interface(_IVSQLDMOStdObject)
    ['{10023606-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Status: SQLDMO_SVCSTATUS_TYPE; safecall;
    function Get_DefaultPath: WideString; safecall;
    function Get_ResourceUsage: Integer; safecall;
    procedure Set_ResourceUsage(pRetVal: Integer); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pRetVal: Integer); safecall;
    function Get_IsFullTextInstalled: WordBool; safecall;
    procedure Start; safecall;
    procedure Stop; safecall;
    procedure CleanUp; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Status: SQLDMO_SVCSTATUS_TYPE read Get_Status;
    property DefaultPath: WideString read Get_DefaultPath;
    property ResourceUsage: Integer read Get_ResourceUsage write Set_ResourceUsage;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property IsFullTextInstalled: WordBool read Get_IsFullTextInstalled;
  end;

// *********************************************************************//
// DispIntf:  FullTextServiceDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10023606-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  FullTextServiceDisp = dispinterface
    ['{10023606-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Status: SQLDMO_SVCSTATUS_TYPE readonly dispid 9;
    property DefaultPath: WideString readonly dispid 10;
    property ResourceUsage: Integer dispid 11;
    property ConnectTimeout: Integer dispid 12;
    property IsFullTextInstalled: WordBool readonly dispid 13;
    procedure Start; dispid 100;
    procedure Stop; dispid 101;
    procedure CleanUp; dispid 102;
  end;

// *********************************************************************//
// Interface: ServerSink
// Flags:     (256) OleAutomation
// GUID:      {10020209-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ServerSink = interface(IUnknown)
    ['{10020209-E260-11CF-AE68-00AA004A34D5}']
    function QueryTimeout(const Message: WideString; out Continue: WordBool): HResult; stdcall;
    function ServerMessage(Severity: Integer; MessageNumber: Integer; MessageState: Integer; 
                           const Message: WideString): HResult; stdcall;
    function ConnectionBroken(const Message: WideString; out Retry: WordBool): HResult; stdcall;
    function RemoteLoginFailed(Severity: Integer; MessageNumber: Integer; MessageState: Integer; 
                               const Message: WideString): HResult; stdcall;
    function CommandSent(const SQLCommand: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ServerGroups
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ServerGroups = interface(_IVSQLDMOStdObject)
    ['{10021803-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): ServerGroup; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: ServerGroup); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ServerGroupsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021803-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ServerGroupsDisp = dispinterface
    ['{10021803-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): ServerGroup; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: ServerGroup); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _ServerGroup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ServerGroup = interface(_IVSQLDMOStdObject)
    ['{10021806-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_RegisteredServers: RegisteredServers; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ServerGroups: ServerGroups; safecall;
    procedure Remove; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property RegisteredServers: RegisteredServers read Get_RegisteredServers;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property ServerGroups: ServerGroups read Get_ServerGroups;
  end;

// *********************************************************************//
// DispIntf:  _ServerGroupDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021806-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _ServerGroupDisp = dispinterface
    ['{10021806-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property RegisteredServers: RegisteredServers readonly dispid 0;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property ServerGroups: ServerGroups readonly dispid 16;
    procedure Remove; dispid 100;
  end;

// *********************************************************************//
// Interface: RegisteredServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RegisteredServers = interface(_IVSQLDMOStdObject)
    ['{10021903-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Item(ItemIndex: OleVariant): RegisteredServer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const Object_: RegisteredServer); safecall;
    procedure Remove(Index: OleVariant); safecall;
    procedure Refresh(ReleaseMemberObjects: OleVariant); safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  RegisteredServersDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021903-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  RegisteredServersDisp = dispinterface
    ['{10021903-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): RegisteredServer; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    procedure Add(const Object_: RegisteredServer); dispid 100;
    procedure Remove(Index: OleVariant); dispid 101;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: _RegisteredServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RegisteredServer = interface(_IVSQLDMOStdObject)
    ['{10021906-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Login: WideString; safecall;
    procedure Set_Login(const pRetVal: WideString); safecall;
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_UseTrustedConnection: Integer; safecall;
    procedure Set_UseTrustedConnection(pRetVal: Integer); safecall;
    function Get_VersionMajor: Integer; safecall;
    function Get_VersionMinor: Integer; safecall;
    function Get_SaLogin: WordBool; safecall;
    function Get_PersistFlags: Integer; safecall;
    procedure Set_PersistFlags(pRetVal: Integer); safecall;
    procedure Remove; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property Password: WideString read Get_Password write Set_Password;
    property UseTrustedConnection: Integer read Get_UseTrustedConnection write Set_UseTrustedConnection;
    property VersionMajor: Integer read Get_VersionMajor;
    property VersionMinor: Integer read Get_VersionMinor;
    property SaLogin: WordBool read Get_SaLogin;
    property PersistFlags: Integer read Get_PersistFlags write Set_PersistFlags;
  end;

// *********************************************************************//
// DispIntf:  _RegisteredServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _RegisteredServerDisp = dispinterface
    ['{10021906-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString dispid 9;
    property Login: WideString dispid 10;
    property Password: WideString dispid 11;
    property UseTrustedConnection: Integer dispid 12;
    property VersionMajor: Integer readonly dispid 13;
    property VersionMinor: Integer readonly dispid 14;
    property SaLogin: WordBool readonly dispid 15;
    property PersistFlags: Integer dispid 16;
    procedure Remove; dispid 100;
  end;

// *********************************************************************//
// Interface: Permission
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Permission = interface(_IVSQLDMOStdObject)
    ['{10022906-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_PrivilegeTypeName: WideString; safecall;
    function Get_PrivilegeType: SQLDMO_PRIVILEGE_TYPE; safecall;
    function Get_ObjectName: WideString; safecall;
    function Get_ObjectOwner: WideString; safecall;
    function Get_ObjectTypeName: WideString; safecall;
    function Get_ObjectType: SQLDMO_OBJECT_TYPE; safecall;
    function Get_ObjectID: Integer; safecall;
    function Get_Grantee: WideString; safecall;
    function Get_Granted: WordBool; safecall;
    function ListPrivilegeColumns: SQLObjectList; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property PrivilegeTypeName: WideString read Get_PrivilegeTypeName;
    property PrivilegeType: SQLDMO_PRIVILEGE_TYPE read Get_PrivilegeType;
    property ObjectName: WideString read Get_ObjectName;
    property ObjectOwner: WideString read Get_ObjectOwner;
    property ObjectTypeName: WideString read Get_ObjectTypeName;
    property ObjectType: SQLDMO_OBJECT_TYPE read Get_ObjectType;
    property ObjectID: Integer read Get_ObjectID;
    property Grantee: WideString read Get_Grantee;
    property Granted: WordBool read Get_Granted;
  end;

// *********************************************************************//
// DispIntf:  PermissionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022906-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  PermissionDisp = dispinterface
    ['{10022906-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PrivilegeTypeName: WideString readonly dispid 12;
    property PrivilegeType: SQLDMO_PRIVILEGE_TYPE readonly dispid 13;
    property ObjectName: WideString readonly dispid 14;
    property ObjectOwner: WideString readonly dispid 15;
    property ObjectTypeName: WideString readonly dispid 16;
    property ObjectType: SQLDMO_OBJECT_TYPE readonly dispid 17;
    property ObjectID: Integer readonly dispid 18;
    property Grantee: WideString readonly dispid 19;
    property Granted: WordBool readonly dispid 20;
    function ListPrivilegeColumns: SQLObjectList; dispid 100;
  end;

// *********************************************************************//
// Interface: _Backup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Backup = interface(_IVSQLDMOStdObject)
    ['{10021F06-E260-11CF-AE68-00AA004A34D5}']
    function Get_Application: Application; safecall;
    function Get_Parent: _IVSQLDMOStdObject; safecall;
    function Get_UserData: Integer; safecall;
    procedure Set_UserData(pRetVal: Integer); safecall;
    function Get_TypeOf: SQLDMO_OBJECT_TYPE; safecall;
    function Get_Properties: Properties; safecall;
    function Get_PercentCompleteNotification: Integer; safecall;
    procedure Set_PercentCompleteNotification(pRetVal: Integer); safecall;
    function Get_SkipTapeHeader: WordBool; safecall;
    procedure Set_SkipTapeHeader(pRetVal: WordBool); safecall;
    function Get_UnloadTapeAfter: WordBool; safecall;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool); safecall;
    function Get_Database: WideString; safecall;
    procedure Set_Database(const pRetVal: WideString); safecall;
    function Get_Files: WideString; safecall;
    procedure Set_Files(const pRetVal: WideString); safecall;
    function Get_DatabaseFileGroups: WideString; safecall;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString); safecall;
    function Get_DatabaseFiles: WideString; safecall;
    procedure Set_DatabaseFiles(const pRetVal: WideString); safecall;
    function Get_Action: SQLDMO_BACKUP_TYPE; safecall;
    procedure Set_Action(pRetVal: SQLDMO_BACKUP_TYPE); safecall;
    function Get_BackupSetName: WideString; safecall;
    procedure Set_BackupSetName(const pRetVal: WideString); safecall;
    function Get_BackupSetDescription: WideString; safecall;
    procedure Set_BackupSetDescription(const pRetVal: WideString); safecall;
    function Get_Restart: WordBool; safecall;
    procedure Set_Restart(pRetVal: WordBool); safecall;
    function Get_TruncateLog: SQLDMO_BACKUP_LOG_TYPE; safecall;
    procedure Set_TruncateLog(pRetVal: SQLDMO_BACKUP_LOG_TYPE); safecall;
    function Get_BlockSize: Integer; safecall;
    procedure Set_BlockSize(pRetVal: Integer); safecall;
    function Get_FormatMedia: WordBool; safecall;
    procedure Set_FormatMedia(pRetVal: WordBool); safecall;
    function Get_MediaName: WideString; safecall;
    procedure Set_MediaName(const pRetVal: WideString); safecall;
    function Get_MediaDescription: WideString; safecall;
    procedure Set_MediaDescription(const pRetVal: WideString); safecall;
    function Get_Devices: WideString; safecall;
    procedure Set_Devices(const pRetVal: WideString); safecall;
    function Get_Tapes: WideString; safecall;
    procedure Set_Tapes(const pRetVal: WideString); safecall;
    function Get_Pipes: WideString; safecall;
    procedure Set_Pipes(const pRetVal: WideString); safecall;
    function Get_ExpirationDate: WideString; safecall;
    procedure Set_ExpirationDate(const pRetVal: WideString); safecall;
    function Get_Initialize: WordBool; safecall;
    procedure Set_Initialize(pRetVal: WordBool); safecall;
    function Get_RetainDays: Integer; safecall;
    procedure Set_RetainDays(pRetVal: Integer); safecall;
    procedure Abort; safecall;
    procedure SQLBackup(const ServerObject: SQLServer); safecall;
    function GenerateSQL: WideString; safecall;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property SkipTapeHeader: WordBool read Get_SkipTapeHeader write Set_SkipTapeHeader;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Files: WideString read Get_Files write Set_Files;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_BACKUP_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property BackupSetDescription: WideString read Get_BackupSetDescription write Set_BackupSetDescription;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property TruncateLog: SQLDMO_BACKUP_LOG_TYPE read Get_TruncateLog write Set_TruncateLog;
    property BlockSize: Integer read Get_BlockSize write Set_BlockSize;
    property FormatMedia: WordBool read Get_FormatMedia write Set_FormatMedia;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property MediaDescription: WideString read Get_MediaDescription write Set_MediaDescription;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property ExpirationDate: WideString read Get_ExpirationDate write Set_ExpirationDate;
    property Initialize: WordBool read Get_Initialize write Set_Initialize;
    property RetainDays: Integer read Get_RetainDays write Set_RetainDays;
  end;

// *********************************************************************//
// DispIntf:  _BackupDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021F06-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _BackupDisp = dispinterface
    ['{10021F06-E260-11CF-AE68-00AA004A34D5}']
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PercentCompleteNotification: Integer dispid 9;
    property SkipTapeHeader: WordBool dispid 10;
    property UnloadTapeAfter: WordBool dispid 11;
    property Database: WideString dispid 12;
    property Files: WideString dispid 13;
    property DatabaseFileGroups: WideString dispid 14;
    property DatabaseFiles: WideString dispid 15;
    property Action: SQLDMO_BACKUP_TYPE dispid 16;
    property BackupSetName: WideString dispid 17;
    property BackupSetDescription: WideString dispid 18;
    property Restart: WordBool dispid 19;
    property TruncateLog: SQLDMO_BACKUP_LOG_TYPE dispid 20;
    property BlockSize: Integer dispid 21;
    property FormatMedia: WordBool dispid 22;
    property MediaName: WideString dispid 23;
    property MediaDescription: WideString dispid 24;
    property Devices: WideString dispid 25;
    property Tapes: WideString dispid 26;
    property Pipes: WideString dispid 27;
    property ExpirationDate: WideString dispid 28;
    property Initialize: WordBool dispid 29;
    property RetainDays: Integer dispid 30;
    procedure Abort; dispid 100;
    procedure SQLBackup(const ServerObject: SQLServer); dispid 101;
    function GenerateSQL: WideString; dispid 102;
  end;

// *********************************************************************//
// Interface: DBOption2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBOption2 = interface(DBOption)
    ['{10022216-E260-11CF-AE68-00AA004A34D5}']
    function Get_RecoveryModel: SQLDMO_RECOVERY_TYPE; safecall;
    procedure Set_RecoveryModel(pRetVal: SQLDMO_RECOVERY_TYPE); safecall;
    function Get_DBChaining: WordBool; safecall;
    procedure Set_DBChaining(pRetVal: WordBool); safecall;
    property RecoveryModel: SQLDMO_RECOVERY_TYPE read Get_RecoveryModel write Set_RecoveryModel;
    property DBChaining: WordBool read Get_DBChaining write Set_DBChaining;
  end;

// *********************************************************************//
// DispIntf:  DBOption2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022216-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  DBOption2Disp = dispinterface
    ['{10022216-E260-11CF-AE68-00AA004A34D5}']
    property RecoveryModel: SQLDMO_RECOVERY_TYPE dispid 32;
    property DBChaining: WordBool dispid 33;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property SelectIntoBulkCopy: WordBool dispid 10;
    property DBOUseOnly: WordBool dispid 11;
    property ReadOnly: WordBool dispid 13;
    property SingleUser: WordBool dispid 14;
    property TruncateLogOnCheckpoint: WordBool dispid 15;
    property ColumnsNullByDefault: WordBool dispid 17;
    property Offline: WordBool dispid 18;
    procedure Refresh; dispid 101;
    property RecursiveTriggers: WordBool dispid 20;
    property AutoShrink: WordBool dispid 21;
    property CompareNull: WordBool dispid 22;
    property ContactNull: WordBool dispid 23;
    property CursorCloseOnCommit: WordBool dispid 24;
    property DefaultCursor: WordBool dispid 25;
    property QuoteDelimiter: WordBool dispid 26;
    property AssignmentDiag: WordBool dispid 27;
    property TornPageDetection: WordBool dispid 28;
    property AutoClose: WordBool dispid 29;
    property AutoCreateStat: WordBool dispid 30;
    property AutoUpdateStat: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface: QueryResults2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  QueryResults2 = interface(QueryResults)
    ['{10022516-E260-11CF-AE68-00AA004A34D5}']
    function GetColumnSQLVARIANT(Row: Integer; Column: Integer): PSafeArray; safecall;
    function GetColumnSQLVARIANTDataType(Row: Integer; Column: Integer; const ObjName: WideString): WideString; safecall;
    function GetColumnSQLVARIANTLength(Row: Integer; Column: Integer; const ObjName: WideString): Integer; safecall;
    function GetColumnSQLVARIANTToString(Row: Integer; Column: Integer; const ObjName: WideString): WideString; safecall;
    function GetColumnBigInt(Row: Integer; Column: Integer): WideString; safecall;
  end;

// *********************************************************************//
// DispIntf:  QueryResults2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022516-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  QueryResults2Disp = dispinterface
    ['{10022516-E260-11CF-AE68-00AA004A34D5}']
    function GetColumnSQLVARIANT(Row: Integer; Column: Integer): {??PSafeArray}OleVariant; dispid 111;
    function GetColumnSQLVARIANTDataType(Row: Integer; Column: Integer; const ObjName: WideString): WideString; dispid 112;
    function GetColumnSQLVARIANTLength(Row: Integer; Column: Integer; const ObjName: WideString): Integer; dispid 113;
    function GetColumnSQLVARIANTToString(Row: Integer; Column: Integer; const ObjName: WideString): WideString; dispid 114;
    function GetColumnBigInt(Row: Integer; Column: Integer): WideString; dispid 115;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property ResultSets: Integer readonly dispid 10;
    property CurrentResultSet: Integer dispid 11;
    property Rows: Integer readonly dispid 12;
    property Columns: Integer readonly dispid 13;
    property ColumnName[Column: Integer]: WideString readonly dispid 14;
    property ColumnType[Column: Integer]: SQLDMO_QUERY_DATATYPE readonly dispid 15;
    property ColumnMaxLength[Column: Integer]: Integer readonly dispid 16;
    function GetColumnLong(Row: Integer; Column: Integer): Integer; dispid 100;
    function GetColumnBool(Row: Integer; Column: Integer): WordBool; dispid 101;
    function GetColumnFloat(Row: Integer; Column: Integer): Single; dispid 102;
    function GetColumnDouble(Row: Integer; Column: Integer): Double; dispid 103;
    function GetColumnString(Row: Integer; Column: Integer): WideString; dispid 104;
    function GetRangeString(Top: OleVariant; Left: OleVariant; Bottom: OleVariant; 
                            Right: OleVariant; RowDelim: OleVariant; ColDelim: OleVariant; 
                            ColWidths: OleVariant): WideString; dispid 105;
    procedure Refresh; dispid 106;
    function GetColumnDate(Row: Integer; Column: Integer): TDateTime; dispid 107;
    function GetColumnBinary(Row: Integer; Column: Integer): {??PSafeArray}OleVariant; dispid 108;
    function GetColumnBinaryLength(Row: Integer; Column: Integer): Integer; dispid 109;
    function GetColumnGUID(Row: Integer; Column: Integer): {??PSafeArray}OleVariant; dispid 110;
  end;

// *********************************************************************//
// Interface: Registry2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Registry2 = interface(Registry)
    ['{10022716-E260-11CF-AE68-00AA004A34D5}']
    function Get_BackupDirectory: WideString; safecall;
    procedure Set_BackupDirectory(const pRetVal: WideString); safecall;
    function Get_AgentLogFile: WideString; safecall;
    procedure Set_AgentLogFile(const pRetVal: WideString); safecall;
    function Get_SuperSocketEncrypt: WordBool; safecall;
    function Get_SuperSocketList: WideString; safecall;
    procedure Set_SuperSocketList(const pRetVal: WideString); safecall;
    function Get_NP: WideString; safecall;
    procedure Set_NP(const pRetVal: WideString); safecall;
    function Get_TcpFlag: WordBool; safecall;
    function Get_TcpPort: WideString; safecall;
    procedure Set_TcpPort(const pRetVal: WideString); safecall;
    function Get_SpxFlag: WordBool; safecall;
    function Get_SpxPort: Integer; safecall;
    procedure Set_SpxPort(pRetVal: Integer); safecall;
    function Get_SpxServiceName: WideString; safecall;
    procedure Set_SpxServiceName(const pRetVal: WideString); safecall;
    function Get_Adsp: WideString; safecall;
    procedure Set_Adsp(const pRetVal: WideString); safecall;
    function Get_RpcEncrypt: WordBool; safecall;
    function Get_RpcList: WideString; safecall;
    procedure Set_RpcList(const pRetVal: WideString); safecall;
    function Get_RpcMinCalls: Integer; safecall;
    procedure Set_RpcMinCalls(pRetVal: Integer); safecall;
    function Get_RpcMaxCalls: Integer; safecall;
    procedure Set_RpcMaxCalls(pRetVal: Integer); safecall;
    function Get_VinesItemName: WideString; safecall;
    procedure Set_VinesItemName(const pRetVal: WideString); safecall;
    function Get_VinesGroupName: WideString; safecall;
    procedure Set_VinesGroupName(const pRetVal: WideString); safecall;
    function Get_VinesOrgName: WideString; safecall;
    procedure Set_VinesOrgName(const pRetVal: WideString); safecall;
    function Get_WSProxyPort: Integer; safecall;
    procedure Set_WSProxyPort(pRetVal: Integer); safecall;
    function Get_WSProxyAddress: WideString; safecall;
    procedure Set_WSProxyAddress(const pRetVal: WideString); safecall;
    function Get_SQLCurrentVersion: WideString; safecall;
    function Get_SNMP: WordBool; safecall;
    function Get_SNMPCurrentVersion: WideString; safecall;
    procedure Set_SNMPCurrentVersion(const pRetVal: WideString); safecall;
    function Get_SNMPExtensionAgents: WordBool; safecall;
    function Get_SNMPExtensionAgentsData: WideString; safecall;
    procedure Set_SNMPExtensionAgentsData(const pRetVal: WideString); safecall;
    function EnumFullTextLanguages: QueryResults; safecall;
    function Get_ViaVendor: WideString; safecall;
    procedure Set_ViaVendor(const pRetVal: WideString); safecall;
    function Get_ViaListenInfo: WideString; safecall;
    procedure Set_ViaListenInfo(const pRetVal: WideString); safecall;
    function Get_ViaRecognizedVendors: WideString; safecall;
    property BackupDirectory: WideString read Get_BackupDirectory write Set_BackupDirectory;
    property AgentLogFile: WideString read Get_AgentLogFile write Set_AgentLogFile;
    property SuperSocketEncrypt: WordBool read Get_SuperSocketEncrypt;
    property SuperSocketList: WideString read Get_SuperSocketList write Set_SuperSocketList;
    property NP: WideString read Get_NP write Set_NP;
    property TcpFlag: WordBool read Get_TcpFlag;
    property TcpPort: WideString read Get_TcpPort write Set_TcpPort;
    property SpxFlag: WordBool read Get_SpxFlag;
    property SpxPort: Integer read Get_SpxPort write Set_SpxPort;
    property SpxServiceName: WideString read Get_SpxServiceName write Set_SpxServiceName;
    property Adsp: WideString read Get_Adsp write Set_Adsp;
    property RpcEncrypt: WordBool read Get_RpcEncrypt;
    property RpcList: WideString read Get_RpcList write Set_RpcList;
    property RpcMinCalls: Integer read Get_RpcMinCalls write Set_RpcMinCalls;
    property RpcMaxCalls: Integer read Get_RpcMaxCalls write Set_RpcMaxCalls;
    property VinesItemName: WideString read Get_VinesItemName write Set_VinesItemName;
    property VinesGroupName: WideString read Get_VinesGroupName write Set_VinesGroupName;
    property VinesOrgName: WideString read Get_VinesOrgName write Set_VinesOrgName;
    property WSProxyPort: Integer read Get_WSProxyPort write Set_WSProxyPort;
    property WSProxyAddress: WideString read Get_WSProxyAddress write Set_WSProxyAddress;
    property SQLCurrentVersion: WideString read Get_SQLCurrentVersion;
    property SNMP: WordBool read Get_SNMP;
    property SNMPCurrentVersion: WideString read Get_SNMPCurrentVersion write Set_SNMPCurrentVersion;
    property SNMPExtensionAgents: WordBool read Get_SNMPExtensionAgents;
    property SNMPExtensionAgentsData: WideString read Get_SNMPExtensionAgentsData write Set_SNMPExtensionAgentsData;
    property ViaVendor: WideString read Get_ViaVendor write Set_ViaVendor;
    property ViaListenInfo: WideString read Get_ViaListenInfo write Set_ViaListenInfo;
    property ViaRecognizedVendors: WideString read Get_ViaRecognizedVendors;
  end;

// *********************************************************************//
// DispIntf:  Registry2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022716-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Registry2Disp = dispinterface
    ['{10022716-E260-11CF-AE68-00AA004A34D5}']
    property BackupDirectory: WideString dispid 33;
    property AgentLogFile: WideString dispid 34;
    property SuperSocketEncrypt: WordBool readonly dispid 35;
    property SuperSocketList: WideString dispid 36;
    property NP: WideString dispid 37;
    property TcpFlag: WordBool readonly dispid 38;
    property TcpPort: WideString dispid 39;
    property SpxFlag: WordBool readonly dispid 40;
    property SpxPort: Integer dispid 41;
    property SpxServiceName: WideString dispid 42;
    property Adsp: WideString dispid 43;
    property RpcEncrypt: WordBool readonly dispid 44;
    property RpcList: WideString dispid 45;
    property RpcMinCalls: Integer dispid 46;
    property RpcMaxCalls: Integer dispid 47;
    property VinesItemName: WideString dispid 48;
    property VinesGroupName: WideString dispid 49;
    property VinesOrgName: WideString dispid 50;
    property WSProxyPort: Integer dispid 51;
    property WSProxyAddress: WideString dispid 52;
    property SQLCurrentVersion: WideString readonly dispid 53;
    property SNMP: WordBool readonly dispid 54;
    property SNMPCurrentVersion: WideString dispid 55;
    property SNMPExtensionAgents: WordBool readonly dispid 56;
    property SNMPExtensionAgentsData: WideString dispid 57;
    function EnumFullTextLanguages: QueryResults; dispid 100;
    property ViaVendor: WideString dispid 58;
    property ViaListenInfo: WideString dispid 59;
    property ViaRecognizedVendors: WideString readonly dispid 60;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property AutostartMail: WordBool dispid 10;
    property AutostartServer: WordBool dispid 11;
    property CaseSensitive: WordBool readonly dispid 12;
    property CharacterSet: WideString readonly dispid 13;
    property ErrorLogPath: WideString dispid 15;
    property MailAccountName: WideString dispid 16;
    property MailPassword: WideString dispid 17;
    property MasterDBPath: WideString dispid 18;
    property NTEventLogging: WordBool readonly dispid 19;
    property NumberOfProcessors: Integer readonly dispid 20;
    property PerfMonMode: SQLDMO_PERFMON_TYPE dispid 21;
    property PhysicalMemory: Integer readonly dispid 22;
    property AutostartLicensing: WordBool dispid 24;
    property RegisteredOrganization: WideString readonly dispid 25;
    property RegisteredOwner: WideString readonly dispid 26;
    property SortOrder: WideString readonly dispid 27;
    property SQLRootPath: WideString dispid 28;
    property SQLDataRoot: WideString dispid 29;
    property TapeLoadWaitTime: Integer dispid 30;
    property ReplicationInstalled: WordBool readonly dispid 31;
    property AutostartDTC: WordBool dispid 32;
  end;

// *********************************************************************//
// Interface: SystemDatatype2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatype2 = interface(SystemDatatype)
    ['{10021A16-E260-11CF-AE68-00AA004A34D5}']
    function Get_Collation: WideString; safecall;
    property Collation: WideString read Get_Collation;
  end;

// *********************************************************************//
// DispIntf:  SystemDatatype2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  SystemDatatype2Disp = dispinterface
    ['{10021A16-E260-11CF-AE68-00AA004A34D5}']
    property Collation: WideString readonly dispid 18;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 10;
    property MaximumLength: Integer readonly dispid 11;
    property AllowNulls: WordBool readonly dispid 12;
    property IsNumeric: WordBool readonly dispid 13;
    property AllowIdentity: WordBool readonly dispid 14;
    property IsVariableLength: WordBool readonly dispid 15;
    property AllowLength: WordBool readonly dispid 16;
    property MaximumChar: Integer readonly dispid 17;
  end;

// *********************************************************************//
// Interface: Permission2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022916-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Permission2 = interface(Permission)
    ['{10022916-E260-11CF-AE68-00AA004A34D5}']
    function Get_GrantedGranted: WordBool; safecall;
    property GrantedGranted: WordBool read Get_GrantedGranted;
  end;

// *********************************************************************//
// DispIntf:  Permission2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022916-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Permission2Disp = dispinterface
    ['{10022916-E260-11CF-AE68-00AA004A34D5}']
    property GrantedGranted: WordBool readonly dispid 21;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PrivilegeTypeName: WideString readonly dispid 12;
    property PrivilegeType: SQLDMO_PRIVILEGE_TYPE readonly dispid 13;
    property ObjectName: WideString readonly dispid 14;
    property ObjectOwner: WideString readonly dispid 15;
    property ObjectTypeName: WideString readonly dispid 16;
    property ObjectType: SQLDMO_OBJECT_TYPE readonly dispid 17;
    property ObjectID: Integer readonly dispid 18;
    property Grantee: WideString readonly dispid 19;
    property Granted: WordBool readonly dispid 20;
    function ListPrivilegeColumns: SQLObjectList; dispid 100;
  end;

// *********************************************************************//
// Interface: _Backup2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021F16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Backup2 = interface(_Backup)
    ['{10021F16-E260-11CF-AE68-00AA004A34D5}']
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_MediaPassword: WideString; safecall;
    procedure Set_MediaPassword(const pRetVal: WideString); safecall;
    function Get_NoRewind: WordBool; safecall;
    procedure Set_NoRewind(pRetVal: WordBool); safecall;
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  end;

// *********************************************************************//
// DispIntf:  _Backup2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10021F16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  _Backup2Disp = dispinterface
    ['{10021F16-E260-11CF-AE68-00AA004A34D5}']
    property Password: WideString dispid 31;
    property MediaPassword: WideString dispid 32;
    property NoRewind: WordBool dispid 33;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property PercentCompleteNotification: Integer dispid 9;
    property SkipTapeHeader: WordBool dispid 10;
    property UnloadTapeAfter: WordBool dispid 11;
    property Database: WideString dispid 12;
    property Files: WideString dispid 13;
    property DatabaseFileGroups: WideString dispid 14;
    property DatabaseFiles: WideString dispid 15;
    property Action: SQLDMO_BACKUP_TYPE dispid 16;
    property BackupSetName: WideString dispid 17;
    property BackupSetDescription: WideString dispid 18;
    property Restart: WordBool dispid 19;
    property TruncateLog: SQLDMO_BACKUP_LOG_TYPE dispid 20;
    property BlockSize: Integer dispid 21;
    property FormatMedia: WordBool dispid 22;
    property MediaName: WideString dispid 23;
    property MediaDescription: WideString dispid 24;
    property Devices: WideString dispid 25;
    property Tapes: WideString dispid 26;
    property Pipes: WideString dispid 27;
    property ExpirationDate: WideString dispid 28;
    property Initialize: WordBool dispid 29;
    property RetainDays: Integer dispid 30;
    procedure Abort; dispid 100;
    procedure SQLBackup(const ServerObject: SQLServer); dispid 101;
    function GenerateSQL: WideString; dispid 102;
  end;

// *********************************************************************//
// Interface: BackupSink
// Flags:     (256) OleAutomation
// GUID:      {10021F09-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  BackupSink = interface(IUnknown)
    ['{10021F09-E260-11CF-AE68-00AA004A34D5}']
    function PercentComplete(const Message: WideString; Percent: Integer): HResult; stdcall;
    function NextMedia(const Message: WideString): HResult; stdcall;
    function Complete(const Message: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: LogFiles2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E13-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LogFiles2 = interface(LogFiles)
    ['{10022E13-E260-11CF-AE68-00AA004A34D5}']
    procedure Remove(Index: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  LogFiles2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10022E13-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  LogFiles2Disp = dispinterface
    ['{10022E13-E260-11CF-AE68-00AA004A34D5}']
    procedure Remove(Index: OleVariant); dispid 101;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    function Item(ItemIndex: OleVariant): LogFile; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    property Count: Integer readonly dispid 5;
    function ItemByID(ID: Integer): LogFile; dispid 6;
    procedure Add(const Object_: LogFile); dispid 100;
    procedure Refresh(ReleaseMemberObjects: OleVariant); dispid 102;
  end;

// *********************************************************************//
// Interface: Publisher2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Publisher2 = interface(Publisher)
    ['{10030C16-E260-11CF-AE68-00AA004A34D5}']
    procedure CleanUpAnonymousAgentInfo(const bstrSubscriptionID: WideString; 
                                        ReplicationType: SQLDMO_REPLICATION_TYPE); safecall;
    function EnumPublications2(ReplicationType: SQLDMO_REPLICATION_TYPE; 
                               const Database: WideString; const Publication: WideString; 
                               const AgentLogin: WideString; bSecurityCheck: WordBool): QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  Publisher2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030C16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Publisher2Disp = dispinterface
    ['{10030C16-E260-11CF-AE68-00AA004A34D5}']
    procedure CleanUpAnonymousAgentInfo(const bstrSubscriptionID: WideString; 
                                        ReplicationType: SQLDMO_REPLICATION_TYPE); dispid 104;
    function EnumPublications2(ReplicationType: SQLDMO_REPLICATION_TYPE; 
                               const Database: WideString; const Publication: WideString; 
                               const AgentLogin: WideString; bSecurityCheck: WordBool): QueryResults; dispid 105;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property RegisteredSubscribers: RegisteredSubscribers readonly dispid 50;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
    procedure Uninstall; dispid 102;
    function EnumPublications(ReplicationType: SQLDMO_REPLICATION_TYPE; const Database: WideString; 
                              const AgentLogin: WideString; bSecurityCheck: WordBool): QueryResults; dispid 103;
  end;

// *********************************************************************//
// Interface: Subscriber2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030D16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Subscriber2 = interface(Subscriber)
    ['{10030D16-E260-11CF-AE68-00AA004A34D5}']
    function EnumAllSubscriptions(SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; 
                                  const szSubscriptionDB: WideString): QueryResults; safecall;
  end;

// *********************************************************************//
// DispIntf:  Subscriber2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030D16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Subscriber2Disp = dispinterface
    ['{10030D16-E260-11CF-AE68-00AA004A34D5}']
    function EnumAllSubscriptions(SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE; 
                                  const szSubscriptionDB: WideString): QueryResults; dispid 102;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 101;
  end;

// *********************************************************************//
// Interface: Distributor2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Distributor2 = interface(Distributor)
    ['{10030E16-E260-11CF-AE68-00AA004A34D5}']
    function EnumQueueReaderAgentViews: QueryResults; safecall;
    function EnumThirdPartyVendorNames: QueryResults; safecall;
    function EnumThirdPartyPublications2(const bstrDistributionDBName: WideString; 
                                         const bstrVendorName: WideString): QueryResults; safecall;
    procedure RemoveDefunctAnonymousSubscription(const bstrDistributionDBName: WideString; 
                                                 lAgentID: Integer; 
                                                 ReplType: SQLDMO_REPLICATION_TYPE); safecall;
    function EnumDistributionAgentViews2(fExcludeAnonymous: WordBool): QueryResults; safecall;
    function EnumMergeAgentViews2(fExcludeAnonymous: WordBool): QueryResults; safecall;
    procedure GetAgentsStatus2(ReplAgentType: SQLDMO_REPLAGENT_TYPE; fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  Distributor2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030E16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  Distributor2Disp = dispinterface
    ['{10030E16-E260-11CF-AE68-00AA004A34D5}']
    function EnumQueueReaderAgentViews: QueryResults; dispid 125;
    function EnumThirdPartyVendorNames: QueryResults; dispid 126;
    function EnumThirdPartyPublications2(const bstrDistributionDBName: WideString; 
                                         const bstrVendorName: WideString): QueryResults; dispid 127;
    procedure RemoveDefunctAnonymousSubscription(const bstrDistributionDBName: WideString; 
                                                 lAgentID: Integer; 
                                                 ReplType: SQLDMO_REPLICATION_TYPE); dispid 128;
    function EnumDistributionAgentViews2(fExcludeAnonymous: WordBool): QueryResults; dispid 129;
    function EnumMergeAgentViews2(fExcludeAnonymous: WordBool): QueryResults; dispid 130;
    procedure GetAgentsStatus2(ReplAgentType: SQLDMO_REPLAGENT_TYPE; fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString); dispid 131;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property DistributorInstalled: WordBool readonly dispid 10;
    property DistributorAvailable: WordBool readonly dispid 11;
    property DistributorLocal: WordBool readonly dispid 12;
    property DistributionServer: WideString dispid 13;
    property DistributionDatabase: WideString readonly dispid 14;
    property AgentCheckupInterval: Integer dispid 15;
    property IsDistributionPublisher: WordBool readonly dispid 16;
    property HasRemoteDistributionPublisher: WordBool readonly dispid 17;
    property DistributionPublishers: DistributionPublishers readonly dispid 50;
    property DistributionDatabases: DistributionDatabases readonly dispid 51;
    procedure Refresh; dispid 101;
    procedure Install; dispid 105;
    procedure Uninstall; dispid 106;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 107;
    function EnumSnapshotAgentViews: QueryResults; dispid 108;
    function EnumLogReaderAgentViews: QueryResults; dispid 109;
    function EnumDistributionAgentViews: QueryResults; dispid 110;
    function EnumMergeAgentViews: QueryResults; dispid 111;
    function EnumMiscellaneousAgentViews: QueryResults; dispid 112;
    function CreateAgentProfile(const bstrName: WideString; const bstrDescription: WideString; 
                                ReplAgentType: SQLDMO_REPLAGENT_TYPE): Integer; dispid 113;
    procedure DeleteAgentProfile(lProfileID: Integer); dispid 114;
    procedure ChangeAgentProfile(lProfileID: Integer; const bstrDescription: WideString); dispid 115;
    function EnumAgentProfiles(ReplAgentType: SQLDMO_REPLAGENT_TYPE): QueryResults; dispid 116;
    procedure ChangeAgentParameter(lProfileID: Integer; const bstrParameterName: WideString; 
                                   const bstrParameterValue: WideString); dispid 117;
    function EnumAgentParameters(lProfileID: Integer): QueryResults; dispid 118;
    procedure UpdateAgentProfile(const DistributionDBName: WideString; 
                                 AgentType: SQLDMO_REPLAGENT_TYPE; lAgentID: Integer; 
                                 lProfileID: Integer); dispid 119;
    procedure UpdateDefaultAgentProfile(lProfileID: Integer); dispid 120;
    procedure GetAgentsStatus(ReplAgentType: SQLDMO_REPLAGENT_TYPE; 
                              out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString); dispid 121;
    procedure CleanUpDistributionPublisherByName(const bstrName: WideString); dispid 122;
    procedure SetUpDistributorPassword(const bstrName: WideString); dispid 123;
    function EnumThirdPartyPublications(const DistributionDBName: WideString): QueryResults; dispid 124;
  end;

// *********************************************************************//
// Interface: ReplicationDatabase2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabase2 = interface(ReplicationDatabase)
    ['{10030A16-E260-11CF-AE68-00AA004A34D5}']
    function Get_DBReadOnly: WordBool; safecall;
    procedure CopySubscriptionDatabase(const szFileName: WideString; 
                                       fOverWriteExistingFile: WordBool); safecall;
    function ReadReplicationFailOverMode(const szPublisher: WideString; 
                                         const szPublicationDB: WideString; 
                                         const szPublication: WideString): SQLDMO_REPLFAILOVER_TYPE; safecall;
    procedure WriteReplicationFailOverMode(const szPublisher: WideString; 
                                           const szPublicationDB: WideString; 
                                           const szPublication: WideString; 
                                           FailOverMode: SQLDMO_REPLFAILOVER_TYPE); safecall;
    property DBReadOnly: WordBool read Get_DBReadOnly;
  end;

// *********************************************************************//
// DispIntf:  ReplicationDatabase2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10030A16-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationDatabase2Disp = dispinterface
    ['{10030A16-E260-11CF-AE68-00AA004A34D5}']
    property DBReadOnly: WordBool readonly dispid 14;
    procedure CopySubscriptionDatabase(const szFileName: WideString; 
                                       fOverWriteExistingFile: WordBool); dispid 109;
    function ReadReplicationFailOverMode(const szPublisher: WideString; 
                                         const szPublicationDB: WideString; 
                                         const szPublication: WideString): SQLDMO_REPLFAILOVER_TYPE; dispid 110;
    procedure WriteReplicationFailOverMode(const szPublisher: WideString; 
                                           const szPublicationDB: WideString; 
                                           const szPublication: WideString; 
                                           FailOverMode: SQLDMO_REPLFAILOVER_TYPE); dispid 111;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property EnableTransPublishing: WordBool dispid 10;
    property EnableMergePublishing: WordBool dispid 11;
    property DBOwner: WordBool readonly dispid 12;
    property AllowMergePublication: WordBool readonly dispid 13;
    property ReplicationTables: ReplicationTables readonly dispid 50;
    property ReplicationStoredProcedures: ReplicationStoredProcedures readonly dispid 51;
    property TransPublications: TransPublications readonly dispid 52;
    property MergePublications: MergePublications readonly dispid 53;
    property TransPullSubscriptions: TransPullSubscriptions readonly dispid 54;
    property MergePullSubscriptions: MergePullSubscriptions readonly dispid 55;
    procedure EnableTransSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant); dispid 100;
    procedure DisableTransSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); dispid 101;
    procedure EnableMergeSubscription(const Subscriber: WideString; 
                                      const SubscriptionDatabase: WideString; 
                                      const PublicationName: WideString; 
                                      SubscriptionType: OleVariant; SyncType: OleVariant; 
                                      SubscriberType: OleVariant; SubscriptionPriority: OleVariant); dispid 102;
    procedure DisableMergeSubscription(const Subscriber: WideString; 
                                       const SubscriptionDatabase: WideString; 
                                       const PublicationName: WideString); dispid 103;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; dispid 105;
    procedure RefreshChildren; dispid 106;
    function EnumConflictTables(const Publication: WideString): QueryResults; dispid 107;
    function EnumInitialAccesses: QueryResults; dispid 108;
  end;

// *********************************************************************//
// Interface: ReplicationTable2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTable2 = interface(ReplicationTable)
    ['{10031416-E260-11CF-AE68-00AA004A34D5}']
    function Get_ID: Integer; safecall;
    function Get_HasRowVersionColumn: WordBool; safecall;
    function Get_HasIdentityColumn: WordBool; safecall;
    function Get_HasSQLVariantColumn: WordBool; safecall;
    function Get_HasBigIntColumn: WordBool; safecall;
    function Get_HasBigIntIdentityColumn: WordBool; safecall;
    function Get_PublishedInMerge: WordBool; safecall;
    function Get_PublishedInQueuedTransactions: WordBool; safecall;
    function Get_HasIdentityNotForReplColumn: WordBool; safecall;
    function EnumIdentityRangeInfo: QueryResults; safecall;
    procedure ReplicationAddColumn(const ColumnName: WideString; const TypeText: WideString; 
                                   const PublicationName: WideString; 
                                   const SchemaChangeScript: WideString); safecall;
    procedure ReplicationDropColumn(const ColumnName: WideString; 
                                    const SchemaChangeScript: WideString); safecall;
    property ID: Integer read Get_ID;
    property HasRowVersionColumn: WordBool read Get_HasRowVersionColumn;
    property HasIdentityColumn: WordBool read Get_HasIdentityColumn;
    property HasSQLVariantColumn: WordBool read Get_HasSQLVariantColumn;
    property HasBigIntColumn: WordBool read Get_HasBigIntColumn;
    property HasBigIntIdentityColumn: WordBool read Get_HasBigIntIdentityColumn;
    property PublishedInMerge: WordBool read Get_PublishedInMerge;
    property PublishedInQueuedTransactions: WordBool read Get_PublishedInQueuedTransactions;
    property HasIdentityNotForReplColumn: WordBool read Get_HasIdentityNotForReplColumn;
  end;

// *********************************************************************//
// DispIntf:  ReplicationTable2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationTable2Disp = dispinterface
    ['{10031416-E260-11CF-AE68-00AA004A34D5}']
    property ID: Integer readonly dispid 15;
    property HasRowVersionColumn: WordBool readonly dispid 16;
    property HasIdentityColumn: WordBool readonly dispid 17;
    property HasSQLVariantColumn: WordBool readonly dispid 18;
    property HasBigIntColumn: WordBool readonly dispid 19;
    property HasBigIntIdentityColumn: WordBool readonly dispid 20;
    property PublishedInMerge: WordBool readonly dispid 21;
    property PublishedInQueuedTransactions: WordBool readonly dispid 22;
    property HasIdentityNotForReplColumn: WordBool readonly dispid 23;
    function EnumIdentityRangeInfo: QueryResults; dispid 102;
    procedure ReplicationAddColumn(const ColumnName: WideString; const TypeText: WideString; 
                                   const PublicationName: WideString; 
                                   const SchemaChangeScript: WideString); dispid 103;
    procedure ReplicationDropColumn(const ColumnName: WideString; 
                                    const SchemaChangeScript: WideString); dispid 104;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property Owner: WideString readonly dispid 10;
    property HasPrimaryKey: WordBool readonly dispid 11;
    property Columns: Columns readonly dispid 12;
    property HasGuidColumn: WordBool readonly dispid 13;
    property HasTimeStampColumn: WordBool readonly dispid 14;
    function EnumPublicationArticles: QueryResults; dispid 101;
  end;

// *********************************************************************//
// Interface: ReplicationStoredProcedure2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031616-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProcedure2 = interface(ReplicationStoredProcedure)
    ['{10031616-E260-11CF-AE68-00AA004A34D5}']
    function Get_Encrypted: WordBool; safecall;
    property Encrypted: WordBool read Get_Encrypted;
  end;

// *********************************************************************//
// DispIntf:  ReplicationStoredProcedure2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10031616-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  ReplicationStoredProcedure2Disp = dispinterface
    ['{10031616-E260-11CF-AE68-00AA004A34D5}']
    property Encrypted: WordBool readonly dispid 13;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Name: WideString readonly dispid 9;
    property SystemObject: WordBool readonly dispid 11;
    property Owner: WideString readonly dispid 12;
    function EnumPublicationArticles: QueryResults; dispid 101;
    function EnumDependencies(DependencyType: OleVariant): QueryResults; dispid 102;
  end;

// *********************************************************************//
// Interface: JobServer2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobServer2 = interface(JobServer)
    ['{10040416-E260-11CF-AE68-00AA004A34D5}']
    function Get_ServiceName: WideString; safecall;
    property ServiceName: WideString read Get_ServiceName;
  end;

// *********************************************************************//
// DispIntf:  JobServer2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {10040416-E260-11CF-AE68-00AA004A34D5}
// *********************************************************************//
  JobServer2Disp = dispinterface
    ['{10040416-E260-11CF-AE68-00AA004A34D5}']
    property ServiceName: WideString readonly dispid 34;
    property Application: Application readonly dispid 1;
    property Parent: _IVSQLDMOStdObject readonly dispid 2;
    property UserData: Integer dispid 3;
    property TypeOf: SQLDMO_OBJECT_TYPE readonly dispid 4;
    property Properties: Properties readonly dispid 7;
    property Status: SQLDMO_SVCSTATUS_TYPE readonly dispid 11;
    property AutoStart: WordBool dispid 12;
    property AlertSystem: AlertSystem readonly dispid 14;
    property Operators: Operators readonly dispid 19;
    property Alerts: Alerts readonly dispid 20;
    property Jobs: Jobs readonly dispid 21;
    property TargetServers: TargetServers readonly dispid 22;
    property TargetServerGroups: TargetServerGroups readonly dispid 23;
    property JobFilter: JobFilter readonly dispid 24;
    property JobHistoryFilter: JobHistoryFilter readonly dispid 25;
    property JobCategories: JobCategories readonly dispid 28;
    property MSXServerName: WideString readonly dispid 29;
    property type_: SQLDMO_JOBSERVER_TYPE readonly dispid 30;
    property StartupAccount: WideString readonly dispid 31;
    property AlertCategories: AlertCategories readonly dispid 32;
    property OperatorCategories: OperatorCategories readonly dispid 33;
    procedure Stop; dispid 100;
    procedure Start; dispid 101;
    function EnumSubSystems: QueryResults; dispid 104;
    procedure ReAssignJobsByLogin(const OldLogin: WideString; const NewLogin: WideString); dispid 107;
    procedure RemoveJobsByLogin(const Login: WideString); dispid 108;
    procedure Refresh; dispid 110;
    procedure BeginAlter; dispid 111;
    procedure DoAlter; dispid 112;
    procedure CancelAlter; dispid 113;
    function EnumJobHistory(JobHistoryFilter: OleVariant): QueryResults; dispid 114;
    procedure PurgeJobHistory(JobHistoryFilter: OleVariant); dispid 115;
    function EnumJobs(JobFilter: OleVariant): QueryResults; dispid 118;
    procedure RemoveJobsByServer(const Login: WideString); dispid 120;
    procedure MSXEnlist(const TSXServerName: WideString; const Location: WideString); dispid 121;
    procedure MSXDefect; dispid 122;
    procedure RemoveJobByID(const JobID: WideString); dispid 123;
    procedure StartMonitor(const NetSendAddress: WideString; RestartAttempts: Integer); dispid 124;
    procedure StopMonitor; dispid 125;
    function GetJobByID(const JobID: WideString; Flag: OleVariant): Job; dispid 126;
  end;

// *********************************************************************//
// The Class CoApplication provides a Create and CreateRemote method to          
// create instances of the default interface _Application exposed by              
// the CoClass Application. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoApplication = class
    class function Create: _Application;
    class function CreateRemote(const MachineName: string): _Application;
  end;

// *********************************************************************//
// The Class CoColumn provides a Create and CreateRemote method to          
// create instances of the default interface _Column exposed by              
// the CoClass Column. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColumn = class
    class function Create: _Column;
    class function CreateRemote(const MachineName: string): _Column;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TColumn
// Help String      : SQLDMO Column
// Default Interface: _Column
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TColumnProperties= class;
{$ENDIF}
  TColumn = class(TOleServer)
  private
    FIntf:        _Column;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TColumnProperties;
    function      GetServerProperties: TColumnProperties;
{$ENDIF}
    function      GetDefaultInterface: _Column;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_IdentityIncrement: Integer;
    procedure Set_IdentityIncrement(pRetVal: Integer);
    function Get_IdentitySeed: Integer;
    procedure Set_IdentitySeed(pRetVal: Integer);
    function Get_DRIDefault: DRIDefault;
    function Get_InPrimaryKey: WordBool;
    function Get_Datatype: WideString;
    procedure Set_Datatype(const pRetVal: WideString);
    function Get_PhysicalDatatype: WideString;
    function Get_Length: Integer;
    procedure Set_Length(pRetVal: Integer);
    function Get_Default: WideString;
    procedure Set_Default(const pRetVal: WideString);
    function Get_Rule: WideString;
    procedure Set_Rule(const pRetVal: WideString);
    function Get_AllowNulls: WordBool;
    procedure Set_AllowNulls(pRetVal: WordBool);
    function Get_ID: Integer;
    function Get_Identity: WordBool;
    procedure Set_Identity(pRetVal: WordBool);
    function Get_NumericPrecision: Integer;
    procedure Set_NumericPrecision(pRetVal: Integer);
    function Get_NumericScale: Integer;
    procedure Set_NumericScale(pRetVal: Integer);
    function Get_IsRowGuidCol: WordBool;
    procedure Set_IsRowGuidCol(pRetVal: WordBool);
    function Get_IsComputed: WordBool;
    procedure Set_IsComputed(pRetVal: WordBool);
    function Get_ComputedText: WideString;
    procedure Set_ComputedText(const pRetVal: WideString);
    function Get_NotForRepl: WordBool;
    procedure Set_NotForRepl(pRetVal: WordBool);
    function Get_FullTextIndex: WordBool;
    procedure Set_FullTextIndex(pRetVal: WordBool);
    function Get_AnsiPaddingStatus: WordBool;
    function Get_DefaultOwner: WideString;
    function Get_RuleOwner: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Column);
    procedure Disconnect; override;
    procedure Remove;
    function ListKeys: SQLObjectList;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE); overload;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant); overload;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); overload;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool);
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool);
    property DefaultInterface: _Column read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DRIDefault: DRIDefault read Get_DRIDefault;
    property InPrimaryKey: WordBool read Get_InPrimaryKey;
    property PhysicalDatatype: WideString read Get_PhysicalDatatype;
    property ID: Integer read Get_ID;
    property AnsiPaddingStatus: WordBool read Get_AnsiPaddingStatus;
    property DefaultOwner: WideString read Get_DefaultOwner;
    property RuleOwner: WideString read Get_RuleOwner;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property IdentityIncrement: Integer read Get_IdentityIncrement write Set_IdentityIncrement;
    property IdentitySeed: Integer read Get_IdentitySeed write Set_IdentitySeed;
    property Datatype: WideString read Get_Datatype write Set_Datatype;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property Identity: WordBool read Get_Identity write Set_Identity;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
    property IsRowGuidCol: WordBool read Get_IsRowGuidCol write Set_IsRowGuidCol;
    property IsComputed: WordBool read Get_IsComputed write Set_IsComputed;
    property ComputedText: WideString read Get_ComputedText write Set_ComputedText;
    property NotForRepl: WordBool read Get_NotForRepl write Set_NotForRepl;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TColumnProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TColumn
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TColumnProperties = class(TPersistent)
  private
    FServer:    TColumn;
    function    GetDefaultInterface: _Column;
    constructor Create(AServer: TColumn);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_IdentityIncrement: Integer;
    procedure Set_IdentityIncrement(pRetVal: Integer);
    function Get_IdentitySeed: Integer;
    procedure Set_IdentitySeed(pRetVal: Integer);
    function Get_DRIDefault: DRIDefault;
    function Get_InPrimaryKey: WordBool;
    function Get_Datatype: WideString;
    procedure Set_Datatype(const pRetVal: WideString);
    function Get_PhysicalDatatype: WideString;
    function Get_Length: Integer;
    procedure Set_Length(pRetVal: Integer);
    function Get_Default: WideString;
    procedure Set_Default(const pRetVal: WideString);
    function Get_Rule: WideString;
    procedure Set_Rule(const pRetVal: WideString);
    function Get_AllowNulls: WordBool;
    procedure Set_AllowNulls(pRetVal: WordBool);
    function Get_ID: Integer;
    function Get_Identity: WordBool;
    procedure Set_Identity(pRetVal: WordBool);
    function Get_NumericPrecision: Integer;
    procedure Set_NumericPrecision(pRetVal: Integer);
    function Get_NumericScale: Integer;
    procedure Set_NumericScale(pRetVal: Integer);
    function Get_IsRowGuidCol: WordBool;
    procedure Set_IsRowGuidCol(pRetVal: WordBool);
    function Get_IsComputed: WordBool;
    procedure Set_IsComputed(pRetVal: WordBool);
    function Get_ComputedText: WideString;
    procedure Set_ComputedText(const pRetVal: WideString);
    function Get_NotForRepl: WordBool;
    procedure Set_NotForRepl(pRetVal: WordBool);
    function Get_FullTextIndex: WordBool;
    procedure Set_FullTextIndex(pRetVal: WordBool);
    function Get_AnsiPaddingStatus: WordBool;
    function Get_DefaultOwner: WideString;
    function Get_RuleOwner: WideString;
  public
    property DefaultInterface: _Column read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property IdentityIncrement: Integer read Get_IdentityIncrement write Set_IdentityIncrement;
    property IdentitySeed: Integer read Get_IdentitySeed write Set_IdentitySeed;
    property Datatype: WideString read Get_Datatype write Set_Datatype;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property Identity: WordBool read Get_Identity write Set_Identity;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
    property IsRowGuidCol: WordBool read Get_IsRowGuidCol write Set_IsRowGuidCol;
    property IsComputed: WordBool read Get_IsComputed write Set_IsComputed;
    property ComputedText: WideString read Get_ComputedText write Set_ComputedText;
    property NotForRepl: WordBool read Get_NotForRepl write Set_NotForRepl;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoKey provides a Create and CreateRemote method to          
// create instances of the default interface _Key exposed by              
// the CoClass Key. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKey = class
    class function Create: _Key;
    class function CreateRemote(const MachineName: string): _Key;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKey
// Help String      : SQLDMO DRI Key
// Default Interface: _Key
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKeyProperties= class;
{$ENDIF}
  TKey = class(TOleServer)
  private
    FIntf:        _Key;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKeyProperties;
    function      GetServerProperties: TKeyProperties;
{$ENDIF}
    function      GetDefaultInterface: _Key;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Clustered: WordBool;
    procedure Set_Clustered(pRetVal: WordBool);
    function Get_FillFactor: Integer;
    procedure Set_FillFactor(pRetVal: Integer);
    function Get_KeyColumns: Names;
    function Get_ReferencedTable: WideString;
    procedure Set_ReferencedTable(const pRetVal: WideString);
    function Get_ReferencedColumns: Names;
    function Get_type_: SQLDMO_KEY_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_KEY_TYPE);
    function Get_ReferencedKey: WideString;
    function Get_ExcludeReplication: WordBool;
    procedure Set_ExcludeReplication(pRetVal: WordBool);
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_Checked: WordBool;
    procedure Set_Checked(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Key);
    procedure Disconnect; override;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    procedure RebuildIndex;
    property DefaultInterface: _Key read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property KeyColumns: Names read Get_KeyColumns;
    property ReferencedColumns: Names read Get_ReferencedColumns;
    property ReferencedKey: WideString read Get_ReferencedKey;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Clustered: WordBool read Get_Clustered write Set_Clustered;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property ReferencedTable: WideString read Get_ReferencedTable write Set_ReferencedTable;
    property type_: SQLDMO_KEY_TYPE read Get_type_ write Set_type_;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property Checked: WordBool read Get_Checked write Set_Checked;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKeyProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKey
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKeyProperties = class(TPersistent)
  private
    FServer:    TKey;
    function    GetDefaultInterface: _Key;
    constructor Create(AServer: TKey);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Clustered: WordBool;
    procedure Set_Clustered(pRetVal: WordBool);
    function Get_FillFactor: Integer;
    procedure Set_FillFactor(pRetVal: Integer);
    function Get_KeyColumns: Names;
    function Get_ReferencedTable: WideString;
    procedure Set_ReferencedTable(const pRetVal: WideString);
    function Get_ReferencedColumns: Names;
    function Get_type_: SQLDMO_KEY_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_KEY_TYPE);
    function Get_ReferencedKey: WideString;
    function Get_ExcludeReplication: WordBool;
    procedure Set_ExcludeReplication(pRetVal: WordBool);
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_Checked: WordBool;
    procedure Set_Checked(pRetVal: WordBool);
  public
    property DefaultInterface: _Key read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Clustered: WordBool read Get_Clustered write Set_Clustered;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property ReferencedTable: WideString read Get_ReferencedTable write Set_ReferencedTable;
    property type_: SQLDMO_KEY_TYPE read Get_type_ write Set_type_;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property Checked: WordBool read Get_Checked write Set_Checked;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoIndex provides a Create and CreateRemote method to          
// create instances of the default interface _Index exposed by              
// the CoClass Index. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIndex = class
    class function Create: _Index;
    class function CreateRemote(const MachineName: string): _Index;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIndex
// Help String      : SQLDMO Index
// Default Interface: _Index
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TIndexProperties= class;
{$ENDIF}
  TIndex = class(TOleServer)
  private
    FIntf:        _Index;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TIndexProperties;
    function      GetServerProperties: TIndexProperties;
{$ENDIF}
    function      GetDefaultInterface: _Index;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    procedure Set_IndexedColumns(const Param1: WideString);
    function Get_SpaceUsed: Integer;
    function Get_type_: SQLDMO_INDEX_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_INDEX_TYPE);
    function Get_ID: Integer;
    function Get_FillFactor: Integer;
    procedure Set_FillFactor(pRetVal: Integer);
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_IsFullTextKey: WordBool;
    function Get_NoRecompute: WordBool;
    procedure Set_NoRecompute(pRetVal: WordBool);
    function Get_StatisticsIndex: WordBool;
    procedure Set_StatisticsIndex(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Index);
    procedure Disconnect; override;
    procedure UpdateStatistics;
    function ListIndexedColumns: SQLObjectList;
    procedure Remove;
    procedure Rebuild;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    procedure RecalcSpaceUsage;
    function EnumStatistics: QueryResults;
    function GenerateCreationSQL(const TargetTable: Table): WideString;
    function CheckIndex: WideString;
    function GenerateSQL(const pTable: Table): WideString;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE); overload;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant); overload;
    procedure UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); overload;
    property DefaultInterface: _Index read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property IndexedColumns: WideString write Set_IndexedColumns;
    property SpaceUsed: Integer read Get_SpaceUsed;
    property ID: Integer read Get_ID;
    property IsFullTextKey: WordBool read Get_IsFullTextKey;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_INDEX_TYPE read Get_type_ write Set_type_;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property NoRecompute: WordBool read Get_NoRecompute write Set_NoRecompute;
    property StatisticsIndex: WordBool read Get_StatisticsIndex write Set_StatisticsIndex;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TIndexProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TIndex
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TIndexProperties = class(TPersistent)
  private
    FServer:    TIndex;
    function    GetDefaultInterface: _Index;
    constructor Create(AServer: TIndex);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    procedure Set_IndexedColumns(const Param1: WideString);
    function Get_SpaceUsed: Integer;
    function Get_type_: SQLDMO_INDEX_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_INDEX_TYPE);
    function Get_ID: Integer;
    function Get_FillFactor: Integer;
    procedure Set_FillFactor(pRetVal: Integer);
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_IsFullTextKey: WordBool;
    function Get_NoRecompute: WordBool;
    procedure Set_NoRecompute(pRetVal: WordBool);
    function Get_StatisticsIndex: WordBool;
    procedure Set_StatisticsIndex(pRetVal: WordBool);
  public
    property DefaultInterface: _Index read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_INDEX_TYPE read Get_type_ write Set_type_;
    property FillFactor: Integer read Get_FillFactor write Set_FillFactor;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property NoRecompute: WordBool read Get_NoRecompute write Set_NoRecompute;
    property StatisticsIndex: WordBool read Get_StatisticsIndex write Set_StatisticsIndex;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBulkCopy provides a Create and CreateRemote method to          
// create instances of the default interface _BulkCopy exposed by              
// the CoClass BulkCopy. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBulkCopy = class
    class function Create: _BulkCopy;
    class function CreateRemote(const MachineName: string): _BulkCopy;
  end;

  TBulkCopyRowsCopied = procedure(ASender: TObject; const Message: WideString; Rows: Integer) of object;
  TBulkCopyBatchImported = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBulkCopy
// Help String      : SQLDMO BulkCopy
// Default Interface: _BulkCopy
// Def. Intf. DISP? : No
// Event   Interface: BulkCopySink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBulkCopyProperties= class;
{$ENDIF}
  TBulkCopy = class(TOleServer)
  private
    FOnRowsCopied: TBulkCopyRowsCopied;
    FOnBatchImported: TBulkCopyBatchImported;
    FIntf:        _BulkCopy;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBulkCopyProperties;
    function      GetServerProperties: TBulkCopyProperties;
{$ENDIF}
    function      GetDefaultInterface: _BulkCopy;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_DataFilePath: WideString;
    procedure Set_DataFilePath(const pRetVal: WideString);
    function Get_FormatFilePath: WideString;
    procedure Set_FormatFilePath(const pRetVal: WideString);
    function Get_ErrorFilePath: WideString;
    procedure Set_ErrorFilePath(const pRetVal: WideString);
    function Get_LogFilePath: WideString;
    procedure Set_LogFilePath(const pRetVal: WideString);
    function Get_ColumnDelimiter: WideString;
    procedure Set_ColumnDelimiter(const pRetVal: WideString);
    function Get_RowDelimiter: WideString;
    procedure Set_RowDelimiter(const pRetVal: WideString);
    function Get_DataFileType: SQLDMO_DATAFILE_TYPE;
    procedure Set_DataFileType(pRetVal: SQLDMO_DATAFILE_TYPE);
    function Get_FirstRow: Integer;
    procedure Set_FirstRow(pRetVal: Integer);
    function Get_LastRow: Integer;
    procedure Set_LastRow(pRetVal: Integer);
    function Get_MaximumErrorsBeforeAbort: Integer;
    procedure Set_MaximumErrorsBeforeAbort(pRetVal: Integer);
    function Get_IncludeIdentityValues: WordBool;
    procedure Set_IncludeIdentityValues(pRetVal: WordBool);
    function Get_ImportRowsPerBatch: Integer;
    procedure Set_ImportRowsPerBatch(pRetVal: Integer);
    function Get_UseBulkCopyOption: WordBool;
    procedure Set_UseBulkCopyOption(pRetVal: WordBool);
    function Get_SuspendIndexing: WordBool;
    procedure Set_SuspendIndexing(pRetVal: WordBool);
    function Get_TruncateLog: WordBool;
    procedure Set_TruncateLog(pRetVal: WordBool);
    function Get_UseExistingConnection: WordBool;
    procedure Set_UseExistingConnection(pRetVal: WordBool);
    function Get_Use6xCompatible: WordBool;
    procedure Set_Use6xCompatible(pRetVal: WordBool);
    function Get_CodePage: Integer;
    function Get_UseServerSideBCP: WordBool;
    procedure Set_UseServerSideBCP(pRetVal: WordBool);
    function Get_ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE;
    procedure Set_ServerBCPDataFileType(pRetVal: SQLDMO_SERVERBCP_DATAFILE_TYPE);
    function Get_ServerBCPKeepIdentity: WordBool;
    procedure Set_ServerBCPKeepIdentity(pRetVal: WordBool);
    function Get_ServerBCPKeepNulls: WordBool;
    procedure Set_ServerBCPKeepNulls(pRetVal: WordBool);
    function Get_ExportWideChar: WordBool;
    procedure Set_ExportWideChar(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _BulkCopy);
    procedure Disconnect; override;
    procedure Abort;
    procedure SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE); overload;
    procedure SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE; UserCodePage: OleVariant); overload;
    property DefaultInterface: _BulkCopy read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CodePage: Integer read Get_CodePage;
    property UserData: Integer read Get_UserData write Set_UserData;
    property DataFilePath: WideString read Get_DataFilePath write Set_DataFilePath;
    property FormatFilePath: WideString read Get_FormatFilePath write Set_FormatFilePath;
    property ErrorFilePath: WideString read Get_ErrorFilePath write Set_ErrorFilePath;
    property LogFilePath: WideString read Get_LogFilePath write Set_LogFilePath;
    property ColumnDelimiter: WideString read Get_ColumnDelimiter write Set_ColumnDelimiter;
    property RowDelimiter: WideString read Get_RowDelimiter write Set_RowDelimiter;
    property DataFileType: SQLDMO_DATAFILE_TYPE read Get_DataFileType write Set_DataFileType;
    property FirstRow: Integer read Get_FirstRow write Set_FirstRow;
    property LastRow: Integer read Get_LastRow write Set_LastRow;
    property MaximumErrorsBeforeAbort: Integer read Get_MaximumErrorsBeforeAbort write Set_MaximumErrorsBeforeAbort;
    property IncludeIdentityValues: WordBool read Get_IncludeIdentityValues write Set_IncludeIdentityValues;
    property ImportRowsPerBatch: Integer read Get_ImportRowsPerBatch write Set_ImportRowsPerBatch;
    property UseBulkCopyOption: WordBool read Get_UseBulkCopyOption write Set_UseBulkCopyOption;
    property SuspendIndexing: WordBool read Get_SuspendIndexing write Set_SuspendIndexing;
    property TruncateLog: WordBool read Get_TruncateLog write Set_TruncateLog;
    property UseExistingConnection: WordBool read Get_UseExistingConnection write Set_UseExistingConnection;
    property Use6xCompatible: WordBool read Get_Use6xCompatible write Set_Use6xCompatible;
    property UseServerSideBCP: WordBool read Get_UseServerSideBCP write Set_UseServerSideBCP;
    property ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE read Get_ServerBCPDataFileType write Set_ServerBCPDataFileType;
    property ServerBCPKeepIdentity: WordBool read Get_ServerBCPKeepIdentity write Set_ServerBCPKeepIdentity;
    property ServerBCPKeepNulls: WordBool read Get_ServerBCPKeepNulls write Set_ServerBCPKeepNulls;
    property ExportWideChar: WordBool read Get_ExportWideChar write Set_ExportWideChar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBulkCopyProperties read GetServerProperties;
{$ENDIF}
    property OnRowsCopied: TBulkCopyRowsCopied read FOnRowsCopied write FOnRowsCopied;
    property OnBatchImported: TBulkCopyBatchImported read FOnBatchImported write FOnBatchImported;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBulkCopy
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBulkCopyProperties = class(TPersistent)
  private
    FServer:    TBulkCopy;
    function    GetDefaultInterface: _BulkCopy;
    constructor Create(AServer: TBulkCopy);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_DataFilePath: WideString;
    procedure Set_DataFilePath(const pRetVal: WideString);
    function Get_FormatFilePath: WideString;
    procedure Set_FormatFilePath(const pRetVal: WideString);
    function Get_ErrorFilePath: WideString;
    procedure Set_ErrorFilePath(const pRetVal: WideString);
    function Get_LogFilePath: WideString;
    procedure Set_LogFilePath(const pRetVal: WideString);
    function Get_ColumnDelimiter: WideString;
    procedure Set_ColumnDelimiter(const pRetVal: WideString);
    function Get_RowDelimiter: WideString;
    procedure Set_RowDelimiter(const pRetVal: WideString);
    function Get_DataFileType: SQLDMO_DATAFILE_TYPE;
    procedure Set_DataFileType(pRetVal: SQLDMO_DATAFILE_TYPE);
    function Get_FirstRow: Integer;
    procedure Set_FirstRow(pRetVal: Integer);
    function Get_LastRow: Integer;
    procedure Set_LastRow(pRetVal: Integer);
    function Get_MaximumErrorsBeforeAbort: Integer;
    procedure Set_MaximumErrorsBeforeAbort(pRetVal: Integer);
    function Get_IncludeIdentityValues: WordBool;
    procedure Set_IncludeIdentityValues(pRetVal: WordBool);
    function Get_ImportRowsPerBatch: Integer;
    procedure Set_ImportRowsPerBatch(pRetVal: Integer);
    function Get_UseBulkCopyOption: WordBool;
    procedure Set_UseBulkCopyOption(pRetVal: WordBool);
    function Get_SuspendIndexing: WordBool;
    procedure Set_SuspendIndexing(pRetVal: WordBool);
    function Get_TruncateLog: WordBool;
    procedure Set_TruncateLog(pRetVal: WordBool);
    function Get_UseExistingConnection: WordBool;
    procedure Set_UseExistingConnection(pRetVal: WordBool);
    function Get_Use6xCompatible: WordBool;
    procedure Set_Use6xCompatible(pRetVal: WordBool);
    function Get_CodePage: Integer;
    function Get_UseServerSideBCP: WordBool;
    procedure Set_UseServerSideBCP(pRetVal: WordBool);
    function Get_ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE;
    procedure Set_ServerBCPDataFileType(pRetVal: SQLDMO_SERVERBCP_DATAFILE_TYPE);
    function Get_ServerBCPKeepIdentity: WordBool;
    procedure Set_ServerBCPKeepIdentity(pRetVal: WordBool);
    function Get_ServerBCPKeepNulls: WordBool;
    procedure Set_ServerBCPKeepNulls(pRetVal: WordBool);
    function Get_ExportWideChar: WordBool;
    procedure Set_ExportWideChar(pRetVal: WordBool);
  public
    property DefaultInterface: _BulkCopy read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property DataFilePath: WideString read Get_DataFilePath write Set_DataFilePath;
    property FormatFilePath: WideString read Get_FormatFilePath write Set_FormatFilePath;
    property ErrorFilePath: WideString read Get_ErrorFilePath write Set_ErrorFilePath;
    property LogFilePath: WideString read Get_LogFilePath write Set_LogFilePath;
    property ColumnDelimiter: WideString read Get_ColumnDelimiter write Set_ColumnDelimiter;
    property RowDelimiter: WideString read Get_RowDelimiter write Set_RowDelimiter;
    property DataFileType: SQLDMO_DATAFILE_TYPE read Get_DataFileType write Set_DataFileType;
    property FirstRow: Integer read Get_FirstRow write Set_FirstRow;
    property LastRow: Integer read Get_LastRow write Set_LastRow;
    property MaximumErrorsBeforeAbort: Integer read Get_MaximumErrorsBeforeAbort write Set_MaximumErrorsBeforeAbort;
    property IncludeIdentityValues: WordBool read Get_IncludeIdentityValues write Set_IncludeIdentityValues;
    property ImportRowsPerBatch: Integer read Get_ImportRowsPerBatch write Set_ImportRowsPerBatch;
    property UseBulkCopyOption: WordBool read Get_UseBulkCopyOption write Set_UseBulkCopyOption;
    property SuspendIndexing: WordBool read Get_SuspendIndexing write Set_SuspendIndexing;
    property TruncateLog: WordBool read Get_TruncateLog write Set_TruncateLog;
    property UseExistingConnection: WordBool read Get_UseExistingConnection write Set_UseExistingConnection;
    property Use6xCompatible: WordBool read Get_Use6xCompatible write Set_Use6xCompatible;
    property UseServerSideBCP: WordBool read Get_UseServerSideBCP write Set_UseServerSideBCP;
    property ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE read Get_ServerBCPDataFileType write Set_ServerBCPDataFileType;
    property ServerBCPKeepIdentity: WordBool read Get_ServerBCPKeepIdentity write Set_ServerBCPKeepIdentity;
    property ServerBCPKeepNulls: WordBool read Get_ServerBCPKeepNulls write Set_ServerBCPKeepNulls;
    property ExportWideChar: WordBool read Get_ExportWideChar write Set_ExportWideChar;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoView provides a Create and CreateRemote method to          
// create instances of the default interface _View exposed by              
// the CoClass View. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoView = class
    class function Create: _View;
    class function CreateRemote(const MachineName: string): _View;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TView
// Help String      : SQLDMO View
// Default Interface: _View
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TViewProperties= class;
{$ENDIF}
  TView = class(TOleServer)
  private
    FIntf:        _View;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TViewProperties;
    function      GetServerProperties: TViewProperties;
{$ENDIF}
    function      GetDefaultInterface: _View;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _View);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function ListColumns: SQLObjectList;
    function ExportData(const Bcp: BulkCopy): Integer;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Alter(const NewText: WideString);
    property DefaultInterface: _View read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property SystemObject: WordBool read Get_SystemObject;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TViewProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TView
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TViewProperties = class(TPersistent)
  private
    FServer:    TView;
    function    GetDefaultInterface: _View;
    constructor Create(AServer: TView);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    property DefaultInterface: _View read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTrigger provides a Create and CreateRemote method to          
// create instances of the default interface _Trigger exposed by              
// the CoClass Trigger. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTrigger = class
    class function Create: _Trigger;
    class function CreateRemote(const MachineName: string): _Trigger;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTrigger
// Help String      : SQLDMO Trigger
// Default Interface: _Trigger
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTriggerProperties= class;
{$ENDIF}
  TTrigger = class(TOleServer)
  private
    FIntf:        _Trigger;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTriggerProperties;
    function      GetServerProperties: TTriggerProperties;
{$ENDIF}
    function      GetDefaultInterface: _Trigger;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_type_: SQLDMO_TRIGGER_TYPE;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Trigger);
    procedure Disconnect; override;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure Alter(const NewText: WideString);
    property DefaultInterface: _Trigger read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property type_: SQLDMO_TRIGGER_TYPE read Get_type_;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTriggerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTrigger
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTriggerProperties = class(TPersistent)
  private
    FServer:    TTrigger;
    function    GetDefaultInterface: _Trigger;
    constructor Create(AServer: TTrigger);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_type_: SQLDMO_TRIGGER_TYPE;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    property DefaultInterface: _Trigger read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCheck provides a Create and CreateRemote method to          
// create instances of the default interface _Check exposed by              
// the CoClass Check. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCheck = class
    class function Create: _Check;
    class function CreateRemote(const MachineName: string): _Check;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCheck
// Help String      : SQLDMO DRI Check
// Default Interface: _Check
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCheckProperties= class;
{$ENDIF}
  TCheck = class(TOleServer)
  private
    FIntf:        _Check;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCheckProperties;
    function      GetServerProperties: TCheckProperties;
{$ENDIF}
    function      GetDefaultInterface: _Check;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_ExcludeReplication: WordBool;
    procedure Set_ExcludeReplication(pRetVal: WordBool);
    function Get_Checked: WordBool;
    procedure Set_Checked(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Check);
    procedure Disconnect; override;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    property DefaultInterface: _Check read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Text: WideString read Get_Text write Set_Text;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property Checked: WordBool read Get_Checked write Set_Checked;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCheckProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCheck
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCheckProperties = class(TPersistent)
  private
    FServer:    TCheck;
    function    GetDefaultInterface: _Check;
    constructor Create(AServer: TCheck);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_ExcludeReplication: WordBool;
    procedure Set_ExcludeReplication(pRetVal: WordBool);
    function Get_Checked: WordBool;
    procedure Set_Checked(pRetVal: WordBool);
  public
    property DefaultInterface: _Check read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Text: WideString read Get_Text write Set_Text;
    property ExcludeReplication: WordBool read Get_ExcludeReplication write Set_ExcludeReplication;
    property Checked: WordBool read Get_Checked write Set_Checked;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTable provides a Create and CreateRemote method to          
// create instances of the default interface _Table exposed by              
// the CoClass Table. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTable = class
    class function Create: _Table;
    class function CreateRemote(const MachineName: string): _Table;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTable
// Help String      : SQLDMO Table
// Default Interface: _Table
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTableProperties= class;
{$ENDIF}
  TTable = class(TOleServer)
  private
    FIntf:        _Table;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTableProperties;
    function      GetServerProperties: TTableProperties;
{$ENDIF}
    function      GetDefaultInterface: _Table;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Columns: Columns;
    function Get_DataSpaceUsed: Integer;
    function Get_IndexSpaceUsed: Integer;
    function Get_Attributes: SQLDMO_TABLEATT_TYPE;
    function Get_Keys: Keys;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_CreateDate: WideString;
    function Get_PrimaryKey: Key;
    function Get_Indexes: Indexes;
    function Get_Triggers: Triggers;
    function Get_Checks: Checks;
    function Get_ClusteredIndex: Index;
    function Get_SystemObject: WordBool;
    function Get_Rows: Integer;
    function Get_InAlter: WordBool;
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_TextFileGroup: WideString;
    procedure Set_TextFileGroup(const pRetVal: WideString);
    function Get_FullTextIndex: WordBool;
    procedure Set_FullTextIndex(pRetVal: WordBool);
    function Get_UniqueIndexForFullText: WideString;
    procedure Set_UniqueIndexForFullText(const pRetVal: WideString);
    function Get_FullTextCatalogName: WideString;
    procedure Set_FullTextCatalogName(const pRetVal: WideString);
    function Get_FullTextIndexActive: WordBool;
    procedure Set_FullTextIndexActive(pRetVal: WordBool);
    function Get_FullTextKeyColumn: Integer;
    function Get_HasClusteredIndex: WordBool;
    function Get_HasIndex: WordBool;
    function Get_FakeSystemTable: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Table);
    procedure Disconnect; override;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure ReCompileReferences;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function CheckTable: WideString;
    procedure TruncateData;
    procedure UpdateStatistics;
    procedure Remove;
    function EnumReferencedKeys: QueryResults; overload;
    function EnumReferencedKeys(ReferencedTableName: OleVariant): QueryResults; overload;
    function EnumReferencedKeys(ReferencedTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; overload;
    function EnumReferencedTables: QueryResults; overload;
    function EnumReferencedTables(IncludeAllCandidates: OleVariant): QueryResults; overload;
    function EnumReferencingKeys: QueryResults; overload;
    function EnumReferencingKeys(ReferencingTableName: OleVariant): QueryResults; overload;
    function EnumReferencingKeys(ReferencingTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults; overload;
    function EnumReferencingTables: QueryResults; overload;
    function EnumReferencingTables(IncludeAllCandidates: OleVariant): QueryResults; overload;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure InsertColumn(const NewColumn: Column; const BeforeColumnName: WideString);
    procedure RecalcSpaceUsage;
    function EnumLastStatisticsUpdates: QueryResults; overload;
    function EnumLastStatisticsUpdates(IndexName: OleVariant): QueryResults; overload;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewName: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    procedure DoAlterWithNoCheck;
    procedure Refresh;
    function ImportData(const Bcp: BulkCopy): Integer;
    function ExportData(const Bcp: BulkCopy): Integer;
    procedure RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE); overload;
    procedure RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE; FillFactor: OleVariant); overload;
    procedure CheckIdentityValue;
    function CheckTableDataOnly: WideString;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    function GenerateSQL(const pDB: Database): WideString;
    function CheckTextAllocsFast: WideString;
    function CheckTextAllocsFull: WideString;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE); overload;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant); overload;
    procedure UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                   ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                   ReCompute: OleVariant); overload;
    function ListAvailableUniqueIndexesForFullText: NameList;
    function FullTextIndexScript: WideString;
    property DefaultInterface: _Table read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Columns: Columns read Get_Columns;
    property DataSpaceUsed: Integer read Get_DataSpaceUsed;
    property IndexSpaceUsed: Integer read Get_IndexSpaceUsed;
    property Attributes: SQLDMO_TABLEATT_TYPE read Get_Attributes;
    property Keys: Keys read Get_Keys;
    property ID: Integer read Get_ID;
    property CreateDate: WideString read Get_CreateDate;
    property PrimaryKey: Key read Get_PrimaryKey;
    property Indexes: Indexes read Get_Indexes;
    property Triggers: Triggers read Get_Triggers;
    property Checks: Checks read Get_Checks;
    property ClusteredIndex: Index read Get_ClusteredIndex;
    property SystemObject: WordBool read Get_SystemObject;
    property Rows: Integer read Get_Rows;
    property InAlter: WordBool read Get_InAlter;
    property FullTextKeyColumn: Integer read Get_FullTextKeyColumn;
    property HasClusteredIndex: WordBool read Get_HasClusteredIndex;
    property HasIndex: WordBool read Get_HasIndex;
    property FakeSystemTable: WordBool read Get_FakeSystemTable;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property TextFileGroup: WideString read Get_TextFileGroup write Set_TextFileGroup;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
    property UniqueIndexForFullText: WideString read Get_UniqueIndexForFullText write Set_UniqueIndexForFullText;
    property FullTextCatalogName: WideString read Get_FullTextCatalogName write Set_FullTextCatalogName;
    property FullTextIndexActive: WordBool read Get_FullTextIndexActive write Set_FullTextIndexActive;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTableProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTable
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTableProperties = class(TPersistent)
  private
    FServer:    TTable;
    function    GetDefaultInterface: _Table;
    constructor Create(AServer: TTable);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Columns: Columns;
    function Get_DataSpaceUsed: Integer;
    function Get_IndexSpaceUsed: Integer;
    function Get_Attributes: SQLDMO_TABLEATT_TYPE;
    function Get_Keys: Keys;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_CreateDate: WideString;
    function Get_PrimaryKey: Key;
    function Get_Indexes: Indexes;
    function Get_Triggers: Triggers;
    function Get_Checks: Checks;
    function Get_ClusteredIndex: Index;
    function Get_SystemObject: WordBool;
    function Get_Rows: Integer;
    function Get_InAlter: WordBool;
    function Get_FileGroup: WideString;
    procedure Set_FileGroup(const pRetVal: WideString);
    function Get_TextFileGroup: WideString;
    procedure Set_TextFileGroup(const pRetVal: WideString);
    function Get_FullTextIndex: WordBool;
    procedure Set_FullTextIndex(pRetVal: WordBool);
    function Get_UniqueIndexForFullText: WideString;
    procedure Set_UniqueIndexForFullText(const pRetVal: WideString);
    function Get_FullTextCatalogName: WideString;
    procedure Set_FullTextCatalogName(const pRetVal: WideString);
    function Get_FullTextIndexActive: WordBool;
    procedure Set_FullTextIndexActive(pRetVal: WordBool);
    function Get_FullTextKeyColumn: Integer;
    function Get_HasClusteredIndex: WordBool;
    function Get_HasIndex: WordBool;
    function Get_FakeSystemTable: WordBool;
  public
    property DefaultInterface: _Table read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property FileGroup: WideString read Get_FileGroup write Set_FileGroup;
    property TextFileGroup: WideString read Get_TextFileGroup write Set_TextFileGroup;
    property FullTextIndex: WordBool read Get_FullTextIndex write Set_FullTextIndex;
    property UniqueIndexForFullText: WideString read Get_UniqueIndexForFullText write Set_UniqueIndexForFullText;
    property FullTextCatalogName: WideString read Get_FullTextCatalogName write Set_FullTextCatalogName;
    property FullTextIndexActive: WordBool read Get_FullTextIndexActive write Set_FullTextIndexActive;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStoredProcedure provides a Create and CreateRemote method to          
// create instances of the default interface _StoredProcedure exposed by              
// the CoClass StoredProcedure. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStoredProcedure = class
    class function Create: _StoredProcedure;
    class function CreateRemote(const MachineName: string): _StoredProcedure;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStoredProcedure
// Help String      : SQLDMO StoredProcedure
// Default Interface: _StoredProcedure
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStoredProcedureProperties= class;
{$ENDIF}
  TStoredProcedure = class(TOleServer)
  private
    FIntf:        _StoredProcedure;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStoredProcedureProperties;
    function      GetServerProperties: TStoredProcedureProperties;
{$ENDIF}
    function      GetDefaultInterface: _StoredProcedure;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_type_: SQLDMO_PROCEDURE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
    function Get_Startup: WordBool;
    procedure Set_Startup(pRetVal: WordBool);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _StoredProcedure);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function EnumParameters: QueryResults;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); overload;
    procedure Alter(const NewText: WideString);
    property DefaultInterface: _StoredProcedure read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStoredProcedureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStoredProcedure
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStoredProcedureProperties = class(TPersistent)
  private
    FServer:    TStoredProcedure;
    function    GetDefaultInterface: _StoredProcedure;
    constructor Create(AServer: TStoredProcedure);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_type_: SQLDMO_PROCEDURE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
    function Get_Startup: WordBool;
    procedure Set_Startup(pRetVal: WordBool);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
  public
    property DefaultInterface: _StoredProcedure read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefault provides a Create and CreateRemote method to          
// create instances of the default interface _Default exposed by              
// the CoClass Default. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefault = class
    class function Create: _Default;
    class function CreateRemote(const MachineName: string): _Default;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefault
// Help String      : SQLDMO Default
// Default Interface: _Default
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefaultProperties= class;
{$ENDIF}
  TDefault = class(TOleServer)
  private
    FIntf:        _Default;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefaultProperties;
    function      GetServerProperties: TDefaultProperties;
{$ENDIF}
    function      GetDefaultInterface: _Default;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Default);
    procedure Disconnect; override;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString);
    procedure BindToDatatype(const DatatypeName: WideString); overload;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); overload;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString);
    procedure UnbindFromDatatype(const DatatypeName: WideString); overload;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); overload;
    function ListBoundColumns: SQLObjectList;
    function ListBoundDatatypes: SQLObjectList;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    property DefaultInterface: _Default read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefaultProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefault
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefaultProperties = class(TPersistent)
  private
    FServer:    TDefault;
    function    GetDefaultInterface: _Default;
    constructor Create(AServer: TDefault);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
  public
    property DefaultInterface: _Default read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRule provides a Create and CreateRemote method to          
// create instances of the default interface _Rule exposed by              
// the CoClass Rule. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRule = class
    class function Create: _Rule;
    class function CreateRemote(const MachineName: string): _Rule;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRule
// Help String      : SQLDMO Rule
// Default Interface: _Rule
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuleProperties= class;
{$ENDIF}
  TRule = class(TOleServer)
  private
    FIntf:        _Rule;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuleProperties;
    function      GetServerProperties: TRuleProperties;
{$ENDIF}
    function      GetDefaultInterface: _Rule;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Rule);
    procedure Disconnect; override;
    procedure BindToColumn(const TableName: WideString; const ColumnName: WideString);
    procedure BindToDatatype(const DatatypeName: WideString); overload;
    procedure BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); overload;
    procedure UnbindFromColumn(const TableName: WideString; const ColumnName: WideString);
    procedure UnbindFromDatatype(const DatatypeName: WideString); overload;
    procedure UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant); overload;
    function ListBoundColumns: SQLObjectList;
    function ListBoundDatatypes: SQLObjectList;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    property DefaultInterface: _Rule read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRule
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuleProperties = class(TPersistent)
  private
    FServer:    TRule;
    function    GetDefaultInterface: _Rule;
    constructor Create(AServer: TRule);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
  public
    property DefaultInterface: _Rule read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUserDefinedDatatype provides a Create and CreateRemote method to          
// create instances of the default interface _UserDefinedDatatype exposed by              
// the CoClass UserDefinedDatatype. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserDefinedDatatype = class
    class function Create: _UserDefinedDatatype;
    class function CreateRemote(const MachineName: string): _UserDefinedDatatype;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUserDefinedDatatype
// Help String      : SQLDMO UserDefinedDatatype
// Default Interface: _UserDefinedDatatype
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUserDefinedDatatypeProperties= class;
{$ENDIF}
  TUserDefinedDatatype = class(TOleServer)
  private
    FIntf:        _UserDefinedDatatype;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUserDefinedDatatypeProperties;
    function      GetServerProperties: TUserDefinedDatatypeProperties;
{$ENDIF}
    function      GetDefaultInterface: _UserDefinedDatatype;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    function Get_AllowNulls: WordBool;
    procedure Set_AllowNulls(pRetVal: WordBool);
    function Get_BaseType: WideString;
    procedure Set_BaseType(const pRetVal: WideString);
    function Get_Length: Integer;
    procedure Set_Length(pRetVal: Integer);
    function Get_Default: WideString;
    procedure Set_Default(const pRetVal: WideString);
    function Get_Rule: WideString;
    procedure Set_Rule(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_NumericPrecision: Integer;
    procedure Set_NumericPrecision(pRetVal: Integer);
    function Get_NumericScale: Integer;
    procedure Set_NumericScale(pRetVal: Integer);
    function Get_AllowIdentity: WordBool;
    function Get_IsVariableLength: WordBool;
    function Get_MaxSize: Integer;
    function Get_DefaultOwner: WideString;
    function Get_RuleOwner: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UserDefinedDatatype);
    procedure Disconnect; override;
    function ListBoundColumns: SQLObjectList;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function GenerateSQL(const pDB: Database): WideString;
    procedure BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                          Bind: WordBool);
    procedure BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool);
    property DefaultInterface: _UserDefinedDatatype read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Owner: WideString read Get_Owner;
    property ID: Integer read Get_ID;
    property AllowIdentity: WordBool read Get_AllowIdentity;
    property IsVariableLength: WordBool read Get_IsVariableLength;
    property MaxSize: Integer read Get_MaxSize;
    property DefaultOwner: WideString read Get_DefaultOwner;
    property RuleOwner: WideString read Get_RuleOwner;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property BaseType: WideString read Get_BaseType write Set_BaseType;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUserDefinedDatatypeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUserDefinedDatatype
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUserDefinedDatatypeProperties = class(TPersistent)
  private
    FServer:    TUserDefinedDatatype;
    function    GetDefaultInterface: _UserDefinedDatatype;
    constructor Create(AServer: TUserDefinedDatatype);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    function Get_AllowNulls: WordBool;
    procedure Set_AllowNulls(pRetVal: WordBool);
    function Get_BaseType: WideString;
    procedure Set_BaseType(const pRetVal: WideString);
    function Get_Length: Integer;
    procedure Set_Length(pRetVal: Integer);
    function Get_Default: WideString;
    procedure Set_Default(const pRetVal: WideString);
    function Get_Rule: WideString;
    procedure Set_Rule(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_NumericPrecision: Integer;
    procedure Set_NumericPrecision(pRetVal: Integer);
    function Get_NumericScale: Integer;
    procedure Set_NumericScale(pRetVal: Integer);
    function Get_AllowIdentity: WordBool;
    function Get_IsVariableLength: WordBool;
    function Get_MaxSize: Integer;
    function Get_DefaultOwner: WideString;
    function Get_RuleOwner: WideString;
  public
    property DefaultInterface: _UserDefinedDatatype read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property AllowNulls: WordBool read Get_AllowNulls write Set_AllowNulls;
    property BaseType: WideString read Get_BaseType write Set_BaseType;
    property Length: Integer read Get_Length write Set_Length;
    property Default: WideString read Get_Default write Set_Default;
    property Rule: WideString read Get_Rule write Set_Rule;
    property NumericPrecision: Integer read Get_NumericPrecision write Set_NumericPrecision;
    property NumericScale: Integer read Get_NumericScale write Set_NumericScale;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUser provides a Create and CreateRemote method to          
// create instances of the default interface _User exposed by              
// the CoClass User. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUser = class
    class function Create: _User;
    class function CreateRemote(const MachineName: string): _User;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUser
// Help String      : SQLDMO User
// Default Interface: _User
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUserProperties= class;
{$ENDIF}
  TUser = class(TOleServer)
  private
    FIntf:        _User;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUserProperties;
    function      GetServerProperties: TUserProperties;
{$ENDIF}
    function      GetDefaultInterface: _User;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_Group: WideString;
    procedure Set_Group(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Role: WideString;
    procedure Set_Role(const pRetVal: WideString);
    function Get_HasDBAccess: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _User);
    procedure Disconnect; override;
    procedure AddAlias(const LoginNames: WideString);
    procedure RemoveAlias(const LoginNames: WideString);
    function ListAliases: SQLObjectList;
    function ListOwnedObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function ListMembers: NameList;
    function IsMember(const DatabaseRole: WideString): WordBool;
    procedure GrantNTUserDBAccess;
    property DefaultInterface: _User read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property Group: WideString read Get_Group write Set_Group;
    property ID: Integer read Get_ID;
    property HasDBAccess: WordBool read Get_HasDBAccess;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property Role: WideString read Get_Role write Set_Role;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUserProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUser
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUserProperties = class(TPersistent)
  private
    FServer:    TUser;
    function    GetDefaultInterface: _User;
    constructor Create(AServer: TUser);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_Group: WideString;
    procedure Set_Group(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Role: WideString;
    procedure Set_Role(const pRetVal: WideString);
    function Get_HasDBAccess: WordBool;
  public
    property DefaultInterface: _User read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property Role: WideString read Get_Role write Set_Role;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroup provides a Create and CreateRemote method to          
// create instances of the default interface _Group exposed by              
// the CoClass Group. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroup = class
    class function Create: _Group;
    class function CreateRemote(const MachineName: string): _Group;
  end;

// *********************************************************************//
// The Class CoLogFile provides a Create and CreateRemote method to          
// create instances of the default interface _LogFile exposed by              
// the CoClass LogFile. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLogFile = class
    class function Create: _LogFile;
    class function CreateRemote(const MachineName: string): _LogFile;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLogFile
// Help String      : SQLDMO Log File
// Default Interface: _LogFile
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLogFileProperties= class;
{$ENDIF}
  TLogFile = class(TOleServer)
  private
    FIntf:        _LogFile;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLogFileProperties;
    function      GetServerProperties: TLogFileProperties;
{$ENDIF}
    function      GetDefaultInterface: _LogFile;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PhysicalName: WideString;
    procedure Set_PhysicalName(const pRetVal: WideString);
    function Get_Size: Integer;
    procedure Set_Size(pRetVal: Integer);
    function Get_ID: Integer;
    function Get_FileGrowth: Integer;
    procedure Set_FileGrowth(pRetVal: Integer);
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
    function Get_FileGrowthInKB: Single;
    function Get_MaximumSize: Integer;
    procedure Set_MaximumSize(pRetVal: Integer);
    function Get_SizeInKB: Single;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LogFile);
    procedure Disconnect; override;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE);
    property DefaultInterface: _LogFile read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property FileGrowthInKB: Single read Get_FileGrowthInKB;
    property SizeInKB: Single read Get_SizeInKB;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property Size: Integer read Get_Size write Set_Size;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLogFileProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLogFile
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLogFileProperties = class(TPersistent)
  private
    FServer:    TLogFile;
    function    GetDefaultInterface: _LogFile;
    constructor Create(AServer: TLogFile);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PhysicalName: WideString;
    procedure Set_PhysicalName(const pRetVal: WideString);
    function Get_Size: Integer;
    procedure Set_Size(pRetVal: Integer);
    function Get_ID: Integer;
    function Get_FileGrowth: Integer;
    procedure Set_FileGrowth(pRetVal: Integer);
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
    function Get_FileGrowthInKB: Single;
    function Get_MaximumSize: Integer;
    procedure Set_MaximumSize(pRetVal: Integer);
    function Get_SizeInKB: Single;
  public
    property DefaultInterface: _LogFile read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property Size: Integer read Get_Size write Set_Size;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransfer provides a Create and CreateRemote method to          
// create instances of the default interface _Transfer exposed by              
// the CoClass Transfer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransfer = class
    class function Create: _Transfer;
    class function CreateRemote(const MachineName: string): _Transfer;
  end;

  TTransferStatusMessage = procedure(ASender: TObject; const Message: WideString) of object;
  TTransferPercentCompleteAtStep = procedure(ASender: TObject; const Message: WideString; 
                                                               Percent: Integer) of object;
  TTransferScriptTransferPercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                                       Percent: Integer) of object;
  TTransferTransferPercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                                 Percent: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransfer
// Help String      : SQLDMO DB Transfer
// Default Interface: _Transfer
// Def. Intf. DISP? : No
// Event   Interface: TransferSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransferProperties= class;
{$ENDIF}
  TTransfer = class(TOleServer)
  private
    FOnStatusMessage: TTransferStatusMessage;
    FOnPercentCompleteAtStep: TTransferPercentCompleteAtStep;
    FOnScriptTransferPercentComplete: TTransferScriptTransferPercentComplete;
    FOnTransferPercentComplete: TTransferTransferPercentComplete;
    FIntf:        _Transfer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransferProperties;
    function      GetServerProperties: TTransferProperties;
{$ENDIF}
    function      GetDefaultInterface: _Transfer;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_DestServer: WideString;
    procedure Set_DestServer(const pRetVal: WideString);
    function Get_DestLogin: WideString;
    procedure Set_DestLogin(const pRetVal: WideString);
    function Get_DestPassword: WideString;
    procedure Set_DestPassword(const pRetVal: WideString);
    function Get_DestDatabase: WideString;
    procedure Set_DestDatabase(const pRetVal: WideString);
    function Get_CopyData: SQLDMO_COPYDATA_TYPE;
    procedure Set_CopyData(pRetVal: SQLDMO_COPYDATA_TYPE);
    function Get_CopySchema: WordBool;
    procedure Set_CopySchema(pRetVal: WordBool);
    function Get_CopyAllObjects: WordBool;
    procedure Set_CopyAllObjects(pRetVal: WordBool);
    function Get_CopyAllTables: WordBool;
    procedure Set_CopyAllTables(pRetVal: WordBool);
    function Get_CopyAllViews: WordBool;
    procedure Set_CopyAllViews(pRetVal: WordBool);
    function Get_CopyAllStoredProcedures: WordBool;
    procedure Set_CopyAllStoredProcedures(pRetVal: WordBool);
    function Get_CopyAllUserDefinedDatatypes: WordBool;
    procedure Set_CopyAllUserDefinedDatatypes(pRetVal: WordBool);
    function Get_CopyAllRules: WordBool;
    procedure Set_CopyAllRules(pRetVal: WordBool);
    function Get_CopyAllDefaults: WordBool;
    procedure Set_CopyAllDefaults(pRetVal: WordBool);
    function Get_CopyAllTriggers: WordBool;
    procedure Set_CopyAllTriggers(pRetVal: WordBool);
    function Get_IncludeDependencies: WordBool;
    procedure Set_IncludeDependencies(pRetVal: WordBool);
    function Get_IncludeUsers: WordBool;
    procedure Set_IncludeUsers(pRetVal: WordBool);
    function Get_IncludeGroups: WordBool;
    procedure Set_IncludeGroups(pRetVal: WordBool);
    function Get_IncludeLogins: WordBool;
    procedure Set_IncludeLogins(pRetVal: WordBool);
    function Get_DropDestObjectsFirst: WordBool;
    procedure Set_DropDestObjectsFirst(pRetVal: WordBool);
    function Get_ScriptType: SQLDMO_SCRIPT_TYPE;
    procedure Set_ScriptType(pRetVal: SQLDMO_SCRIPT_TYPE);
    function Get_DestUseTrustedConnection: WordBool;
    procedure Set_DestUseTrustedConnection(pRetVal: WordBool);
    function Get_Script2Type: SQLDMO_SCRIPT2_TYPE;
    procedure Set_Script2Type(pRetVal: SQLDMO_SCRIPT2_TYPE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Transfer);
    procedure Disconnect; override;
    procedure AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE); overload;
    procedure AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                              Owner: OleVariant); overload;
    procedure AddObject(const DBObject: DBObject);
    function ListObjectNames(ObjectType: SQLDMO_OBJECT_TYPE): NameList;
    procedure Abort;
    function RetrieveErrors: WideString;
    function RetrieveWriteFileErrors: WideString;
    property DefaultInterface: _Transfer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property IncludeGroups: WordBool read Get_IncludeGroups write Set_IncludeGroups;
    property UserData: Integer read Get_UserData write Set_UserData;
    property DestServer: WideString read Get_DestServer write Set_DestServer;
    property DestLogin: WideString read Get_DestLogin write Set_DestLogin;
    property DestPassword: WideString read Get_DestPassword write Set_DestPassword;
    property DestDatabase: WideString read Get_DestDatabase write Set_DestDatabase;
    property CopyData: SQLDMO_COPYDATA_TYPE read Get_CopyData write Set_CopyData;
    property CopySchema: WordBool read Get_CopySchema write Set_CopySchema;
    property CopyAllObjects: WordBool read Get_CopyAllObjects write Set_CopyAllObjects;
    property CopyAllTables: WordBool read Get_CopyAllTables write Set_CopyAllTables;
    property CopyAllViews: WordBool read Get_CopyAllViews write Set_CopyAllViews;
    property CopyAllStoredProcedures: WordBool read Get_CopyAllStoredProcedures write Set_CopyAllStoredProcedures;
    property CopyAllUserDefinedDatatypes: WordBool read Get_CopyAllUserDefinedDatatypes write Set_CopyAllUserDefinedDatatypes;
    property CopyAllRules: WordBool read Get_CopyAllRules write Set_CopyAllRules;
    property CopyAllDefaults: WordBool read Get_CopyAllDefaults write Set_CopyAllDefaults;
    property CopyAllTriggers: WordBool read Get_CopyAllTriggers write Set_CopyAllTriggers;
    property IncludeDependencies: WordBool read Get_IncludeDependencies write Set_IncludeDependencies;
    property IncludeUsers: WordBool read Get_IncludeUsers write Set_IncludeUsers;
    property IncludeLogins: WordBool read Get_IncludeLogins write Set_IncludeLogins;
    property DropDestObjectsFirst: WordBool read Get_DropDestObjectsFirst write Set_DropDestObjectsFirst;
    property ScriptType: SQLDMO_SCRIPT_TYPE read Get_ScriptType write Set_ScriptType;
    property DestUseTrustedConnection: WordBool read Get_DestUseTrustedConnection write Set_DestUseTrustedConnection;
    property Script2Type: SQLDMO_SCRIPT2_TYPE read Get_Script2Type write Set_Script2Type;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransferProperties read GetServerProperties;
{$ENDIF}
    property OnStatusMessage: TTransferStatusMessage read FOnStatusMessage write FOnStatusMessage;
    property OnPercentCompleteAtStep: TTransferPercentCompleteAtStep read FOnPercentCompleteAtStep write FOnPercentCompleteAtStep;
    property OnScriptTransferPercentComplete: TTransferScriptTransferPercentComplete read FOnScriptTransferPercentComplete write FOnScriptTransferPercentComplete;
    property OnTransferPercentComplete: TTransferTransferPercentComplete read FOnTransferPercentComplete write FOnTransferPercentComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransfer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransferProperties = class(TPersistent)
  private
    FServer:    TTransfer;
    function    GetDefaultInterface: _Transfer;
    constructor Create(AServer: TTransfer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_DestServer: WideString;
    procedure Set_DestServer(const pRetVal: WideString);
    function Get_DestLogin: WideString;
    procedure Set_DestLogin(const pRetVal: WideString);
    function Get_DestPassword: WideString;
    procedure Set_DestPassword(const pRetVal: WideString);
    function Get_DestDatabase: WideString;
    procedure Set_DestDatabase(const pRetVal: WideString);
    function Get_CopyData: SQLDMO_COPYDATA_TYPE;
    procedure Set_CopyData(pRetVal: SQLDMO_COPYDATA_TYPE);
    function Get_CopySchema: WordBool;
    procedure Set_CopySchema(pRetVal: WordBool);
    function Get_CopyAllObjects: WordBool;
    procedure Set_CopyAllObjects(pRetVal: WordBool);
    function Get_CopyAllTables: WordBool;
    procedure Set_CopyAllTables(pRetVal: WordBool);
    function Get_CopyAllViews: WordBool;
    procedure Set_CopyAllViews(pRetVal: WordBool);
    function Get_CopyAllStoredProcedures: WordBool;
    procedure Set_CopyAllStoredProcedures(pRetVal: WordBool);
    function Get_CopyAllUserDefinedDatatypes: WordBool;
    procedure Set_CopyAllUserDefinedDatatypes(pRetVal: WordBool);
    function Get_CopyAllRules: WordBool;
    procedure Set_CopyAllRules(pRetVal: WordBool);
    function Get_CopyAllDefaults: WordBool;
    procedure Set_CopyAllDefaults(pRetVal: WordBool);
    function Get_CopyAllTriggers: WordBool;
    procedure Set_CopyAllTriggers(pRetVal: WordBool);
    function Get_IncludeDependencies: WordBool;
    procedure Set_IncludeDependencies(pRetVal: WordBool);
    function Get_IncludeUsers: WordBool;
    procedure Set_IncludeUsers(pRetVal: WordBool);
    function Get_IncludeGroups: WordBool;
    procedure Set_IncludeGroups(pRetVal: WordBool);
    function Get_IncludeLogins: WordBool;
    procedure Set_IncludeLogins(pRetVal: WordBool);
    function Get_DropDestObjectsFirst: WordBool;
    procedure Set_DropDestObjectsFirst(pRetVal: WordBool);
    function Get_ScriptType: SQLDMO_SCRIPT_TYPE;
    procedure Set_ScriptType(pRetVal: SQLDMO_SCRIPT_TYPE);
    function Get_DestUseTrustedConnection: WordBool;
    procedure Set_DestUseTrustedConnection(pRetVal: WordBool);
    function Get_Script2Type: SQLDMO_SCRIPT2_TYPE;
    procedure Set_Script2Type(pRetVal: SQLDMO_SCRIPT2_TYPE);
  public
    property DefaultInterface: _Transfer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property DestServer: WideString read Get_DestServer write Set_DestServer;
    property DestLogin: WideString read Get_DestLogin write Set_DestLogin;
    property DestPassword: WideString read Get_DestPassword write Set_DestPassword;
    property DestDatabase: WideString read Get_DestDatabase write Set_DestDatabase;
    property CopyData: SQLDMO_COPYDATA_TYPE read Get_CopyData write Set_CopyData;
    property CopySchema: WordBool read Get_CopySchema write Set_CopySchema;
    property CopyAllObjects: WordBool read Get_CopyAllObjects write Set_CopyAllObjects;
    property CopyAllTables: WordBool read Get_CopyAllTables write Set_CopyAllTables;
    property CopyAllViews: WordBool read Get_CopyAllViews write Set_CopyAllViews;
    property CopyAllStoredProcedures: WordBool read Get_CopyAllStoredProcedures write Set_CopyAllStoredProcedures;
    property CopyAllUserDefinedDatatypes: WordBool read Get_CopyAllUserDefinedDatatypes write Set_CopyAllUserDefinedDatatypes;
    property CopyAllRules: WordBool read Get_CopyAllRules write Set_CopyAllRules;
    property CopyAllDefaults: WordBool read Get_CopyAllDefaults write Set_CopyAllDefaults;
    property CopyAllTriggers: WordBool read Get_CopyAllTriggers write Set_CopyAllTriggers;
    property IncludeDependencies: WordBool read Get_IncludeDependencies write Set_IncludeDependencies;
    property IncludeUsers: WordBool read Get_IncludeUsers write Set_IncludeUsers;
    property IncludeLogins: WordBool read Get_IncludeLogins write Set_IncludeLogins;
    property DropDestObjectsFirst: WordBool read Get_DropDestObjectsFirst write Set_DropDestObjectsFirst;
    property ScriptType: SQLDMO_SCRIPT_TYPE read Get_ScriptType write Set_ScriptType;
    property DestUseTrustedConnection: WordBool read Get_DestUseTrustedConnection write Set_DestUseTrustedConnection;
    property Script2Type: SQLDMO_SCRIPT2_TYPE read Get_Script2Type write Set_Script2Type;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDBFile provides a Create and CreateRemote method to          
// create instances of the default interface _DBFile exposed by              
// the CoClass DBFile. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDBFile = class
    class function Create: _DBFile;
    class function CreateRemote(const MachineName: string): _DBFile;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDBFile
// Help String      : SQLDMO DB File
// Default Interface: _DBFile
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDBFileProperties= class;
{$ENDIF}
  TDBFile = class(TOleServer)
  private
    FIntf:        _DBFile;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDBFileProperties;
    function      GetServerProperties: TDBFileProperties;
{$ENDIF}
    function      GetDefaultInterface: _DBFile;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PhysicalName: WideString;
    procedure Set_PhysicalName(const pRetVal: WideString);
    function Get_PrimaryFile: WordBool;
    procedure Set_PrimaryFile(pRetVal: WordBool);
    function Get_FileGrowth: Integer;
    procedure Set_FileGrowth(pRetVal: Integer);
    function Get_MaximumSize: Integer;
    procedure Set_MaximumSize(pRetVal: Integer);
    function Get_SpaceAvailableInMB: Integer;
    function Get_Size: Integer;
    procedure Set_Size(pRetVal: Integer);
    function Get_ID: Integer;
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
    function Get_FileGrowthInKB: Single;
    function Get_SizeInKB: Single;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DBFile);
    procedure Disconnect; override;
    procedure Remove;
    procedure Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE);
    property DefaultInterface: _DBFile read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SpaceAvailableInMB: Integer read Get_SpaceAvailableInMB;
    property ID: Integer read Get_ID;
    property FileGrowthInKB: Single read Get_FileGrowthInKB;
    property SizeInKB: Single read Get_SizeInKB;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property PrimaryFile: WordBool read Get_PrimaryFile write Set_PrimaryFile;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
    property Size: Integer read Get_Size write Set_Size;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDBFileProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDBFile
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDBFileProperties = class(TPersistent)
  private
    FServer:    TDBFile;
    function    GetDefaultInterface: _DBFile;
    constructor Create(AServer: TDBFile);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PhysicalName: WideString;
    procedure Set_PhysicalName(const pRetVal: WideString);
    function Get_PrimaryFile: WordBool;
    procedure Set_PrimaryFile(pRetVal: WordBool);
    function Get_FileGrowth: Integer;
    procedure Set_FileGrowth(pRetVal: Integer);
    function Get_MaximumSize: Integer;
    procedure Set_MaximumSize(pRetVal: Integer);
    function Get_SpaceAvailableInMB: Integer;
    function Get_Size: Integer;
    procedure Set_Size(pRetVal: Integer);
    function Get_ID: Integer;
    function Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
    procedure Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
    function Get_FileGrowthInKB: Single;
    function Get_SizeInKB: Single;
  public
    property DefaultInterface: _DBFile read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PhysicalName: WideString read Get_PhysicalName write Set_PhysicalName;
    property PrimaryFile: WordBool read Get_PrimaryFile write Set_PrimaryFile;
    property FileGrowth: Integer read Get_FileGrowth write Set_FileGrowth;
    property MaximumSize: Integer read Get_MaximumSize write Set_MaximumSize;
    property Size: Integer read Get_Size write Set_Size;
    property FileGrowthType: SQLDMO_GROWTH_TYPE read Get_FileGrowthType write Set_FileGrowthType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFileGroup provides a Create and CreateRemote method to          
// create instances of the default interface _FileGroup exposed by              
// the CoClass FileGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileGroup = class
    class function Create: _FileGroup;
    class function CreateRemote(const MachineName: string): _FileGroup;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFileGroup
// Help String      : SQLDMO File Group
// Default Interface: _FileGroup
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFileGroupProperties= class;
{$ENDIF}
  TFileGroup = class(TOleServer)
  private
    FIntf:        _FileGroup;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFileGroupProperties;
    function      GetServerProperties: TFileGroupProperties;
{$ENDIF}
    function      GetDefaultInterface: _FileGroup;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DBFiles: DBFiles;
    function Get_Size: Integer;
    function Get_ID: Integer;
    function Get_ReadOnly: WordBool;
    procedure Set_ReadOnly(pRetVal: WordBool);
    function Get_Default: WordBool;
    procedure Set_Default(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FileGroup);
    procedure Disconnect; override;
    procedure Remove;
    function EnumObjects: QueryResults;
    function EnumFiles: QueryResults;
    function CheckFilegroup: WideString;
    function CheckFilegroupDataOnly: WideString;
    property DefaultInterface: _FileGroup read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DBFiles: DBFiles read Get_DBFiles;
    property Size: Integer read Get_Size;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property Default: WordBool read Get_Default write Set_Default;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFileGroupProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFileGroup
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFileGroupProperties = class(TPersistent)
  private
    FServer:    TFileGroup;
    function    GetDefaultInterface: _FileGroup;
    constructor Create(AServer: TFileGroup);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DBFiles: DBFiles;
    function Get_Size: Integer;
    function Get_ID: Integer;
    function Get_ReadOnly: WordBool;
    procedure Set_ReadOnly(pRetVal: WordBool);
    function Get_Default: WordBool;
    procedure Set_Default(pRetVal: WordBool);
  public
    property DefaultInterface: _FileGroup read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property Default: WordBool read Get_Default write Set_Default;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDatabaseRole provides a Create and CreateRemote method to          
// create instances of the default interface _DatabaseRole exposed by              
// the CoClass DatabaseRole. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatabaseRole = class
    class function Create: _DatabaseRole;
    class function CreateRemote(const MachineName: string): _DatabaseRole;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDatabaseRole
// Help String      : SQLDMO Database Role
// Default Interface: _DatabaseRole
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDatabaseRoleProperties= class;
{$ENDIF}
  TDatabaseRole = class(TOleServer)
  private
    FIntf:        _DatabaseRole;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDatabaseRoleProperties;
    function      GetServerProperties: TDatabaseRoleProperties;
{$ENDIF}
    function      GetDefaultInterface: _DatabaseRole;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_AppRole: WordBool;
    procedure Set_AppRole(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DatabaseRole);
    procedure Disconnect; override;
    procedure Remove;
    function EnumDatabaseRoleMember: QueryResults;
    procedure AddMember(const UserName: WideString);
    procedure DropMember(const UserName: WideString);
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumFixedDatabaseRolePermission: QueryResults;
    function IsFixedRole: WordBool;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    property DefaultInterface: _DatabaseRole read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Password: WideString read Get_Password write Set_Password;
    property AppRole: WordBool read Get_AppRole write Set_AppRole;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDatabaseRoleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDatabaseRole
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDatabaseRoleProperties = class(TPersistent)
  private
    FServer:    TDatabaseRole;
    function    GetDefaultInterface: _DatabaseRole;
    constructor Create(AServer: TDatabaseRole);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_AppRole: WordBool;
    procedure Set_AppRole(pRetVal: WordBool);
  public
    property DefaultInterface: _DatabaseRole read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Password: WideString read Get_Password write Set_Password;
    property AppRole: WordBool read Get_AppRole write Set_AppRole;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFullTextCatalog provides a Create and CreateRemote method to          
// create instances of the default interface _FullTextCatalog exposed by              
// the CoClass FullTextCatalog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFullTextCatalog = class
    class function Create: _FullTextCatalog;
    class function CreateRemote(const MachineName: string): _FullTextCatalog;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFullTextCatalog
// Help String      : SQLDMO FullText Catalog
// Default Interface: _FullTextCatalog
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFullTextCatalogProperties= class;
{$ENDIF}
  TFullTextCatalog = class(TOleServer)
  private
    FIntf:        _FullTextCatalog;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFullTextCatalogProperties;
    function      GetServerProperties: TFullTextCatalogProperties;
{$ENDIF}
    function      GetDefaultInterface: _FullTextCatalog;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_RootPath: WideString;
    procedure Set_RootPath(const pRetVal: WideString);
    function Get_ItemCount: Integer;
    function Get_PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE;
    function Get_FullTextIndexSize: Integer;
    function Get_UniqueKeyCount: Integer;
    function Get_PopulateCompletionDate: WideString;
    function Get_ErrorLogSize: Integer;
    function Get_HasFullTextIndexedTables: WordBool;
    function Get_FullTextCatalogID: Integer;
    function Get_PopulateCompletionAge: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FullTextCatalog);
    procedure Disconnect; override;
    procedure Remove;
    procedure Start(StartType: SQLDMO_FULLTEXT_START_TYPE);
    procedure Stop;
    function GenerateSQL: WideString;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    procedure Rebuild;
    property DefaultInterface: _FullTextCatalog read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ItemCount: Integer read Get_ItemCount;
    property PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE read Get_PopulateStatus;
    property FullTextIndexSize: Integer read Get_FullTextIndexSize;
    property UniqueKeyCount: Integer read Get_UniqueKeyCount;
    property PopulateCompletionDate: WideString read Get_PopulateCompletionDate;
    property ErrorLogSize: Integer read Get_ErrorLogSize;
    property HasFullTextIndexedTables: WordBool read Get_HasFullTextIndexedTables;
    property FullTextCatalogID: Integer read Get_FullTextCatalogID;
    property PopulateCompletionAge: Integer read Get_PopulateCompletionAge;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property RootPath: WideString read Get_RootPath write Set_RootPath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFullTextCatalogProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFullTextCatalog
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFullTextCatalogProperties = class(TPersistent)
  private
    FServer:    TFullTextCatalog;
    function    GetDefaultInterface: _FullTextCatalog;
    constructor Create(AServer: TFullTextCatalog);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_RootPath: WideString;
    procedure Set_RootPath(const pRetVal: WideString);
    function Get_ItemCount: Integer;
    function Get_PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE;
    function Get_FullTextIndexSize: Integer;
    function Get_UniqueKeyCount: Integer;
    function Get_PopulateCompletionDate: WideString;
    function Get_ErrorLogSize: Integer;
    function Get_HasFullTextIndexedTables: WordBool;
    function Get_FullTextCatalogID: Integer;
    function Get_PopulateCompletionAge: Integer;
  public
    property DefaultInterface: _FullTextCatalog read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property RootPath: WideString read Get_RootPath write Set_RootPath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDatabase provides a Create and CreateRemote method to          
// create instances of the default interface _Database exposed by              
// the CoClass Database. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatabase = class
    class function Create: _Database;
    class function CreateRemote(const MachineName: string): _Database;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDatabase
// Help String      : SQLDMO Database
// Default Interface: _Database
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDatabaseProperties= class;
{$ENDIF}
  TDatabase = class(TOleServer)
  private
    FIntf:        _Database;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDatabaseProperties;
    function      GetServerProperties: TDatabaseProperties;
{$ENDIF}
    function      GetDefaultInterface: _Database;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Tables: Tables;
    function Get_SystemObject: WordBool;
    function Get_ID: Integer;
    function Get_UserProfile: SQLDMO_DBUSERPROFILE_TYPE;
    function Get_CreateForAttach: WordBool;
    procedure Set_CreateForAttach(pRetVal: WordBool);
    function Get_Owner: WideString;
    function Get_Version: Integer;
    function Get_CreateDate: WideString;
    function Get_DataSpaceUsage: Single;
    function Get_UserName: WideString;
    procedure Set_UserName(const pRetVal: WideString);
    function Get_Status: SQLDMO_DBSTATUS_TYPE;
    function Get_Size: Integer;
    function Get_SpaceAvailable: Integer;
    function Get_IndexSpaceUsage: Single;
    function Get_SpaceAvailableInMB: Single;
    function Get_Views: Views;
    function Get_StoredProcedures: StoredProcedures;
    function Get_Defaults: Defaults;
    function Get_Rules: Rules;
    function Get_UserDefinedDatatypes: UserDefinedDatatypes;
    function Get_Users: Users;
    function Get_Groups: Groups;
    function Get_SystemDatatypes: SystemDatatypes;
    function Get_TransactionLog: TransactionLog;
    function Get_DBOption: DBOption;
    function Get_DboLogin: WordBool;
    function Get_PrimaryFilePath: WideString;
    function Get_FileGroups: FileGroups;
    function Get_DatabaseRoles: DatabaseRoles;
    function Get_Permissions: SQLDMO_PRIVILEGE_TYPE;
    function Get_Isdb_accessadmin: WordBool;
    function Get_Isdb_datareader: WordBool;
    function Get_Isdb_ddladmin: WordBool;
    function Get_Isdb_denydatareader: WordBool;
    function Get_Isdb_denydatawriter: WordBool;
    function Get_Isdb_backupoperator: WordBool;
    function Get_Isdb_owner: WordBool;
    function Get_Isdb_securityadmin: WordBool;
    function Get_Isdb_datawriter: WordBool;
    function Get_IsFullTextEnabled: WordBool;
    function Get_FullTextCatalogs: FullTextCatalogs;
    function Get_CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE;
    procedure Set_CompatibilityLevel(pRetVal: SQLDMO_COMP_LEVEL_TYPE);
    function Get_UseServerName: WideString;
    procedure Set_UseServerName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Database);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE); overload;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); overload;
    function GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE): DBObject; overload;
    function GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                             Owner: OleVariant): DBObject; overload;
    procedure Checkpoint;
    function CheckTables(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString;
    function CheckAllocations(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString;
    function CheckCatalog: WideString;
    function GetMemoryUsage: WideString;
    function ExecuteWithResults(const Command: WideString): QueryResults; overload;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; overload;
    function ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function EnumLocks: QueryResults; overload;
    function EnumLocks(Who: OleVariant): QueryResults; overload;
    function ListObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure SetOwner(const LoginName: WideString); overload;
    procedure SetOwner(const LoginName: WideString; TransferAliases: OleVariant); overload;
    procedure SetOwner(const LoginName: WideString; TransferAliases: OleVariant; 
                       OverrideIfAlreadyUser: OleVariant); overload;
    function ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    procedure Remove;
    procedure RecalcSpaceUsage;
    function EnumCandidateKeys: QueryResults;
    function IsValidKeyDatatype(const KeyColType: WideString): WordBool; overload;
    function IsValidKeyDatatype(const KeyColType: WideString; ReferencingColType: OleVariant): WordBool; overload;
    function GetDatatypeByName(const TypeName: WideString): _IVSQLDMOStdObject;
    function ScriptTransfer(const TransferSpec: Transfer; ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE): WideString; overload;
    function ScriptTransfer(const TransferSpec: Transfer; 
                            ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE; ScriptFilePath: OleVariant): WideString; overload;
    procedure Transfer(const TransferSpec: Transfer);
    procedure CheckIdentityValues;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function CheckTablesDataOnly: WideString;
    function CheckAllocationsDataOnly: WideString;
    procedure UpdateIndexStatistics;
    function EnumLoginMappings: QueryResults;
    function EnumFiles: QueryResults;
    function EnumFileGroups: QueryResults;
    function EnumUsers: QueryResults; overload;
    function EnumUsers(Who: OleVariant): QueryResults; overload;
    function EnumNTGroups: QueryResults; overload;
    function EnumNTGroups(Who: OleVariant): QueryResults; overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
    function IsUser(const UserName: WideString): WordBool;
    function GenerateSQL: WideString;
    procedure Shrink(FreeSpaceInPercent: Integer; Truncate: SQLDMO_SHRINK_TYPE);
    function CheckTextAllocsFast: WideString;
    function CheckTextAllocsFull: WideString;
    function EnumMatchingSPs(const Text: WideString): QueryResults; overload;
    function EnumMatchingSPs(const Text: WideString; IncludeSystemSP: OleVariant): QueryResults; overload;
    procedure EnableFullTextCatalogs;
    procedure RemoveFullTextCatalogs;
    function FullTextIndexScript: WideString;
    procedure DisableFullTextCatalogs;
    property DefaultInterface: _Database read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Tables: Tables read Get_Tables;
    property SystemObject: WordBool read Get_SystemObject;
    property ID: Integer read Get_ID;
    property UserProfile: SQLDMO_DBUSERPROFILE_TYPE read Get_UserProfile;
    property Owner: WideString read Get_Owner;
    property Version: Integer read Get_Version;
    property CreateDate: WideString read Get_CreateDate;
    property DataSpaceUsage: Single read Get_DataSpaceUsage;
    property Status: SQLDMO_DBSTATUS_TYPE read Get_Status;
    property Size: Integer read Get_Size;
    property SpaceAvailable: Integer read Get_SpaceAvailable;
    property IndexSpaceUsage: Single read Get_IndexSpaceUsage;
    property SpaceAvailableInMB: Single read Get_SpaceAvailableInMB;
    property Views: Views read Get_Views;
    property StoredProcedures: StoredProcedures read Get_StoredProcedures;
    property Defaults: Defaults read Get_Defaults;
    property Rules: Rules read Get_Rules;
    property UserDefinedDatatypes: UserDefinedDatatypes read Get_UserDefinedDatatypes;
    property Users: Users read Get_Users;
    property Groups: Groups read Get_Groups;
    property SystemDatatypes: SystemDatatypes read Get_SystemDatatypes;
    property TransactionLog: TransactionLog read Get_TransactionLog;
    property DBOption: DBOption read Get_DBOption;
    property DboLogin: WordBool read Get_DboLogin;
    property PrimaryFilePath: WideString read Get_PrimaryFilePath;
    property FileGroups: FileGroups read Get_FileGroups;
    property DatabaseRoles: DatabaseRoles read Get_DatabaseRoles;
    property Permissions: SQLDMO_PRIVILEGE_TYPE read Get_Permissions;
    property Isdb_accessadmin: WordBool read Get_Isdb_accessadmin;
    property Isdb_datareader: WordBool read Get_Isdb_datareader;
    property Isdb_ddladmin: WordBool read Get_Isdb_ddladmin;
    property Isdb_denydatareader: WordBool read Get_Isdb_denydatareader;
    property Isdb_denydatawriter: WordBool read Get_Isdb_denydatawriter;
    property Isdb_backupoperator: WordBool read Get_Isdb_backupoperator;
    property Isdb_owner: WordBool read Get_Isdb_owner;
    property Isdb_securityadmin: WordBool read Get_Isdb_securityadmin;
    property Isdb_datawriter: WordBool read Get_Isdb_datawriter;
    property IsFullTextEnabled: WordBool read Get_IsFullTextEnabled;
    property FullTextCatalogs: FullTextCatalogs read Get_FullTextCatalogs;
    property UseServerName: WideString read Get_UseServerName write Set_UseServerName;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property CreateForAttach: WordBool read Get_CreateForAttach write Set_CreateForAttach;
    property UserName: WideString read Get_UserName write Set_UserName;
    property CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE read Get_CompatibilityLevel write Set_CompatibilityLevel;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDatabaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDatabase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDatabaseProperties = class(TPersistent)
  private
    FServer:    TDatabase;
    function    GetDefaultInterface: _Database;
    constructor Create(AServer: TDatabase);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Tables: Tables;
    function Get_SystemObject: WordBool;
    function Get_ID: Integer;
    function Get_UserProfile: SQLDMO_DBUSERPROFILE_TYPE;
    function Get_CreateForAttach: WordBool;
    procedure Set_CreateForAttach(pRetVal: WordBool);
    function Get_Owner: WideString;
    function Get_Version: Integer;
    function Get_CreateDate: WideString;
    function Get_DataSpaceUsage: Single;
    function Get_UserName: WideString;
    procedure Set_UserName(const pRetVal: WideString);
    function Get_Status: SQLDMO_DBSTATUS_TYPE;
    function Get_Size: Integer;
    function Get_SpaceAvailable: Integer;
    function Get_IndexSpaceUsage: Single;
    function Get_SpaceAvailableInMB: Single;
    function Get_Views: Views;
    function Get_StoredProcedures: StoredProcedures;
    function Get_Defaults: Defaults;
    function Get_Rules: Rules;
    function Get_UserDefinedDatatypes: UserDefinedDatatypes;
    function Get_Users: Users;
    function Get_Groups: Groups;
    function Get_SystemDatatypes: SystemDatatypes;
    function Get_TransactionLog: TransactionLog;
    function Get_DBOption: DBOption;
    function Get_DboLogin: WordBool;
    function Get_PrimaryFilePath: WideString;
    function Get_FileGroups: FileGroups;
    function Get_DatabaseRoles: DatabaseRoles;
    function Get_Permissions: SQLDMO_PRIVILEGE_TYPE;
    function Get_Isdb_accessadmin: WordBool;
    function Get_Isdb_datareader: WordBool;
    function Get_Isdb_ddladmin: WordBool;
    function Get_Isdb_denydatareader: WordBool;
    function Get_Isdb_denydatawriter: WordBool;
    function Get_Isdb_backupoperator: WordBool;
    function Get_Isdb_owner: WordBool;
    function Get_Isdb_securityadmin: WordBool;
    function Get_Isdb_datawriter: WordBool;
    function Get_IsFullTextEnabled: WordBool;
    function Get_FullTextCatalogs: FullTextCatalogs;
    function Get_CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE;
    procedure Set_CompatibilityLevel(pRetVal: SQLDMO_COMP_LEVEL_TYPE);
    function Get_UseServerName: WideString;
    procedure Set_UseServerName(const pRetVal: WideString);
  public
    property DefaultInterface: _Database read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property CreateForAttach: WordBool read Get_CreateForAttach write Set_CreateForAttach;
    property UserName: WideString read Get_UserName write Set_UserName;
    property CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE read Get_CompatibilityLevel write Set_CompatibilityLevel;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUserDefinedFunction provides a Create and CreateRemote method to          
// create instances of the default interface _UserDefinedFunction exposed by              
// the CoClass UserDefinedFunction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserDefinedFunction = class
    class function Create: _UserDefinedFunction;
    class function CreateRemote(const MachineName: string): _UserDefinedFunction;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUserDefinedFunction
// Help String      : SQLDMO UserDefinedFunction
// Default Interface: _UserDefinedFunction
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUserDefinedFunctionProperties= class;
{$ENDIF}
  TUserDefinedFunction = class(TOleServer)
  private
    FIntf:        _UserDefinedFunction;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUserDefinedFunctionProperties;
    function      GetServerProperties: TUserDefinedFunctionProperties;
{$ENDIF}
    function      GetDefaultInterface: _UserDefinedFunction;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_type_: SQLDMO_UDF_TYPE;
    function Get_IsDeterministic: WordBool;
    function Get_IsSchemaBound: WordBool;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UserDefinedFunction);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function EnumParameters: QueryResults;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); overload;
    procedure Alter(const NewText: WideString);
    function EnumOutputs: QueryResults;
    property DefaultInterface: _UserDefinedFunction read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property type_: SQLDMO_UDF_TYPE read Get_type_;
    property IsDeterministic: WordBool read Get_IsDeterministic;
    property IsSchemaBound: WordBool read Get_IsSchemaBound;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUserDefinedFunctionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUserDefinedFunction
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUserDefinedFunctionProperties = class(TPersistent)
  private
    FServer:    TUserDefinedFunction;
    function    GetDefaultInterface: _UserDefinedFunction;
    constructor Create(AServer: TUserDefinedFunction);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_type_: SQLDMO_UDF_TYPE;
    function Get_IsDeterministic: WordBool;
    function Get_IsSchemaBound: WordBool;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    property DefaultInterface: _UserDefinedFunction read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBackupDevice provides a Create and CreateRemote method to          
// create instances of the default interface _BackupDevice exposed by              
// the CoClass BackupDevice. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBackupDevice = class
    class function Create: _BackupDevice;
    class function CreateRemote(const MachineName: string): _BackupDevice;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBackupDevice
// Help String      : SQLDMO BackupDevice
// Default Interface: _BackupDevice
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBackupDeviceProperties= class;
{$ENDIF}
  TBackupDevice = class(TOleServer)
  private
    FIntf:        _BackupDevice;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBackupDeviceProperties;
    function      GetServerProperties: TBackupDeviceProperties;
{$ENDIF}
    function      GetDefaultInterface: _BackupDevice;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DeviceNumber: Integer;
    function Get_SkipTapeLabel: WordBool;
    procedure Set_SkipTapeLabel(pRetVal: WordBool);
    function Get_SystemObject: WordBool;
    function Get_PhysicalLocation: WideString;
    procedure Set_PhysicalLocation(const pRetVal: WideString);
    function Get_type_: SQLDMO_DEVICE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_DEVICE_TYPE);
    function Get_Status: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _BackupDevice);
    procedure Disconnect; override;
    procedure Remove;
    function ReadBackupHeader: QueryResults;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    NewPhysicalLocation: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function ReadMediaHeader: QueryResults;
    property DefaultInterface: _BackupDevice read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DeviceNumber: Integer read Get_DeviceNumber;
    property SystemObject: WordBool read Get_SystemObject;
    property Status: Integer read Get_Status;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SkipTapeLabel: WordBool read Get_SkipTapeLabel write Set_SkipTapeLabel;
    property PhysicalLocation: WideString read Get_PhysicalLocation write Set_PhysicalLocation;
    property type_: SQLDMO_DEVICE_TYPE read Get_type_ write Set_type_;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBackupDeviceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBackupDevice
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBackupDeviceProperties = class(TPersistent)
  private
    FServer:    TBackupDevice;
    function    GetDefaultInterface: _BackupDevice;
    constructor Create(AServer: TBackupDevice);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DeviceNumber: Integer;
    function Get_SkipTapeLabel: WordBool;
    procedure Set_SkipTapeLabel(pRetVal: WordBool);
    function Get_SystemObject: WordBool;
    function Get_PhysicalLocation: WideString;
    procedure Set_PhysicalLocation(const pRetVal: WideString);
    function Get_type_: SQLDMO_DEVICE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_DEVICE_TYPE);
    function Get_Status: Integer;
  public
    property DefaultInterface: _BackupDevice read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SkipTapeLabel: WordBool read Get_SkipTapeLabel write Set_SkipTapeLabel;
    property PhysicalLocation: WideString read Get_PhysicalLocation write Set_PhysicalLocation;
    property type_: SQLDMO_DEVICE_TYPE read Get_type_ write Set_type_;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLanguage provides a Create and CreateRemote method to          
// create instances of the default interface _Language exposed by              
// the CoClass Language. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLanguage = class
    class function Create: _Language;
    class function CreateRemote(const MachineName: string): _Language;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLanguage
// Help String      : SQLDMO Language
// Default Interface: _Language
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLanguageProperties= class;
{$ENDIF}
  TLanguage = class(TOleServer)
  private
    FIntf:        _Language;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLanguageProperties;
    function      GetServerProperties: TLanguageProperties;
{$ENDIF}
    function      GetDefaultInterface: _Language;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_ID: Integer;
    function Get_Upgrade: Integer;
    function Get_Alias: WideString;
    procedure Set_Alias(const pRetVal: WideString);
    function Get_Months: WideString;
    function Get_ShortMonths: WideString;
    function Get_Days: WideString;
    function Get_LangDateFormat: WideString;
    function Get_FirstDayOfWeek: SYSINT;
    function Get_Month(Month: SYSINT): WideString;
    function Get_ShortMonth(Month: SYSINT): WideString;
    function Get_Day(Day: SYSINT): WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Language);
    procedure Disconnect; override;
    property DefaultInterface: _Language read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property ID: Integer read Get_ID;
    property Upgrade: Integer read Get_Upgrade;
    property Alias: WideString read Get_Alias write Set_Alias;
    property Months: WideString read Get_Months;
    property ShortMonths: WideString read Get_ShortMonths;
    property Days: WideString read Get_Days;
    property LangDateFormat: WideString read Get_LangDateFormat;
    property FirstDayOfWeek: SYSINT read Get_FirstDayOfWeek;
    property Month[Month: SYSINT]: WideString read Get_Month;
    property ShortMonth[Month: SYSINT]: WideString read Get_ShortMonth;
    property Day[Day: SYSINT]: WideString read Get_Day;
    property UserData: Integer read Get_UserData write Set_UserData;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLanguageProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLanguage
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLanguageProperties = class(TPersistent)
  private
    FServer:    TLanguage;
    function    GetDefaultInterface: _Language;
    constructor Create(AServer: TLanguage);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_ID: Integer;
    function Get_Upgrade: Integer;
    function Get_Alias: WideString;
    procedure Set_Alias(const pRetVal: WideString);
    function Get_Months: WideString;
    function Get_ShortMonths: WideString;
    function Get_Days: WideString;
    function Get_LangDateFormat: WideString;
    function Get_FirstDayOfWeek: SYSINT;
    function Get_Month(Month: SYSINT): WideString;
    function Get_ShortMonth(Month: SYSINT): WideString;
    function Get_Day(Day: SYSINT): WideString;
  public
    property DefaultInterface: _Language read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRemoteLogin provides a Create and CreateRemote method to          
// create instances of the default interface _RemoteLogin exposed by              
// the CoClass RemoteLogin. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRemoteLogin = class
    class function Create: _RemoteLogin;
    class function CreateRemote(const MachineName: string): _RemoteLogin;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRemoteLogin
// Help String      : SQLDMO RemoteLogin
// Default Interface: _RemoteLogin
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRemoteLoginProperties= class;
{$ENDIF}
  TRemoteLogin = class(TOleServer)
  private
    FIntf:        _RemoteLogin;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRemoteLoginProperties;
    function      GetServerProperties: TRemoteLoginProperties;
{$ENDIF}
    function      GetDefaultInterface: _RemoteLogin;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_LocalName: WideString;
    procedure Set_LocalName(const pRetVal: WideString);
    function Get_RemoteName: WideString;
    procedure Set_RemoteName(const pRetVal: WideString);
    function Get_Trusted: WordBool;
    procedure Set_Trusted(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RemoteLogin);
    procedure Disconnect; override;
    procedure Remove;
    property DefaultInterface: _RemoteLogin read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property RemoteName: WideString read Get_RemoteName write Set_RemoteName;
    property Trusted: WordBool read Get_Trusted write Set_Trusted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRemoteLoginProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRemoteLogin
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRemoteLoginProperties = class(TPersistent)
  private
    FServer:    TRemoteLogin;
    function    GetDefaultInterface: _RemoteLogin;
    constructor Create(AServer: TRemoteLogin);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_LocalName: WideString;
    procedure Set_LocalName(const pRetVal: WideString);
    function Get_RemoteName: WideString;
    procedure Set_RemoteName(const pRetVal: WideString);
    function Get_Trusted: WordBool;
    procedure Set_Trusted(pRetVal: WordBool);
  public
    property DefaultInterface: _RemoteLogin read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property LocalName: WideString read Get_LocalName write Set_LocalName;
    property RemoteName: WideString read Get_RemoteName write Set_RemoteName;
    property Trusted: WordBool read Get_Trusted write Set_Trusted;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRemoteServer provides a Create and CreateRemote method to          
// create instances of the default interface _RemoteServer exposed by              
// the CoClass RemoteServer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRemoteServer = class
    class function Create: _RemoteServer;
    class function CreateRemote(const MachineName: string): _RemoteServer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRemoteServer
// Help String      : SQLDMO RemoteServer
// Default Interface: _RemoteServer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRemoteServerProperties= class;
{$ENDIF}
  TRemoteServer = class(TOleServer)
  private
    FIntf:        _RemoteServer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRemoteServerProperties;
    function      GetServerProperties: TRemoteServerProperties;
{$ENDIF}
    function      GetDefaultInterface: _RemoteServer;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_NetName: WideString;
    procedure Set_NetName(const pRetVal: WideString);
    function Get_RemoteLogins: RemoteLogins;
    function Get_Options: SQLDMO_SRVOPTION_TYPE;
    function Get_TopologyX: Integer;
    function Get_TopologyY: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RemoteServer);
    procedure Disconnect; override;
    procedure Remove;
    procedure ExecuteImmediate(const Command: WideString); overload;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); overload;
    function ExecuteWithResults(const Command: WideString): QueryResults; overload;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; overload;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool);
    procedure SetTopologyXY(X: Integer; Y: Integer);
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults;
    property DefaultInterface: _RemoteServer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property RemoteLogins: RemoteLogins read Get_RemoteLogins;
    property Options: SQLDMO_SRVOPTION_TYPE read Get_Options;
    property TopologyX: Integer read Get_TopologyX;
    property TopologyY: Integer read Get_TopologyY;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property NetName: WideString read Get_NetName write Set_NetName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRemoteServerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRemoteServer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRemoteServerProperties = class(TPersistent)
  private
    FServer:    TRemoteServer;
    function    GetDefaultInterface: _RemoteServer;
    constructor Create(AServer: TRemoteServer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_NetName: WideString;
    procedure Set_NetName(const pRetVal: WideString);
    function Get_RemoteLogins: RemoteLogins;
    function Get_Options: SQLDMO_SRVOPTION_TYPE;
    function Get_TopologyX: Integer;
    function Get_TopologyY: Integer;
  public
    property DefaultInterface: _RemoteServer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property NetName: WideString read Get_NetName write Set_NetName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLogin provides a Create and CreateRemote method to          
// create instances of the default interface _Login exposed by              
// the CoClass Login. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLogin = class
    class function Create: _Login;
    class function CreateRemote(const MachineName: string): _Login;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLogin
// Help String      : SQLDMO Login
// Default Interface: _Login
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLoginProperties= class;
{$ENDIF}
  TLogin = class(TOleServer)
  private
    FIntf:        _Login;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLoginProperties;
    function      GetServerProperties: TLoginProperties;
{$ENDIF}
    function      GetDefaultInterface: _Login;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Language: WideString;
    procedure Set_Language(const pRetVal: WideString);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_type_: SQLDMO_LOGIN_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_LOGIN_TYPE);
    function Get_DenyNTLogin: WordBool;
    procedure Set_DenyNTLogin(pRetVal: WordBool);
    function Get_LanguageAlias: WideString;
    function Get_NTLoginAccessType: SQLDMO_NTACCESS_TYPE;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Login);
    procedure Disconnect; override;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    procedure SetPassword(const OldPassword: WideString; const NewPassword: WideString);
    function EnumDatabaseMappings: QueryResults;
    function ListMembers: NameList;
    function IsMember(const ServerRole: WideString): WordBool;
    function GetUserName(const DatabaseName: WideString): WideString;
    function GetAliasName(const DatabaseName: WideString): WideString;
    property DefaultInterface: _Login read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property LanguageAlias: WideString read Get_LanguageAlias;
    property NTLoginAccessType: SQLDMO_NTACCESS_TYPE read Get_NTLoginAccessType;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Language: WideString read Get_Language write Set_Language;
    property Database: WideString read Get_Database write Set_Database;
    property type_: SQLDMO_LOGIN_TYPE read Get_type_ write Set_type_;
    property DenyNTLogin: WordBool read Get_DenyNTLogin write Set_DenyNTLogin;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLoginProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLogin
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLoginProperties = class(TPersistent)
  private
    FServer:    TLogin;
    function    GetDefaultInterface: _Login;
    constructor Create(AServer: TLogin);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Language: WideString;
    procedure Set_Language(const pRetVal: WideString);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_type_: SQLDMO_LOGIN_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_LOGIN_TYPE);
    function Get_DenyNTLogin: WordBool;
    procedure Set_DenyNTLogin(pRetVal: WordBool);
    function Get_LanguageAlias: WideString;
    function Get_NTLoginAccessType: SQLDMO_NTACCESS_TYPE;
  public
    property DefaultInterface: _Login read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Language: WideString read Get_Language write Set_Language;
    property Database: WideString read Get_Database write Set_Database;
    property type_: SQLDMO_LOGIN_TYPE read Get_type_ write Set_type_;
    property DenyNTLogin: WordBool read Get_DenyNTLogin write Set_DenyNTLogin;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOperator provides a Create and CreateRemote method to          
// create instances of the default interface _Operator exposed by              
// the CoClass Operator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOperator = class
    class function Create: _Operator;
    class function CreateRemote(const MachineName: string): _Operator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOperator
// Help String      : SQLDMO Operator
// Default Interface: _Operator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOperatorProperties= class;
{$ENDIF}
  TOperator = class(TOleServer)
  private
    FIntf:        _Operator;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOperatorProperties;
    function      GetServerProperties: TOperatorProperties;
{$ENDIF}
    function      GetDefaultInterface: _Operator;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_EmailAddress: WideString;
    procedure Set_EmailAddress(const pRetVal: WideString);
    function Get_LastEmailDate: TDateTime;
    function Get_PagerAddress: WideString;
    procedure Set_PagerAddress(const pRetVal: WideString);
    function Get_LastPageDate: TDateTime;
    function Get_WeekdayPagerStartTime: TDateTime;
    procedure Set_WeekdayPagerStartTime(pRetVal: TDateTime);
    function Get_WeekdayPagerEndTime: TDateTime;
    procedure Set_WeekdayPagerEndTime(pRetVal: TDateTime);
    function Get_SaturdayPagerStartTime: TDateTime;
    procedure Set_SaturdayPagerStartTime(pRetVal: TDateTime);
    function Get_SaturdayPagerEndTime: TDateTime;
    procedure Set_SaturdayPagerEndTime(pRetVal: TDateTime);
    function Get_SundayPagerStartTime: TDateTime;
    procedure Set_SundayPagerStartTime(pRetVal: TDateTime);
    function Get_SundayPagerEndTime: TDateTime;
    procedure Set_SundayPagerEndTime(pRetVal: TDateTime);
    function Get_PagerDays: SQLDMO_WEEKDAY_TYPE;
    procedure Set_PagerDays(pRetVal: SQLDMO_WEEKDAY_TYPE);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_NetSendAddress: WideString;
    procedure Set_NetSendAddress(const pRetVal: WideString);
    function Get_LastNetSendDate: Integer;
    function Get_LastNetSendTime: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Operator);
    procedure Disconnect; override;
    procedure AddNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
    procedure UpdateNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
    procedure RemoveNotification(const AlertName: WideString);
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE): QueryResults; overload;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE; AlertName: OleVariant): QueryResults; overload;
    procedure Remove; overload;
    procedure Remove(NewName: OleVariant); overload;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumJobNotifications: QueryResults;
    property DefaultInterface: _Operator read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property LastEmailDate: TDateTime read Get_LastEmailDate;
    property LastPageDate: TDateTime read Get_LastPageDate;
    property LastNetSendDate: Integer read Get_LastNetSendDate;
    property LastNetSendTime: Integer read Get_LastNetSendTime;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property EmailAddress: WideString read Get_EmailAddress write Set_EmailAddress;
    property PagerAddress: WideString read Get_PagerAddress write Set_PagerAddress;
    property WeekdayPagerStartTime: TDateTime read Get_WeekdayPagerStartTime write Set_WeekdayPagerStartTime;
    property WeekdayPagerEndTime: TDateTime read Get_WeekdayPagerEndTime write Set_WeekdayPagerEndTime;
    property SaturdayPagerStartTime: TDateTime read Get_SaturdayPagerStartTime write Set_SaturdayPagerStartTime;
    property SaturdayPagerEndTime: TDateTime read Get_SaturdayPagerEndTime write Set_SaturdayPagerEndTime;
    property SundayPagerStartTime: TDateTime read Get_SundayPagerStartTime write Set_SundayPagerStartTime;
    property SundayPagerEndTime: TDateTime read Get_SundayPagerEndTime write Set_SundayPagerEndTime;
    property PagerDays: SQLDMO_WEEKDAY_TYPE read Get_PagerDays write Set_PagerDays;
    property Category: WideString read Get_Category write Set_Category;
    property NetSendAddress: WideString read Get_NetSendAddress write Set_NetSendAddress;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOperatorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOperator
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOperatorProperties = class(TPersistent)
  private
    FServer:    TOperator;
    function    GetDefaultInterface: _Operator;
    constructor Create(AServer: TOperator);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_EmailAddress: WideString;
    procedure Set_EmailAddress(const pRetVal: WideString);
    function Get_LastEmailDate: TDateTime;
    function Get_PagerAddress: WideString;
    procedure Set_PagerAddress(const pRetVal: WideString);
    function Get_LastPageDate: TDateTime;
    function Get_WeekdayPagerStartTime: TDateTime;
    procedure Set_WeekdayPagerStartTime(pRetVal: TDateTime);
    function Get_WeekdayPagerEndTime: TDateTime;
    procedure Set_WeekdayPagerEndTime(pRetVal: TDateTime);
    function Get_SaturdayPagerStartTime: TDateTime;
    procedure Set_SaturdayPagerStartTime(pRetVal: TDateTime);
    function Get_SaturdayPagerEndTime: TDateTime;
    procedure Set_SaturdayPagerEndTime(pRetVal: TDateTime);
    function Get_SundayPagerStartTime: TDateTime;
    procedure Set_SundayPagerStartTime(pRetVal: TDateTime);
    function Get_SundayPagerEndTime: TDateTime;
    procedure Set_SundayPagerEndTime(pRetVal: TDateTime);
    function Get_PagerDays: SQLDMO_WEEKDAY_TYPE;
    procedure Set_PagerDays(pRetVal: SQLDMO_WEEKDAY_TYPE);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_NetSendAddress: WideString;
    procedure Set_NetSendAddress(const pRetVal: WideString);
    function Get_LastNetSendDate: Integer;
    function Get_LastNetSendTime: Integer;
  public
    property DefaultInterface: _Operator read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property EmailAddress: WideString read Get_EmailAddress write Set_EmailAddress;
    property PagerAddress: WideString read Get_PagerAddress write Set_PagerAddress;
    property WeekdayPagerStartTime: TDateTime read Get_WeekdayPagerStartTime write Set_WeekdayPagerStartTime;
    property WeekdayPagerEndTime: TDateTime read Get_WeekdayPagerEndTime write Set_WeekdayPagerEndTime;
    property SaturdayPagerStartTime: TDateTime read Get_SaturdayPagerStartTime write Set_SaturdayPagerStartTime;
    property SaturdayPagerEndTime: TDateTime read Get_SaturdayPagerEndTime write Set_SaturdayPagerEndTime;
    property SundayPagerStartTime: TDateTime read Get_SundayPagerStartTime write Set_SundayPagerStartTime;
    property SundayPagerEndTime: TDateTime read Get_SundayPagerEndTime write Set_SundayPagerEndTime;
    property PagerDays: SQLDMO_WEEKDAY_TYPE read Get_PagerDays write Set_PagerDays;
    property Category: WideString read Get_Category write Set_Category;
    property NetSendAddress: WideString read Get_NetSendAddress write Set_NetSendAddress;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAlert provides a Create and CreateRemote method to          
// create instances of the default interface _Alert exposed by              
// the CoClass Alert. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAlert = class
    class function Create: _Alert;
    class function CreateRemote(const MachineName: string): _Alert;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAlert
// Help String      : SQLDMO Alert
// Default Interface: _Alert
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAlertProperties= class;
{$ENDIF}
  TAlert = class(TOleServer)
  private
    FIntf:        _Alert;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAlertProperties;
    function      GetServerProperties: TAlertProperties;
{$ENDIF}
    function      GetDefaultInterface: _Alert;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_EventSource: WideString;
    function Get_EventCategoryID: Integer;
    function Get_EventID: Integer;
    function Get_MessageID: Integer;
    procedure Set_MessageID(pRetVal: Integer);
    function Get_Severity: Integer;
    procedure Set_Severity(pRetVal: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_DelayBetweenResponses: Integer;
    procedure Set_DelayBetweenResponses(pRetVal: Integer);
    function Get_LastOccurrenceDate: TDateTime;
    procedure Set_LastOccurrenceDate(pRetVal: TDateTime);
    function Get_LastResponseDate: TDateTime;
    procedure Set_LastResponseDate(pRetVal: TDateTime);
    function Get_NotificationMessage: WideString;
    procedure Set_NotificationMessage(const pRetVal: WideString);
    function Get_IncludeEventDescription: SQLDMO_NOTIFY_TYPE;
    procedure Set_IncludeEventDescription(pRetVal: SQLDMO_NOTIFY_TYPE);
    function Get_DatabaseName: WideString;
    procedure Set_DatabaseName(const pRetVal: WideString);
    function Get_EventDescriptionKeyword: WideString;
    procedure Set_EventDescriptionKeyword(const pRetVal: WideString);
    function Get_OccurrenceCount: Integer;
    function Get_CountResetDate: TDateTime;
    function Get_JobName: WideString;
    function Get_HasNotification: Integer;
    function Get_RaiseSNMPTrap: WordBool;
    procedure Set_RaiseSNMPTrap(pRetVal: WordBool);
    function Get_PerformanceCondition: WideString;
    procedure Set_PerformanceCondition(const pRetVal: WideString);
    function Get_JobID: WideString;
    procedure Set_JobID(const pRetVal: WideString);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_type_: SQLDMO_ALERT_TYPE;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Alert);
    procedure Disconnect; override;
    procedure AddNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
    procedure UpdateNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
    procedure RemoveNotification(const OperatorName: WideString);
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE): QueryResults; overload;
    function EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                               OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE; OperatorName: OleVariant): QueryResults; overload;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    procedure ResetOccurrenceCount;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    property DefaultInterface: _Alert read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property EventSource: WideString read Get_EventSource;
    property EventCategoryID: Integer read Get_EventCategoryID;
    property EventID: Integer read Get_EventID;
    property OccurrenceCount: Integer read Get_OccurrenceCount;
    property CountResetDate: TDateTime read Get_CountResetDate;
    property JobName: WideString read Get_JobName;
    property HasNotification: Integer read Get_HasNotification;
    property RaiseSNMPTrap: WordBool read Get_RaiseSNMPTrap write Set_RaiseSNMPTrap;
    property type_: SQLDMO_ALERT_TYPE read Get_type_;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property MessageID: Integer read Get_MessageID write Set_MessageID;
    property Severity: Integer read Get_Severity write Set_Severity;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DelayBetweenResponses: Integer read Get_DelayBetweenResponses write Set_DelayBetweenResponses;
    property LastOccurrenceDate: TDateTime read Get_LastOccurrenceDate write Set_LastOccurrenceDate;
    property LastResponseDate: TDateTime read Get_LastResponseDate write Set_LastResponseDate;
    property NotificationMessage: WideString read Get_NotificationMessage write Set_NotificationMessage;
    property IncludeEventDescription: SQLDMO_NOTIFY_TYPE read Get_IncludeEventDescription write Set_IncludeEventDescription;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property EventDescriptionKeyword: WideString read Get_EventDescriptionKeyword write Set_EventDescriptionKeyword;
    property PerformanceCondition: WideString read Get_PerformanceCondition write Set_PerformanceCondition;
    property JobID: WideString read Get_JobID write Set_JobID;
    property Category: WideString read Get_Category write Set_Category;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAlertProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAlert
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAlertProperties = class(TPersistent)
  private
    FServer:    TAlert;
    function    GetDefaultInterface: _Alert;
    constructor Create(AServer: TAlert);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_EventSource: WideString;
    function Get_EventCategoryID: Integer;
    function Get_EventID: Integer;
    function Get_MessageID: Integer;
    procedure Set_MessageID(pRetVal: Integer);
    function Get_Severity: Integer;
    procedure Set_Severity(pRetVal: Integer);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_DelayBetweenResponses: Integer;
    procedure Set_DelayBetweenResponses(pRetVal: Integer);
    function Get_LastOccurrenceDate: TDateTime;
    procedure Set_LastOccurrenceDate(pRetVal: TDateTime);
    function Get_LastResponseDate: TDateTime;
    procedure Set_LastResponseDate(pRetVal: TDateTime);
    function Get_NotificationMessage: WideString;
    procedure Set_NotificationMessage(const pRetVal: WideString);
    function Get_IncludeEventDescription: SQLDMO_NOTIFY_TYPE;
    procedure Set_IncludeEventDescription(pRetVal: SQLDMO_NOTIFY_TYPE);
    function Get_DatabaseName: WideString;
    procedure Set_DatabaseName(const pRetVal: WideString);
    function Get_EventDescriptionKeyword: WideString;
    procedure Set_EventDescriptionKeyword(const pRetVal: WideString);
    function Get_OccurrenceCount: Integer;
    function Get_CountResetDate: TDateTime;
    function Get_JobName: WideString;
    function Get_HasNotification: Integer;
    function Get_RaiseSNMPTrap: WordBool;
    procedure Set_RaiseSNMPTrap(pRetVal: WordBool);
    function Get_PerformanceCondition: WideString;
    procedure Set_PerformanceCondition(const pRetVal: WideString);
    function Get_JobID: WideString;
    procedure Set_JobID(const pRetVal: WideString);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_type_: SQLDMO_ALERT_TYPE;
  public
    property DefaultInterface: _Alert read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property MessageID: Integer read Get_MessageID write Set_MessageID;
    property Severity: Integer read Get_Severity write Set_Severity;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DelayBetweenResponses: Integer read Get_DelayBetweenResponses write Set_DelayBetweenResponses;
    property LastOccurrenceDate: TDateTime read Get_LastOccurrenceDate write Set_LastOccurrenceDate;
    property LastResponseDate: TDateTime read Get_LastResponseDate write Set_LastResponseDate;
    property NotificationMessage: WideString read Get_NotificationMessage write Set_NotificationMessage;
    property IncludeEventDescription: SQLDMO_NOTIFY_TYPE read Get_IncludeEventDescription write Set_IncludeEventDescription;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property EventDescriptionKeyword: WideString read Get_EventDescriptionKeyword write Set_EventDescriptionKeyword;
    property PerformanceCondition: WideString read Get_PerformanceCondition write Set_PerformanceCondition;
    property JobID: WideString read Get_JobID write Set_JobID;
    property Category: WideString read Get_Category write Set_Category;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJob provides a Create and CreateRemote method to          
// create instances of the default interface _Job exposed by              
// the CoClass Job. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJob = class
    class function Create: _Job;
    class function CreateRemote(const MachineName: string): _Job;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJob
// Help String      : SQLDMO Job
// Default Interface: _Job
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobProperties= class;
{$ENDIF}
  TJob = class(TOleServer)
  private
    FIntf:        _Job;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobProperties;
    function      GetServerProperties: TJobProperties;
{$ENDIF}
    function      GetDefaultInterface: _Job;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_JobSteps: JobSteps;
    function Get_JobID: WideString;
    function Get_OriginatingServer: WideString;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_StartStepID: Integer;
    procedure Set_StartStepID(pRetVal: Integer);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_EventlogLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_EventlogLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_EmailLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_EmailLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_OperatorToEmail: WideString;
    procedure Set_OperatorToEmail(const pRetVal: WideString);
    function Get_DateCreated: WideString;
    function Get_DateLastModified: WideString;
    function Get_LastRunDate: Integer;
    function Get_LastRunTime: Integer;
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
    function Get_CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS;
    function Get_CurrentRunStep: WideString;
    function Get_NetSendLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_NetSendLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_DeleteLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_DeleteLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_HasStep: WordBool;
    function Get_HasServer: WordBool;
    function Get_type_: SQLDMO_JOB_TYPE;
    function Get_JobSchedules: JobSchedules;
    function Get_HasSchedule: WordBool;
    function Get_VersionNumber: Integer;
    function Get_NextRunDate: Integer;
    function Get_NextRunTime: Integer;
    function Get_CurrentRunRetryAttempt: Integer;
    function Get_NextRunScheduleID: Integer;
    function Get_PageLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_PageLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_OperatorToNetSend: WideString;
    procedure Set_OperatorToNetSend(const pRetVal: WideString);
    function Get_OperatorToPage: WideString;
    procedure Set_OperatorToPage(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Job);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    procedure ApplyToTargetServer(const Val: WideString);
    procedure RemoveFromTargetServer(const Val: WideString);
    function EnumTargetServers: QueryResults;
    procedure ApplyToTargetServerGroup(const Val: WideString);
    function EnumHistory: QueryResults; overload;
    function EnumHistory(JobHistoryFilter: OleVariant): QueryResults; overload;
    procedure PurgeHistory;
    procedure Invoke_;
    procedure AddStepToJob(const JobStep: JobStep);
    procedure RemoveFromTargetServerGroup(const Val: WideString);
    procedure RemoveAllJobSteps;
    procedure Start; overload;
    procedure Start(Val: OleVariant); overload;
    procedure Stop;
    procedure RemoveAllJobSchedules;
    function EnumAlerts: QueryResults;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    property DefaultInterface: _Job read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property JobSteps: JobSteps read Get_JobSteps;
    property JobID: WideString read Get_JobID;
    property OriginatingServer: WideString read Get_OriginatingServer;
    property DateCreated: WideString read Get_DateCreated;
    property DateLastModified: WideString read Get_DateLastModified;
    property LastRunDate: Integer read Get_LastRunDate;
    property LastRunTime: Integer read Get_LastRunTime;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE read Get_LastRunOutcome;
    property CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS read Get_CurrentRunStatus;
    property CurrentRunStep: WideString read Get_CurrentRunStep;
    property HasStep: WordBool read Get_HasStep;
    property HasServer: WordBool read Get_HasServer;
    property type_: SQLDMO_JOB_TYPE read Get_type_;
    property JobSchedules: JobSchedules read Get_JobSchedules;
    property HasSchedule: WordBool read Get_HasSchedule;
    property VersionNumber: Integer read Get_VersionNumber;
    property NextRunDate: Integer read Get_NextRunDate;
    property NextRunTime: Integer read Get_NextRunTime;
    property CurrentRunRetryAttempt: Integer read Get_CurrentRunRetryAttempt;
    property NextRunScheduleID: Integer read Get_NextRunScheduleID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property StartStepID: Integer read Get_StartStepID write Set_StartStepID;
    property Description: WideString read Get_Description write Set_Description;
    property Category: WideString read Get_Category write Set_Category;
    property Owner: WideString read Get_Owner write Set_Owner;
    property EventlogLevel: SQLDMO_COMPLETION_TYPE read Get_EventlogLevel write Set_EventlogLevel;
    property EmailLevel: SQLDMO_COMPLETION_TYPE read Get_EmailLevel write Set_EmailLevel;
    property OperatorToEmail: WideString read Get_OperatorToEmail write Set_OperatorToEmail;
    property NetSendLevel: SQLDMO_COMPLETION_TYPE read Get_NetSendLevel write Set_NetSendLevel;
    property DeleteLevel: SQLDMO_COMPLETION_TYPE read Get_DeleteLevel write Set_DeleteLevel;
    property PageLevel: SQLDMO_COMPLETION_TYPE read Get_PageLevel write Set_PageLevel;
    property OperatorToNetSend: WideString read Get_OperatorToNetSend write Set_OperatorToNetSend;
    property OperatorToPage: WideString read Get_OperatorToPage write Set_OperatorToPage;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJob
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobProperties = class(TPersistent)
  private
    FServer:    TJob;
    function    GetDefaultInterface: _Job;
    constructor Create(AServer: TJob);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_JobSteps: JobSteps;
    function Get_JobID: WideString;
    function Get_OriginatingServer: WideString;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_StartStepID: Integer;
    procedure Set_StartStepID(pRetVal: Integer);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Category: WideString;
    procedure Set_Category(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_EventlogLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_EventlogLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_EmailLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_EmailLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_OperatorToEmail: WideString;
    procedure Set_OperatorToEmail(const pRetVal: WideString);
    function Get_DateCreated: WideString;
    function Get_DateLastModified: WideString;
    function Get_LastRunDate: Integer;
    function Get_LastRunTime: Integer;
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
    function Get_CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS;
    function Get_CurrentRunStep: WideString;
    function Get_NetSendLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_NetSendLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_DeleteLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_DeleteLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_HasStep: WordBool;
    function Get_HasServer: WordBool;
    function Get_type_: SQLDMO_JOB_TYPE;
    function Get_JobSchedules: JobSchedules;
    function Get_HasSchedule: WordBool;
    function Get_VersionNumber: Integer;
    function Get_NextRunDate: Integer;
    function Get_NextRunTime: Integer;
    function Get_CurrentRunRetryAttempt: Integer;
    function Get_NextRunScheduleID: Integer;
    function Get_PageLevel: SQLDMO_COMPLETION_TYPE;
    procedure Set_PageLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
    function Get_OperatorToNetSend: WideString;
    procedure Set_OperatorToNetSend(const pRetVal: WideString);
    function Get_OperatorToPage: WideString;
    procedure Set_OperatorToPage(const pRetVal: WideString);
  public
    property DefaultInterface: _Job read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property StartStepID: Integer read Get_StartStepID write Set_StartStepID;
    property Description: WideString read Get_Description write Set_Description;
    property Category: WideString read Get_Category write Set_Category;
    property Owner: WideString read Get_Owner write Set_Owner;
    property EventlogLevel: SQLDMO_COMPLETION_TYPE read Get_EventlogLevel write Set_EventlogLevel;
    property EmailLevel: SQLDMO_COMPLETION_TYPE read Get_EmailLevel write Set_EmailLevel;
    property OperatorToEmail: WideString read Get_OperatorToEmail write Set_OperatorToEmail;
    property NetSendLevel: SQLDMO_COMPLETION_TYPE read Get_NetSendLevel write Set_NetSendLevel;
    property DeleteLevel: SQLDMO_COMPLETION_TYPE read Get_DeleteLevel write Set_DeleteLevel;
    property PageLevel: SQLDMO_COMPLETION_TYPE read Get_PageLevel write Set_PageLevel;
    property OperatorToNetSend: WideString read Get_OperatorToNetSend write Set_OperatorToNetSend;
    property OperatorToPage: WideString read Get_OperatorToPage write Set_OperatorToPage;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJobStep provides a Create and CreateRemote method to          
// create instances of the default interface _JobStep exposed by              
// the CoClass JobStep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJobStep = class
    class function Create: _JobStep;
    class function CreateRemote(const MachineName: string): _JobStep;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJobStep
// Help String      : SQLDMO JobStep
// Default Interface: _JobStep
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobStepProperties= class;
{$ENDIF}
  TJobStep = class(TOleServer)
  private
    FIntf:        _JobStep;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobStepProperties;
    function      GetServerProperties: TJobStepProperties;
{$ENDIF}
    function      GetDefaultInterface: _JobStep;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_StepID: Integer;
    procedure Set_StepID(pRetVal: Integer);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SubSystem: WideString;
    procedure Set_SubSystem(const pRetVal: WideString);
    function Get_Command: WideString;
    procedure Set_Command(const pRetVal: WideString);
    function Get_Flags: Integer;
    procedure Set_Flags(pRetVal: Integer);
    function Get_AdditionalParameters: WideString;
    procedure Set_AdditionalParameters(const pRetVal: WideString);
    function Get_CmdExecSuccessCode: Integer;
    procedure Set_CmdExecSuccessCode(pRetVal: Integer);
    function Get_OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE;
    procedure Set_OnSuccessAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
    function Get_OnSuccessStep: Integer;
    procedure Set_OnSuccessStep(pRetVal: Integer);
    function Get_OnFailAction: SQLDMO_JOBSTEPACTION_TYPE;
    procedure Set_OnFailAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
    function Get_OnFailStep: Integer;
    procedure Set_OnFailStep(pRetVal: Integer);
    function Get_Server: WideString;
    procedure Set_Server(const pRetVal: WideString);
    function Get_DatabaseName: WideString;
    procedure Set_DatabaseName(const pRetVal: WideString);
    function Get_DatabaseUserName: WideString;
    procedure Set_DatabaseUserName(const pRetVal: WideString);
    function Get_RetryAttempts: Integer;
    procedure Set_RetryAttempts(pRetVal: Integer);
    function Get_RetryInterval: Integer;
    procedure Set_RetryInterval(pRetVal: Integer);
    function Get_OSRunPriority: SQLDMO_RUNPRIORITY_TYPE;
    procedure Set_OSRunPriority(pRetVal: SQLDMO_RUNPRIORITY_TYPE);
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
    function Get_LastRunDuration: Integer;
    function Get_LastRunRetries: Integer;
    function Get_LastRunDate: Integer;
    function Get_LastRunTime: Integer;
    function Get_OutputFileName: WideString;
    procedure Set_OutputFileName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JobStep);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    property DefaultInterface: _JobStep read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE read Get_LastRunOutcome;
    property LastRunDuration: Integer read Get_LastRunDuration;
    property LastRunRetries: Integer read Get_LastRunRetries;
    property LastRunDate: Integer read Get_LastRunDate;
    property LastRunTime: Integer read Get_LastRunTime;
    property UserData: Integer read Get_UserData write Set_UserData;
    property StepID: Integer read Get_StepID write Set_StepID;
    property Name: WideString read Get_Name write Set_Name;
    property SubSystem: WideString read Get_SubSystem write Set_SubSystem;
    property Command: WideString read Get_Command write Set_Command;
    property Flags: Integer read Get_Flags write Set_Flags;
    property AdditionalParameters: WideString read Get_AdditionalParameters write Set_AdditionalParameters;
    property CmdExecSuccessCode: Integer read Get_CmdExecSuccessCode write Set_CmdExecSuccessCode;
    property OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnSuccessAction write Set_OnSuccessAction;
    property OnSuccessStep: Integer read Get_OnSuccessStep write Set_OnSuccessStep;
    property OnFailAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnFailAction write Set_OnFailAction;
    property OnFailStep: Integer read Get_OnFailStep write Set_OnFailStep;
    property Server: WideString read Get_Server write Set_Server;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property DatabaseUserName: WideString read Get_DatabaseUserName write Set_DatabaseUserName;
    property RetryAttempts: Integer read Get_RetryAttempts write Set_RetryAttempts;
    property RetryInterval: Integer read Get_RetryInterval write Set_RetryInterval;
    property OSRunPriority: SQLDMO_RUNPRIORITY_TYPE read Get_OSRunPriority write Set_OSRunPriority;
    property OutputFileName: WideString read Get_OutputFileName write Set_OutputFileName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobStepProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJobStep
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobStepProperties = class(TPersistent)
  private
    FServer:    TJobStep;
    function    GetDefaultInterface: _JobStep;
    constructor Create(AServer: TJobStep);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_StepID: Integer;
    procedure Set_StepID(pRetVal: Integer);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SubSystem: WideString;
    procedure Set_SubSystem(const pRetVal: WideString);
    function Get_Command: WideString;
    procedure Set_Command(const pRetVal: WideString);
    function Get_Flags: Integer;
    procedure Set_Flags(pRetVal: Integer);
    function Get_AdditionalParameters: WideString;
    procedure Set_AdditionalParameters(const pRetVal: WideString);
    function Get_CmdExecSuccessCode: Integer;
    procedure Set_CmdExecSuccessCode(pRetVal: Integer);
    function Get_OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE;
    procedure Set_OnSuccessAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
    function Get_OnSuccessStep: Integer;
    procedure Set_OnSuccessStep(pRetVal: Integer);
    function Get_OnFailAction: SQLDMO_JOBSTEPACTION_TYPE;
    procedure Set_OnFailAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
    function Get_OnFailStep: Integer;
    procedure Set_OnFailStep(pRetVal: Integer);
    function Get_Server: WideString;
    procedure Set_Server(const pRetVal: WideString);
    function Get_DatabaseName: WideString;
    procedure Set_DatabaseName(const pRetVal: WideString);
    function Get_DatabaseUserName: WideString;
    procedure Set_DatabaseUserName(const pRetVal: WideString);
    function Get_RetryAttempts: Integer;
    procedure Set_RetryAttempts(pRetVal: Integer);
    function Get_RetryInterval: Integer;
    procedure Set_RetryInterval(pRetVal: Integer);
    function Get_OSRunPriority: SQLDMO_RUNPRIORITY_TYPE;
    procedure Set_OSRunPriority(pRetVal: SQLDMO_RUNPRIORITY_TYPE);
    function Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
    function Get_LastRunDuration: Integer;
    function Get_LastRunRetries: Integer;
    function Get_LastRunDate: Integer;
    function Get_LastRunTime: Integer;
    function Get_OutputFileName: WideString;
    procedure Set_OutputFileName(const pRetVal: WideString);
  public
    property DefaultInterface: _JobStep read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property StepID: Integer read Get_StepID write Set_StepID;
    property Name: WideString read Get_Name write Set_Name;
    property SubSystem: WideString read Get_SubSystem write Set_SubSystem;
    property Command: WideString read Get_Command write Set_Command;
    property Flags: Integer read Get_Flags write Set_Flags;
    property AdditionalParameters: WideString read Get_AdditionalParameters write Set_AdditionalParameters;
    property CmdExecSuccessCode: Integer read Get_CmdExecSuccessCode write Set_CmdExecSuccessCode;
    property OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnSuccessAction write Set_OnSuccessAction;
    property OnSuccessStep: Integer read Get_OnSuccessStep write Set_OnSuccessStep;
    property OnFailAction: SQLDMO_JOBSTEPACTION_TYPE read Get_OnFailAction write Set_OnFailAction;
    property OnFailStep: Integer read Get_OnFailStep write Set_OnFailStep;
    property Server: WideString read Get_Server write Set_Server;
    property DatabaseName: WideString read Get_DatabaseName write Set_DatabaseName;
    property DatabaseUserName: WideString read Get_DatabaseUserName write Set_DatabaseUserName;
    property RetryAttempts: Integer read Get_RetryAttempts write Set_RetryAttempts;
    property RetryInterval: Integer read Get_RetryInterval write Set_RetryInterval;
    property OSRunPriority: SQLDMO_RUNPRIORITY_TYPE read Get_OSRunPriority write Set_OSRunPriority;
    property OutputFileName: WideString read Get_OutputFileName write Set_OutputFileName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoJobSchedule provides a Create and CreateRemote method to          
// create instances of the default interface _JobSchedule exposed by              
// the CoClass JobSchedule. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJobSchedule = class
    class function Create: _JobSchedule;
    class function CreateRemote(const MachineName: string): _JobSchedule;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TJobSchedule
// Help String      : SQLDMO JobSchedule
// Default Interface: _JobSchedule
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TJobScheduleProperties= class;
{$ENDIF}
  TJobSchedule = class(TOleServer)
  private
    FIntf:        _JobSchedule;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TJobScheduleProperties;
    function      GetServerProperties: TJobScheduleProperties;
{$ENDIF}
    function      GetDefaultInterface: _JobSchedule;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_Schedule: Schedule;
    function Get_DateCreated: WideString;
    function Get_ScheduleID: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _JobSchedule);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    property DefaultInterface: _JobSchedule read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Schedule: Schedule read Get_Schedule;
    property DateCreated: WideString read Get_DateCreated;
    property ScheduleID: Integer read Get_ScheduleID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TJobScheduleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TJobSchedule
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TJobScheduleProperties = class(TPersistent)
  private
    FServer:    TJobSchedule;
    function    GetDefaultInterface: _JobSchedule;
    constructor Create(AServer: TJobSchedule);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_Schedule: Schedule;
    function Get_DateCreated: WideString;
    function Get_ScheduleID: Integer;
  public
    property DefaultInterface: _JobSchedule read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTargetServer provides a Create and CreateRemote method to          
// create instances of the default interface _TargetServer exposed by              
// the CoClass TargetServer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTargetServer = class
    class function Create: _TargetServer;
    class function CreateRemote(const MachineName: string): _TargetServer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTargetServer
// Help String      : SQLDMO TargetServer
// Default Interface: _TargetServer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTargetServerProperties= class;
{$ENDIF}
  TTargetServer = class(TOleServer)
  private
    FIntf:        _TargetServer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTargetServerProperties;
    function      GetServerProperties: TTargetServerProperties;
{$ENDIF}
    function      GetDefaultInterface: _TargetServer;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_ServerID: Integer;
    function Get_ServerName: WideString;
    function Get_EnlistDate: WideString;
    function Get_LastPollDate: WideString;
    function Get_Status: Integer;
    function Get_Location: WideString;
    procedure Set_Location(const pRetVal: WideString);
    function Get_TimeZoneAdjustment: Integer;
    function Get_PendingInstructions: Integer;
    function Get_LocalTime: WideString;
    function Get_PollingInterval: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TargetServer);
    procedure Disconnect; override;
    procedure Refresh;
    property DefaultInterface: _TargetServer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ServerID: Integer read Get_ServerID;
    property ServerName: WideString read Get_ServerName;
    property EnlistDate: WideString read Get_EnlistDate;
    property LastPollDate: WideString read Get_LastPollDate;
    property Status: Integer read Get_Status;
    property TimeZoneAdjustment: Integer read Get_TimeZoneAdjustment;
    property PendingInstructions: Integer read Get_PendingInstructions;
    property LocalTime: WideString read Get_LocalTime;
    property PollingInterval: Integer read Get_PollingInterval;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Location: WideString read Get_Location write Set_Location;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTargetServerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTargetServer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTargetServerProperties = class(TPersistent)
  private
    FServer:    TTargetServer;
    function    GetDefaultInterface: _TargetServer;
    constructor Create(AServer: TTargetServer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_ServerID: Integer;
    function Get_ServerName: WideString;
    function Get_EnlistDate: WideString;
    function Get_LastPollDate: WideString;
    function Get_Status: Integer;
    function Get_Location: WideString;
    procedure Set_Location(const pRetVal: WideString);
    function Get_TimeZoneAdjustment: Integer;
    function Get_PendingInstructions: Integer;
    function Get_LocalTime: WideString;
    function Get_PollingInterval: Integer;
  public
    property DefaultInterface: _TargetServer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Location: WideString read Get_Location write Set_Location;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTargetServerGroup provides a Create and CreateRemote method to          
// create instances of the default interface _TargetServerGroup exposed by              
// the CoClass TargetServerGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTargetServerGroup = class
    class function Create: _TargetServerGroup;
    class function CreateRemote(const MachineName: string): _TargetServerGroup;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTargetServerGroup
// Help String      : SQLDMO TargetServerGroup
// Default Interface: _TargetServerGroup
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTargetServerGroupProperties= class;
{$ENDIF}
  TTargetServerGroup = class(TOleServer)
  private
    FIntf:        _TargetServerGroup;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTargetServerGroupProperties;
    function      GetServerProperties: TTargetServerGroupProperties;
{$ENDIF}
    function      GetDefaultInterface: _TargetServerGroup;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_GroupID: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TargetServerGroup);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    function ListMemberServers: NameList;
    procedure AddMemberServer(const Val: WideString);
    procedure RemoveMemberServer(const Val: WideString);
    property DefaultInterface: _TargetServerGroup read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property GroupID: Integer read Get_GroupID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTargetServerGroupProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTargetServerGroup
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTargetServerGroupProperties = class(TPersistent)
  private
    FServer:    TTargetServerGroup;
    function    GetDefaultInterface: _TargetServerGroup;
    constructor Create(AServer: TTargetServerGroup);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_GroupID: Integer;
  public
    property DefaultInterface: _TargetServerGroup read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCategory provides a Create and CreateRemote method to          
// create instances of the default interface _Category exposed by              
// the CoClass Category. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCategory = class
    class function Create: _Category;
    class function CreateRemote(const MachineName: string): _Category;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCategory
// Help String      : SQLDMO Category
// Default Interface: _Category
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCategoryProperties= class;
{$ENDIF}
  TCategory = class(TOleServer)
  private
    FIntf:        _Category;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCategoryProperties;
    function      GetServerProperties: TCategoryProperties;
{$ENDIF}
    function      GetDefaultInterface: _Category;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_type_: SQLDMO_CATEGORYTYPE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_CATEGORYTYPE_TYPE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Category);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure Refresh;
    property DefaultInterface: _Category read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_CATEGORYTYPE_TYPE read Get_type_ write Set_type_;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCategoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCategory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCategoryProperties = class(TPersistent)
  private
    FServer:    TCategory;
    function    GetDefaultInterface: _Category;
    constructor Create(AServer: TCategory);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_type_: SQLDMO_CATEGORYTYPE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_CATEGORYTYPE_TYPE);
  public
    property DefaultInterface: _Category read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_CATEGORYTYPE_TYPE read Get_type_ write Set_type_;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRestore provides a Create and CreateRemote method to          
// create instances of the default interface _Restore exposed by              
// the CoClass Restore. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRestore = class
    class function Create: _Restore;
    class function CreateRemote(const MachineName: string): _Restore;
  end;

  TRestorePercentComplete = procedure(ASender: TObject; const Message: WideString; Percent: Integer) of object;
  TRestoreNextMedia = procedure(ASender: TObject; const Message: WideString) of object;
  TRestoreComplete = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRestore
// Help String      : SQLDMO DB Restore
// Default Interface: _Restore
// Def. Intf. DISP? : No
// Event   Interface: RestoreSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRestoreProperties= class;
{$ENDIF}
  TRestore = class(TOleServer)
  private
    FOnPercentComplete: TRestorePercentComplete;
    FOnNextMedia: TRestoreNextMedia;
    FOnComplete: TRestoreComplete;
    FIntf:        _Restore;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRestoreProperties;
    function      GetServerProperties: TRestoreProperties;
{$ENDIF}
    function      GetDefaultInterface: _Restore;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_PercentCompleteNotification: Integer;
    procedure Set_PercentCompleteNotification(pRetVal: Integer);
    function Get_UnloadTapeAfter: WordBool;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_Devices: WideString;
    procedure Set_Devices(const pRetVal: WideString);
    function Get_Files: WideString;
    procedure Set_Files(const pRetVal: WideString);
    function Get_Tapes: WideString;
    procedure Set_Tapes(const pRetVal: WideString);
    function Get_Pipes: WideString;
    procedure Set_Pipes(const pRetVal: WideString);
    function Get_DatabaseFileGroups: WideString;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString);
    function Get_DatabaseFiles: WideString;
    procedure Set_DatabaseFiles(const pRetVal: WideString);
    function Get_Action: SQLDMO_RESTORE_TYPE;
    procedure Set_Action(pRetVal: SQLDMO_RESTORE_TYPE);
    function Get_BackupSetName: WideString;
    procedure Set_BackupSetName(const pRetVal: WideString);
    function Get_RelocateFiles: WideString;
    procedure Set_RelocateFiles(const pRetVal: WideString);
    function Get_ReplaceDatabase: WordBool;
    procedure Set_ReplaceDatabase(pRetVal: WordBool);
    function Get_LastRestore: WordBool;
    procedure Set_LastRestore(pRetVal: WordBool);
    function Get_Restart: WordBool;
    procedure Set_Restart(pRetVal: WordBool);
    function Get_MediaName: WideString;
    procedure Set_MediaName(const pRetVal: WideString);
    function Get_LoadHistory: WordBool;
    procedure Set_LoadHistory(pRetVal: WordBool);
    function Get_FileNumber: Integer;
    procedure Set_FileNumber(pRetVal: Integer);
    function Get_ToPointInTime: WideString;
    procedure Set_ToPointInTime(const pRetVal: WideString);
    function Get_StandbyFiles: WideString;
    procedure Set_StandbyFiles(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Restore);
    procedure Disconnect; override;
    procedure Abort;
    procedure SQLRestore(const ServerObject: SQLServer);
    procedure SQLVerify(const ServerObject: SQLServer);
    function GenerateSQL: WideString;
    function ReadBackupHeader(const ServerObject: SQLServer): QueryResults;
    function ReadFileList(const ServerObject: SQLServer): QueryResults;
    function ReadMediaHeader(const ServerObject: SQLServer): QueryResults;
    property DefaultInterface: _Restore read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Files: WideString read Get_Files write Set_Files;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_RESTORE_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property RelocateFiles: WideString read Get_RelocateFiles write Set_RelocateFiles;
    property ReplaceDatabase: WordBool read Get_ReplaceDatabase write Set_ReplaceDatabase;
    property LastRestore: WordBool read Get_LastRestore write Set_LastRestore;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property LoadHistory: WordBool read Get_LoadHistory write Set_LoadHistory;
    property FileNumber: Integer read Get_FileNumber write Set_FileNumber;
    property ToPointInTime: WideString read Get_ToPointInTime write Set_ToPointInTime;
    property StandbyFiles: WideString read Get_StandbyFiles write Set_StandbyFiles;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRestoreProperties read GetServerProperties;
{$ENDIF}
    property OnPercentComplete: TRestorePercentComplete read FOnPercentComplete write FOnPercentComplete;
    property OnNextMedia: TRestoreNextMedia read FOnNextMedia write FOnNextMedia;
    property OnComplete: TRestoreComplete read FOnComplete write FOnComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRestore
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRestoreProperties = class(TPersistent)
  private
    FServer:    TRestore;
    function    GetDefaultInterface: _Restore;
    constructor Create(AServer: TRestore);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_PercentCompleteNotification: Integer;
    procedure Set_PercentCompleteNotification(pRetVal: Integer);
    function Get_UnloadTapeAfter: WordBool;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_Devices: WideString;
    procedure Set_Devices(const pRetVal: WideString);
    function Get_Files: WideString;
    procedure Set_Files(const pRetVal: WideString);
    function Get_Tapes: WideString;
    procedure Set_Tapes(const pRetVal: WideString);
    function Get_Pipes: WideString;
    procedure Set_Pipes(const pRetVal: WideString);
    function Get_DatabaseFileGroups: WideString;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString);
    function Get_DatabaseFiles: WideString;
    procedure Set_DatabaseFiles(const pRetVal: WideString);
    function Get_Action: SQLDMO_RESTORE_TYPE;
    procedure Set_Action(pRetVal: SQLDMO_RESTORE_TYPE);
    function Get_BackupSetName: WideString;
    procedure Set_BackupSetName(const pRetVal: WideString);
    function Get_RelocateFiles: WideString;
    procedure Set_RelocateFiles(const pRetVal: WideString);
    function Get_ReplaceDatabase: WordBool;
    procedure Set_ReplaceDatabase(pRetVal: WordBool);
    function Get_LastRestore: WordBool;
    procedure Set_LastRestore(pRetVal: WordBool);
    function Get_Restart: WordBool;
    procedure Set_Restart(pRetVal: WordBool);
    function Get_MediaName: WideString;
    procedure Set_MediaName(const pRetVal: WideString);
    function Get_LoadHistory: WordBool;
    procedure Set_LoadHistory(pRetVal: WordBool);
    function Get_FileNumber: Integer;
    procedure Set_FileNumber(pRetVal: Integer);
    function Get_ToPointInTime: WideString;
    procedure Set_ToPointInTime(const pRetVal: WideString);
    function Get_StandbyFiles: WideString;
    procedure Set_StandbyFiles(const pRetVal: WideString);
  public
    property DefaultInterface: _Restore read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Files: WideString read Get_Files write Set_Files;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_RESTORE_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property RelocateFiles: WideString read Get_RelocateFiles write Set_RelocateFiles;
    property ReplaceDatabase: WordBool read Get_ReplaceDatabase write Set_ReplaceDatabase;
    property LastRestore: WordBool read Get_LastRestore write Set_LastRestore;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property LoadHistory: WordBool read Get_LoadHistory write Set_LoadHistory;
    property FileNumber: Integer read Get_FileNumber write Set_FileNumber;
    property ToPointInTime: WideString read Get_ToPointInTime write Set_ToPointInTime;
    property StandbyFiles: WideString read Get_StandbyFiles write Set_StandbyFiles;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRegisteredSubscriber provides a Create and CreateRemote method to          
// create instances of the default interface _RegisteredSubscriber exposed by              
// the CoClass RegisteredSubscriber. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegisteredSubscriber = class
    class function Create: _RegisteredSubscriber;
    class function CreateRemote(const MachineName: string): _RegisteredSubscriber;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRegisteredSubscriber
// Help String      : SQLDMO RegisteredSubscriber
// Default Interface: _RegisteredSubscriber
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRegisteredSubscriberProperties= class;
{$ENDIF}
  TRegisteredSubscriber = class(TOleServer)
  private
    FIntf:        _RegisteredSubscriber;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRegisteredSubscriberProperties;
    function      GetServerProperties: TRegisteredSubscriberProperties;
{$ENDIF}
    function      GetDefaultInterface: _RegisteredSubscriber;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_type_: SQLDMO_SUBSCRIBER_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_SUBSCRIBER_TYPE);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ReplicationSecurity: ReplicationSecurity;
    function Get_DefaultDistributionSchedule: Schedule;
    function Get_DefaultMergeSchedule: Schedule;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RegisteredSubscriber);
    procedure Disconnect; override;
    procedure Remove;
    procedure Refresh;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    property DefaultInterface: _RegisteredSubscriber read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ReplicationSecurity: ReplicationSecurity read Get_ReplicationSecurity;
    property DefaultDistributionSchedule: Schedule read Get_DefaultDistributionSchedule;
    property DefaultMergeSchedule: Schedule read Get_DefaultMergeSchedule;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_SUBSCRIBER_TYPE read Get_type_ write Set_type_;
    property Description: WideString read Get_Description write Set_Description;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRegisteredSubscriberProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRegisteredSubscriber
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRegisteredSubscriberProperties = class(TPersistent)
  private
    FServer:    TRegisteredSubscriber;
    function    GetDefaultInterface: _RegisteredSubscriber;
    constructor Create(AServer: TRegisteredSubscriber);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_type_: SQLDMO_SUBSCRIBER_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_SUBSCRIBER_TYPE);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ReplicationSecurity: ReplicationSecurity;
    function Get_DefaultDistributionSchedule: Schedule;
    function Get_DefaultMergeSchedule: Schedule;
  public
    property DefaultInterface: _RegisteredSubscriber read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_SUBSCRIBER_TYPE read Get_type_ write Set_type_;
    property Description: WideString read Get_Description write Set_Description;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoReplicationSecurity provides a Create and CreateRemote method to          
// create instances of the default interface _ReplicationSecurity exposed by              
// the CoClass ReplicationSecurity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReplicationSecurity = class
    class function Create: _ReplicationSecurity;
    class function CreateRemote(const MachineName: string): _ReplicationSecurity;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReplicationSecurity
// Help String      : SQLDMO ReplicationSecurity
// Default Interface: _ReplicationSecurity
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReplicationSecurityProperties= class;
{$ENDIF}
  TReplicationSecurity = class(TOleServer)
  private
    FIntf:        _ReplicationSecurity;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReplicationSecurityProperties;
    function      GetServerProperties: TReplicationSecurityProperties;
{$ENDIF}
    function      GetDefaultInterface: _ReplicationSecurity;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_SecurityMode: SQLDMO_REPLSECURITY_TYPE;
    procedure Set_SecurityMode(pRetVal: SQLDMO_REPLSECURITY_TYPE);
    function Get_StandardLogin: WideString;
    procedure Set_StandardLogin(const pRetVal: WideString);
    function Get_StandardPassword: WideString;
    procedure Set_StandardPassword(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _ReplicationSecurity);
    procedure Disconnect; override;
    property DefaultInterface: _ReplicationSecurity read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property SecurityMode: SQLDMO_REPLSECURITY_TYPE read Get_SecurityMode write Set_SecurityMode;
    property StandardLogin: WideString read Get_StandardLogin write Set_StandardLogin;
    property StandardPassword: WideString read Get_StandardPassword write Set_StandardPassword;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReplicationSecurityProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TReplicationSecurity
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReplicationSecurityProperties = class(TPersistent)
  private
    FServer:    TReplicationSecurity;
    function    GetDefaultInterface: _ReplicationSecurity;
    constructor Create(AServer: TReplicationSecurity);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_SecurityMode: SQLDMO_REPLSECURITY_TYPE;
    procedure Set_SecurityMode(pRetVal: SQLDMO_REPLSECURITY_TYPE);
    function Get_StandardLogin: WideString;
    procedure Set_StandardLogin(const pRetVal: WideString);
    function Get_StandardPassword: WideString;
    procedure Set_StandardPassword(const pRetVal: WideString);
  public
    property DefaultInterface: _ReplicationSecurity read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property SecurityMode: SQLDMO_REPLSECURITY_TYPE read Get_SecurityMode write Set_SecurityMode;
    property StandardLogin: WideString read Get_StandardLogin write Set_StandardLogin;
    property StandardPassword: WideString read Get_StandardPassword write Set_StandardPassword;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionArticle provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionArticle exposed by              
// the CoClass DistributionArticle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionArticle = class
    class function Create: _DistributionArticle;
    class function CreateRemote(const MachineName: string): _DistributionArticle;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionArticle
// Help String      : SQLDMO DistributionArticle
// Default Interface: _DistributionArticle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionArticleProperties= class;
{$ENDIF}
  TDistributionArticle = class(TOleServer)
  private
    FIntf:        _DistributionArticle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionArticleProperties;
    function      GetServerProperties: TDistributionArticleProperties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionArticle;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionArticle);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    property DefaultInterface: _DistributionArticle read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionArticleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionArticle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionArticleProperties = class(TPersistent)
  private
    FServer:    TDistributionArticle;
    function    GetDefaultInterface: _DistributionArticle;
    constructor Create(AServer: TDistributionArticle);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
  public
    property DefaultInterface: _DistributionArticle read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionSubscription provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionSubscription exposed by              
// the CoClass DistributionSubscription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionSubscription = class
    class function Create: _DistributionSubscription;
    class function CreateRemote(const MachineName: string): _DistributionSubscription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionSubscription
// Help String      : SQLDMO DistributionSubscription
// Default Interface: _DistributionSubscription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionSubscriptionProperties= class;
{$ENDIF}
  TDistributionSubscription = class(TOleServer)
  private
    FIntf:        _DistributionSubscription;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionSubscriptionProperties;
    function      GetServerProperties: TDistributionSubscriptionProperties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionSubscription;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_DistributionSchedule: Schedule;
    function Get_DistributionAgent: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionSubscription);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    property DefaultInterface: _DistributionSubscription read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property DistributionAgent: WideString read Get_DistributionAgent;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionSubscriptionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionSubscription
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionSubscriptionProperties = class(TPersistent)
  private
    FServer:    TDistributionSubscription;
    function    GetDefaultInterface: _DistributionSubscription;
    constructor Create(AServer: TDistributionSubscription);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_DistributionSchedule: Schedule;
    function Get_DistributionAgent: WideString;
  public
    property DefaultInterface: _DistributionSubscription read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionPublication provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionPublication exposed by              
// the CoClass DistributionPublication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionPublication = class
    class function Create: _DistributionPublication;
    class function CreateRemote(const MachineName: string): _DistributionPublication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionPublication
// Help String      : SQLDMO DistributionPublication
// Default Interface: _DistributionPublication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionPublicationProperties= class;
{$ENDIF}
  TDistributionPublication = class(TOleServer)
  private
    FIntf:        _DistributionPublication;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionPublicationProperties;
    function      GetServerProperties: TDistributionPublicationProperties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionPublication;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_SnapshotAgent: WideString;
    procedure Set_SnapshotAgent(const pRetVal: WideString);
    function Get_LogReaderAgent: WideString;
    procedure Set_LogReaderAgent(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const pRetVal: WideString);
    function Get_DistributionArticles: DistributionArticles;
    function Get_DistributionSubscriptions: DistributionSubscriptions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionPublication);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function EnumSubscriptionViews: QueryResults;
    function EnumSnapshotAgentView: QueryResults;
    function EnumLogReaderAgentView: QueryResults;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString);
    property DefaultInterface: _DistributionPublication read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property DistributionArticles: DistributionArticles read Get_DistributionArticles;
    property DistributionSubscriptions: DistributionSubscriptions read Get_DistributionSubscriptions;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property SnapshotAgent: WideString read Get_SnapshotAgent write Set_SnapshotAgent;
    property LogReaderAgent: WideString read Get_LogReaderAgent write Set_LogReaderAgent;
    property Description: WideString read Get_Description write Set_Description;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionPublicationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionPublication
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionPublicationProperties = class(TPersistent)
  private
    FServer:    TDistributionPublication;
    function    GetDefaultInterface: _DistributionPublication;
    constructor Create(AServer: TDistributionPublication);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_SnapshotAgent: WideString;
    procedure Set_SnapshotAgent(const pRetVal: WideString);
    function Get_LogReaderAgent: WideString;
    procedure Set_LogReaderAgent(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_VendorName: WideString;
    procedure Set_VendorName(const pRetVal: WideString);
    function Get_DistributionArticles: DistributionArticles;
    function Get_DistributionSubscriptions: DistributionSubscriptions;
  public
    property DefaultInterface: _DistributionPublication read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property SnapshotAgent: WideString read Get_SnapshotAgent write Set_SnapshotAgent;
    property LogReaderAgent: WideString read Get_LogReaderAgent write Set_LogReaderAgent;
    property Description: WideString read Get_Description write Set_Description;
    property VendorName: WideString read Get_VendorName write Set_VendorName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionPublisher provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionPublisher exposed by              
// the CoClass DistributionPublisher. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionPublisher = class
    class function Create: _DistributionPublisher;
    class function CreateRemote(const MachineName: string): _DistributionPublisher;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionPublisher
// Help String      : SQLDMO DistributionPublisher
// Default Interface: _DistributionPublisher
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionPublisherProperties= class;
{$ENDIF}
  TDistributionPublisher = class(TOleServer)
  private
    FIntf:        _DistributionPublisher;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionPublisherProperties;
    function      GetServerProperties: TDistributionPublisherProperties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionPublisher;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DistributionDatabase: WideString;
    procedure Set_DistributionDatabase(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_Enabled: WordBool;
    function Get_DistributionWorkingDirectory: WideString;
    procedure Set_DistributionWorkingDirectory(const pRetVal: WideString);
    function Get_TrustedDistributorConnection: WordBool;
    procedure Set_TrustedDistributorConnection(pRetVal: WordBool);
    function Get_ThirdParty: WordBool;
    procedure Set_ThirdParty(pRetVal: WordBool);
    function Get_DistributionPublications: DistributionPublications;
    function Get_RegisteredSubscribers: RegisteredSubscribers;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionPublisher);
    procedure Disconnect; override;
    procedure Remove;
    procedure Refresh;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumSnapshotAgentSessions(const AgentName: WideString; 
                                       SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults;
    function EnumLogReaderAgentSessions(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer): QueryResults;
    function EnumDistributionAgentSessions(const AgentName: WideString; 
                                           SessionType: SQLDMO_SESSION_TYPE; 
                                           SessionDuration: Integer): QueryResults;
    function EnumMergeAgentSessions(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                    SessionDuration: Integer): QueryResults;
    function EnumSnapshotAgentSessionDetails(const AgentName: WideString; 
                                             const SessionID: WideString): QueryResults;
    function EnumLogReaderAgentSessionDetails(const AgentName: WideString; 
                                              const SessionID: WideString): QueryResults;
    function EnumDistributionAgentSessionDetails(const AgentName: WideString; 
                                                 const SessionID: WideString): QueryResults;
    function EnumMergeAgentSessionDetails(const AgentName: WideString; const SessionID: WideString): QueryResults;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults;
    procedure GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                              out pRetValTimeStamp: WideString);
    property DefaultInterface: _DistributionPublisher read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property Enabled: WordBool read Get_Enabled;
    property DistributionPublications: DistributionPublications read Get_DistributionPublications;
    property RegisteredSubscribers: RegisteredSubscribers read Get_RegisteredSubscribers;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property DistributionDatabase: WideString read Get_DistributionDatabase write Set_DistributionDatabase;
    property DistributionWorkingDirectory: WideString read Get_DistributionWorkingDirectory write Set_DistributionWorkingDirectory;
    property TrustedDistributorConnection: WordBool read Get_TrustedDistributorConnection write Set_TrustedDistributorConnection;
    property ThirdParty: WordBool read Get_ThirdParty write Set_ThirdParty;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionPublisherProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionPublisher
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionPublisherProperties = class(TPersistent)
  private
    FServer:    TDistributionPublisher;
    function    GetDefaultInterface: _DistributionPublisher;
    constructor Create(AServer: TDistributionPublisher);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DistributionDatabase: WideString;
    procedure Set_DistributionDatabase(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_Enabled: WordBool;
    function Get_DistributionWorkingDirectory: WideString;
    procedure Set_DistributionWorkingDirectory(const pRetVal: WideString);
    function Get_TrustedDistributorConnection: WordBool;
    procedure Set_TrustedDistributorConnection(pRetVal: WordBool);
    function Get_ThirdParty: WordBool;
    procedure Set_ThirdParty(pRetVal: WordBool);
    function Get_DistributionPublications: DistributionPublications;
    function Get_RegisteredSubscribers: RegisteredSubscribers;
  public
    property DefaultInterface: _DistributionPublisher read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property DistributionDatabase: WideString read Get_DistributionDatabase write Set_DistributionDatabase;
    property DistributionWorkingDirectory: WideString read Get_DistributionWorkingDirectory write Set_DistributionWorkingDirectory;
    property TrustedDistributorConnection: WordBool read Get_TrustedDistributorConnection write Set_TrustedDistributorConnection;
    property ThirdParty: WordBool read Get_ThirdParty write Set_ThirdParty;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionDatabase provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionDatabase exposed by              
// the CoClass DistributionDatabase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionDatabase = class
    class function Create: _DistributionDatabase;
    class function CreateRemote(const MachineName: string): _DistributionDatabase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionDatabase
// Help String      : SQLDMO DistributionDatabase
// Default Interface: _DistributionDatabase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionDatabaseProperties= class;
{$ENDIF}
  TDistributionDatabase = class(TOleServer)
  private
    FIntf:        _DistributionDatabase;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionDatabaseProperties;
    function      GetServerProperties: TDistributionDatabaseProperties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionDatabase;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_MinDistributionRetention: Integer;
    procedure Set_MinDistributionRetention(pRetVal: Integer);
    function Get_MaxDistributionRetention: Integer;
    procedure Set_MaxDistributionRetention(pRetVal: Integer);
    function Get_HistoryRetention: Integer;
    procedure Set_HistoryRetention(pRetVal: Integer);
    function Get_HistoryCleanupTaskName: WideString;
    function Get_DistributionCleanupTaskName: WideString;
    function Get_AgentsStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_DataFolder: WideString;
    procedure Set_DataFolder(const pRetVal: WideString);
    function Get_DataFile: WideString;
    procedure Set_DataFile(const pRetVal: WideString);
    function Get_DataFileSize: Integer;
    procedure Set_DataFileSize(pRetVal: Integer);
    function Get_LogFolder: WideString;
    procedure Set_LogFolder(const pRetVal: WideString);
    function Get_LogFile: WideString;
    procedure Set_LogFile(const pRetVal: WideString);
    function Get_LogFileSize: Integer;
    procedure Set_LogFileSize(pRetVal: Integer);
    procedure Set_SecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_StandardLogin(const Param1: WideString);
    procedure Set_StandardPassword(const Param1: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionDatabase);
    procedure Disconnect; override;
    procedure Remove;
    procedure Refresh;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    property DefaultInterface: _DistributionDatabase read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property HistoryCleanupTaskName: WideString read Get_HistoryCleanupTaskName;
    property DistributionCleanupTaskName: WideString read Get_DistributionCleanupTaskName;
    property AgentsStatus: SQLDMO_TASKSTATUS_TYPE read Get_AgentsStatus;
    property SecurityMode: SQLDMO_SECURITY_TYPE write Set_SecurityMode;
    property StandardLogin: WideString write Set_StandardLogin;
    property StandardPassword: WideString write Set_StandardPassword;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property MinDistributionRetention: Integer read Get_MinDistributionRetention write Set_MinDistributionRetention;
    property MaxDistributionRetention: Integer read Get_MaxDistributionRetention write Set_MaxDistributionRetention;
    property HistoryRetention: Integer read Get_HistoryRetention write Set_HistoryRetention;
    property DataFolder: WideString read Get_DataFolder write Set_DataFolder;
    property DataFile: WideString read Get_DataFile write Set_DataFile;
    property DataFileSize: Integer read Get_DataFileSize write Set_DataFileSize;
    property LogFolder: WideString read Get_LogFolder write Set_LogFolder;
    property LogFile: WideString read Get_LogFile write Set_LogFile;
    property LogFileSize: Integer read Get_LogFileSize write Set_LogFileSize;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionDatabaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionDatabase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionDatabaseProperties = class(TPersistent)
  private
    FServer:    TDistributionDatabase;
    function    GetDefaultInterface: _DistributionDatabase;
    constructor Create(AServer: TDistributionDatabase);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_MinDistributionRetention: Integer;
    procedure Set_MinDistributionRetention(pRetVal: Integer);
    function Get_MaxDistributionRetention: Integer;
    procedure Set_MaxDistributionRetention(pRetVal: Integer);
    function Get_HistoryRetention: Integer;
    procedure Set_HistoryRetention(pRetVal: Integer);
    function Get_HistoryCleanupTaskName: WideString;
    function Get_DistributionCleanupTaskName: WideString;
    function Get_AgentsStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_DataFolder: WideString;
    procedure Set_DataFolder(const pRetVal: WideString);
    function Get_DataFile: WideString;
    procedure Set_DataFile(const pRetVal: WideString);
    function Get_DataFileSize: Integer;
    procedure Set_DataFileSize(pRetVal: Integer);
    function Get_LogFolder: WideString;
    procedure Set_LogFolder(const pRetVal: WideString);
    function Get_LogFile: WideString;
    procedure Set_LogFile(const pRetVal: WideString);
    function Get_LogFileSize: Integer;
    procedure Set_LogFileSize(pRetVal: Integer);
    procedure Set_SecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_StandardLogin(const Param1: WideString);
    procedure Set_StandardPassword(const Param1: WideString);
  public
    property DefaultInterface: _DistributionDatabase read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property MinDistributionRetention: Integer read Get_MinDistributionRetention write Set_MinDistributionRetention;
    property MaxDistributionRetention: Integer read Get_MaxDistributionRetention write Set_MaxDistributionRetention;
    property HistoryRetention: Integer read Get_HistoryRetention write Set_HistoryRetention;
    property DataFolder: WideString read Get_DataFolder write Set_DataFolder;
    property DataFile: WideString read Get_DataFile write Set_DataFile;
    property DataFileSize: Integer read Get_DataFileSize write Set_DataFileSize;
    property LogFolder: WideString read Get_LogFolder write Set_LogFolder;
    property LogFile: WideString read Get_LogFile write Set_LogFile;
    property LogFileSize: Integer read Get_LogFileSize write Set_LogFileSize;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransSubscription provides a Create and CreateRemote method to          
// create instances of the default interface _TransSubscription exposed by              
// the CoClass TransSubscription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransSubscription = class
    class function Create: _TransSubscription;
    class function CreateRemote(const MachineName: string): _TransSubscription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransSubscription
// Help String      : SQLDMO TransSubscription
// Default Interface: _TransSubscription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransSubscriptionProperties= class;
{$ENDIF}
  TTransSubscription = class(TOleServer)
  private
    FIntf:        _TransSubscription;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransSubscriptionProperties;
    function      GetServerProperties: TTransSubscriptionProperties;
{$ENDIF}
    function      GetDefaultInterface: _TransSubscription;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_FullSubscription: WordBool;
    function Get_DistributionSchedule: Schedule;
    function Get_Name: WideString;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
    function Get_DistributionJobID: WideString;
    procedure Set_EnabledForSyncMgr(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransSubscription);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    procedure ReInitialize;
    property DefaultInterface: _TransSubscription read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property FullSubscription: WordBool read Get_FullSubscription;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property Name: WideString read Get_Name;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType;
    property DistributionJobID: WideString read Get_DistributionJobID;
    property EnabledForSyncMgr: WordBool write Set_EnabledForSyncMgr;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransSubscriptionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransSubscription
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransSubscriptionProperties = class(TPersistent)
  private
    FServer:    TTransSubscription;
    function    GetDefaultInterface: _TransSubscription;
    constructor Create(AServer: TTransSubscription);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_FullSubscription: WordBool;
    function Get_DistributionSchedule: Schedule;
    function Get_Name: WideString;
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
    function Get_DistributionJobID: WideString;
    procedure Set_EnabledForSyncMgr(Param1: WordBool);
  public
    property DefaultInterface: _TransSubscription read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransArticle provides a Create and CreateRemote method to          
// create instances of the default interface _TransArticle exposed by              
// the CoClass TransArticle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransArticle = class
    class function Create: _TransArticle;
    class function CreateRemote(const MachineName: string): _TransArticle;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransArticle
// Help String      : SQLDMO TransArticle
// Default Interface: _TransArticle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransArticleProperties= class;
{$ENDIF}
  TTransArticle = class(TOleServer)
  private
    FIntf:        _TransArticle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransArticleProperties;
    function      GetServerProperties: TTransArticleProperties;
{$ENDIF}
    function      GetDefaultInterface: _TransArticle;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ReplicateAllColumns: WordBool;
    function Get_SnapshotObjectOwner: WideString;
    procedure Set_SnapshotObjectOwner(const pRetVal: WideString);
    function Get_SnapshotObjectName: WideString;
    procedure Set_SnapshotObjectName(const pRetVal: WideString);
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
    function Get_InsertCommand: WideString;
    procedure Set_InsertCommand(const pRetVal: WideString);
    function Get_UpdateCommand: WideString;
    procedure Set_UpdateCommand(const pRetVal: WideString);
    function Get_DeleteCommand: WideString;
    procedure Set_DeleteCommand(const pRetVal: WideString);
    function Get_ReplicationFilterProcOwner: WideString;
    procedure Set_ReplicationFilterProcOwner(const pRetVal: WideString);
    function Get_ReplicationFilterProcName: WideString;
    procedure Set_ReplicationFilterProcName(const pRetVal: WideString);
    function Get_CreationScriptPath: WideString;
    procedure Set_CreationScriptPath(const pRetVal: WideString);
    function Get_DestinationOwnerName: WideString;
    procedure Set_DestinationOwnerName(const pRetVal: WideString);
    function Get_DestinationObjectName: WideString;
    procedure Set_DestinationObjectName(const pRetVal: WideString);
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
    function Get_FilterClause: WideString;
    procedure Set_FilterClause(const pRetVal: WideString);
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
    function Get_CommandOptions: SQLDMO_COMMANDOPTION_TYPE;
    procedure Set_CommandOptions(pRetVal: SQLDMO_COMMANDOPTION_TYPE);
    function Get_TransSubscriptions: TransSubscriptions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransArticle);
    procedure Disconnect; override;
    procedure Remove;
    function ListReplicatedColumns: SQLObjectList;
    procedure AddReplicatedColumns(const Columns: WideString);
    procedure RemoveReplicatedColumns(const Columns: WideString);
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function ScriptDestinationObject: WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant): WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; overload;
    property DefaultInterface: _TransArticle read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property ReplicateAllColumns: WordBool read Get_ReplicateAllColumns;
    property TransSubscriptions: TransSubscriptions read Get_TransSubscriptions;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
    property SnapshotObjectOwner: WideString read Get_SnapshotObjectOwner write Set_SnapshotObjectOwner;
    property SnapshotObjectName: WideString read Get_SnapshotObjectName write Set_SnapshotObjectName;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property InsertCommand: WideString read Get_InsertCommand write Set_InsertCommand;
    property UpdateCommand: WideString read Get_UpdateCommand write Set_UpdateCommand;
    property DeleteCommand: WideString read Get_DeleteCommand write Set_DeleteCommand;
    property ReplicationFilterProcOwner: WideString read Get_ReplicationFilterProcOwner write Set_ReplicationFilterProcOwner;
    property ReplicationFilterProcName: WideString read Get_ReplicationFilterProcName write Set_ReplicationFilterProcName;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property FilterClause: WideString read Get_FilterClause write Set_FilterClause;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property CommandOptions: SQLDMO_COMMANDOPTION_TYPE read Get_CommandOptions write Set_CommandOptions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransArticleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransArticle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransArticleProperties = class(TPersistent)
  private
    FServer:    TTransArticle;
    function    GetDefaultInterface: _TransArticle;
    constructor Create(AServer: TTransArticle);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ReplicateAllColumns: WordBool;
    function Get_SnapshotObjectOwner: WideString;
    procedure Set_SnapshotObjectOwner(const pRetVal: WideString);
    function Get_SnapshotObjectName: WideString;
    procedure Set_SnapshotObjectName(const pRetVal: WideString);
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
    function Get_InsertCommand: WideString;
    procedure Set_InsertCommand(const pRetVal: WideString);
    function Get_UpdateCommand: WideString;
    procedure Set_UpdateCommand(const pRetVal: WideString);
    function Get_DeleteCommand: WideString;
    procedure Set_DeleteCommand(const pRetVal: WideString);
    function Get_ReplicationFilterProcOwner: WideString;
    procedure Set_ReplicationFilterProcOwner(const pRetVal: WideString);
    function Get_ReplicationFilterProcName: WideString;
    procedure Set_ReplicationFilterProcName(const pRetVal: WideString);
    function Get_CreationScriptPath: WideString;
    procedure Set_CreationScriptPath(const pRetVal: WideString);
    function Get_DestinationOwnerName: WideString;
    procedure Set_DestinationOwnerName(const pRetVal: WideString);
    function Get_DestinationObjectName: WideString;
    procedure Set_DestinationObjectName(const pRetVal: WideString);
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
    function Get_FilterClause: WideString;
    procedure Set_FilterClause(const pRetVal: WideString);
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
    function Get_CommandOptions: SQLDMO_COMMANDOPTION_TYPE;
    procedure Set_CommandOptions(pRetVal: SQLDMO_COMMANDOPTION_TYPE);
    function Get_TransSubscriptions: TransSubscriptions;
  public
    property DefaultInterface: _TransArticle read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Description: WideString read Get_Description write Set_Description;
    property SnapshotObjectOwner: WideString read Get_SnapshotObjectOwner write Set_SnapshotObjectOwner;
    property SnapshotObjectName: WideString read Get_SnapshotObjectName write Set_SnapshotObjectName;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property InsertCommand: WideString read Get_InsertCommand write Set_InsertCommand;
    property UpdateCommand: WideString read Get_UpdateCommand write Set_UpdateCommand;
    property DeleteCommand: WideString read Get_DeleteCommand write Set_DeleteCommand;
    property ReplicationFilterProcOwner: WideString read Get_ReplicationFilterProcOwner write Set_ReplicationFilterProcOwner;
    property ReplicationFilterProcName: WideString read Get_ReplicationFilterProcName write Set_ReplicationFilterProcName;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property FilterClause: WideString read Get_FilterClause write Set_FilterClause;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property CommandOptions: SQLDMO_COMMANDOPTION_TYPE read Get_CommandOptions write Set_CommandOptions;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransPublication provides a Create and CreateRemote method to          
// create instances of the default interface _TransPublication exposed by              
// the CoClass TransPublication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransPublication = class
    class function Create: _TransPublication;
    class function CreateRemote(const MachineName: string): _TransPublication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransPublication
// Help String      : SQLDMO TransPublication
// Default Interface: _TransPublication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransPublicationProperties= class;
{$ENDIF}
  TTransPublication = class(TOleServer)
  private
    FIntf:        _TransPublication;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransPublicationProperties;
    function      GetServerProperties: TTransPublicationProperties;
{$ENDIF}
    function      GetDefaultInterface: _TransPublication;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_RetentionPeriod: Integer;
    procedure Set_RetentionPeriod(pRetVal: Integer);
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
    function Get_SnapshotAvailable: WordBool;
    procedure Set_SnapshotAvailable(pRetVal: WordBool);
    function Get_SnapshotSchedule: Schedule;
    function Get_SnapshotJobID: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_HasSubscription: WordBool;
    function Get_AllowSynchronousTransactions: WordBool;
    procedure Set_AllowSynchronousTransactions(pRetVal: WordBool);
    function Get_AutogenerateSyncProcedures: WordBool;
    procedure Set_AutogenerateSyncProcedures(pRetVal: WordBool);
    function Get_ReplicationFrequency: SQLDMO_REPFREQ_TYPE;
    procedure Set_ReplicationFrequency(pRetVal: SQLDMO_REPFREQ_TYPE);
    function Get_TransArticles: TransArticles;
    function Get_TransSubscriptions: TransSubscriptions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransPublication);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    procedure ActivateSubscriptions;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumSubscriptions: QueryResults;
    procedure RefreshChildren;
    procedure ReInitializeAllSubscriptions;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults;
    procedure GrantPublicationAccess(const szLoginName: WideString);
    procedure RevokePublicationAccess(const szLoginName: WideString);
    property DefaultInterface: _TransPublication read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
    property HasSubscription: WordBool read Get_HasSubscription;
    property TransArticles: TransArticles read Get_TransArticles;
    property TransSubscriptions: TransSubscriptions read Get_TransSubscriptions;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property AllowSynchronousTransactions: WordBool read Get_AllowSynchronousTransactions write Set_AllowSynchronousTransactions;
    property AutogenerateSyncProcedures: WordBool read Get_AutogenerateSyncProcedures write Set_AutogenerateSyncProcedures;
    property ReplicationFrequency: SQLDMO_REPFREQ_TYPE read Get_ReplicationFrequency write Set_ReplicationFrequency;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransPublicationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransPublication
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransPublicationProperties = class(TPersistent)
  private
    FServer:    TTransPublication;
    function    GetDefaultInterface: _TransPublication;
    constructor Create(AServer: TTransPublication);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_RetentionPeriod: Integer;
    procedure Set_RetentionPeriod(pRetVal: Integer);
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
    function Get_SnapshotAvailable: WordBool;
    procedure Set_SnapshotAvailable(pRetVal: WordBool);
    function Get_SnapshotSchedule: Schedule;
    function Get_SnapshotJobID: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_HasSubscription: WordBool;
    function Get_AllowSynchronousTransactions: WordBool;
    procedure Set_AllowSynchronousTransactions(pRetVal: WordBool);
    function Get_AutogenerateSyncProcedures: WordBool;
    procedure Set_AutogenerateSyncProcedures(pRetVal: WordBool);
    function Get_ReplicationFrequency: SQLDMO_REPFREQ_TYPE;
    procedure Set_ReplicationFrequency(pRetVal: SQLDMO_REPFREQ_TYPE);
    function Get_TransArticles: TransArticles;
    function Get_TransSubscriptions: TransSubscriptions;
  public
    property DefaultInterface: _TransPublication read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property AllowSynchronousTransactions: WordBool read Get_AllowSynchronousTransactions write Set_AllowSynchronousTransactions;
    property AutogenerateSyncProcedures: WordBool read Get_AutogenerateSyncProcedures write Set_AutogenerateSyncProcedures;
    property ReplicationFrequency: SQLDMO_REPFREQ_TYPE read Get_ReplicationFrequency write Set_ReplicationFrequency;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeSubsetFilter provides a Create and CreateRemote method to          
// create instances of the default interface _MergeSubsetFilter exposed by              
// the CoClass MergeSubsetFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeSubsetFilter = class
    class function Create: _MergeSubsetFilter;
    class function CreateRemote(const MachineName: string): _MergeSubsetFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeSubsetFilter
// Help String      : SQLDMO MergeSubsetFilter
// Default Interface: _MergeSubsetFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeSubsetFilterProperties= class;
{$ENDIF}
  TMergeSubsetFilter = class(TOleServer)
  private
    FIntf:        _MergeSubsetFilter;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeSubsetFilterProperties;
    function      GetServerProperties: TMergeSubsetFilterProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergeSubsetFilter;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_JoinArticleName: WideString;
    procedure Set_JoinArticleName(const pRetVal: WideString);
    function Get_JoinFilterClause: WideString;
    procedure Set_JoinFilterClause(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_JoinUniqueKey: WordBool;
    procedure Set_JoinUniqueKey(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeSubsetFilter);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    property DefaultInterface: _MergeSubsetFilter read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property JoinArticleName: WideString read Get_JoinArticleName write Set_JoinArticleName;
    property JoinFilterClause: WideString read Get_JoinFilterClause write Set_JoinFilterClause;
    property JoinUniqueKey: WordBool read Get_JoinUniqueKey write Set_JoinUniqueKey;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeSubsetFilterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeSubsetFilter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeSubsetFilterProperties = class(TPersistent)
  private
    FServer:    TMergeSubsetFilter;
    function    GetDefaultInterface: _MergeSubsetFilter;
    constructor Create(AServer: TMergeSubsetFilter);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_JoinArticleName: WideString;
    procedure Set_JoinArticleName(const pRetVal: WideString);
    function Get_JoinFilterClause: WideString;
    procedure Set_JoinFilterClause(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_JoinUniqueKey: WordBool;
    procedure Set_JoinUniqueKey(pRetVal: WordBool);
  public
    property DefaultInterface: _MergeSubsetFilter read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property JoinArticleName: WideString read Get_JoinArticleName write Set_JoinArticleName;
    property JoinFilterClause: WideString read Get_JoinFilterClause write Set_JoinFilterClause;
    property JoinUniqueKey: WordBool read Get_JoinUniqueKey write Set_JoinUniqueKey;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeArticle provides a Create and CreateRemote method to          
// create instances of the default interface _MergeArticle exposed by              
// the CoClass MergeArticle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeArticle = class
    class function Create: _MergeArticle;
    class function CreateRemote(const MachineName: string): _MergeArticle;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeArticle
// Help String      : SQLDMO MergeArticle
// Default Interface: _MergeArticle
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeArticleProperties= class;
{$ENDIF}
  TMergeArticle = class(TOleServer)
  private
    FIntf:        _MergeArticle;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeArticleProperties;
    function      GetServerProperties: TMergeArticleProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergeArticle;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Status: SQLDMO_ARTSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_ARTSTATUS_TYPE);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ConflictTable: WideString;
    function Get_ArticleResolver: WideString;
    procedure Set_ArticleResolver(const pRetVal: WideString);
    function Get_SubsetFilterClause: WideString;
    procedure Set_SubsetFilterClause(const pRetVal: WideString);
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
    function Get_ColumnTracking: WordBool;
    procedure Set_ColumnTracking(pRetVal: WordBool);
    function Get_CreationScriptPath: WideString;
    procedure Set_CreationScriptPath(const pRetVal: WideString);
    function Get_SnapshotObjectOwner: WideString;
    function Get_SnapshotObjectName: WideString;
    function Get_ResolverInfo: WideString;
    procedure Set_ResolverInfo(const pRetVal: WideString);
    function Get_MergeSubsetFilters: MergeSubsetFilters;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeArticle);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function ScriptDestinationObject: WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant): WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                     Script2Type: OleVariant): WideString; overload;
    property DefaultInterface: _MergeArticle read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property ConflictTable: WideString read Get_ConflictTable;
    property SnapshotObjectOwner: WideString read Get_SnapshotObjectOwner;
    property SnapshotObjectName: WideString read Get_SnapshotObjectName;
    property MergeSubsetFilters: MergeSubsetFilters read Get_MergeSubsetFilters;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Status: SQLDMO_ARTSTATUS_TYPE read Get_Status write Set_Status;
    property Description: WideString read Get_Description write Set_Description;
    property ArticleResolver: WideString read Get_ArticleResolver write Set_ArticleResolver;
    property SubsetFilterClause: WideString read Get_SubsetFilterClause write Set_SubsetFilterClause;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property ColumnTracking: WordBool read Get_ColumnTracking write Set_ColumnTracking;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property ResolverInfo: WideString read Get_ResolverInfo write Set_ResolverInfo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeArticleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeArticle
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeArticleProperties = class(TPersistent)
  private
    FServer:    TMergeArticle;
    function    GetDefaultInterface: _MergeArticle;
    constructor Create(AServer: TMergeArticle);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_SourceObjectOwner: WideString;
    procedure Set_SourceObjectOwner(const pRetVal: WideString);
    function Get_SourceObjectName: WideString;
    procedure Set_SourceObjectName(const pRetVal: WideString);
    function Get_Status: SQLDMO_ARTSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_ARTSTATUS_TYPE);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_ConflictTable: WideString;
    function Get_ArticleResolver: WideString;
    procedure Set_ArticleResolver(const pRetVal: WideString);
    function Get_SubsetFilterClause: WideString;
    procedure Set_SubsetFilterClause(const pRetVal: WideString);
    function Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
    procedure Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
    function Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
    procedure Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
    function Get_ArticleType: SQLDMO_ARTICLE_TYPE;
    procedure Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
    function Get_ColumnTracking: WordBool;
    procedure Set_ColumnTracking(pRetVal: WordBool);
    function Get_CreationScriptPath: WideString;
    procedure Set_CreationScriptPath(const pRetVal: WideString);
    function Get_SnapshotObjectOwner: WideString;
    function Get_SnapshotObjectName: WideString;
    function Get_ResolverInfo: WideString;
    procedure Set_ResolverInfo(const pRetVal: WideString);
    function Get_MergeSubsetFilters: MergeSubsetFilters;
  public
    property DefaultInterface: _MergeArticle read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property SourceObjectOwner: WideString read Get_SourceObjectOwner write Set_SourceObjectOwner;
    property SourceObjectName: WideString read Get_SourceObjectName write Set_SourceObjectName;
    property Status: SQLDMO_ARTSTATUS_TYPE read Get_Status write Set_Status;
    property Description: WideString read Get_Description write Set_Description;
    property ArticleResolver: WideString read Get_ArticleResolver write Set_ArticleResolver;
    property SubsetFilterClause: WideString read Get_SubsetFilterClause write Set_SubsetFilterClause;
    property PreCreationMethod: SQLDMO_PREARTICLE_TYPE read Get_PreCreationMethod write Set_PreCreationMethod;
    property CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE read Get_CreationScriptOptions write Set_CreationScriptOptions;
    property ArticleType: SQLDMO_ARTICLE_TYPE read Get_ArticleType write Set_ArticleType;
    property ColumnTracking: WordBool read Get_ColumnTracking write Set_ColumnTracking;
    property CreationScriptPath: WideString read Get_CreationScriptPath write Set_CreationScriptPath;
    property ResolverInfo: WideString read Get_ResolverInfo write Set_ResolverInfo;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeSubscription provides a Create and CreateRemote method to          
// create instances of the default interface _MergeSubscription exposed by              
// the CoClass MergeSubscription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeSubscription = class
    class function Create: _MergeSubscription;
    class function CreateRemote(const MachineName: string): _MergeSubscription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeSubscription
// Help String      : SQLDMO MergeSubscription
// Default Interface: _MergeSubscription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeSubscriptionProperties= class;
{$ENDIF}
  TMergeSubscription = class(TOleServer)
  private
    FIntf:        _MergeSubscription;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeSubscriptionProperties;
    function      GetServerProperties: TMergeSubscriptionProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergeSubscription;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
    function Get_Priority: Single;
    procedure Set_Priority(pRetVal: Single);
    function Get_MergeSchedule: Schedule;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    function Get_MergeJobID: WideString;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    procedure Set_EnabledForSyncMgr(Param1: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeSubscription);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    procedure ReInitialize;
    property DefaultInterface: _MergeSubscription read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property MergeSchedule: Schedule read Get_MergeSchedule;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType;
    property MergeJobID: WideString read Get_MergeJobID;
    property EnabledForSyncMgr: WordBool write Set_EnabledForSyncMgr;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Priority: Single read Get_Priority write Set_Priority;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Description: WideString read Get_Description write Set_Description;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeSubscriptionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeSubscription
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeSubscriptionProperties = class(TPersistent)
  private
    FServer:    TMergeSubscription;
    function    GetDefaultInterface: _MergeSubscription;
    constructor Create(AServer: TMergeSubscription);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Subscriber: WideString;
    procedure Set_Subscriber(const pRetVal: WideString);
    function Get_SubscriptionDB: WideString;
    procedure Set_SubscriptionDB(const pRetVal: WideString);
    function Get_Status: SQLDMO_SUBSTATUS_TYPE;
    procedure Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
    function Get_Priority: Single;
    procedure Set_Priority(pRetVal: Single);
    function Get_MergeSchedule: Schedule;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    function Get_MergeJobID: WideString;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    procedure Set_EnabledForSyncMgr(Param1: WordBool);
  public
    property DefaultInterface: _MergeSubscription read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Subscriber: WideString read Get_Subscriber write Set_Subscriber;
    property SubscriptionDB: WideString read Get_SubscriptionDB write Set_SubscriptionDB;
    property Status: SQLDMO_SUBSTATUS_TYPE read Get_Status write Set_Status;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Priority: Single read Get_Priority write Set_Priority;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Description: WideString read Get_Description write Set_Description;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergePublication provides a Create and CreateRemote method to          
// create instances of the default interface _MergePublication exposed by              
// the CoClass MergePublication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergePublication = class
    class function Create: _MergePublication;
    class function CreateRemote(const MachineName: string): _MergePublication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergePublication
// Help String      : SQLDMO MergePublication
// Default Interface: _MergePublication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergePublicationProperties= class;
{$ENDIF}
  TMergePublication = class(TOleServer)
  private
    FIntf:        _MergePublication;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergePublicationProperties;
    function      GetServerProperties: TMergePublicationProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergePublication;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_RetentionPeriod: Integer;
    procedure Set_RetentionPeriod(pRetVal: Integer);
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
    function Get_SnapshotAvailable: WordBool;
    procedure Set_SnapshotAvailable(pRetVal: WordBool);
    function Get_SnapshotSchedule: Schedule;
    function Get_SnapshotJobID: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_HasSubscription: WordBool;
    function Get_CentralizedConflicts: WordBool;
    procedure Set_CentralizedConflicts(pRetVal: WordBool);
    function Get_Priority: Single;
    function Get_DynamicFilters: WordBool;
    procedure Set_DynamicFilters(pRetVal: WordBool);
    function Get_MergeArticles: MergeArticles;
    function Get_MergeSubscriptions: MergeSubscriptions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergePublication);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumSubscriptions: QueryResults;
    procedure RefreshChildren;
    function EnumPublicationReferences: QueryResults;
    procedure ReInitializeAllSubscriptions;
    function EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults;
    procedure GrantPublicationAccess(const szLoginName: WideString);
    procedure RevokePublicationAccess(const szLoginName: WideString);
    procedure GenerateFilters;
    function EnumGeneratedSubsetFilters(const ArticleName: WideString; 
                                        const SubsetFilterClause: WideString): QueryResults;
    function EnumAllSubsetFilters: QueryResults;
    property DefaultInterface: _MergePublication read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property ID: Integer read Get_ID;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
    property HasSubscription: WordBool read Get_HasSubscription;
    property Priority: Single read Get_Priority;
    property MergeArticles: MergeArticles read Get_MergeArticles;
    property MergeSubscriptions: MergeSubscriptions read Get_MergeSubscriptions;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property DynamicFilters: WordBool read Get_DynamicFilters write Set_DynamicFilters;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergePublicationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergePublication
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergePublicationProperties = class(TPersistent)
  private
    FServer:    TMergePublication;
    function    GetDefaultInterface: _MergePublication;
    constructor Create(AServer: TMergePublication);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ID: Integer;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_RetentionPeriod: Integer;
    procedure Set_RetentionPeriod(pRetVal: Integer);
    function Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
    procedure Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
    function Get_SnapshotAvailable: WordBool;
    procedure Set_SnapshotAvailable(pRetVal: WordBool);
    function Get_SnapshotSchedule: Schedule;
    function Get_SnapshotJobID: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
    function Get_HasSubscription: WordBool;
    function Get_CentralizedConflicts: WordBool;
    procedure Set_CentralizedConflicts(pRetVal: WordBool);
    function Get_Priority: Single;
    function Get_DynamicFilters: WordBool;
    procedure Set_DynamicFilters(pRetVal: WordBool);
    function Get_MergeArticles: MergeArticles;
    function Get_MergeSubscriptions: MergeSubscriptions;
  public
    property DefaultInterface: _MergePublication read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property RetentionPeriod: Integer read Get_RetentionPeriod write Set_RetentionPeriod;
    property SnapshotMethod: SQLDMO_INITIALSYNC_TYPE read Get_SnapshotMethod write Set_SnapshotMethod;
    property SnapshotAvailable: WordBool read Get_SnapshotAvailable write Set_SnapshotAvailable;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property DynamicFilters: WordBool read Get_DynamicFilters write Set_DynamicFilters;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeDynamicSnapshotJob provides a Create and CreateRemote method to          
// create instances of the default interface _MergeDynamicSnapshotJob exposed by              
// the CoClass MergeDynamicSnapshotJob. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeDynamicSnapshotJob = class
    class function Create: _MergeDynamicSnapshotJob;
    class function CreateRemote(const MachineName: string): _MergeDynamicSnapshotJob;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeDynamicSnapshotJob
// Help String      : SQLDMO MergeDynamicSnapshotJob
// Default Interface: _MergeDynamicSnapshotJob
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeDynamicSnapshotJobProperties= class;
{$ENDIF}
  TMergeDynamicSnapshotJob = class(TOleServer)
  private
    FIntf:        _MergeDynamicSnapshotJob;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeDynamicSnapshotJobProperties;
    function      GetServerProperties: TMergeDynamicSnapshotJobProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergeDynamicSnapshotJob;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DynamicSnapshotJobID: WideString;
    function Get_DynamicFilterLogin: WideString;
    procedure Set_DynamicFilterLogin(const pRetVal: WideString);
    function Get_DynamicFilterHostName: WideString;
    procedure Set_DynamicFilterHostName(const pRetVal: WideString);
    function Get_DynamicSnapshotLocation: WideString;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString);
    function Get_SnapshotSchedule: Schedule;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeDynamicSnapshotJob);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    property DefaultInterface: _MergeDynamicSnapshotJob read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property DynamicSnapshotJobID: WideString read Get_DynamicSnapshotJobID;
    property SnapshotSchedule: Schedule read Get_SnapshotSchedule;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property DynamicFilterLogin: WideString read Get_DynamicFilterLogin write Set_DynamicFilterLogin;
    property DynamicFilterHostName: WideString read Get_DynamicFilterHostName write Set_DynamicFilterHostName;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeDynamicSnapshotJobProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeDynamicSnapshotJob
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeDynamicSnapshotJobProperties = class(TPersistent)
  private
    FServer:    TMergeDynamicSnapshotJob;
    function    GetDefaultInterface: _MergeDynamicSnapshotJob;
    constructor Create(AServer: TMergeDynamicSnapshotJob);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DynamicSnapshotJobID: WideString;
    function Get_DynamicFilterLogin: WideString;
    procedure Set_DynamicFilterLogin(const pRetVal: WideString);
    function Get_DynamicFilterHostName: WideString;
    procedure Set_DynamicFilterHostName(const pRetVal: WideString);
    function Get_DynamicSnapshotLocation: WideString;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString);
    function Get_SnapshotSchedule: Schedule;
  public
    property DefaultInterface: _MergeDynamicSnapshotJob read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property DynamicFilterLogin: WideString read Get_DynamicFilterLogin write Set_DynamicFilterLogin;
    property DynamicFilterHostName: WideString read Get_DynamicFilterHostName write Set_DynamicFilterHostName;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransPullSubscription provides a Create and CreateRemote method to          
// create instances of the default interface _TransPullSubscription exposed by              
// the CoClass TransPullSubscription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransPullSubscription = class
    class function Create: _TransPullSubscription;
    class function CreateRemote(const MachineName: string): _TransPullSubscription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransPullSubscription
// Help String      : SQLDMO TransPullSubscription
// Default Interface: _TransPullSubscription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransPullSubscriptionProperties= class;
{$ENDIF}
  TTransPullSubscription = class(TOleServer)
  private
    FIntf:        _TransPullSubscription;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransPullSubscriptionProperties;
    function      GetServerProperties: TTransPullSubscriptionProperties;
{$ENDIF}
    function      GetDefaultInterface: _TransPullSubscription;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Publisher: WideString;
    procedure Set_Publisher(const pRetVal: WideString);
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_Publication: WideString;
    procedure Set_Publication(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
    function Get_Distributor: WideString;
    procedure Set_Distributor(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_DistributorSecurity: ReplicationSecurity;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_SubscriberLogin(const Param1: WideString);
    procedure Set_SubscriberPassword(const Param1: WideString);
    function Get_EnabledForSyncMgr: WordBool;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: LongWord;
    procedure Set_FTPPort(pRetVal: LongWord);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_DistributionSchedule: Schedule;
    function Get_DistributionJobID: WideString;
    function Get_LastDistributionDate: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransPullSubscription);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumJobInfo: QueryResults;
    procedure ReInitialize;
    property DefaultInterface: _TransPullSubscription read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property DistributorSecurity: ReplicationSecurity read Get_DistributorSecurity;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE write Set_SubscriberSecurityMode;
    property SubscriberLogin: WideString write Set_SubscriberLogin;
    property SubscriberPassword: WideString write Set_SubscriberPassword;
    property FTPPassword: WideString write Set_FTPPassword;
    property DistributionSchedule: Schedule read Get_DistributionSchedule;
    property DistributionJobID: WideString read Get_DistributionJobID;
    property LastDistributionDate: WideString read Get_LastDistributionDate;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransPullSubscriptionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransPullSubscription
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransPullSubscriptionProperties = class(TPersistent)
  private
    FServer:    TTransPullSubscription;
    function    GetDefaultInterface: _TransPullSubscription;
    constructor Create(AServer: TTransPullSubscription);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Publisher: WideString;
    procedure Set_Publisher(const pRetVal: WideString);
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_Publication: WideString;
    procedure Set_Publication(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
    function Get_Distributor: WideString;
    procedure Set_Distributor(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_DistributorSecurity: ReplicationSecurity;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_SubscriberLogin(const Param1: WideString);
    procedure Set_SubscriberPassword(const Param1: WideString);
    function Get_EnabledForSyncMgr: WordBool;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: LongWord;
    procedure Set_FTPPort(pRetVal: LongWord);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_DistributionSchedule: Schedule;
    function Get_DistributionJobID: WideString;
    function Get_LastDistributionDate: WideString;
    function Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
    procedure Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
  public
    property DefaultInterface: _TransPullSubscription read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property PublicationAttributes: SQLDMO_PUBATTRIB_TYPE read Get_PublicationAttributes write Set_PublicationAttributes;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergePullSubscription provides a Create and CreateRemote method to          
// create instances of the default interface _MergePullSubscription exposed by              
// the CoClass MergePullSubscription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergePullSubscription = class
    class function Create: _MergePullSubscription;
    class function CreateRemote(const MachineName: string): _MergePullSubscription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergePullSubscription
// Help String      : SQLDMO MergePullSubscription
// Default Interface: _MergePullSubscription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergePullSubscriptionProperties= class;
{$ENDIF}
  TMergePullSubscription = class(TOleServer)
  private
    FIntf:        _MergePullSubscription;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergePullSubscriptionProperties;
    function      GetServerProperties: TMergePullSubscriptionProperties;
{$ENDIF}
    function      GetDefaultInterface: _MergePullSubscription;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Publisher: WideString;
    procedure Set_Publisher(const pRetVal: WideString);
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_Publication: WideString;
    procedure Set_Publication(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
    function Get_Distributor: WideString;
    procedure Set_Distributor(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_DistributorSecurity: ReplicationSecurity;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_SubscriberLogin(const Param1: WideString);
    procedure Set_SubscriberPassword(const Param1: WideString);
    function Get_EnabledForSyncMgr: WordBool;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: LongWord;
    procedure Set_FTPPort(pRetVal: LongWord);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_MergeSchedule: Schedule;
    function Get_MergeJobID: WideString;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_Priority: Single;
    procedure Set_Priority(pRetVal: Single);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergePullSubscription);
    procedure Disconnect; override;
    procedure Remove;
    procedure BeginAlter;
    procedure DoAlter;
    procedure CancelAlter;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumJobInfo: QueryResults;
    procedure ReInitialize;
    property DefaultInterface: _MergePullSubscription read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property PublisherSecurity: ReplicationSecurity read Get_PublisherSecurity;
    property DistributorSecurity: ReplicationSecurity read Get_DistributorSecurity;
    property SubscriberSecurityMode: SQLDMO_SECURITY_TYPE write Set_SubscriberSecurityMode;
    property SubscriberLogin: WideString write Set_SubscriberLogin;
    property SubscriberPassword: WideString write Set_SubscriberPassword;
    property FTPPassword: WideString write Set_FTPPassword;
    property MergeSchedule: Schedule read Get_MergeSchedule;
    property MergeJobID: WideString read Get_MergeJobID;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Priority: Single read Get_Priority write Set_Priority;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergePullSubscriptionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergePullSubscription
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergePullSubscriptionProperties = class(TPersistent)
  private
    FServer:    TMergePullSubscription;
    function    GetDefaultInterface: _MergePullSubscription;
    constructor Create(AServer: TMergePullSubscription);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_Publisher: WideString;
    procedure Set_Publisher(const pRetVal: WideString);
    function Get_PublicationDB: WideString;
    procedure Set_PublicationDB(const pRetVal: WideString);
    function Get_Publication: WideString;
    procedure Set_Publication(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
    procedure Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
    function Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
    procedure Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
    function Get_Distributor: WideString;
    procedure Set_Distributor(const pRetVal: WideString);
    function Get_PublisherSecurity: ReplicationSecurity;
    function Get_DistributorSecurity: ReplicationSecurity;
    procedure Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
    procedure Set_SubscriberLogin(const Param1: WideString);
    procedure Set_SubscriberPassword(const Param1: WideString);
    function Get_EnabledForSyncMgr: WordBool;
    procedure Set_EnabledForSyncMgr(pRetVal: WordBool);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: LongWord;
    procedure Set_FTPPort(pRetVal: LongWord);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_MergeSchedule: Schedule;
    function Get_MergeJobID: WideString;
    function Get_SyncType: SQLDMO_SUBSYNC_TYPE;
    procedure Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
    function Get_Priority: Single;
    procedure Set_Priority(pRetVal: Single);
  public
    property DefaultInterface: _MergePullSubscription read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Publisher: WideString read Get_Publisher write Set_Publisher;
    property PublicationDB: WideString read Get_PublicationDB write Set_PublicationDB;
    property Publication: WideString read Get_Publication write Set_Publication;
    property Description: WideString read Get_Description write Set_Description;
    property SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE read Get_SubscriptionType write Set_SubscriptionType;
    property SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE read Get_SubscriberType write Set_SubscriberType;
    property Distributor: WideString read Get_Distributor write Set_Distributor;
    property EnabledForSyncMgr: WordBool read Get_EnabledForSyncMgr write Set_EnabledForSyncMgr;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: LongWord read Get_FTPPort write Set_FTPPort;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property SyncType: SQLDMO_SUBSYNC_TYPE read Get_SyncType write Set_SyncType;
    property Priority: Single read Get_Priority write Set_Priority;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoReplication provides a Create and CreateRemote method to          
// create instances of the default interface _Replication exposed by              
// the CoClass Replication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReplication = class
    class function Create: _Replication;
    class function CreateRemote(const MachineName: string): _Replication;
  end;

  TReplicationStatusMessage = procedure(ASender: TObject; const Message: WideString) of object;
  TReplicationPercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                            Percent: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReplication
// Help String      : SQLDMO Replication
// Default Interface: _Replication
// Def. Intf. DISP? : No
// Event   Interface: ReplicationSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReplicationProperties= class;
{$ENDIF}
  TReplication = class(TOleServer)
  private
    FOnStatusMessage: TReplicationStatusMessage;
    FOnPercentComplete: TReplicationPercentComplete;
    FIntf:        _Replication;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReplicationProperties;
    function      GetServerProperties: TReplicationProperties;
{$ENDIF}
    function      GetDefaultInterface: _Replication;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Publisher: Publisher;
    function Get_Subscriber: Subscriber;
    function Get_Distributor: Distributor;
    function Get_ReplicationDatabases: ReplicationDatabases;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Replication);
    procedure Disconnect; override;
    function Script: WideString; overload;
    function Script(ScriptType: OleVariant): WideString; overload;
    function Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString; overload;
    function EnumDataSourceNames: QueryResults;
    procedure Uninstall(bIgnoreDistributor: WordBool);
    function EnumCustomResolvers(const Distributor: WideString): QueryResults;
    procedure ValidateDataSource(const DataSourceName: WideString; const Login: WideString; 
                                 const Password: WideString; SubscriberType: SQLDMO_SUBSCRIBER_TYPE);
    property DefaultInterface: _Replication read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Publisher: Publisher read Get_Publisher;
    property Subscriber: Subscriber read Get_Subscriber;
    property Distributor: Distributor read Get_Distributor;
    property ReplicationDatabases: ReplicationDatabases read Get_ReplicationDatabases;
    property UserData: Integer read Get_UserData write Set_UserData;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReplicationProperties read GetServerProperties;
{$ENDIF}
    property OnStatusMessage: TReplicationStatusMessage read FOnStatusMessage write FOnStatusMessage;
    property OnPercentComplete: TReplicationPercentComplete read FOnPercentComplete write FOnPercentComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TReplication
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReplicationProperties = class(TPersistent)
  private
    FServer:    TReplication;
    function    GetDefaultInterface: _Replication;
    constructor Create(AServer: TReplication);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Publisher: Publisher;
    function Get_Subscriber: Subscriber;
    function Get_Distributor: Distributor;
    function Get_ReplicationDatabases: ReplicationDatabases;
  public
    property DefaultInterface: _Replication read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoServerRole provides a Create and CreateRemote method to          
// create instances of the default interface _ServerRole exposed by              
// the CoClass ServerRole. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServerRole = class
    class function Create: _ServerRole;
    class function CreateRemote(const MachineName: string): _ServerRole;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TServerRole
// Help String      : SQLDMO Server Role
// Default Interface: _ServerRole
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TServerRoleProperties= class;
{$ENDIF}
  TServerRole = class(TOleServer)
  private
    FIntf:        _ServerRole;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TServerRoleProperties;
    function      GetServerProperties: TServerRoleProperties;
{$ENDIF}
    function      GetDefaultInterface: _ServerRole;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_FullName: WideString;
    function Get_Description: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _ServerRole);
    procedure Disconnect; override;
    function EnumServerRolePermission: QueryResults;
    function EnumServerRoleMember: QueryResults;
    procedure AddMember(const LoginName: WideString);
    procedure DropMember(const LoginName: WideString);
    property DefaultInterface: _ServerRole read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Name: WideString read Get_Name;
    property FullName: WideString read Get_FullName;
    property Description: WideString read Get_Description;
    property UserData: Integer read Get_UserData write Set_UserData;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TServerRoleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TServerRole
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TServerRoleProperties = class(TPersistent)
  private
    FServer:    TServerRole;
    function    GetDefaultInterface: _ServerRole;
    constructor Create(AServer: TServerRole);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    function Get_FullName: WideString;
    function Get_Description: WideString;
  public
    property DefaultInterface: _ServerRole read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLinkedServerLogin provides a Create and CreateRemote method to          
// create instances of the default interface _LinkedServerLogin exposed by              
// the CoClass LinkedServerLogin. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinkedServerLogin = class
    class function Create: _LinkedServerLogin;
    class function CreateRemote(const MachineName: string): _LinkedServerLogin;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLinkedServerLogin
// Help String      : SQLDMO LinkedServerLogin
// Default Interface: _LinkedServerLogin
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLinkedServerLoginProperties= class;
{$ENDIF}
  TLinkedServerLogin = class(TOleServer)
  private
    FIntf:        _LinkedServerLogin;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLinkedServerLoginProperties;
    function      GetServerProperties: TLinkedServerLoginProperties;
{$ENDIF}
    function      GetDefaultInterface: _LinkedServerLogin;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_LocalLogin: WideString;
    procedure Set_LocalLogin(const pRetVal: WideString);
    function Get_RemoteUser: WideString;
    procedure Set_RemoteUser(const pRetVal: WideString);
    procedure Set_RemotePassword(const Param1: WideString);
    function Get_Impersonate: WordBool;
    procedure Set_Impersonate(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LinkedServerLogin);
    procedure Disconnect; override;
    procedure Remove;
    property DefaultInterface: _LinkedServerLogin read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property RemotePassword: WideString write Set_RemotePassword;
    property UserData: Integer read Get_UserData write Set_UserData;
    property LocalLogin: WideString read Get_LocalLogin write Set_LocalLogin;
    property RemoteUser: WideString read Get_RemoteUser write Set_RemoteUser;
    property Impersonate: WordBool read Get_Impersonate write Set_Impersonate;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLinkedServerLoginProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLinkedServerLogin
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLinkedServerLoginProperties = class(TPersistent)
  private
    FServer:    TLinkedServerLogin;
    function    GetDefaultInterface: _LinkedServerLogin;
    constructor Create(AServer: TLinkedServerLogin);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_LocalLogin: WideString;
    procedure Set_LocalLogin(const pRetVal: WideString);
    function Get_RemoteUser: WideString;
    procedure Set_RemoteUser(const pRetVal: WideString);
    procedure Set_RemotePassword(const Param1: WideString);
    function Get_Impersonate: WordBool;
    procedure Set_Impersonate(pRetVal: WordBool);
  public
    property DefaultInterface: _LinkedServerLogin read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property LocalLogin: WideString read Get_LocalLogin write Set_LocalLogin;
    property RemoteUser: WideString read Get_RemoteUser write Set_RemoteUser;
    property Impersonate: WordBool read Get_Impersonate write Set_Impersonate;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLinkedServer provides a Create and CreateRemote method to          
// create instances of the default interface _LinkedServer exposed by              
// the CoClass LinkedServer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinkedServer = class
    class function Create: _LinkedServer;
    class function CreateRemote(const MachineName: string): _LinkedServer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLinkedServer
// Help String      : SQLDMO LinkedServer
// Default Interface: _LinkedServer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLinkedServerProperties= class;
{$ENDIF}
  TLinkedServer = class(TOleServer)
  private
    FIntf:        _LinkedServer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLinkedServerProperties;
    function      GetServerProperties: TLinkedServerProperties;
{$ENDIF}
    function      GetDefaultInterface: _LinkedServer;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ProductName: WideString;
    procedure Set_ProductName(const pRetVal: WideString);
    function Get_LinkedServerLogins: LinkedServerLogins;
    function Get_ProviderName: WideString;
    procedure Set_ProviderName(const pRetVal: WideString);
    function Get_DataSource: WideString;
    procedure Set_DataSource(const pRetVal: WideString);
    function Get_Location: WideString;
    procedure Set_Location(const pRetVal: WideString);
    function Get_ProviderString: WideString;
    procedure Set_ProviderString(const pRetVal: WideString);
    function Get_Options: SQLDMO_SRVOPTION_TYPE;
    function Get_Catalog: WideString;
    procedure Set_Catalog(const pRetVal: WideString);
    function Get_DropLogins: WordBool;
    procedure Set_DropLogins(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LinkedServer);
    procedure Disconnect; override;
    procedure Remove;
    procedure ExecuteImmediate(const Command: WideString); overload;
    procedure ExecuteImmediate(const Command: WideString; Length: OleVariant); overload;
    function ExecuteWithResults(const Command: WideString): QueryResults; overload;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; overload;
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults;
    procedure SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool);
    function EnumTables: QueryResults; overload;
    function EnumTables(TableName: OleVariant): QueryResults; overload;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant): QueryResults; overload;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant): QueryResults; overload;
    function EnumTables(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                        TableType: OleVariant): QueryResults; overload;
    function EnumColumns: QueryResults; overload;
    function EnumColumns(TableName: OleVariant): QueryResults; overload;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant): QueryResults; overload;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant): QueryResults; overload;
    function EnumColumns(TableName: OleVariant; SchemaName: OleVariant; CatalogName: OleVariant; 
                         ColumnName: OleVariant): QueryResults; overload;
    property DefaultInterface: _LinkedServer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property LinkedServerLogins: LinkedServerLogins read Get_LinkedServerLogins;
    property Options: SQLDMO_SRVOPTION_TYPE read Get_Options;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property ProductName: WideString read Get_ProductName write Set_ProductName;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property DataSource: WideString read Get_DataSource write Set_DataSource;
    property Location: WideString read Get_Location write Set_Location;
    property ProviderString: WideString read Get_ProviderString write Set_ProviderString;
    property Catalog: WideString read Get_Catalog write Set_Catalog;
    property DropLogins: WordBool read Get_DropLogins write Set_DropLogins;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLinkedServerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLinkedServer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLinkedServerProperties = class(TPersistent)
  private
    FServer:    TLinkedServer;
    function    GetDefaultInterface: _LinkedServer;
    constructor Create(AServer: TLinkedServer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ProductName: WideString;
    procedure Set_ProductName(const pRetVal: WideString);
    function Get_LinkedServerLogins: LinkedServerLogins;
    function Get_ProviderName: WideString;
    procedure Set_ProviderName(const pRetVal: WideString);
    function Get_DataSource: WideString;
    procedure Set_DataSource(const pRetVal: WideString);
    function Get_Location: WideString;
    procedure Set_Location(const pRetVal: WideString);
    function Get_ProviderString: WideString;
    procedure Set_ProviderString(const pRetVal: WideString);
    function Get_Options: SQLDMO_SRVOPTION_TYPE;
    function Get_Catalog: WideString;
    procedure Set_Catalog(const pRetVal: WideString);
    function Get_DropLogins: WordBool;
    procedure Set_DropLogins(pRetVal: WordBool);
  public
    property DefaultInterface: _LinkedServer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property ProductName: WideString read Get_ProductName write Set_ProductName;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property DataSource: WideString read Get_DataSource write Set_DataSource;
    property Location: WideString read Get_Location write Set_Location;
    property ProviderString: WideString read Get_ProviderString write Set_ProviderString;
    property Catalog: WideString read Get_Catalog write Set_Catalog;
    property DropLogins: WordBool read Get_DropLogins write Set_DropLogins;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSQLServer provides a Create and CreateRemote method to          
// create instances of the default interface _SQLServer exposed by              
// the CoClass SQLServer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSQLServer = class
    class function Create: _SQLServer;
    class function CreateRemote(const MachineName: string): _SQLServer;
  end;

  TSQLServerQueryTimeout = procedure(ASender: TObject; const Message: WideString; 
                                                       out Continue: WordBool) of object;
  TSQLServerServerMessage = procedure(ASender: TObject; Severity: Integer; MessageNumber: Integer; 
                                                        MessageState: Integer; 
                                                        const Message: WideString) of object;
  TSQLServerConnectionBroken = procedure(ASender: TObject; const Message: WideString; 
                                                           out Retry: WordBool) of object;
  TSQLServerRemoteLoginFailed = procedure(ASender: TObject; Severity: Integer; 
                                                            MessageNumber: Integer; 
                                                            MessageState: Integer; 
                                                            const Message: WideString) of object;
  TSQLServerCommandSent = procedure(ASender: TObject; const SQLCommand: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSQLServer
// Help String      : SQLDMO Server
// Default Interface: _SQLServer
// Def. Intf. DISP? : No
// Event   Interface: ServerSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSQLServerProperties= class;
{$ENDIF}
  TSQLServer = class(TOleServer)
  private
    FOnQueryTimeout: TSQLServerQueryTimeout;
    FOnServerMessage: TSQLServerServerMessage;
    FOnConnectionBroken: TSQLServerConnectionBroken;
    FOnRemoteLoginFailed: TSQLServerRemoteLoginFailed;
    FOnCommandSent: TSQLServerCommandSent;
    FIntf:        _SQLServer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSQLServerProperties;
    function      GetServerProperties: TSQLServerProperties;
{$ENDIF}
    function      GetDefaultInterface: _SQLServer;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Databases: Databases;
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_VersionString: WideString;
    function Get_BackupDevices: BackupDevices;
    function Get_VersionMajor: Integer;
    function Get_VersionMinor: Integer;
    function Get_CommandTerminator: WideString;
    procedure Set_CommandTerminator(const pRetVal: WideString);
    function Get_TrueName: WideString;
    function Get_ConnectionID: Integer;
    function Get_TrueLogin: WideString;
    function Get_IntegratedSecurity: IntegratedSecurity;
    function Get_Languages: Languages;
    function Get_RemoteServers: RemoteServers;
    function Get_Logins: Logins;
    function Get_UserProfile: SQLDMO_SRVUSERPROFILE_TYPE;
    function Get_MaxNumericPrecision: Integer;
    function Get_NextDeviceNumber: Integer;
    function Get_QueryTimeout: Integer;
    procedure Set_QueryTimeout(pRetVal: Integer);
    function Get_LoginTimeout: Integer;
    procedure Set_LoginTimeout(pRetVal: Integer);
    function Get_NetPacketSize: Integer;
    procedure Set_NetPacketSize(pRetVal: Integer);
    function Get_HostName: WideString;
    procedure Set_HostName(const pRetVal: WideString);
    function Get_ApplicationName: WideString;
    procedure Set_ApplicationName(const pRetVal: WideString);
    function Get_LoginSecure: WordBool;
    procedure Set_LoginSecure(pRetVal: WordBool);
    function Get_ProcessID: Integer;
    function Get_Status: SQLDMO_SVCSTATUS_TYPE;
    function Get_Registry: Registry;
    function Get_Configuration: Configuration;
    function Get_JobServer: JobServer;
    function Get_ProcessInputBuffer(ProcessID: Integer): WideString;
    function Get_ProcessOutputBuffer(ProcessID: Integer): WideString;
    function Get_Language: WideString;
    procedure Set_Language(const pRetVal: WideString);
    function Get_AutoReConnect: WordBool;
    procedure Set_AutoReConnect(pRetVal: WordBool);
    function Get_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE): Integer;
    procedure Set_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE; pRetVal: Integer);
    function Get_SaLogin: WordBool;
    function Get_AnsiNulls: WordBool;
    procedure Set_AnsiNulls(pRetVal: WordBool);
    function Get_NetName: WideString;
    function Get_Replication: Replication;
    function Get_EnableBcp: WordBool;
    procedure Set_EnableBcp(pRetVal: WordBool);
    function Get_BlockingTimeout: Integer;
    procedure Set_BlockingTimeout(pRetVal: Integer);
    function Get_ServerRoles: ServerRoles;
    function Get_Isdbcreator: WordBool;
    function Get_Isdiskadmin: WordBool;
    function Get_Isprocessadmin: WordBool;
    function Get_Issecurityadmin: WordBool;
    function Get_Isserveradmin: WordBool;
    function Get_Issetupadmin: WordBool;
    function Get_Issysadmin: WordBool;
    function Get_QuotedIdentifier: WordBool;
    procedure Set_QuotedIdentifier(pRetVal: WordBool);
    function Get_LinkedServers: LinkedServers;
    procedure Set_CodePageOverride(Param1: Integer);
    function Get_FullTextService: FullTextService;
    function Get_ODBCPrefix: WordBool;
    procedure Set_ODBCPrefix(pRetVal: WordBool);
    function Get_RegionalSetting: WordBool;
    procedure Set_RegionalSetting(pRetVal: WordBool);
    function Get_CodePage: Integer;
    function Get_ServerTime: WideString;
    function Get_TranslateChar: WordBool;
    procedure Set_TranslateChar(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SQLServer);
    procedure Disconnect; override;
    procedure Connect1; overload;
    procedure Connect1(ServerName: OleVariant); overload;
    procedure Connect1(ServerName: OleVariant; Login: OleVariant); overload;
    procedure Connect1(ServerName: OleVariant; Login: OleVariant; Password: OleVariant); overload;
    procedure Close;
    procedure DisConnect1;
    procedure KillProcess(lProcessID: Integer);
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE); overload;
    procedure ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                               Length: OleVariant); overload;
    procedure ReConnect;
    procedure Shutdown; overload;
    procedure Shutdown(Wait: OleVariant); overload;
    procedure Start(StartMode: WordBool); overload;
    procedure Start(StartMode: WordBool; Server: OleVariant); overload;
    procedure Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant); overload;
    procedure Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant; Password: OleVariant); overload;
    procedure UnloadODSDLL(const DLLName: WideString);
    procedure KillDatabase(const DatabaseName: WideString);
    function ExecuteWithResults(const Command: WideString): QueryResults; overload;
    function ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults; overload;
    function ListStartupProcedures: SQLObjectList;
    procedure BeginTransaction; overload;
    procedure BeginTransaction(TransactionName: OleVariant); overload;
    procedure CommitTransaction; overload;
    procedure CommitTransaction(TransactionName: OleVariant); overload;
    procedure SaveTransaction(const SavepointName: WideString);
    procedure RollbackTransaction; overload;
    procedure RollbackTransaction(TransactionOrSavepointName: OleVariant); overload;
    procedure CommandShellImmediate(const Command: WideString);
    function ReadErrorLog: QueryResults; overload;
    function ReadErrorLog(LogNumber: OleVariant): QueryResults; overload;
    function EnumErrorLogs: QueryResults;
    function EnumAvailableMedia(MediaType: SQLDMO_MEDIA_TYPE): QueryResults;
    function EnumDirectories(const PathName: WideString): QueryResults;
    function EnumServerAttributes: QueryResults;
    function EnumVersionInfo: QueryResults; overload;
    function EnumVersionInfo(Prefixes: OleVariant): QueryResults; overload;
    function EnumLocks: QueryResults; overload;
    function EnumLocks(WhoByID: OleVariant): QueryResults; overload;
    function CommandShellWithResults(const Command: WideString): QueryResults;
    function ReadBackupHeader(const LoadSpec: Restore): QueryResults;
    function EnumProcesses: QueryResults; overload;
    function EnumProcesses(WhoByNameOrID: OleVariant): QueryResults; overload;
    procedure Pause;
    procedure Continue;
    function VerifyConnection: WordBool; overload;
    function VerifyConnection(ReconnectIfDead: OleVariant): WordBool; overload;
    function IsOS(lType: SQLDMO_OS_TYPE): WordBool;
    procedure AddStartParameter(const NewParam: WideString);
    function ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                           out Messages: WideString): QueryResults;
    function EnumLoginMappings: QueryResults;
    function EnumNTDomainGroups: QueryResults; overload;
    function EnumNTDomainGroups(Domain: OleVariant): QueryResults; overload;
    function EnumAccountInfo: QueryResults; overload;
    function EnumAccountInfo(Account: OleVariant): QueryResults; overload;
    function EnumAccountInfo(Account: OleVariant; ListAll: OleVariant): QueryResults; overload;
    function ListMembers(Type_: SQLDMO_ROLE_TYPE): NameList;
    function IsLogin(const LoginName: WideString): WordBool;
    procedure Abort;
    function DetachDB(const DBName: WideString; bCheck: WordBool): WideString;
    function AttachDB(const DBName: WideString; const DataFiles: WideString): WideString;
    procedure Stop;
    function PingSQLServerVersion: SQLDMO_SQL_VER; overload;
    function PingSQLServerVersion(ServerName: OleVariant): SQLDMO_SQL_VER; overload;
    function PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant): SQLDMO_SQL_VER; overload;
    function PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant; Password: OleVariant): SQLDMO_SQL_VER; overload;
    function IsPackage: SQLDMO_PACKAGE_TYPE;
    function AttachDBWithSingleFile(const DBName: WideString; const DataFile: WideString): WideString;
    function IsNTGroupMember(const NTGroup: WideString; const NTUser: WideString): WordBool;
    property DefaultInterface: _SQLServer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property Databases: Databases read Get_Databases;
    property VersionString: WideString read Get_VersionString;
    property BackupDevices: BackupDevices read Get_BackupDevices;
    property VersionMajor: Integer read Get_VersionMajor;
    property VersionMinor: Integer read Get_VersionMinor;
    property TrueName: WideString read Get_TrueName;
    property ConnectionID: Integer read Get_ConnectionID;
    property TrueLogin: WideString read Get_TrueLogin;
    property IntegratedSecurity: IntegratedSecurity read Get_IntegratedSecurity;
    property Languages: Languages read Get_Languages;
    property RemoteServers: RemoteServers read Get_RemoteServers;
    property Logins: Logins read Get_Logins;
    property UserProfile: SQLDMO_SRVUSERPROFILE_TYPE read Get_UserProfile;
    property MaxNumericPrecision: Integer read Get_MaxNumericPrecision;
    property NextDeviceNumber: Integer read Get_NextDeviceNumber;
    property ProcessID: Integer read Get_ProcessID;
    property Status: SQLDMO_SVCSTATUS_TYPE read Get_Status;
    property Registry: Registry read Get_Registry;
    property Configuration: Configuration read Get_Configuration;
    property JobServer: JobServer read Get_JobServer;
    property ProcessInputBuffer[ProcessID: Integer]: WideString read Get_ProcessInputBuffer;
    property ProcessOutputBuffer[ProcessID: Integer]: WideString read Get_ProcessOutputBuffer;
    property StatusInfoRefetchInterval[StatusInfoType: SQLDMO_STATUSINFO_TYPE]: Integer read Get_StatusInfoRefetchInterval write Set_StatusInfoRefetchInterval;
    property SaLogin: WordBool read Get_SaLogin;
    property NetName: WideString read Get_NetName;
    property Replication: Replication read Get_Replication;
    property ServerRoles: ServerRoles read Get_ServerRoles;
    property Isdbcreator: WordBool read Get_Isdbcreator;
    property Isdiskadmin: WordBool read Get_Isdiskadmin;
    property Isprocessadmin: WordBool read Get_Isprocessadmin;
    property Issecurityadmin: WordBool read Get_Issecurityadmin;
    property Isserveradmin: WordBool read Get_Isserveradmin;
    property Issetupadmin: WordBool read Get_Issetupadmin;
    property Issysadmin: WordBool read Get_Issysadmin;
    property LinkedServers: LinkedServers read Get_LinkedServers;
    property CodePageOverride: Integer write Set_CodePageOverride;
    property FullTextService: FullTextService read Get_FullTextService;
    property CodePage: Integer read Get_CodePage;
    property ServerTime: WideString read Get_ServerTime;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Password: WideString read Get_Password write Set_Password;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property CommandTerminator: WideString read Get_CommandTerminator write Set_CommandTerminator;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
    property LoginTimeout: Integer read Get_LoginTimeout write Set_LoginTimeout;
    property NetPacketSize: Integer read Get_NetPacketSize write Set_NetPacketSize;
    property HostName: WideString read Get_HostName write Set_HostName;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property LoginSecure: WordBool read Get_LoginSecure write Set_LoginSecure;
    property Language: WideString read Get_Language write Set_Language;
    property AutoReConnect: WordBool read Get_AutoReConnect write Set_AutoReConnect;
    property AnsiNulls: WordBool read Get_AnsiNulls write Set_AnsiNulls;
    property EnableBcp: WordBool read Get_EnableBcp write Set_EnableBcp;
    property BlockingTimeout: Integer read Get_BlockingTimeout write Set_BlockingTimeout;
    property QuotedIdentifier: WordBool read Get_QuotedIdentifier write Set_QuotedIdentifier;
    property ODBCPrefix: WordBool read Get_ODBCPrefix write Set_ODBCPrefix;
    property RegionalSetting: WordBool read Get_RegionalSetting write Set_RegionalSetting;
    property TranslateChar: WordBool read Get_TranslateChar write Set_TranslateChar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSQLServerProperties read GetServerProperties;
{$ENDIF}
    property OnQueryTimeout: TSQLServerQueryTimeout read FOnQueryTimeout write FOnQueryTimeout;
    property OnServerMessage: TSQLServerServerMessage read FOnServerMessage write FOnServerMessage;
    property OnConnectionBroken: TSQLServerConnectionBroken read FOnConnectionBroken write FOnConnectionBroken;
    property OnRemoteLoginFailed: TSQLServerRemoteLoginFailed read FOnRemoteLoginFailed write FOnRemoteLoginFailed;
    property OnCommandSent: TSQLServerCommandSent read FOnCommandSent write FOnCommandSent;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSQLServer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSQLServerProperties = class(TPersistent)
  private
    FServer:    TSQLServer;
    function    GetDefaultInterface: _SQLServer;
    constructor Create(AServer: TSQLServer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Databases: Databases;
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_VersionString: WideString;
    function Get_BackupDevices: BackupDevices;
    function Get_VersionMajor: Integer;
    function Get_VersionMinor: Integer;
    function Get_CommandTerminator: WideString;
    procedure Set_CommandTerminator(const pRetVal: WideString);
    function Get_TrueName: WideString;
    function Get_ConnectionID: Integer;
    function Get_TrueLogin: WideString;
    function Get_IntegratedSecurity: IntegratedSecurity;
    function Get_Languages: Languages;
    function Get_RemoteServers: RemoteServers;
    function Get_Logins: Logins;
    function Get_UserProfile: SQLDMO_SRVUSERPROFILE_TYPE;
    function Get_MaxNumericPrecision: Integer;
    function Get_NextDeviceNumber: Integer;
    function Get_QueryTimeout: Integer;
    procedure Set_QueryTimeout(pRetVal: Integer);
    function Get_LoginTimeout: Integer;
    procedure Set_LoginTimeout(pRetVal: Integer);
    function Get_NetPacketSize: Integer;
    procedure Set_NetPacketSize(pRetVal: Integer);
    function Get_HostName: WideString;
    procedure Set_HostName(const pRetVal: WideString);
    function Get_ApplicationName: WideString;
    procedure Set_ApplicationName(const pRetVal: WideString);
    function Get_LoginSecure: WordBool;
    procedure Set_LoginSecure(pRetVal: WordBool);
    function Get_ProcessID: Integer;
    function Get_Status: SQLDMO_SVCSTATUS_TYPE;
    function Get_Registry: Registry;
    function Get_Configuration: Configuration;
    function Get_JobServer: JobServer;
    function Get_ProcessInputBuffer(ProcessID: Integer): WideString;
    function Get_ProcessOutputBuffer(ProcessID: Integer): WideString;
    function Get_Language: WideString;
    procedure Set_Language(const pRetVal: WideString);
    function Get_AutoReConnect: WordBool;
    procedure Set_AutoReConnect(pRetVal: WordBool);
    function Get_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE): Integer;
    procedure Set_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE; pRetVal: Integer);
    function Get_SaLogin: WordBool;
    function Get_AnsiNulls: WordBool;
    procedure Set_AnsiNulls(pRetVal: WordBool);
    function Get_NetName: WideString;
    function Get_Replication: Replication;
    function Get_EnableBcp: WordBool;
    procedure Set_EnableBcp(pRetVal: WordBool);
    function Get_BlockingTimeout: Integer;
    procedure Set_BlockingTimeout(pRetVal: Integer);
    function Get_ServerRoles: ServerRoles;
    function Get_Isdbcreator: WordBool;
    function Get_Isdiskadmin: WordBool;
    function Get_Isprocessadmin: WordBool;
    function Get_Issecurityadmin: WordBool;
    function Get_Isserveradmin: WordBool;
    function Get_Issetupadmin: WordBool;
    function Get_Issysadmin: WordBool;
    function Get_QuotedIdentifier: WordBool;
    procedure Set_QuotedIdentifier(pRetVal: WordBool);
    function Get_LinkedServers: LinkedServers;
    procedure Set_CodePageOverride(Param1: Integer);
    function Get_FullTextService: FullTextService;
    function Get_ODBCPrefix: WordBool;
    procedure Set_ODBCPrefix(pRetVal: WordBool);
    function Get_RegionalSetting: WordBool;
    procedure Set_RegionalSetting(pRetVal: WordBool);
    function Get_CodePage: Integer;
    function Get_ServerTime: WideString;
    function Get_TranslateChar: WordBool;
    procedure Set_TranslateChar(pRetVal: WordBool);
  public
    property DefaultInterface: _SQLServer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Password: WideString read Get_Password write Set_Password;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property CommandTerminator: WideString read Get_CommandTerminator write Set_CommandTerminator;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
    property LoginTimeout: Integer read Get_LoginTimeout write Set_LoginTimeout;
    property NetPacketSize: Integer read Get_NetPacketSize write Set_NetPacketSize;
    property HostName: WideString read Get_HostName write Set_HostName;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property LoginSecure: WordBool read Get_LoginSecure write Set_LoginSecure;
    property Language: WideString read Get_Language write Set_Language;
    property AutoReConnect: WordBool read Get_AutoReConnect write Set_AutoReConnect;
    property AnsiNulls: WordBool read Get_AnsiNulls write Set_AnsiNulls;
    property EnableBcp: WordBool read Get_EnableBcp write Set_EnableBcp;
    property BlockingTimeout: Integer read Get_BlockingTimeout write Set_BlockingTimeout;
    property QuotedIdentifier: WordBool read Get_QuotedIdentifier write Set_QuotedIdentifier;
    property ODBCPrefix: WordBool read Get_ODBCPrefix write Set_ODBCPrefix;
    property RegionalSetting: WordBool read Get_RegionalSetting write Set_RegionalSetting;
    property TranslateChar: WordBool read Get_TranslateChar write Set_TranslateChar;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoServerGroup provides a Create and CreateRemote method to          
// create instances of the default interface _ServerGroup exposed by              
// the CoClass ServerGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoServerGroup = class
    class function Create: _ServerGroup;
    class function CreateRemote(const MachineName: string): _ServerGroup;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TServerGroup
// Help String      : SQLDMO Server Group
// Default Interface: _ServerGroup
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TServerGroupProperties= class;
{$ENDIF}
  TServerGroup = class(TOleServer)
  private
    FIntf:        _ServerGroup;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TServerGroupProperties;
    function      GetServerProperties: TServerGroupProperties;
{$ENDIF}
    function      GetDefaultInterface: _ServerGroup;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_RegisteredServers: RegisteredServers;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ServerGroups: ServerGroups;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _ServerGroup);
    procedure Disconnect; override;
    procedure Remove;
    property DefaultInterface: _ServerGroup read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property RegisteredServers: RegisteredServers read Get_RegisteredServers;
    property Properties: Properties read Get_Properties;
    property ServerGroups: ServerGroups read Get_ServerGroups;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TServerGroupProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TServerGroup
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TServerGroupProperties = class(TPersistent)
  private
    FServer:    TServerGroup;
    function    GetDefaultInterface: _ServerGroup;
    constructor Create(AServer: TServerGroup);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_RegisteredServers: RegisteredServers;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ServerGroups: ServerGroups;
  public
    property DefaultInterface: _ServerGroup read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRegisteredServer provides a Create and CreateRemote method to          
// create instances of the default interface _RegisteredServer exposed by              
// the CoClass RegisteredServer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRegisteredServer = class
    class function Create: _RegisteredServer;
    class function CreateRemote(const MachineName: string): _RegisteredServer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRegisteredServer
// Help String      : SQLDMO Registered Server
// Default Interface: _RegisteredServer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRegisteredServerProperties= class;
{$ENDIF}
  TRegisteredServer = class(TOleServer)
  private
    FIntf:        _RegisteredServer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRegisteredServerProperties;
    function      GetServerProperties: TRegisteredServerProperties;
{$ENDIF}
    function      GetDefaultInterface: _RegisteredServer;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_UseTrustedConnection: Integer;
    procedure Set_UseTrustedConnection(pRetVal: Integer);
    function Get_VersionMajor: Integer;
    function Get_VersionMinor: Integer;
    function Get_SaLogin: WordBool;
    function Get_PersistFlags: Integer;
    procedure Set_PersistFlags(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RegisteredServer);
    procedure Disconnect; override;
    procedure Remove;
    property DefaultInterface: _RegisteredServer read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property VersionMajor: Integer read Get_VersionMajor;
    property VersionMinor: Integer read Get_VersionMinor;
    property SaLogin: WordBool read Get_SaLogin;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property Password: WideString read Get_Password write Set_Password;
    property UseTrustedConnection: Integer read Get_UseTrustedConnection write Set_UseTrustedConnection;
    property PersistFlags: Integer read Get_PersistFlags write Set_PersistFlags;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRegisteredServerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRegisteredServer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRegisteredServerProperties = class(TPersistent)
  private
    FServer:    TRegisteredServer;
    function    GetDefaultInterface: _RegisteredServer;
    constructor Create(AServer: TRegisteredServer);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Login: WideString;
    procedure Set_Login(const pRetVal: WideString);
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_UseTrustedConnection: Integer;
    procedure Set_UseTrustedConnection(pRetVal: Integer);
    function Get_VersionMajor: Integer;
    function Get_VersionMinor: Integer;
    function Get_SaLogin: WordBool;
    function Get_PersistFlags: Integer;
    procedure Set_PersistFlags(pRetVal: Integer);
  public
    property DefaultInterface: _RegisteredServer read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Login: WideString read Get_Login write Set_Login;
    property Password: WideString read Get_Password write Set_Password;
    property UseTrustedConnection: Integer read Get_UseTrustedConnection write Set_UseTrustedConnection;
    property PersistFlags: Integer read Get_PersistFlags write Set_PersistFlags;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSQLServer2 provides a Create and CreateRemote method to          
// create instances of the default interface _SQLServer2 exposed by              
// the CoClass SQLServer2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSQLServer2 = class
    class function Create: _SQLServer2;
    class function CreateRemote(const MachineName: string): _SQLServer2;
  end;

  TSQLServer2QueryTimeout = procedure(ASender: TObject; const Message: WideString; 
                                                        out Continue: WordBool) of object;
  TSQLServer2ServerMessage = procedure(ASender: TObject; Severity: Integer; MessageNumber: Integer; 
                                                         MessageState: Integer; 
                                                         const Message: WideString) of object;
  TSQLServer2ConnectionBroken = procedure(ASender: TObject; const Message: WideString; 
                                                            out Retry: WordBool) of object;
  TSQLServer2RemoteLoginFailed = procedure(ASender: TObject; Severity: Integer; 
                                                             MessageNumber: Integer; 
                                                             MessageState: Integer; 
                                                             const Message: WideString) of object;
  TSQLServer2CommandSent = procedure(ASender: TObject; const SQLCommand: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSQLServer2
// Help String      : SQLDMO Server
// Default Interface: _SQLServer2
// Def. Intf. DISP? : No
// Event   Interface: ServerSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSQLServer2Properties= class;
{$ENDIF}
  TSQLServer2 = class(TOleServer)
  private
    FOnQueryTimeout: TSQLServer2QueryTimeout;
    FOnServerMessage: TSQLServer2ServerMessage;
    FOnConnectionBroken: TSQLServer2ConnectionBroken;
    FOnRemoteLoginFailed: TSQLServer2RemoteLoginFailed;
    FOnCommandSent: TSQLServer2CommandSent;
    FIntf:        _SQLServer2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSQLServer2Properties;
    function      GetServerProperties: TSQLServer2Properties;
{$ENDIF}
    function      GetDefaultInterface: _SQLServer2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_AutoStart: WordBool;
    procedure Set_AutoStart(pRetVal: WordBool);
    function Get_StartupAccount: WideString;
    function Get_InstanceName: WideString;
    function Get_ServiceName: WideString;
    function Get_PID: Integer;
    function Get_IsClustered: WordBool;
    function Get_Collation: WideString;
    function Get_IsFullTextInstalled: WordBool;
    function Get_ProductLevel: WideString;
    function Get_Isbulkadmin: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SQLServer2);
    procedure Disconnect; override;
    function IsDetachedPrimaryFile(const MDFName: WideString): WordBool;
    function ListDetachedDBFiles(const MDFName: WideString): NameList;
    function DetachedDBInfo(const MDFName: WideString): QueryResults;
    function ListCompatibilityLevels: NameList;
    function ListCollations: NameList;
    function ListDetachedLogFiles(const MDFName: WideString): NameList;
    function ServerLoginMode(const ServerName: WideString): SQLDMO_SECURITY_TYPE;
    function AttachDBWithSingleFile2(const DBName: WideString; const DataFile: WideString): WordBool;
    function ListInstalledInstances: NameList; overload;
    function ListInstalledInstances(ServerName: OleVariant): NameList; overload;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString): QueryResults; overload;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; overload;
    function EnumCollations: QueryResults;
    property DefaultInterface: _SQLServer2 read GetDefaultInterface;
    property StartupAccount: WideString read Get_StartupAccount;
    property InstanceName: WideString read Get_InstanceName;
    property ServiceName: WideString read Get_ServiceName;
    property PID: Integer read Get_PID;
    property IsClustered: WordBool read Get_IsClustered;
    property Collation: WideString read Get_Collation;
    property IsFullTextInstalled: WordBool read Get_IsFullTextInstalled;
    property ProductLevel: WideString read Get_ProductLevel;
    property Isbulkadmin: WordBool read Get_Isbulkadmin;
    property AutoStart: WordBool read Get_AutoStart write Set_AutoStart;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSQLServer2Properties read GetServerProperties;
{$ENDIF}
    property OnQueryTimeout: TSQLServer2QueryTimeout read FOnQueryTimeout write FOnQueryTimeout;
    property OnServerMessage: TSQLServer2ServerMessage read FOnServerMessage write FOnServerMessage;
    property OnConnectionBroken: TSQLServer2ConnectionBroken read FOnConnectionBroken write FOnConnectionBroken;
    property OnRemoteLoginFailed: TSQLServer2RemoteLoginFailed read FOnRemoteLoginFailed write FOnRemoteLoginFailed;
    property OnCommandSent: TSQLServer2CommandSent read FOnCommandSent write FOnCommandSent;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSQLServer2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSQLServer2Properties = class(TPersistent)
  private
    FServer:    TSQLServer2;
    function    GetDefaultInterface: _SQLServer2;
    constructor Create(AServer: TSQLServer2);
  protected
    function Get_AutoStart: WordBool;
    procedure Set_AutoStart(pRetVal: WordBool);
    function Get_StartupAccount: WideString;
    function Get_InstanceName: WideString;
    function Get_ServiceName: WideString;
    function Get_PID: Integer;
    function Get_IsClustered: WordBool;
    function Get_Collation: WideString;
    function Get_IsFullTextInstalled: WordBool;
    function Get_ProductLevel: WideString;
    function Get_Isbulkadmin: WordBool;
  public
    property DefaultInterface: _SQLServer2 read GetDefaultInterface;
  published
    property AutoStart: WordBool read Get_AutoStart write Set_AutoStart;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDatabase2 provides a Create and CreateRemote method to          
// create instances of the default interface _Database2 exposed by              
// the CoClass Database2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatabase2 = class
    class function Create: _Database2;
    class function CreateRemote(const MachineName: string): _Database2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDatabase2
// Help String      : SQLDMO Database
// Default Interface: _Database2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDatabase2Properties= class;
{$ENDIF}
  TDatabase2 = class(TOleServer)
  private
    FIntf:        _Database2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDatabase2Properties;
    function      GetServerProperties: TDatabase2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Database2;
  protected
    procedure InitServerData; override;
    function Get_CurrentCompatibility: WideString;
    procedure Set_CurrentCompatibility(const pRetVal: WideString);
    function Get_UserDefinedFunctions: UserDefinedFunctions;
    function Get_Collation: WideString;
    procedure Set_Collation(const pRetVal: WideString);
    function Get_SizeInKB: Single;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Database2);
    procedure Disconnect; override;
    function CheckTablesWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults;
    function CheckAllocationsWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults;
    function CheckCatalogWithResult: QueryResults;
    function CheckTablesDataOnlyWithResult: QueryResults;
    function CheckAllocationsDataOnlyWithResult: QueryResults;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString): QueryResults; overload;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; overload;
    procedure CheckRuleSyntax(const Rule: Rule);
    procedure CheckDefaultSyntax(const Default: Default);
    function IsObjectDeleted(ObjectType: SQLDMO_OBJECT_TYPE; const ObjectName: WideString; 
                             const ObjectOwner: WideString): WordBool;
    property DefaultInterface: _Database2 read GetDefaultInterface;
    property UserDefinedFunctions: UserDefinedFunctions read Get_UserDefinedFunctions;
    property SizeInKB: Single read Get_SizeInKB;
    property IsDeleted: WordBool read Get_IsDeleted;
    property CurrentCompatibility: WideString read Get_CurrentCompatibility write Set_CurrentCompatibility;
    property Collation: WideString read Get_Collation write Set_Collation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDatabase2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDatabase2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDatabase2Properties = class(TPersistent)
  private
    FServer:    TDatabase2;
    function    GetDefaultInterface: _Database2;
    constructor Create(AServer: TDatabase2);
  protected
    function Get_CurrentCompatibility: WideString;
    procedure Set_CurrentCompatibility(const pRetVal: WideString);
    function Get_UserDefinedFunctions: UserDefinedFunctions;
    function Get_Collation: WideString;
    procedure Set_Collation(const pRetVal: WideString);
    function Get_SizeInKB: Single;
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _Database2 read GetDefaultInterface;
  published
    property CurrentCompatibility: WideString read Get_CurrentCompatibility write Set_CurrentCompatibility;
    property Collation: WideString read Get_Collation write Set_Collation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTable2 provides a Create and CreateRemote method to          
// create instances of the default interface _Table2 exposed by              
// the CoClass Table2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTable2 = class
    class function Create: _Table2;
    class function CreateRemote(const MachineName: string): _Table2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTable2
// Help String      : SQLDMO Table
// Default Interface: _Table2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTable2Properties= class;
{$ENDIF}
  TTable2 = class(TOleServer)
  private
    FIntf:        _Table2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTable2Properties;
    function      GetServerProperties: TTable2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Table2;
  protected
    procedure InitServerData; override;
    function Get_TableFullTextChangeTrackingOn: WordBool;
    procedure Set_TableFullTextChangeTrackingOn(pRetVal: WordBool);
    function Get_TableFullTextUpdateIndexOn: WordBool;
    procedure Set_TableFullTextUpdateIndexOn(pRetVal: WordBool);
    function Get_FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Table2);
    procedure Disconnect; override;
    function CheckTableWithResult: QueryResults;
    function CheckTableDataOnlyWithResult: QueryResults;
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList;
    procedure FullTextUpdateIndex;
    procedure FullTextPopulation(Type_: SQLDMO_FULLTEXT_POPULATE_TYPE);
    function ListColumnPermissions: SQLObjectList;
    property DefaultInterface: _Table2 read GetDefaultInterface;
    property FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS read Get_FullTextPopulateStatus;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus;
    property IsDeleted: WordBool read Get_IsDeleted;
    property TableFullTextChangeTrackingOn: WordBool read Get_TableFullTextChangeTrackingOn write Set_TableFullTextChangeTrackingOn;
    property TableFullTextUpdateIndexOn: WordBool read Get_TableFullTextUpdateIndexOn write Set_TableFullTextUpdateIndexOn;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTable2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTable2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTable2Properties = class(TPersistent)
  private
    FServer:    TTable2;
    function    GetDefaultInterface: _Table2;
    constructor Create(AServer: TTable2);
  protected
    function Get_TableFullTextChangeTrackingOn: WordBool;
    procedure Set_TableFullTextChangeTrackingOn(pRetVal: WordBool);
    function Get_TableFullTextUpdateIndexOn: WordBool;
    procedure Set_TableFullTextUpdateIndexOn(pRetVal: WordBool);
    function Get_FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _Table2 read GetDefaultInterface;
  published
    property TableFullTextChangeTrackingOn: WordBool read Get_TableFullTextChangeTrackingOn write Set_TableFullTextChangeTrackingOn;
    property TableFullTextUpdateIndexOn: WordBool read Get_TableFullTextUpdateIndexOn write Set_TableFullTextUpdateIndexOn;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoColumn2 provides a Create and CreateRemote method to          
// create instances of the default interface _Column2 exposed by              
// the CoClass Column2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColumn2 = class
    class function Create: _Column2;
    class function CreateRemote(const MachineName: string): _Column2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TColumn2
// Help String      : SQLDMO Column
// Default Interface: _Column2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TColumn2Properties= class;
{$ENDIF}
  TColumn2 = class(TOleServer)
  private
    FIntf:        _Column2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TColumn2Properties;
    function      GetServerProperties: TColumn2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Column2;
  protected
    procedure InitServerData; override;
    function Get_Collation: WideString;
    procedure Set_Collation(const pRetVal: WideString);
    function Get_FullTextImageColumnType: WideString;
    function Get_FullTextColumnLanguageID: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Column2);
    procedure Disconnect; override;
    procedure SetFullTextIndexWithOptions(Index: WordBool; LanguageID: Integer; 
                                          const ColumnType: WideString);
    procedure AlterDataType(const Datatype: WideString; Length: Integer; Precision: Integer; 
                            Scale: Integer);
    property DefaultInterface: _Column2 read GetDefaultInterface;
    property FullTextImageColumnType: WideString read Get_FullTextImageColumnType;
    property FullTextColumnLanguageID: Integer read Get_FullTextColumnLanguageID;
    property Collation: WideString read Get_Collation write Set_Collation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TColumn2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TColumn2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TColumn2Properties = class(TPersistent)
  private
    FServer:    TColumn2;
    function    GetDefaultInterface: _Column2;
    constructor Create(AServer: TColumn2);
  protected
    function Get_Collation: WideString;
    procedure Set_Collation(const pRetVal: WideString);
    function Get_FullTextImageColumnType: WideString;
    function Get_FullTextColumnLanguageID: Integer;
  public
    property DefaultInterface: _Column2 read GetDefaultInterface;
  published
    property Collation: WideString read Get_Collation write Set_Collation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoView2 provides a Create and CreateRemote method to          
// create instances of the default interface _View2 exposed by              
// the CoClass View2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoView2 = class
    class function Create: _View2;
    class function CreateRemote(const MachineName: string): _View2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TView2
// Help String      : SQLDMO View
// Default Interface: _View2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TView2Properties= class;
{$ENDIF}
  TView2 = class(TOleServer)
  private
    FIntf:        _View2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TView2Properties;
    function      GetServerProperties: TView2Properties;
{$ENDIF}
    function      GetDefaultInterface: _View2;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_Indexes: Indexes;
    function Get_ClusteredIndex: Index;
    function Get_IsSchemaBound: WordBool;
    function Get_Triggers: Triggers;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _View2);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant; 
                     RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function ListColumns: SQLObjectList;
    function ExportData(const Bcp: BulkCopy): Integer;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   ColumnNames: OleVariant; GrantGrant: OleVariant); overload;
    procedure Alter(const NewText: WideString);
    function ListUserColumnPermissions(const UserName: WideString): SQLObjectList;
    function ListColumnPermissions: SQLObjectList;
    property DefaultInterface: _View2 read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property SystemObject: WordBool read Get_SystemObject;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property Indexes: Indexes read Get_Indexes;
    property ClusteredIndex: Index read Get_ClusteredIndex;
    property IsSchemaBound: WordBool read Get_IsSchemaBound;
    property Triggers: Triggers read Get_Triggers;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TView2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TView2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TView2Properties = class(TPersistent)
  private
    FServer:    TView2;
    function    GetDefaultInterface: _View2;
    constructor Create(AServer: TView2);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_Indexes: Indexes;
    function Get_ClusteredIndex: Index;
    function Get_IsSchemaBound: WordBool;
    function Get_Triggers: Triggers;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    property DefaultInterface: _View2 read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUserDefinedDatatype2 provides a Create and CreateRemote method to          
// create instances of the default interface _UserDefinedDatatype2 exposed by              
// the CoClass UserDefinedDatatype2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserDefinedDatatype2 = class
    class function Create: _UserDefinedDatatype2;
    class function CreateRemote(const MachineName: string): _UserDefinedDatatype2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUserDefinedDatatype2
// Help String      : SQLDMO UserDefinedDatatype
// Default Interface: _UserDefinedDatatype2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUserDefinedDatatype2Properties= class;
{$ENDIF}
  TUserDefinedDatatype2 = class(TOleServer)
  private
    FIntf:        _UserDefinedDatatype2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUserDefinedDatatype2Properties;
    function      GetServerProperties: TUserDefinedDatatype2Properties;
{$ENDIF}
    function      GetDefaultInterface: _UserDefinedDatatype2;
  protected
    procedure InitServerData; override;
    function Get_Collation: WideString;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UserDefinedDatatype2);
    procedure Disconnect; override;
    property DefaultInterface: _UserDefinedDatatype2 read GetDefaultInterface;
    property Collation: WideString read Get_Collation;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUserDefinedDatatype2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUserDefinedDatatype2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUserDefinedDatatype2Properties = class(TPersistent)
  private
    FServer:    TUserDefinedDatatype2;
    function    GetDefaultInterface: _UserDefinedDatatype2;
    constructor Create(AServer: TUserDefinedDatatype2);
  protected
    function Get_Collation: WideString;
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _UserDefinedDatatype2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDefault2 provides a Create and CreateRemote method to          
// create instances of the default interface _Default2 exposed by              
// the CoClass Default2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefault2 = class
    class function Create: _Default2;
    class function CreateRemote(const MachineName: string): _Default2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDefault2
// Help String      : SQLDMO Default
// Default Interface: _Default2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDefault2Properties= class;
{$ENDIF}
  TDefault2 = class(TOleServer)
  private
    FIntf:        _Default2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDefault2Properties;
    function      GetServerProperties: TDefault2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Default2;
  protected
    procedure InitServerData; override;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Default2);
    procedure Disconnect; override;
    property DefaultInterface: _Default2 read GetDefaultInterface;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDefault2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDefault2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDefault2Properties = class(TPersistent)
  private
    FServer:    TDefault2;
    function    GetDefaultInterface: _Default2;
    constructor Create(AServer: TDefault2);
  protected
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _Default2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRule2 provides a Create and CreateRemote method to          
// create instances of the default interface _Rule2 exposed by              
// the CoClass Rule2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRule2 = class
    class function Create: _Rule2;
    class function CreateRemote(const MachineName: string): _Rule2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRule2
// Help String      : SQLDMO Rule
// Default Interface: _Rule2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRule2Properties= class;
{$ENDIF}
  TRule2 = class(TOleServer)
  private
    FIntf:        _Rule2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRule2Properties;
    function      GetServerProperties: TRule2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Rule2;
  protected
    procedure InitServerData; override;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Rule2);
    procedure Disconnect; override;
    property DefaultInterface: _Rule2 read GetDefaultInterface;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRule2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRule2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRule2Properties = class(TPersistent)
  private
    FServer:    TRule2;
    function    GetDefaultInterface: _Rule2;
    constructor Create(AServer: TRule2);
  protected
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _Rule2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUser2 provides a Create and CreateRemote method to          
// create instances of the default interface _User2 exposed by              
// the CoClass User2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUser2 = class
    class function Create: _User2;
    class function CreateRemote(const MachineName: string): _User2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUser2
// Help String      : SQLDMO User
// Default Interface: _User2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUser2Properties= class;
{$ENDIF}
  TUser2 = class(TOleServer)
  private
    FIntf:        _User2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUser2Properties;
    function      GetServerProperties: TUser2Properties;
{$ENDIF}
    function      GetDefaultInterface: _User2;
  protected
    procedure InitServerData; override;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _User2);
    procedure Disconnect; override;
    function ListObjectColumnPermissions: QueryResults;
    property DefaultInterface: _User2 read GetDefaultInterface;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUser2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUser2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUser2Properties = class(TPersistent)
  private
    FServer:    TUser2;
    function    GetDefaultInterface: _User2;
    constructor Create(AServer: TUser2);
  protected
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _User2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStoredProcedure2 provides a Create and CreateRemote method to          
// create instances of the default interface _StoredProcedure2 exposed by              
// the CoClass StoredProcedure2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStoredProcedure2 = class
    class function Create: _StoredProcedure2;
    class function CreateRemote(const MachineName: string): _StoredProcedure2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStoredProcedure2
// Help String      : SQLDMO StoredProcedure
// Default Interface: _StoredProcedure2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStoredProcedure2Properties= class;
{$ENDIF}
  TStoredProcedure2 = class(TOleServer)
  private
    FIntf:        _StoredProcedure2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStoredProcedure2Properties;
    function      GetServerProperties: TStoredProcedure2Properties;
{$ENDIF}
    function      GetDefaultInterface: _StoredProcedure2;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_type_: SQLDMO_PROCEDURE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
    function Get_Startup: WordBool;
    procedure Set_Startup(pRetVal: WordBool);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _StoredProcedure2);
    procedure Disconnect; override;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant); overload;
    procedure Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                    GrantGrant: OleVariant; AsRole: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant); overload;
    procedure Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                     GrantGrant: OleVariant; RevokeGrantOption: OleVariant; AsRole: OleVariant); overload;
    function ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
    function ListUserPermissions(const UserName: WideString): SQLObjectList;
    function EnumParameters: QueryResults;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString); overload;
    procedure Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                   GrantGrant: OleVariant); overload;
    procedure Alter(const NewText: WideString);
    property DefaultInterface: _StoredProcedure2 read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStoredProcedure2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStoredProcedure2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStoredProcedure2Properties = class(TPersistent)
  private
    FServer:    TStoredProcedure2;
    function    GetDefaultInterface: _StoredProcedure2;
    constructor Create(AServer: TStoredProcedure2);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_type_: SQLDMO_PROCEDURE_TYPE;
    procedure Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
    function Get_Startup: WordBool;
    procedure Set_Startup(pRetVal: WordBool);
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    property DefaultInterface: _StoredProcedure2 read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property type_: SQLDMO_PROCEDURE_TYPE read Get_type_ write Set_type_;
    property Startup: WordBool read Get_Startup write Set_Startup;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoIndex2 provides a Create and CreateRemote method to          
// create instances of the default interface _Index2 exposed by              
// the CoClass Index2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIndex2 = class
    class function Create: _Index2;
    class function CreateRemote(const MachineName: string): _Index2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIndex2
// Help String      : SQLDMO Index
// Default Interface: _Index2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TIndex2Properties= class;
{$ENDIF}
  TIndex2 = class(TOleServer)
  private
    FIntf:        _Index2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TIndex2Properties;
    function      GetServerProperties: TIndex2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Index2;
  protected
    procedure InitServerData; override;
    function Get_IsOnComputed: WordBool;
    function Get_IndexOnTable: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Index2);
    procedure Disconnect; override;
    function CheckIndexWithResult: QueryResults;
    procedure SetIndexedColumnDESC(const ColumnName: WideString; Descending: WordBool);
    function GetIndexedColumnDESC(const ColumnName: WideString): WordBool;
    function GenerateCreationSQLOnView(const TargetView: View): WideString;
    function GenerateSQLOnView(const pView: View): WideString;
    property DefaultInterface: _Index2 read GetDefaultInterface;
    property IsOnComputed: WordBool read Get_IsOnComputed;
    property IndexOnTable: WordBool read Get_IndexOnTable;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TIndex2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TIndex2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TIndex2Properties = class(TPersistent)
  private
    FServer:    TIndex2;
    function    GetDefaultInterface: _Index2;
    constructor Create(AServer: TIndex2);
  protected
    function Get_IsOnComputed: WordBool;
    function Get_IndexOnTable: WordBool;
  public
    property DefaultInterface: _Index2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTrigger2 provides a Create and CreateRemote method to          
// create instances of the default interface _Trigger2 exposed by              
// the CoClass Trigger2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTrigger2 = class
    class function Create: _Trigger2;
    class function CreateRemote(const MachineName: string): _Trigger2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTrigger2
// Help String      : SQLDMO Trigger
// Default Interface: _Trigger2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTrigger2Properties= class;
{$ENDIF}
  TTrigger2 = class(TOleServer)
  private
    FIntf:        _Trigger2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTrigger2Properties;
    function      GetServerProperties: TTrigger2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Trigger2;
  protected
    procedure InitServerData; override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_type_: SQLDMO_TRIGGER_TYPE;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_InsteadOfTrigger: WordBool;
    function Get_AfterTrigger: WordBool;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Trigger2);
    procedure Disconnect; override;
    procedure Remove;
    function Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                    Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
    function EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
    procedure Alter(const NewText: WideString);
    property DefaultInterface: _Trigger2 read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property SystemObject: WordBool read Get_SystemObject;
    property CreateDate: WideString read Get_CreateDate;
    property ID: Integer read Get_ID;
    property type_: SQLDMO_TRIGGER_TYPE read Get_type_;
    property QuotedIdentifierStatus: WordBool read Get_QuotedIdentifierStatus;
    property InsteadOfTrigger: WordBool read Get_InsteadOfTrigger;
    property AfterTrigger: WordBool read Get_AfterTrigger;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Encrypted: WordBool read Get_Encrypted;
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTrigger2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTrigger2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTrigger2Properties = class(TPersistent)
  private
    FServer:    TTrigger2;
    function    GetDefaultInterface: _Trigger2;
    constructor Create(AServer: TTrigger2);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_SystemObject: WordBool;
    function Get_Owner: WideString;
    procedure Set_Owner(const pRetVal: WideString);
    function Get_CreateDate: WideString;
    function Get_ID: Integer;
    function Get_Text: WideString;
    procedure Set_Text(const pRetVal: WideString);
    function Get_type_: SQLDMO_TRIGGER_TYPE;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_QuotedIdentifierStatus: WordBool;
    function Get_AnsiNullsStatus: WordBool;
    procedure Set_AnsiNullsStatus(pRetVal: WordBool);
    function Get_InsteadOfTrigger: WordBool;
    function Get_AfterTrigger: WordBool;
    function Get_IsDeleted: WordBool;
    function Get_Encrypted: WordBool;
  public
    property DefaultInterface: _Trigger2 read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property Name: WideString read Get_Name write Set_Name;
    property Owner: WideString read Get_Owner write Set_Owner;
    property Text: WideString read Get_Text write Set_Text;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property AnsiNullsStatus: WordBool read Get_AnsiNullsStatus write Set_AnsiNullsStatus;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLogin2 provides a Create and CreateRemote method to          
// create instances of the default interface _Login2 exposed by              
// the CoClass Login2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLogin2 = class
    class function Create: _Login2;
    class function CreateRemote(const MachineName: string): _Login2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLogin2
// Help String      : SQLDMO Login
// Default Interface: _Login2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLogin2Properties= class;
{$ENDIF}
  TLogin2 = class(TOleServer)
  private
    FIntf:        _Login2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLogin2Properties;
    function      GetServerProperties: TLogin2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Login2;
  protected
    procedure InitServerData; override;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Login2);
    procedure Disconnect; override;
    property DefaultInterface: _Login2 read GetDefaultInterface;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLogin2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLogin2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLogin2Properties = class(TPersistent)
  private
    FServer:    TLogin2;
    function    GetDefaultInterface: _Login2;
    constructor Create(AServer: TLogin2);
  protected
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _Login2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRemoteServer2 provides a Create and CreateRemote method to          
// create instances of the default interface _RemoteServer2 exposed by              
// the CoClass RemoteServer2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRemoteServer2 = class
    class function Create: _RemoteServer2;
    class function CreateRemote(const MachineName: string): _RemoteServer2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRemoteServer2
// Help String      : SQLDMO RemoteServer
// Default Interface: _RemoteServer2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRemoteServer2Properties= class;
{$ENDIF}
  TRemoteServer2 = class(TOleServer)
  private
    FIntf:        _RemoteServer2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRemoteServer2Properties;
    function      GetServerProperties: TRemoteServer2Properties;
{$ENDIF}
    function      GetDefaultInterface: _RemoteServer2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _RemoteServer2);
    procedure Disconnect; override;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString): QueryResults; overload;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; overload;
    property DefaultInterface: _RemoteServer2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRemoteServer2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRemoteServer2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRemoteServer2Properties = class(TPersistent)
  private
    FServer:    TRemoteServer2;
    function    GetDefaultInterface: _RemoteServer2;
    constructor Create(AServer: TRemoteServer2);
  protected
  public
    property DefaultInterface: _RemoteServer2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransfer2 provides a Create and CreateRemote method to          
// create instances of the default interface _Transfer2 exposed by              
// the CoClass Transfer2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransfer2 = class
    class function Create: _Transfer2;
    class function CreateRemote(const MachineName: string): _Transfer2;
  end;

  TTransfer2StatusMessage = procedure(ASender: TObject; const Message: WideString) of object;
  TTransfer2PercentCompleteAtStep = procedure(ASender: TObject; const Message: WideString; 
                                                                Percent: Integer) of object;
  TTransfer2ScriptTransferPercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                                        Percent: Integer) of object;
  TTransfer2TransferPercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                                  Percent: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransfer2
// Help String      : SQLDMO DB Transfer
// Default Interface: _Transfer2
// Def. Intf. DISP? : No
// Event   Interface: TransferSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransfer2Properties= class;
{$ENDIF}
  TTransfer2 = class(TOleServer)
  private
    FOnStatusMessage: TTransfer2StatusMessage;
    FOnPercentCompleteAtStep: TTransfer2PercentCompleteAtStep;
    FOnScriptTransferPercentComplete: TTransfer2ScriptTransferPercentComplete;
    FOnTransferPercentComplete: TTransfer2TransferPercentComplete;
    FIntf:        _Transfer2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransfer2Properties;
    function      GetServerProperties: TTransfer2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Transfer2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_SourceTranslateChar: WordBool;
    procedure Set_SourceTranslateChar(pRetVal: WordBool);
    function Get_DestTranslateChar: WordBool;
    procedure Set_DestTranslateChar(pRetVal: WordBool);
    function Get_IncludeDB: WordBool;
    procedure Set_IncludeDB(pRetVal: WordBool);
    function Get_CopyAllFunctions: WordBool;
    procedure Set_CopyAllFunctions(pRetVal: WordBool);
    function Get_UseCollation: WordBool;
    procedure Set_UseCollation(pRetVal: WordBool);
    function Get_UseDestTransaction: WordBool;
    procedure Set_UseDestTransaction(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Transfer2);
    procedure Disconnect; override;
    procedure RemoveAllObjects;
    property DefaultInterface: _Transfer2 read GetDefaultInterface;
    property SourceTranslateChar: WordBool read Get_SourceTranslateChar write Set_SourceTranslateChar;
    property DestTranslateChar: WordBool read Get_DestTranslateChar write Set_DestTranslateChar;
    property IncludeDB: WordBool read Get_IncludeDB write Set_IncludeDB;
    property CopyAllFunctions: WordBool read Get_CopyAllFunctions write Set_CopyAllFunctions;
    property UseCollation: WordBool read Get_UseCollation write Set_UseCollation;
    property UseDestTransaction: WordBool read Get_UseDestTransaction write Set_UseDestTransaction;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransfer2Properties read GetServerProperties;
{$ENDIF}
    property OnStatusMessage: TTransfer2StatusMessage read FOnStatusMessage write FOnStatusMessage;
    property OnPercentCompleteAtStep: TTransfer2PercentCompleteAtStep read FOnPercentCompleteAtStep write FOnPercentCompleteAtStep;
    property OnScriptTransferPercentComplete: TTransfer2ScriptTransferPercentComplete read FOnScriptTransferPercentComplete write FOnScriptTransferPercentComplete;
    property OnTransferPercentComplete: TTransfer2TransferPercentComplete read FOnTransferPercentComplete write FOnTransferPercentComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransfer2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransfer2Properties = class(TPersistent)
  private
    FServer:    TTransfer2;
    function    GetDefaultInterface: _Transfer2;
    constructor Create(AServer: TTransfer2);
  protected
    function Get_SourceTranslateChar: WordBool;
    procedure Set_SourceTranslateChar(pRetVal: WordBool);
    function Get_DestTranslateChar: WordBool;
    procedure Set_DestTranslateChar(pRetVal: WordBool);
    function Get_IncludeDB: WordBool;
    procedure Set_IncludeDB(pRetVal: WordBool);
    function Get_CopyAllFunctions: WordBool;
    procedure Set_CopyAllFunctions(pRetVal: WordBool);
    function Get_UseCollation: WordBool;
    procedure Set_UseCollation(pRetVal: WordBool);
    function Get_UseDestTransaction: WordBool;
    procedure Set_UseDestTransaction(pRetVal: WordBool);
  public
    property DefaultInterface: _Transfer2 read GetDefaultInterface;
  published
    property SourceTranslateChar: WordBool read Get_SourceTranslateChar write Set_SourceTranslateChar;
    property DestTranslateChar: WordBool read Get_DestTranslateChar write Set_DestTranslateChar;
    property IncludeDB: WordBool read Get_IncludeDB write Set_IncludeDB;
    property CopyAllFunctions: WordBool read Get_CopyAllFunctions write Set_CopyAllFunctions;
    property UseCollation: WordBool read Get_UseCollation write Set_UseCollation;
    property UseDestTransaction: WordBool read Get_UseDestTransaction write Set_UseDestTransaction;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBackup provides a Create and CreateRemote method to          
// create instances of the default interface _Backup exposed by              
// the CoClass Backup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBackup = class
    class function Create: _Backup;
    class function CreateRemote(const MachineName: string): _Backup;
  end;

  TBackupPercentComplete = procedure(ASender: TObject; const Message: WideString; Percent: Integer) of object;
  TBackupNextMedia = procedure(ASender: TObject; const Message: WideString) of object;
  TBackupComplete = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBackup
// Help String      : SQLDMO DB Backup
// Default Interface: _Backup
// Def. Intf. DISP? : No
// Event   Interface: BackupSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBackupProperties= class;
{$ENDIF}
  TBackup = class(TOleServer)
  private
    FOnPercentComplete: TBackupPercentComplete;
    FOnNextMedia: TBackupNextMedia;
    FOnComplete: TBackupComplete;
    FIntf:        _Backup;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBackupProperties;
    function      GetServerProperties: TBackupProperties;
{$ENDIF}
    function      GetDefaultInterface: _Backup;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_PercentCompleteNotification: Integer;
    procedure Set_PercentCompleteNotification(pRetVal: Integer);
    function Get_SkipTapeHeader: WordBool;
    procedure Set_SkipTapeHeader(pRetVal: WordBool);
    function Get_UnloadTapeAfter: WordBool;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_Files: WideString;
    procedure Set_Files(const pRetVal: WideString);
    function Get_DatabaseFileGroups: WideString;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString);
    function Get_DatabaseFiles: WideString;
    procedure Set_DatabaseFiles(const pRetVal: WideString);
    function Get_Action: SQLDMO_BACKUP_TYPE;
    procedure Set_Action(pRetVal: SQLDMO_BACKUP_TYPE);
    function Get_BackupSetName: WideString;
    procedure Set_BackupSetName(const pRetVal: WideString);
    function Get_BackupSetDescription: WideString;
    procedure Set_BackupSetDescription(const pRetVal: WideString);
    function Get_Restart: WordBool;
    procedure Set_Restart(pRetVal: WordBool);
    function Get_TruncateLog: SQLDMO_BACKUP_LOG_TYPE;
    procedure Set_TruncateLog(pRetVal: SQLDMO_BACKUP_LOG_TYPE);
    function Get_BlockSize: Integer;
    procedure Set_BlockSize(pRetVal: Integer);
    function Get_FormatMedia: WordBool;
    procedure Set_FormatMedia(pRetVal: WordBool);
    function Get_MediaName: WideString;
    procedure Set_MediaName(const pRetVal: WideString);
    function Get_MediaDescription: WideString;
    procedure Set_MediaDescription(const pRetVal: WideString);
    function Get_Devices: WideString;
    procedure Set_Devices(const pRetVal: WideString);
    function Get_Tapes: WideString;
    procedure Set_Tapes(const pRetVal: WideString);
    function Get_Pipes: WideString;
    procedure Set_Pipes(const pRetVal: WideString);
    function Get_ExpirationDate: WideString;
    procedure Set_ExpirationDate(const pRetVal: WideString);
    function Get_Initialize: WordBool;
    procedure Set_Initialize(pRetVal: WordBool);
    function Get_RetainDays: Integer;
    procedure Set_RetainDays(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Backup);
    procedure Disconnect; override;
    procedure Abort;
    procedure SQLBackup(const ServerObject: SQLServer);
    function GenerateSQL: WideString;
    property DefaultInterface: _Backup read GetDefaultInterface;
    property Application: Application read Get_Application;
    property Parent: _IVSQLDMOStdObject read Get_Parent;
    property TypeOf: SQLDMO_OBJECT_TYPE read Get_TypeOf;
    property Properties: Properties read Get_Properties;
    property UserData: Integer read Get_UserData write Set_UserData;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property SkipTapeHeader: WordBool read Get_SkipTapeHeader write Set_SkipTapeHeader;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Files: WideString read Get_Files write Set_Files;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_BACKUP_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property BackupSetDescription: WideString read Get_BackupSetDescription write Set_BackupSetDescription;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property TruncateLog: SQLDMO_BACKUP_LOG_TYPE read Get_TruncateLog write Set_TruncateLog;
    property BlockSize: Integer read Get_BlockSize write Set_BlockSize;
    property FormatMedia: WordBool read Get_FormatMedia write Set_FormatMedia;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property MediaDescription: WideString read Get_MediaDescription write Set_MediaDescription;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property ExpirationDate: WideString read Get_ExpirationDate write Set_ExpirationDate;
    property Initialize: WordBool read Get_Initialize write Set_Initialize;
    property RetainDays: Integer read Get_RetainDays write Set_RetainDays;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBackupProperties read GetServerProperties;
{$ENDIF}
    property OnPercentComplete: TBackupPercentComplete read FOnPercentComplete write FOnPercentComplete;
    property OnNextMedia: TBackupNextMedia read FOnNextMedia write FOnNextMedia;
    property OnComplete: TBackupComplete read FOnComplete write FOnComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBackup
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBackupProperties = class(TPersistent)
  private
    FServer:    TBackup;
    function    GetDefaultInterface: _Backup;
    constructor Create(AServer: TBackup);
  protected
    function Get_Application: Application;
    function Get_Parent: _IVSQLDMOStdObject;
    function Get_UserData: Integer;
    procedure Set_UserData(pRetVal: Integer);
    function Get_TypeOf: SQLDMO_OBJECT_TYPE;
    function Get_Properties: Properties;
    function Get_PercentCompleteNotification: Integer;
    procedure Set_PercentCompleteNotification(pRetVal: Integer);
    function Get_SkipTapeHeader: WordBool;
    procedure Set_SkipTapeHeader(pRetVal: WordBool);
    function Get_UnloadTapeAfter: WordBool;
    procedure Set_UnloadTapeAfter(pRetVal: WordBool);
    function Get_Database: WideString;
    procedure Set_Database(const pRetVal: WideString);
    function Get_Files: WideString;
    procedure Set_Files(const pRetVal: WideString);
    function Get_DatabaseFileGroups: WideString;
    procedure Set_DatabaseFileGroups(const pRetVal: WideString);
    function Get_DatabaseFiles: WideString;
    procedure Set_DatabaseFiles(const pRetVal: WideString);
    function Get_Action: SQLDMO_BACKUP_TYPE;
    procedure Set_Action(pRetVal: SQLDMO_BACKUP_TYPE);
    function Get_BackupSetName: WideString;
    procedure Set_BackupSetName(const pRetVal: WideString);
    function Get_BackupSetDescription: WideString;
    procedure Set_BackupSetDescription(const pRetVal: WideString);
    function Get_Restart: WordBool;
    procedure Set_Restart(pRetVal: WordBool);
    function Get_TruncateLog: SQLDMO_BACKUP_LOG_TYPE;
    procedure Set_TruncateLog(pRetVal: SQLDMO_BACKUP_LOG_TYPE);
    function Get_BlockSize: Integer;
    procedure Set_BlockSize(pRetVal: Integer);
    function Get_FormatMedia: WordBool;
    procedure Set_FormatMedia(pRetVal: WordBool);
    function Get_MediaName: WideString;
    procedure Set_MediaName(const pRetVal: WideString);
    function Get_MediaDescription: WideString;
    procedure Set_MediaDescription(const pRetVal: WideString);
    function Get_Devices: WideString;
    procedure Set_Devices(const pRetVal: WideString);
    function Get_Tapes: WideString;
    procedure Set_Tapes(const pRetVal: WideString);
    function Get_Pipes: WideString;
    procedure Set_Pipes(const pRetVal: WideString);
    function Get_ExpirationDate: WideString;
    procedure Set_ExpirationDate(const pRetVal: WideString);
    function Get_Initialize: WordBool;
    procedure Set_Initialize(pRetVal: WordBool);
    function Get_RetainDays: Integer;
    procedure Set_RetainDays(pRetVal: Integer);
  public
    property DefaultInterface: _Backup read GetDefaultInterface;
  published
    property UserData: Integer read Get_UserData write Set_UserData;
    property PercentCompleteNotification: Integer read Get_PercentCompleteNotification write Set_PercentCompleteNotification;
    property SkipTapeHeader: WordBool read Get_SkipTapeHeader write Set_SkipTapeHeader;
    property UnloadTapeAfter: WordBool read Get_UnloadTapeAfter write Set_UnloadTapeAfter;
    property Database: WideString read Get_Database write Set_Database;
    property Files: WideString read Get_Files write Set_Files;
    property DatabaseFileGroups: WideString read Get_DatabaseFileGroups write Set_DatabaseFileGroups;
    property DatabaseFiles: WideString read Get_DatabaseFiles write Set_DatabaseFiles;
    property Action: SQLDMO_BACKUP_TYPE read Get_Action write Set_Action;
    property BackupSetName: WideString read Get_BackupSetName write Set_BackupSetName;
    property BackupSetDescription: WideString read Get_BackupSetDescription write Set_BackupSetDescription;
    property Restart: WordBool read Get_Restart write Set_Restart;
    property TruncateLog: SQLDMO_BACKUP_LOG_TYPE read Get_TruncateLog write Set_TruncateLog;
    property BlockSize: Integer read Get_BlockSize write Set_BlockSize;
    property FormatMedia: WordBool read Get_FormatMedia write Set_FormatMedia;
    property MediaName: WideString read Get_MediaName write Set_MediaName;
    property MediaDescription: WideString read Get_MediaDescription write Set_MediaDescription;
    property Devices: WideString read Get_Devices write Set_Devices;
    property Tapes: WideString read Get_Tapes write Set_Tapes;
    property Pipes: WideString read Get_Pipes write Set_Pipes;
    property ExpirationDate: WideString read Get_ExpirationDate write Set_ExpirationDate;
    property Initialize: WordBool read Get_Initialize write Set_Initialize;
    property RetainDays: Integer read Get_RetainDays write Set_RetainDays;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBackup2 provides a Create and CreateRemote method to          
// create instances of the default interface _Backup2 exposed by              
// the CoClass Backup2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBackup2 = class
    class function Create: _Backup2;
    class function CreateRemote(const MachineName: string): _Backup2;
  end;

  TBackup2PercentComplete = procedure(ASender: TObject; const Message: WideString; Percent: Integer) of object;
  TBackup2NextMedia = procedure(ASender: TObject; const Message: WideString) of object;
  TBackup2Complete = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBackup2
// Help String      : SQLDMO DB Backup
// Default Interface: _Backup2
// Def. Intf. DISP? : No
// Event   Interface: BackupSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBackup2Properties= class;
{$ENDIF}
  TBackup2 = class(TOleServer)
  private
    FOnPercentComplete: TBackup2PercentComplete;
    FOnNextMedia: TBackup2NextMedia;
    FOnComplete: TBackup2Complete;
    FIntf:        _Backup2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBackup2Properties;
    function      GetServerProperties: TBackup2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Backup2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_MediaPassword: WideString;
    procedure Set_MediaPassword(const pRetVal: WideString);
    function Get_NoRewind: WordBool;
    procedure Set_NoRewind(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Backup2);
    procedure Disconnect; override;
    property DefaultInterface: _Backup2 read GetDefaultInterface;
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBackup2Properties read GetServerProperties;
{$ENDIF}
    property OnPercentComplete: TBackup2PercentComplete read FOnPercentComplete write FOnPercentComplete;
    property OnNextMedia: TBackup2NextMedia read FOnNextMedia write FOnNextMedia;
    property OnComplete: TBackup2Complete read FOnComplete write FOnComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBackup2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBackup2Properties = class(TPersistent)
  private
    FServer:    TBackup2;
    function    GetDefaultInterface: _Backup2;
    constructor Create(AServer: TBackup2);
  protected
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_MediaPassword: WideString;
    procedure Set_MediaPassword(const pRetVal: WideString);
    function Get_NoRewind: WordBool;
    procedure Set_NoRewind(pRetVal: WordBool);
  public
    property DefaultInterface: _Backup2 read GetDefaultInterface;
  published
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBulkCopy2 provides a Create and CreateRemote method to          
// create instances of the default interface _BulkCopy2 exposed by              
// the CoClass BulkCopy2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBulkCopy2 = class
    class function Create: _BulkCopy2;
    class function CreateRemote(const MachineName: string): _BulkCopy2;
  end;

  TBulkCopy2RowsCopied = procedure(ASender: TObject; const Message: WideString; Rows: Integer) of object;
  TBulkCopy2BatchImported = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBulkCopy2
// Help String      : SQLDMO BulkCopy
// Default Interface: _BulkCopy2
// Def. Intf. DISP? : No
// Event   Interface: BulkCopySink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBulkCopy2Properties= class;
{$ENDIF}
  TBulkCopy2 = class(TOleServer)
  private
    FOnRowsCopied: TBulkCopy2RowsCopied;
    FOnBatchImported: TBulkCopy2BatchImported;
    FIntf:        _BulkCopy2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBulkCopy2Properties;
    function      GetServerProperties: TBulkCopy2Properties;
{$ENDIF}
    function      GetDefaultInterface: _BulkCopy2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_TableLock: WordBool;
    procedure Set_TableLock(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _BulkCopy2);
    procedure Disconnect; override;
    property DefaultInterface: _BulkCopy2 read GetDefaultInterface;
    property TableLock: WordBool read Get_TableLock write Set_TableLock;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBulkCopy2Properties read GetServerProperties;
{$ENDIF}
    property OnRowsCopied: TBulkCopy2RowsCopied read FOnRowsCopied write FOnRowsCopied;
    property OnBatchImported: TBulkCopy2BatchImported read FOnBatchImported write FOnBatchImported;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBulkCopy2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBulkCopy2Properties = class(TPersistent)
  private
    FServer:    TBulkCopy2;
    function    GetDefaultInterface: _BulkCopy2;
    constructor Create(AServer: TBulkCopy2);
  protected
    function Get_TableLock: WordBool;
    procedure Set_TableLock(pRetVal: WordBool);
  public
    property DefaultInterface: _BulkCopy2 read GetDefaultInterface;
  published
    property TableLock: WordBool read Get_TableLock write Set_TableLock;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFileGroup2 provides a Create and CreateRemote method to          
// create instances of the default interface _FileGroup2 exposed by              
// the CoClass FileGroup2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFileGroup2 = class
    class function Create: _FileGroup2;
    class function CreateRemote(const MachineName: string): _FileGroup2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFileGroup2
// Help String      : SQLDMO File Group
// Default Interface: _FileGroup2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFileGroup2Properties= class;
{$ENDIF}
  TFileGroup2 = class(TOleServer)
  private
    FIntf:        _FileGroup2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFileGroup2Properties;
    function      GetServerProperties: TFileGroup2Properties;
{$ENDIF}
    function      GetDefaultInterface: _FileGroup2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FileGroup2);
    procedure Disconnect; override;
    function CheckFilegroupWithResult: QueryResults;
    function CheckFilegroupDataOnlyWithResult: QueryResults;
    property DefaultInterface: _FileGroup2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFileGroup2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFileGroup2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFileGroup2Properties = class(TPersistent)
  private
    FServer:    TFileGroup2;
    function    GetDefaultInterface: _FileGroup2;
    constructor Create(AServer: TFileGroup2);
  protected
  public
    property DefaultInterface: _FileGroup2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLogFile2 provides a Create and CreateRemote method to          
// create instances of the default interface _LogFile2 exposed by              
// the CoClass LogFile2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLogFile2 = class
    class function Create: _LogFile2;
    class function CreateRemote(const MachineName: string): _LogFile2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLogFile2
// Help String      : SQLDMO Log File
// Default Interface: _LogFile2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLogFile2Properties= class;
{$ENDIF}
  TLogFile2 = class(TOleServer)
  private
    FIntf:        _LogFile2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLogFile2Properties;
    function      GetServerProperties: TLogFile2Properties;
{$ENDIF}
    function      GetDefaultInterface: _LogFile2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LogFile2);
    procedure Disconnect; override;
    procedure Remove;
    property DefaultInterface: _LogFile2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLogFile2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLogFile2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLogFile2Properties = class(TPersistent)
  private
    FServer:    TLogFile2;
    function    GetDefaultInterface: _LogFile2;
    constructor Create(AServer: TLogFile2);
  protected
  public
    property DefaultInterface: _LogFile2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDatabaseRole2 provides a Create and CreateRemote method to          
// create instances of the default interface _DatabaseRole2 exposed by              
// the CoClass DatabaseRole2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatabaseRole2 = class
    class function Create: _DatabaseRole2;
    class function CreateRemote(const MachineName: string): _DatabaseRole2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDatabaseRole2
// Help String      : SQLDMO Database Role
// Default Interface: _DatabaseRole2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDatabaseRole2Properties= class;
{$ENDIF}
  TDatabaseRole2 = class(TOleServer)
  private
    FIntf:        _DatabaseRole2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDatabaseRole2Properties;
    function      GetServerProperties: TDatabaseRole2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DatabaseRole2;
  protected
    procedure InitServerData; override;
    function Get_IsDeleted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DatabaseRole2);
    procedure Disconnect; override;
    property DefaultInterface: _DatabaseRole2 read GetDefaultInterface;
    property IsDeleted: WordBool read Get_IsDeleted;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDatabaseRole2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDatabaseRole2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDatabaseRole2Properties = class(TPersistent)
  private
    FServer:    TDatabaseRole2;
    function    GetDefaultInterface: _DatabaseRole2;
    constructor Create(AServer: TDatabaseRole2);
  protected
    function Get_IsDeleted: WordBool;
  public
    property DefaultInterface: _DatabaseRole2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRestore2 provides a Create and CreateRemote method to          
// create instances of the default interface _Restore2 exposed by              
// the CoClass Restore2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRestore2 = class
    class function Create: _Restore2;
    class function CreateRemote(const MachineName: string): _Restore2;
  end;

  TRestore2PercentComplete = procedure(ASender: TObject; const Message: WideString; Percent: Integer) of object;
  TRestore2NextMedia = procedure(ASender: TObject; const Message: WideString) of object;
  TRestore2Complete = procedure(ASender: TObject; const Message: WideString) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRestore2
// Help String      : SQLDMO DB Restore
// Default Interface: _Restore2
// Def. Intf. DISP? : No
// Event   Interface: RestoreSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRestore2Properties= class;
{$ENDIF}
  TRestore2 = class(TOleServer)
  private
    FOnPercentComplete: TRestore2PercentComplete;
    FOnNextMedia: TRestore2NextMedia;
    FOnComplete: TRestore2Complete;
    FIntf:        _Restore2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRestore2Properties;
    function      GetServerProperties: TRestore2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Restore2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_MediaPassword: WideString;
    procedure Set_MediaPassword(const pRetVal: WideString);
    function Get_KeepReplication: WordBool;
    procedure Set_KeepReplication(pRetVal: WordBool);
    function Get_NoRewind: WordBool;
    procedure Set_NoRewind(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Restore2);
    procedure Disconnect; override;
    property DefaultInterface: _Restore2 read GetDefaultInterface;
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property KeepReplication: WordBool read Get_KeepReplication write Set_KeepReplication;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRestore2Properties read GetServerProperties;
{$ENDIF}
    property OnPercentComplete: TRestore2PercentComplete read FOnPercentComplete write FOnPercentComplete;
    property OnNextMedia: TRestore2NextMedia read FOnNextMedia write FOnNextMedia;
    property OnComplete: TRestore2Complete read FOnComplete write FOnComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRestore2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRestore2Properties = class(TPersistent)
  private
    FServer:    TRestore2;
    function    GetDefaultInterface: _Restore2;
    constructor Create(AServer: TRestore2);
  protected
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_MediaPassword: WideString;
    procedure Set_MediaPassword(const pRetVal: WideString);
    function Get_KeepReplication: WordBool;
    procedure Set_KeepReplication(pRetVal: WordBool);
    function Get_NoRewind: WordBool;
    procedure Set_NoRewind(pRetVal: WordBool);
  public
    property DefaultInterface: _Restore2 read GetDefaultInterface;
  published
    property Password: WideString read Get_Password write Set_Password;
    property MediaPassword: WideString read Get_MediaPassword write Set_MediaPassword;
    property KeepReplication: WordBool read Get_KeepReplication write Set_KeepReplication;
    property NoRewind: WordBool read Get_NoRewind write Set_NoRewind;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLinkedServer2 provides a Create and CreateRemote method to          
// create instances of the default interface _LinkedServer2 exposed by              
// the CoClass LinkedServer2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinkedServer2 = class
    class function Create: _LinkedServer2;
    class function CreateRemote(const MachineName: string): _LinkedServer2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLinkedServer2
// Help String      : SQLDMO LinkedServer
// Default Interface: _LinkedServer2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLinkedServer2Properties= class;
{$ENDIF}
  TLinkedServer2 = class(TOleServer)
  private
    FIntf:        _LinkedServer2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLinkedServer2Properties;
    function      GetServerProperties: TLinkedServer2Properties;
{$ENDIF}
    function      GetDefaultInterface: _LinkedServer2;
  protected
    procedure InitServerData; override;
    function Get_CollationName: WideString;
    procedure Set_CollationName(const pRetVal: WideString);
    function Get_ConnectTimeout: Integer;
    procedure Set_ConnectTimeout(pRetVal: Integer);
    function Get_QueryTimeout: Integer;
    procedure Set_QueryTimeout(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _LinkedServer2);
    procedure Disconnect; override;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString): QueryResults; overload;
    function ExecuteWithResultsAndMessages2(const Command: WideString; out Messages: WideString; 
                                            Length: OleVariant): QueryResults; overload;
    procedure Refresh;
    property DefaultInterface: _LinkedServer2 read GetDefaultInterface;
    property CollationName: WideString read Get_CollationName write Set_CollationName;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLinkedServer2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLinkedServer2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLinkedServer2Properties = class(TPersistent)
  private
    FServer:    TLinkedServer2;
    function    GetDefaultInterface: _LinkedServer2;
    constructor Create(AServer: TLinkedServer2);
  protected
    function Get_CollationName: WideString;
    procedure Set_CollationName(const pRetVal: WideString);
    function Get_ConnectTimeout: Integer;
    procedure Set_ConnectTimeout(pRetVal: Integer);
    function Get_QueryTimeout: Integer;
    procedure Set_QueryTimeout(pRetVal: Integer);
  public
    property DefaultInterface: _LinkedServer2 read GetDefaultInterface;
  published
    property CollationName: WideString read Get_CollationName write Set_CollationName;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property QueryTimeout: Integer read Get_QueryTimeout write Set_QueryTimeout;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFullTextCatalog2 provides a Create and CreateRemote method to          
// create instances of the default interface _FullTextCatalog2 exposed by              
// the CoClass FullTextCatalog2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFullTextCatalog2 = class
    class function Create: _FullTextCatalog2;
    class function CreateRemote(const MachineName: string): _FullTextCatalog2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFullTextCatalog2
// Help String      : SQLDMO FullText Catalog
// Default Interface: _FullTextCatalog2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFullTextCatalog2Properties= class;
{$ENDIF}
  TFullTextCatalog2 = class(TOleServer)
  private
    FIntf:        _FullTextCatalog2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFullTextCatalog2Properties;
    function      GetServerProperties: TFullTextCatalog2Properties;
{$ENDIF}
    function      GetDefaultInterface: _FullTextCatalog2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FullTextCatalog2);
    procedure Disconnect; override;
    procedure Refresh;
    property DefaultInterface: _FullTextCatalog2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFullTextCatalog2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFullTextCatalog2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFullTextCatalog2Properties = class(TPersistent)
  private
    FServer:    TFullTextCatalog2;
    function    GetDefaultInterface: _FullTextCatalog2;
    constructor Create(AServer: TFullTextCatalog2);
  protected
  public
    property DefaultInterface: _FullTextCatalog2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoReplication2 provides a Create and CreateRemote method to          
// create instances of the default interface _Replication2 exposed by              
// the CoClass Replication2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReplication2 = class
    class function Create: _Replication2;
    class function CreateRemote(const MachineName: string): _Replication2;
  end;

  TReplication2StatusMessage = procedure(ASender: TObject; const Message: WideString) of object;
  TReplication2PercentComplete = procedure(ASender: TObject; const Message: WideString; 
                                                             Percent: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReplication2
// Help String      : SQLDMO Replication
// Default Interface: _Replication2
// Def. Intf. DISP? : No
// Event   Interface: ReplicationSink
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReplication2Properties= class;
{$ENDIF}
  TReplication2 = class(TOleServer)
  private
    FOnStatusMessage: TReplication2StatusMessage;
    FOnPercentComplete: TReplication2PercentComplete;
    FIntf:        _Replication2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReplication2Properties;
    function      GetServerProperties: TReplication2Properties;
{$ENDIF}
    function      GetDefaultInterface: _Replication2;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Replication2);
    procedure Disconnect; override;
    procedure AttachSubscriptionDatabase(const szDatabaseName: WideString; 
                                         const szFileName: WideString; 
                                         SubscriberSecurityType: SQLDMO_SECURITY_TYPE; 
                                         const szSubscriberLogin: WideString; 
                                         const szSubscriberPassword: WideString);
    property DefaultInterface: _Replication2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReplication2Properties read GetServerProperties;
{$ENDIF}
    property OnStatusMessage: TReplication2StatusMessage read FOnStatusMessage write FOnStatusMessage;
    property OnPercentComplete: TReplication2PercentComplete read FOnPercentComplete write FOnPercentComplete;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TReplication2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReplication2Properties = class(TPersistent)
  private
    FServer:    TReplication2;
    function    GetDefaultInterface: _Replication2;
    constructor Create(AServer: TReplication2);
  protected
  public
    property DefaultInterface: _Replication2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionPublisher2 provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionPublisher2 exposed by              
// the CoClass DistributionPublisher2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionPublisher2 = class
    class function Create: _DistributionPublisher2;
    class function CreateRemote(const MachineName: string): _DistributionPublisher2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionPublisher2
// Help String      : SQLDMO DistributionPublisher
// Default Interface: _DistributionPublisher2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionPublisher2Properties= class;
{$ENDIF}
  TDistributionPublisher2 = class(TOleServer)
  private
    FIntf:        _DistributionPublisher2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionPublisher2Properties;
    function      GetServerProperties: TDistributionPublisher2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionPublisher2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionPublisher2);
    procedure Disconnect; override;
    procedure ReadAgentOffloadInfo(const bstrJobID: WideString; out pbAgentOffload: WordBool; 
                                   out pszServerNetworkName: WideString; 
                                   out pbIndependentAgent: WordBool);
    procedure EnableAgentOffload(const bstrJobID: WideString; const szServerNetworkName: WideString);
    procedure DisableAgentOffload(const bstrJobID: WideString);
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString);
    function EnumSnapshotAgentSessions2(const AgentName: WideString; 
                                        SessionType: SQLDMO_SESSION_TYPE; SessionDuration: Integer; 
                                        lEstimatedNumRecords: Integer): QueryResults;
    function EnumLogReaderAgentSessions2(const AgentName: WideString; 
                                         SessionType: SQLDMO_SESSION_TYPE; 
                                         SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults;
    function EnumDistributionAgentSessions2(const AgentName: WideString; 
                                            SessionType: SQLDMO_SESSION_TYPE; 
                                            SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults;
    function EnumMergeAgentSessions2(const AgentName: WideString; SessionType: SQLDMO_SESSION_TYPE; 
                                     SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults;
    function EnumSnapshotAgentSessionDetails2(const AgentName: WideString; 
                                              const SessionID: WideString; 
                                              lEstimatedNumRecords: Integer): QueryResults;
    function EnumLogReaderAgentSessionDetails2(const AgentName: WideString; 
                                               const SessionID: WideString; 
                                               lEstimatedNumRecords: Integer): QueryResults;
    function EnumDistributionAgentSessionDetails2(const AgentName: WideString; 
                                                  const SessionID: WideString; 
                                                  lEstimatedNumRecords: Integer): QueryResults;
    function EnumMergeAgentSessionDetails2(const AgentName: WideString; 
                                           const SessionID: WideString; 
                                           lEstimatedNumRecords: Integer): QueryResults;
    property DefaultInterface: _DistributionPublisher2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionPublisher2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionPublisher2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionPublisher2Properties = class(TPersistent)
  private
    FServer:    TDistributionPublisher2;
    function    GetDefaultInterface: _DistributionPublisher2;
    constructor Create(AServer: TDistributionPublisher2);
  protected
  public
    property DefaultInterface: _DistributionPublisher2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionDatabase2 provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionDatabase2 exposed by              
// the CoClass DistributionDatabase2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionDatabase2 = class
    class function Create: _DistributionDatabase2;
    class function CreateRemote(const MachineName: string): _DistributionDatabase2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionDatabase2
// Help String      : SQLDMO DistributionDatabase
// Default Interface: _DistributionDatabase2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionDatabase2Properties= class;
{$ENDIF}
  TDistributionDatabase2 = class(TOleServer)
  private
    FIntf:        _DistributionDatabase2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionDatabase2Properties;
    function      GetServerProperties: TDistributionDatabase2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionDatabase2;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionDatabase2);
    procedure Disconnect; override;
    function EnumQueueReaderAgentSessions(lPublicationID: Integer; 
                                          SessionType: SQLDMO_SESSION_TYPE; 
                                          SessionDuration: Integer; lEstimatedNumRecords: Integer): QueryResults;
    function EnumQueueReaderAgentSessionDetails(lPublicationID: Integer; 
                                                const SessionID: WideString; 
                                                lEstimatedNumRecords: Integer): QueryResults;
    function EnumAgentErrorRecords(ErrorID: Integer): QueryResults;
    property DefaultInterface: _DistributionDatabase2 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionDatabase2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionDatabase2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionDatabase2Properties = class(TPersistent)
  private
    FServer:    TDistributionDatabase2;
    function    GetDefaultInterface: _DistributionDatabase2;
    constructor Create(AServer: TDistributionDatabase2);
  protected
  public
    property DefaultInterface: _DistributionDatabase2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransPublication2 provides a Create and CreateRemote method to          
// create instances of the default interface _TransPublication2 exposed by              
// the CoClass TransPublication2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransPublication2 = class
    class function Create: _TransPublication2;
    class function CreateRemote(const MachineName: string): _TransPublication2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransPublication2
// Help String      : SQLDMO TransPublication
// Default Interface: _TransPublication2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransPublication2Properties= class;
{$ENDIF}
  TTransPublication2 = class(TOleServer)
  private
    FIntf:        _TransPublication2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransPublication2Properties;
    function      GetServerProperties: TTransPublication2Properties;
{$ENDIF}
    function      GetDefaultInterface: _TransPublication2;
  protected
    procedure InitServerData; override;
    function Get_AllowQueuedTransactions: WordBool;
    procedure Set_AllowQueuedTransactions(pRetVal: WordBool);
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_PreSnapshotScript: WideString;
    procedure Set_PreSnapshotScript(const pRetVal: WideString);
    function Get_PostSnapshotScript: WideString;
    procedure Set_PostSnapshotScript(const pRetVal: WideString);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: Integer;
    procedure Set_FTPPort(pRetVal: Integer);
    function Get_FTPSubdirectory: WideString;
    procedure Set_FTPSubdirectory(const pRetVal: WideString);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_AllowDTS: WordBool;
    procedure Set_AllowDTS(pRetVal: WordBool);
    function Get_CentralizedConflicts: WordBool;
    procedure Set_CentralizedConflicts(pRetVal: WordBool);
    function Get_ConflictRetention: Integer;
    procedure Set_ConflictRetention(pRetVal: Integer);
    function Get_ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE;
    procedure Set_ConflictPolicy(pRetVal: SQLDMO_CONFLICTPOLICY_TYPE);
    function Get_QueueType: SQLDMO_REPLQUEUE_TYPE;
    procedure Set_QueueType(pRetVal: SQLDMO_REPLQUEUE_TYPE);
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
    function Get_InActiveDirectory: WordBool;
    procedure Set_InActiveDirectory(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransPublication2);
    procedure Disconnect; override;
    function BrowseSnapshotFolder(const szSubscriberName: WideString; 
                                  const szSubscriberDB: WideString): WideString;
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                  ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                  fShutDownAgent: WordBool);
    procedure ValidateSubscriptions(const szSubscriberNames: WideString; 
                                    const szSubscriberDBs: WideString; 
                                    ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                    ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                    fShutDownAgent: WordBool);
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString);
    procedure CopySnapshot(const szDestinationFolder: WideString; 
                           const szSubscriberName: WideString; const szSubscriberDB: WideString);
    property DefaultInterface: _TransPublication2 read GetDefaultInterface;
    property FTPPassword: WideString write Set_FTPPassword;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE read Get_CompatibilityLevel;
    property AllowQueuedTransactions: WordBool read Get_AllowQueuedTransactions write Set_AllowQueuedTransactions;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property AllowDTS: WordBool read Get_AllowDTS write Set_AllowDTS;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE read Get_ConflictPolicy write Set_ConflictPolicy;
    property QueueType: SQLDMO_REPLQUEUE_TYPE read Get_QueueType write Set_QueueType;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransPublication2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransPublication2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransPublication2Properties = class(TPersistent)
  private
    FServer:    TTransPublication2;
    function    GetDefaultInterface: _TransPublication2;
    constructor Create(AServer: TTransPublication2);
  protected
    function Get_AllowQueuedTransactions: WordBool;
    procedure Set_AllowQueuedTransactions(pRetVal: WordBool);
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_PreSnapshotScript: WideString;
    procedure Set_PreSnapshotScript(const pRetVal: WideString);
    function Get_PostSnapshotScript: WideString;
    procedure Set_PostSnapshotScript(const pRetVal: WideString);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: Integer;
    procedure Set_FTPPort(pRetVal: Integer);
    function Get_FTPSubdirectory: WideString;
    procedure Set_FTPSubdirectory(const pRetVal: WideString);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_AllowDTS: WordBool;
    procedure Set_AllowDTS(pRetVal: WordBool);
    function Get_CentralizedConflicts: WordBool;
    procedure Set_CentralizedConflicts(pRetVal: WordBool);
    function Get_ConflictRetention: Integer;
    procedure Set_ConflictRetention(pRetVal: Integer);
    function Get_ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE;
    procedure Set_ConflictPolicy(pRetVal: SQLDMO_CONFLICTPOLICY_TYPE);
    function Get_QueueType: SQLDMO_REPLQUEUE_TYPE;
    procedure Set_QueueType(pRetVal: SQLDMO_REPLQUEUE_TYPE);
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
    function Get_InActiveDirectory: WordBool;
    procedure Set_InActiveDirectory(pRetVal: WordBool);
  public
    property DefaultInterface: _TransPublication2 read GetDefaultInterface;
  published
    property AllowQueuedTransactions: WordBool read Get_AllowQueuedTransactions write Set_AllowQueuedTransactions;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property AllowDTS: WordBool read Get_AllowDTS write Set_AllowDTS;
    property CentralizedConflicts: WordBool read Get_CentralizedConflicts write Set_CentralizedConflicts;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE read Get_ConflictPolicy write Set_ConflictPolicy;
    property QueueType: SQLDMO_REPLQUEUE_TYPE read Get_QueueType write Set_QueueType;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransArticle2 provides a Create and CreateRemote method to          
// create instances of the default interface _TransArticle2 exposed by              
// the CoClass TransArticle2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransArticle2 = class
    class function Create: _TransArticle2;
    class function CreateRemote(const MachineName: string): _TransArticle2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransArticle2
// Help String      : SQLDMO TransArticle
// Default Interface: _TransArticle2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransArticle2Properties= class;
{$ENDIF}
  TTransArticle2 = class(TOleServer)
  private
    FIntf:        _TransArticle2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransArticle2Properties;
    function      GetServerProperties: TTransArticle2Properties;
{$ENDIF}
    function      GetDefaultInterface: _TransArticle2;
  protected
    procedure InitServerData; override;
    function Get_AutoIdentityRange: WordBool;
    procedure Set_AutoIdentityRange(pRetVal: WordBool);
    function Get_PublisherIdentityRangeSize: WideString;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString);
    function Get_SubscriberIdentityRangeSize: WideString;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
    function Get_IdentityRangeThreshold: Integer;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransArticle2);
    procedure Disconnect; override;
    property DefaultInterface: _TransArticle2 read GetDefaultInterface;
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransArticle2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransArticle2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransArticle2Properties = class(TPersistent)
  private
    FServer:    TTransArticle2;
    function    GetDefaultInterface: _TransArticle2;
    constructor Create(AServer: TTransArticle2);
  protected
    function Get_AutoIdentityRange: WordBool;
    procedure Set_AutoIdentityRange(pRetVal: WordBool);
    function Get_PublisherIdentityRangeSize: WideString;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString);
    function Get_SubscriberIdentityRangeSize: WideString;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
    function Get_IdentityRangeThreshold: Integer;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer);
  public
    property DefaultInterface: _TransArticle2 read GetDefaultInterface;
  published
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransSubscription2 provides a Create and CreateRemote method to          
// create instances of the default interface _TransSubscription2 exposed by              
// the CoClass TransSubscription2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransSubscription2 = class
    class function Create: _TransSubscription2;
    class function CreateRemote(const MachineName: string): _TransSubscription2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransSubscription2
// Help String      : SQLDMO TransSubscription
// Default Interface: _TransSubscription2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransSubscription2Properties= class;
{$ENDIF}
  TTransSubscription2 = class(TOleServer)
  private
    FIntf:        _TransSubscription2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransSubscription2Properties;
    function      GetServerProperties: TTransSubscription2Properties;
{$ENDIF}
    function      GetDefaultInterface: _TransSubscription2;
  protected
    procedure InitServerData; override;
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_DTSPackageName: WideString;
    procedure Set_DTSPackageName(const pRetVal: WideString);
    procedure Set_DTSPackagePassword(const Param1: WideString);
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransSubscription2);
    procedure Disconnect; override;
    property DefaultInterface: _TransSubscription2 read GetDefaultInterface;
    property DTSPackagePassword: WideString write Set_DTSPackagePassword;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransSubscription2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransSubscription2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransSubscription2Properties = class(TPersistent)
  private
    FServer:    TTransSubscription2;
    function    GetDefaultInterface: _TransSubscription2;
    constructor Create(AServer: TTransSubscription2);
  protected
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_DTSPackageName: WideString;
    procedure Set_DTSPackageName(const pRetVal: WideString);
    procedure Set_DTSPackagePassword(const Param1: WideString);
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
  public
    property DefaultInterface: _TransSubscription2 read GetDefaultInterface;
  published
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTransPullSubscription2 provides a Create and CreateRemote method to          
// create instances of the default interface _TransPullSubscription2 exposed by              
// the CoClass TransPullSubscription2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTransPullSubscription2 = class
    class function Create: _TransPullSubscription2;
    class function CreateRemote(const MachineName: string): _TransPullSubscription2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTransPullSubscription2
// Help String      : SQLDMO TransPullSubscription
// Default Interface: _TransPullSubscription2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTransPullSubscription2Properties= class;
{$ENDIF}
  TTransPullSubscription2 = class(TOleServer)
  private
    FIntf:        _TransPullSubscription2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTransPullSubscription2Properties;
    function      GetServerProperties: TTransPullSubscription2Properties;
{$ENDIF}
    function      GetDefaultInterface: _TransPullSubscription2;
  protected
    procedure InitServerData; override;
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_WorkingDirectory: WideString;
    procedure Set_WorkingDirectory(const pRetVal: WideString);
    function Get_UseFTP: WordBool;
    procedure Set_UseFTP(pRetVal: WordBool);
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
    function Get_DTSPackageName: WideString;
    procedure Set_DTSPackageName(const pRetVal: WideString);
    procedure Set_DTSPackagePassword(const Param1: WideString);
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_SubscriptionID: WideString;
    function Get_LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_LastDistributionSummary: WideString;
    function Get_LastDistributionSummaryTime: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TransPullSubscription2);
    procedure Disconnect; override;
    property DefaultInterface: _TransPullSubscription2 read GetDefaultInterface;
    property DTSPackagePassword: WideString write Set_DTSPackagePassword;
    property SubscriptionID: WideString read Get_SubscriptionID;
    property LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE read Get_LastDistributionStatus;
    property LastDistributionSummary: WideString read Get_LastDistributionSummary;
    property LastDistributionSummaryTime: WideString read Get_LastDistributionSummaryTime;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTransPullSubscription2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTransPullSubscription2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTransPullSubscription2Properties = class(TPersistent)
  private
    FServer:    TTransPullSubscription2;
    function    GetDefaultInterface: _TransPullSubscription2;
    constructor Create(AServer: TTransPullSubscription2);
  protected
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_WorkingDirectory: WideString;
    procedure Set_WorkingDirectory(const pRetVal: WideString);
    function Get_UseFTP: WordBool;
    procedure Set_UseFTP(pRetVal: WordBool);
    function Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
    procedure Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
    function Get_DTSPackageName: WideString;
    procedure Set_DTSPackageName(const pRetVal: WideString);
    procedure Set_DTSPackagePassword(const Param1: WideString);
    function Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
    procedure Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_SubscriptionID: WideString;
    function Get_LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_LastDistributionSummary: WideString;
    function Get_LastDistributionSummaryTime: WideString;
  public
    property DefaultInterface: _TransPullSubscription2 read GetDefaultInterface;
  published
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property PublicationType: SQLDMO_PUBLICATION_TYPE read Get_PublicationType write Set_PublicationType;
    property DTSPackageName: WideString read Get_DTSPackageName write Set_DTSPackageName;
    property DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE read Get_DTSPackageLocation write Set_DTSPackageLocation;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergePublication2 provides a Create and CreateRemote method to          
// create instances of the default interface _MergePublication2 exposed by              
// the CoClass MergePublication2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergePublication2 = class
    class function Create: _MergePublication2;
    class function CreateRemote(const MachineName: string): _MergePublication2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergePublication2
// Help String      : SQLDMO MergePublication
// Default Interface: _MergePublication2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergePublication2Properties= class;
{$ENDIF}
  TMergePublication2 = class(TOleServer)
  private
    FIntf:        _MergePublication2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergePublication2Properties;
    function      GetServerProperties: TMergePublication2Properties;
{$ENDIF}
    function      GetDefaultInterface: _MergePublication2;
  protected
    procedure InitServerData; override;
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_PreSnapshotScript: WideString;
    procedure Set_PreSnapshotScript(const pRetVal: WideString);
    function Get_PostSnapshotScript: WideString;
    procedure Set_PostSnapshotScript(const pRetVal: WideString);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: Integer;
    procedure Set_FTPPort(pRetVal: Integer);
    function Get_FTPSubdirectory: WideString;
    procedure Set_FTPSubdirectory(const pRetVal: WideString);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_ConflictRetention: Integer;
    procedure Set_ConflictRetention(pRetVal: Integer);
    function Get_KeepPartitionChanges: WordBool;
    procedure Set_KeepPartitionChanges(pRetVal: WordBool);
    function Get_AllowSyncToAlternate: WordBool;
    procedure Set_AllowSyncToAlternate(pRetVal: WordBool);
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
    function Get_ValidateSubscriberInfo: WideString;
    procedure Set_ValidateSubscriberInfo(const pRetVal: WideString);
    function Get_InActiveDirectory: WordBool;
    procedure Set_InActiveDirectory(pRetVal: WordBool);
    function Get_MaxConcurrentMerge: Integer;
    procedure Set_MaxConcurrentMerge(pRetVal: Integer);
    function Get_MaxConcurrentDynamicSnapshots: Integer;
    procedure Set_MaxConcurrentDynamicSnapshots(pRetVal: Integer);
    function Get_MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergePublication2);
    procedure Disconnect; override;
    function BrowseSnapshotFolder: WideString;
    procedure AddAlternatePublisher(const szAlternatePublisher: WideString; 
                                    const szAlternatePublicationDB: WideString; 
                                    const szAlternatePublication: WideString; 
                                    const szAlternateDistributor: WideString; 
                                    const szFriendlyName: WideString);
    procedure RemoveAlternatePublisher(const szAlternatePublisher: WideString; 
                                       const szAlternatePublicationDB: WideString; 
                                       const szAlternatePublication: WideString);
    function EnumAlternatePublishers: QueryResults;
    procedure ReInitializeAllSubscriptions2(bUploadFirst: WordBool);
    procedure ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE);
    procedure ValidateSubscription(const szSubscriberName: WideString; 
                                   const szSubscriberDB: WideString; 
                                   ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE);
    procedure ReSynchronizeSubscription(const szSubscriberName: WideString; 
                                        const szSubscriberDB: WideString; 
                                        ResyncType: SQLDMO_RESYNC_TYPE; const szDateTime: WideString);
    procedure ReadLastValidationDateTimes(const szSubscriberName: WideString; 
                                          const szSubscriberDB: WideString; 
                                          out pszSuccessfulDateTime: WideString; 
                                          out pszAttemptedDateTime: WideString);
    procedure ReplicateUserDefinedScript(const szScriptFilePath: WideString);
    procedure CopySnapshot(const szDestinationFolder: WideString);
    property DefaultInterface: _MergePublication2 read GetDefaultInterface;
    property FTPPassword: WideString write Set_FTPPassword;
    property CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE read Get_CompatibilityLevel;
    property MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs read Get_MergeDynamicSnapshotJobs;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property KeepPartitionChanges: WordBool read Get_KeepPartitionChanges write Set_KeepPartitionChanges;
    property AllowSyncToAlternate: WordBool read Get_AllowSyncToAlternate write Set_AllowSyncToAlternate;
    property ValidateSubscriberInfo: WideString read Get_ValidateSubscriberInfo write Set_ValidateSubscriberInfo;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
    property MaxConcurrentMerge: Integer read Get_MaxConcurrentMerge write Set_MaxConcurrentMerge;
    property MaxConcurrentDynamicSnapshots: Integer read Get_MaxConcurrentDynamicSnapshots write Set_MaxConcurrentDynamicSnapshots;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergePublication2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergePublication2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergePublication2Properties = class(TPersistent)
  private
    FServer:    TMergePublication2;
    function    GetDefaultInterface: _MergePublication2;
    constructor Create(AServer: TMergePublication2);
  protected
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_PreSnapshotScript: WideString;
    procedure Set_PreSnapshotScript(const pRetVal: WideString);
    function Get_PostSnapshotScript: WideString;
    procedure Set_PostSnapshotScript(const pRetVal: WideString);
    function Get_FTPAddress: WideString;
    procedure Set_FTPAddress(const pRetVal: WideString);
    function Get_FTPPort: Integer;
    procedure Set_FTPPort(pRetVal: Integer);
    function Get_FTPSubdirectory: WideString;
    procedure Set_FTPSubdirectory(const pRetVal: WideString);
    function Get_FTPLogin: WideString;
    procedure Set_FTPLogin(const pRetVal: WideString);
    procedure Set_FTPPassword(const Param1: WideString);
    function Get_ConflictRetention: Integer;
    procedure Set_ConflictRetention(pRetVal: Integer);
    function Get_KeepPartitionChanges: WordBool;
    procedure Set_KeepPartitionChanges(pRetVal: WordBool);
    function Get_AllowSyncToAlternate: WordBool;
    procedure Set_AllowSyncToAlternate(pRetVal: WordBool);
    function Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
    function Get_ValidateSubscriberInfo: WideString;
    procedure Set_ValidateSubscriberInfo(const pRetVal: WideString);
    function Get_InActiveDirectory: WordBool;
    procedure Set_InActiveDirectory(pRetVal: WordBool);
    function Get_MaxConcurrentMerge: Integer;
    procedure Set_MaxConcurrentMerge(pRetVal: Integer);
    function Get_MaxConcurrentDynamicSnapshots: Integer;
    procedure Set_MaxConcurrentDynamicSnapshots(pRetVal: Integer);
    function Get_MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs;
  public
    property DefaultInterface: _MergePublication2 read GetDefaultInterface;
  published
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property PreSnapshotScript: WideString read Get_PreSnapshotScript write Set_PreSnapshotScript;
    property PostSnapshotScript: WideString read Get_PostSnapshotScript write Set_PostSnapshotScript;
    property FTPAddress: WideString read Get_FTPAddress write Set_FTPAddress;
    property FTPPort: Integer read Get_FTPPort write Set_FTPPort;
    property FTPSubdirectory: WideString read Get_FTPSubdirectory write Set_FTPSubdirectory;
    property FTPLogin: WideString read Get_FTPLogin write Set_FTPLogin;
    property ConflictRetention: Integer read Get_ConflictRetention write Set_ConflictRetention;
    property KeepPartitionChanges: WordBool read Get_KeepPartitionChanges write Set_KeepPartitionChanges;
    property AllowSyncToAlternate: WordBool read Get_AllowSyncToAlternate write Set_AllowSyncToAlternate;
    property ValidateSubscriberInfo: WideString read Get_ValidateSubscriberInfo write Set_ValidateSubscriberInfo;
    property InActiveDirectory: WordBool read Get_InActiveDirectory write Set_InActiveDirectory;
    property MaxConcurrentMerge: Integer read Get_MaxConcurrentMerge write Set_MaxConcurrentMerge;
    property MaxConcurrentDynamicSnapshots: Integer read Get_MaxConcurrentDynamicSnapshots write Set_MaxConcurrentDynamicSnapshots;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeArticle2 provides a Create and CreateRemote method to          
// create instances of the default interface _MergeArticle2 exposed by              
// the CoClass MergeArticle2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeArticle2 = class
    class function Create: _MergeArticle2;
    class function CreateRemote(const MachineName: string): _MergeArticle2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeArticle2
// Help String      : SQLDMO MergeArticle
// Default Interface: _MergeArticle2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeArticle2Properties= class;
{$ENDIF}
  TMergeArticle2 = class(TOleServer)
  private
    FIntf:        _MergeArticle2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeArticle2Properties;
    function      GetServerProperties: TMergeArticle2Properties;
{$ENDIF}
    function      GetDefaultInterface: _MergeArticle2;
  protected
    procedure InitServerData; override;
    function Get_DestinationOwnerName: WideString;
    procedure Set_DestinationOwnerName(const pRetVal: WideString);
    function Get_AutoIdentityRange: WordBool;
    procedure Set_AutoIdentityRange(pRetVal: WordBool);
    function Get_PublisherIdentityRangeSize: WideString;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString);
    function Get_SubscriberIdentityRangeSize: WideString;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
    function Get_IdentityRangeThreshold: Integer;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer);
    function Get_VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE;
    procedure Set_VerifyResolverSignature(pRetVal: SQLDMO_VERIFYSIGNATURE_TYPE);
    function Get_DestinationObjectName: WideString;
    procedure Set_DestinationObjectName(const pRetVal: WideString);
    function Get_AllowInteractiveResolver: WordBool;
    procedure Set_AllowInteractiveResolver(pRetVal: WordBool);
    function Get_MultipleColumnUpdate: WordBool;
    procedure Set_MultipleColumnUpdate(pRetVal: WordBool);
    function Get_CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE;
    procedure Set_CheckPermissions(pRetVal: SQLDMO_CHECKPERMISSIONS_TYPE);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeArticle2);
    procedure Disconnect; override;
    function ListReplicatedColumns: SQLObjectList;
    procedure AddReplicatedColumns(const Columns: WideString);
    procedure RemoveReplicatedColumns(const Columns: WideString);
    function ScriptDestinationObject2(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                      Script2Type: OleVariant; 
                                      const bstrDestinationObject: WideString): WideString;
    property DefaultInterface: _MergeArticle2 read GetDefaultInterface;
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
    property VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE read Get_VerifyResolverSignature write Set_VerifyResolverSignature;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property AllowInteractiveResolver: WordBool read Get_AllowInteractiveResolver write Set_AllowInteractiveResolver;
    property MultipleColumnUpdate: WordBool read Get_MultipleColumnUpdate write Set_MultipleColumnUpdate;
    property CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE read Get_CheckPermissions write Set_CheckPermissions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeArticle2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeArticle2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeArticle2Properties = class(TPersistent)
  private
    FServer:    TMergeArticle2;
    function    GetDefaultInterface: _MergeArticle2;
    constructor Create(AServer: TMergeArticle2);
  protected
    function Get_DestinationOwnerName: WideString;
    procedure Set_DestinationOwnerName(const pRetVal: WideString);
    function Get_AutoIdentityRange: WordBool;
    procedure Set_AutoIdentityRange(pRetVal: WordBool);
    function Get_PublisherIdentityRangeSize: WideString;
    procedure Set_PublisherIdentityRangeSize(const pRetVal: WideString);
    function Get_SubscriberIdentityRangeSize: WideString;
    procedure Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
    function Get_IdentityRangeThreshold: Integer;
    procedure Set_IdentityRangeThreshold(pRetVal: Integer);
    function Get_VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE;
    procedure Set_VerifyResolverSignature(pRetVal: SQLDMO_VERIFYSIGNATURE_TYPE);
    function Get_DestinationObjectName: WideString;
    procedure Set_DestinationObjectName(const pRetVal: WideString);
    function Get_AllowInteractiveResolver: WordBool;
    procedure Set_AllowInteractiveResolver(pRetVal: WordBool);
    function Get_MultipleColumnUpdate: WordBool;
    procedure Set_MultipleColumnUpdate(pRetVal: WordBool);
    function Get_CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE;
    procedure Set_CheckPermissions(pRetVal: SQLDMO_CHECKPERMISSIONS_TYPE);
  public
    property DefaultInterface: _MergeArticle2 read GetDefaultInterface;
  published
    property DestinationOwnerName: WideString read Get_DestinationOwnerName write Set_DestinationOwnerName;
    property AutoIdentityRange: WordBool read Get_AutoIdentityRange write Set_AutoIdentityRange;
    property PublisherIdentityRangeSize: WideString read Get_PublisherIdentityRangeSize write Set_PublisherIdentityRangeSize;
    property SubscriberIdentityRangeSize: WideString read Get_SubscriberIdentityRangeSize write Set_SubscriberIdentityRangeSize;
    property IdentityRangeThreshold: Integer read Get_IdentityRangeThreshold write Set_IdentityRangeThreshold;
    property VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE read Get_VerifyResolverSignature write Set_VerifyResolverSignature;
    property DestinationObjectName: WideString read Get_DestinationObjectName write Set_DestinationObjectName;
    property AllowInteractiveResolver: WordBool read Get_AllowInteractiveResolver write Set_AllowInteractiveResolver;
    property MultipleColumnUpdate: WordBool read Get_MultipleColumnUpdate write Set_MultipleColumnUpdate;
    property CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE read Get_CheckPermissions write Set_CheckPermissions;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergeSubscription2 provides a Create and CreateRemote method to          
// create instances of the default interface _MergeSubscription2 exposed by              
// the CoClass MergeSubscription2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergeSubscription2 = class
    class function Create: _MergeSubscription2;
    class function CreateRemote(const MachineName: string): _MergeSubscription2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergeSubscription2
// Help String      : SQLDMO MergeSubscription
// Default Interface: _MergeSubscription2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergeSubscription2Properties= class;
{$ENDIF}
  TMergeSubscription2 = class(TOleServer)
  private
    FIntf:        _MergeSubscription2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergeSubscription2Properties;
    function      GetServerProperties: TMergeSubscription2Properties;
{$ENDIF}
    function      GetDefaultInterface: _MergeSubscription2;
  protected
    procedure InitServerData; override;
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_UseInteractiveResolver: WordBool;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergeSubscription2);
    procedure Disconnect; override;
    procedure ReInitialize2(bUploadFirst: WordBool);
    property DefaultInterface: _MergeSubscription2 read GetDefaultInterface;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergeSubscription2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergeSubscription2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergeSubscription2Properties = class(TPersistent)
  private
    FServer:    TMergeSubscription2;
    function    GetDefaultInterface: _MergeSubscription2;
    constructor Create(AServer: TMergeSubscription2);
  protected
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_UseInteractiveResolver: WordBool;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool);
  public
    property DefaultInterface: _MergeSubscription2 read GetDefaultInterface;
  published
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMergePullSubscription2 provides a Create and CreateRemote method to          
// create instances of the default interface _MergePullSubscription2 exposed by              
// the CoClass MergePullSubscription2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMergePullSubscription2 = class
    class function Create: _MergePullSubscription2;
    class function CreateRemote(const MachineName: string): _MergePullSubscription2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMergePullSubscription2
// Help String      : SQLDMO MergePullSubscription
// Default Interface: _MergePullSubscription2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMergePullSubscription2Properties= class;
{$ENDIF}
  TMergePullSubscription2 = class(TOleServer)
  private
    FIntf:        _MergePullSubscription2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMergePullSubscription2Properties;
    function      GetServerProperties: TMergePullSubscription2Properties;
{$ENDIF}
    function      GetDefaultInterface: _MergePullSubscription2;
  protected
    procedure InitServerData; override;
    function Get_LastMergedTime: WideString;
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_WorkingDirectory: WideString;
    procedure Set_WorkingDirectory(const pRetVal: WideString);
    function Get_UseFTP: WordBool;
    procedure Set_UseFTP(pRetVal: WordBool);
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_UseInteractiveResolver: WordBool;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool);
    function Get_SubscriptionID: WideString;
    function Get_DynamicSnapshotLocation: WideString;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString);
    function Get_LastMergedStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_LastMergedSummary: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MergePullSubscription2);
    procedure Disconnect; override;
    procedure ReInitialize2(bUploadFirst: WordBool);
    function EnumAlternatePublishers: QueryResults;
    property DefaultInterface: _MergePullSubscription2 read GetDefaultInterface;
    property LastMergedTime: WideString read Get_LastMergedTime;
    property SubscriptionID: WideString read Get_SubscriptionID;
    property LastMergedStatus: SQLDMO_TASKSTATUS_TYPE read Get_LastMergedStatus;
    property LastMergedSummary: WideString read Get_LastMergedSummary;
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMergePullSubscription2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMergePullSubscription2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMergePullSubscription2Properties = class(TPersistent)
  private
    FServer:    TMergePullSubscription2;
    function    GetDefaultInterface: _MergePullSubscription2;
    constructor Create(AServer: TMergePullSubscription2);
  protected
    function Get_LastMergedTime: WideString;
    function Get_AltSnapshotFolder: WideString;
    procedure Set_AltSnapshotFolder(const pRetVal: WideString);
    function Get_WorkingDirectory: WideString;
    procedure Set_WorkingDirectory(const pRetVal: WideString);
    function Get_UseFTP: WordBool;
    procedure Set_UseFTP(pRetVal: WordBool);
    function Get_AgentOffload: WordBool;
    procedure Set_AgentOffload(pRetVal: WordBool);
    function Get_AgentOffloadServer: WideString;
    procedure Set_AgentOffloadServer(const pRetVal: WideString);
    function Get_UseInteractiveResolver: WordBool;
    procedure Set_UseInteractiveResolver(pRetVal: WordBool);
    function Get_SubscriptionID: WideString;
    function Get_DynamicSnapshotLocation: WideString;
    procedure Set_DynamicSnapshotLocation(const pRetVal: WideString);
    function Get_LastMergedStatus: SQLDMO_TASKSTATUS_TYPE;
    function Get_LastMergedSummary: WideString;
  public
    property DefaultInterface: _MergePullSubscription2 read GetDefaultInterface;
  published
    property AltSnapshotFolder: WideString read Get_AltSnapshotFolder write Set_AltSnapshotFolder;
    property WorkingDirectory: WideString read Get_WorkingDirectory write Set_WorkingDirectory;
    property UseFTP: WordBool read Get_UseFTP write Set_UseFTP;
    property AgentOffload: WordBool read Get_AgentOffload write Set_AgentOffload;
    property AgentOffloadServer: WideString read Get_AgentOffloadServer write Set_AgentOffloadServer;
    property UseInteractiveResolver: WordBool read Get_UseInteractiveResolver write Set_UseInteractiveResolver;
    property DynamicSnapshotLocation: WideString read Get_DynamicSnapshotLocation write Set_DynamicSnapshotLocation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionPublication2 provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionPublication2 exposed by              
// the CoClass DistributionPublication2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionPublication2 = class
    class function Create: _DistributionPublication2;
    class function CreateRemote(const MachineName: string): _DistributionPublication2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionPublication2
// Help String      : SQLDMO DistributionPublication
// Default Interface: _DistributionPublication2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionPublication2Properties= class;
{$ENDIF}
  TDistributionPublication2 = class(TOleServer)
  private
    FIntf:        _DistributionPublication2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionPublication2Properties;
    function      GetServerProperties: TDistributionPublication2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionPublication2;
  protected
    procedure InitServerData; override;
    function Get_ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE;
    procedure Set_ThirdPartyOptions(pRetVal: SQLDMO_THIRDPARTYOPTION_TYPE);
    function Get_SnapshotJobID: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionPublication2);
    procedure Disconnect; override;
    function EnumQueueReaderAgentView: QueryResults;
    function EnumSubscriptionViews2(fExcludeAnonymous: WordBool): QueryResults;
    procedure GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                               out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                               out pRetValTimeStamp: WideString);
    property DefaultInterface: _DistributionPublication2 read GetDefaultInterface;
    property SnapshotJobID: WideString read Get_SnapshotJobID;
    property ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE read Get_ThirdPartyOptions write Set_ThirdPartyOptions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionPublication2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionPublication2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionPublication2Properties = class(TPersistent)
  private
    FServer:    TDistributionPublication2;
    function    GetDefaultInterface: _DistributionPublication2;
    constructor Create(AServer: TDistributionPublication2);
  protected
    function Get_ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE;
    procedure Set_ThirdPartyOptions(pRetVal: SQLDMO_THIRDPARTYOPTION_TYPE);
    function Get_SnapshotJobID: WideString;
  public
    property DefaultInterface: _DistributionPublication2 read GetDefaultInterface;
  published
    property ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE read Get_ThirdPartyOptions write Set_ThirdPartyOptions;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionArticle2 provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionArticle2 exposed by              
// the CoClass DistributionArticle2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionArticle2 = class
    class function Create: _DistributionArticle2;
    class function CreateRemote(const MachineName: string): _DistributionArticle2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionArticle2
// Help String      : SQLDMO DistributionArticle
// Default Interface: _DistributionArticle2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionArticle2Properties= class;
{$ENDIF}
  TDistributionArticle2 = class(TOleServer)
  private
    FIntf:        _DistributionArticle2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionArticle2Properties;
    function      GetServerProperties: TDistributionArticle2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionArticle2;
  protected
    procedure InitServerData; override;
    procedure Set_ID(Param1: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionArticle2);
    procedure Disconnect; override;
    property DefaultInterface: _DistributionArticle2 read GetDefaultInterface;
    property ID: Integer write Set_ID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionArticle2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionArticle2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionArticle2Properties = class(TPersistent)
  private
    FServer:    TDistributionArticle2;
    function    GetDefaultInterface: _DistributionArticle2;
    constructor Create(AServer: TDistributionArticle2);
  protected
    procedure Set_ID(Param1: Integer);
  public
    property DefaultInterface: _DistributionArticle2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDistributionSubscription2 provides a Create and CreateRemote method to          
// create instances of the default interface _DistributionSubscription2 exposed by              
// the CoClass DistributionSubscription2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDistributionSubscription2 = class
    class function Create: _DistributionSubscription2;
    class function CreateRemote(const MachineName: string): _DistributionSubscription2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDistributionSubscription2
// Help String      : SQLDMO DistributionSubscription
// Default Interface: _DistributionSubscription2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDistributionSubscription2Properties= class;
{$ENDIF}
  TDistributionSubscription2 = class(TOleServer)
  private
    FIntf:        _DistributionSubscription2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDistributionSubscription2Properties;
    function      GetServerProperties: TDistributionSubscription2Properties;
{$ENDIF}
    function      GetDefaultInterface: _DistributionSubscription2;
  protected
    procedure InitServerData; override;
    function Get_DistributionJobID: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DistributionSubscription2);
    procedure Disconnect; override;
    property DefaultInterface: _DistributionSubscription2 read GetDefaultInterface;
    property DistributionJobID: WideString read Get_DistributionJobID;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDistributionSubscription2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDistributionSubscription2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDistributionSubscription2Properties = class(TPersistent)
  private
    FServer:    TDistributionSubscription2;
    function    GetDefaultInterface: _DistributionSubscription2;
    constructor Create(AServer: TDistributionSubscription2);
  protected
    function Get_DistributionJobID: WideString;
  public
    property DefaultInterface: _DistributionSubscription2 read GetDefaultInterface;
  published
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoApplication.Create: _Application;
begin
  Result := CreateComObject(CLASS_Application) as _Application;
end;

class function CoApplication.CreateRemote(const MachineName: string): _Application;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Application) as _Application;
end;

class function CoColumn.Create: _Column;
begin
  Result := CreateComObject(CLASS_Column) as _Column;
end;

class function CoColumn.CreateRemote(const MachineName: string): _Column;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Column) as _Column;
end;

procedure TColumn.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020500-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020506-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TColumn.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Column;
  end;
end;

procedure TColumn.ConnectTo(svrIntf: _Column);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TColumn.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TColumn.GetDefaultInterface: _Column;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TColumn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TColumnProperties.Create(Self);
{$ENDIF}
end;

destructor TColumn.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TColumn.GetServerProperties: TColumnProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TColumn.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TColumn.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TColumn.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TColumn.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TColumn.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TColumn.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TColumn.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TColumn.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TColumn.Get_IdentityIncrement: Integer;
begin
    Result := DefaultInterface.IdentityIncrement;
end;

procedure TColumn.Set_IdentityIncrement(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityIncrement(pRetVal);
end;

function TColumn.Get_IdentitySeed: Integer;
begin
    Result := DefaultInterface.IdentitySeed;
end;

procedure TColumn.Set_IdentitySeed(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentitySeed(pRetVal);
end;

function TColumn.Get_DRIDefault: DRIDefault;
begin
    Result := DefaultInterface.DRIDefault;
end;

function TColumn.Get_InPrimaryKey: WordBool;
begin
    Result := DefaultInterface.InPrimaryKey;
end;

function TColumn.Get_Datatype: WideString;
begin
    Result := DefaultInterface.Datatype;
end;

procedure TColumn.Set_Datatype(const pRetVal: WideString);
  { Warning: The property Datatype has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Datatype := pRetVal;
end;

function TColumn.Get_PhysicalDatatype: WideString;
begin
    Result := DefaultInterface.PhysicalDatatype;
end;

function TColumn.Get_Length: Integer;
begin
    Result := DefaultInterface.Length;
end;

procedure TColumn.Set_Length(pRetVal: Integer);
begin
  DefaultInterface.Set_Length(pRetVal);
end;

function TColumn.Get_Default: WideString;
begin
    Result := DefaultInterface.Default;
end;

procedure TColumn.Set_Default(const pRetVal: WideString);
  { Warning: The property Default has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Default := pRetVal;
end;

function TColumn.Get_Rule: WideString;
begin
    Result := DefaultInterface.Rule;
end;

procedure TColumn.Set_Rule(const pRetVal: WideString);
  { Warning: The property Rule has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rule := pRetVal;
end;

function TColumn.Get_AllowNulls: WordBool;
begin
    Result := DefaultInterface.AllowNulls;
end;

procedure TColumn.Set_AllowNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowNulls(pRetVal);
end;

function TColumn.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TColumn.Get_Identity: WordBool;
begin
    Result := DefaultInterface.Identity;
end;

procedure TColumn.Set_Identity(pRetVal: WordBool);
begin
  DefaultInterface.Set_Identity(pRetVal);
end;

function TColumn.Get_NumericPrecision: Integer;
begin
    Result := DefaultInterface.NumericPrecision;
end;

procedure TColumn.Set_NumericPrecision(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericPrecision(pRetVal);
end;

function TColumn.Get_NumericScale: Integer;
begin
    Result := DefaultInterface.NumericScale;
end;

procedure TColumn.Set_NumericScale(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericScale(pRetVal);
end;

function TColumn.Get_IsRowGuidCol: WordBool;
begin
    Result := DefaultInterface.IsRowGuidCol;
end;

procedure TColumn.Set_IsRowGuidCol(pRetVal: WordBool);
begin
  DefaultInterface.Set_IsRowGuidCol(pRetVal);
end;

function TColumn.Get_IsComputed: WordBool;
begin
    Result := DefaultInterface.IsComputed;
end;

procedure TColumn.Set_IsComputed(pRetVal: WordBool);
begin
  DefaultInterface.Set_IsComputed(pRetVal);
end;

function TColumn.Get_ComputedText: WideString;
begin
    Result := DefaultInterface.ComputedText;
end;

procedure TColumn.Set_ComputedText(const pRetVal: WideString);
  { Warning: The property ComputedText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ComputedText := pRetVal;
end;

function TColumn.Get_NotForRepl: WordBool;
begin
    Result := DefaultInterface.NotForRepl;
end;

procedure TColumn.Set_NotForRepl(pRetVal: WordBool);
begin
  DefaultInterface.Set_NotForRepl(pRetVal);
end;

function TColumn.Get_FullTextIndex: WordBool;
begin
    Result := DefaultInterface.FullTextIndex;
end;

procedure TColumn.Set_FullTextIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndex(pRetVal);
end;

function TColumn.Get_AnsiPaddingStatus: WordBool;
begin
    Result := DefaultInterface.AnsiPaddingStatus;
end;

function TColumn.Get_DefaultOwner: WideString;
begin
    Result := DefaultInterface.DefaultOwner;
end;

function TColumn.Get_RuleOwner: WideString;
begin
    Result := DefaultInterface.RuleOwner;
end;

procedure TColumn.Remove;
begin
  DefaultInterface.Remove;
end;

function TColumn.ListKeys: SQLObjectList;
begin
  Result := DefaultInterface.ListKeys;
end;

procedure TColumn.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, EmptyParam, EmptyParam);
end;

procedure TColumn.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, ScanNumber, EmptyParam);
end;

procedure TColumn.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                       ReCompute: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, ScanNumber, ReCompute);
end;

procedure TColumn.BindDefault(const DefaultOwner: WideString; const DefaultName: WideString; 
                              Bind: WordBool);
begin
  DefaultInterface.BindDefault(DefaultOwner, DefaultName, Bind);
end;

procedure TColumn.BindRule(const RuleOwner: WideString; const RuleName: WideString; Bind: WordBool);
begin
  DefaultInterface.BindRule(RuleOwner, RuleName, Bind);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TColumnProperties.Create(AServer: TColumn);
begin
  inherited Create;
  FServer := AServer;
end;

function TColumnProperties.GetDefaultInterface: _Column;
begin
  Result := FServer.DefaultInterface;
end;

function TColumnProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TColumnProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TColumnProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TColumnProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TColumnProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TColumnProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TColumnProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TColumnProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TColumnProperties.Get_IdentityIncrement: Integer;
begin
    Result := DefaultInterface.IdentityIncrement;
end;

procedure TColumnProperties.Set_IdentityIncrement(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityIncrement(pRetVal);
end;

function TColumnProperties.Get_IdentitySeed: Integer;
begin
    Result := DefaultInterface.IdentitySeed;
end;

procedure TColumnProperties.Set_IdentitySeed(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentitySeed(pRetVal);
end;

function TColumnProperties.Get_DRIDefault: DRIDefault;
begin
    Result := DefaultInterface.DRIDefault;
end;

function TColumnProperties.Get_InPrimaryKey: WordBool;
begin
    Result := DefaultInterface.InPrimaryKey;
end;

function TColumnProperties.Get_Datatype: WideString;
begin
    Result := DefaultInterface.Datatype;
end;

procedure TColumnProperties.Set_Datatype(const pRetVal: WideString);
  { Warning: The property Datatype has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Datatype := pRetVal;
end;

function TColumnProperties.Get_PhysicalDatatype: WideString;
begin
    Result := DefaultInterface.PhysicalDatatype;
end;

function TColumnProperties.Get_Length: Integer;
begin
    Result := DefaultInterface.Length;
end;

procedure TColumnProperties.Set_Length(pRetVal: Integer);
begin
  DefaultInterface.Set_Length(pRetVal);
end;

function TColumnProperties.Get_Default: WideString;
begin
    Result := DefaultInterface.Default;
end;

procedure TColumnProperties.Set_Default(const pRetVal: WideString);
  { Warning: The property Default has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Default := pRetVal;
end;

function TColumnProperties.Get_Rule: WideString;
begin
    Result := DefaultInterface.Rule;
end;

procedure TColumnProperties.Set_Rule(const pRetVal: WideString);
  { Warning: The property Rule has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rule := pRetVal;
end;

function TColumnProperties.Get_AllowNulls: WordBool;
begin
    Result := DefaultInterface.AllowNulls;
end;

procedure TColumnProperties.Set_AllowNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowNulls(pRetVal);
end;

function TColumnProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TColumnProperties.Get_Identity: WordBool;
begin
    Result := DefaultInterface.Identity;
end;

procedure TColumnProperties.Set_Identity(pRetVal: WordBool);
begin
  DefaultInterface.Set_Identity(pRetVal);
end;

function TColumnProperties.Get_NumericPrecision: Integer;
begin
    Result := DefaultInterface.NumericPrecision;
end;

procedure TColumnProperties.Set_NumericPrecision(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericPrecision(pRetVal);
end;

function TColumnProperties.Get_NumericScale: Integer;
begin
    Result := DefaultInterface.NumericScale;
end;

procedure TColumnProperties.Set_NumericScale(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericScale(pRetVal);
end;

function TColumnProperties.Get_IsRowGuidCol: WordBool;
begin
    Result := DefaultInterface.IsRowGuidCol;
end;

procedure TColumnProperties.Set_IsRowGuidCol(pRetVal: WordBool);
begin
  DefaultInterface.Set_IsRowGuidCol(pRetVal);
end;

function TColumnProperties.Get_IsComputed: WordBool;
begin
    Result := DefaultInterface.IsComputed;
end;

procedure TColumnProperties.Set_IsComputed(pRetVal: WordBool);
begin
  DefaultInterface.Set_IsComputed(pRetVal);
end;

function TColumnProperties.Get_ComputedText: WideString;
begin
    Result := DefaultInterface.ComputedText;
end;

procedure TColumnProperties.Set_ComputedText(const pRetVal: WideString);
  { Warning: The property ComputedText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ComputedText := pRetVal;
end;

function TColumnProperties.Get_NotForRepl: WordBool;
begin
    Result := DefaultInterface.NotForRepl;
end;

procedure TColumnProperties.Set_NotForRepl(pRetVal: WordBool);
begin
  DefaultInterface.Set_NotForRepl(pRetVal);
end;

function TColumnProperties.Get_FullTextIndex: WordBool;
begin
    Result := DefaultInterface.FullTextIndex;
end;

procedure TColumnProperties.Set_FullTextIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndex(pRetVal);
end;

function TColumnProperties.Get_AnsiPaddingStatus: WordBool;
begin
    Result := DefaultInterface.AnsiPaddingStatus;
end;

function TColumnProperties.Get_DefaultOwner: WideString;
begin
    Result := DefaultInterface.DefaultOwner;
end;

function TColumnProperties.Get_RuleOwner: WideString;
begin
    Result := DefaultInterface.RuleOwner;
end;

{$ENDIF}

class function CoKey.Create: _Key;
begin
  Result := CreateComObject(CLASS_Key) as _Key;
end;

class function CoKey.CreateRemote(const MachineName: string): _Key;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Key) as _Key;
end;

procedure TKey.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020F00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020F06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKey.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Key;
  end;
end;

procedure TKey.ConnectTo(svrIntf: _Key);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKey.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKey.GetDefaultInterface: _Key;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKey.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKeyProperties.Create(Self);
{$ENDIF}
end;

destructor TKey.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKey.GetServerProperties: TKeyProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKey.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TKey.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TKey.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TKey.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TKey.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TKey.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TKey.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKey.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TKey.Get_Clustered: WordBool;
begin
    Result := DefaultInterface.Clustered;
end;

procedure TKey.Set_Clustered(pRetVal: WordBool);
begin
  DefaultInterface.Set_Clustered(pRetVal);
end;

function TKey.Get_FillFactor: Integer;
begin
    Result := DefaultInterface.FillFactor;
end;

procedure TKey.Set_FillFactor(pRetVal: Integer);
begin
  DefaultInterface.Set_FillFactor(pRetVal);
end;

function TKey.Get_KeyColumns: Names;
begin
    Result := DefaultInterface.KeyColumns;
end;

function TKey.Get_ReferencedTable: WideString;
begin
    Result := DefaultInterface.ReferencedTable;
end;

procedure TKey.Set_ReferencedTable(const pRetVal: WideString);
  { Warning: The property ReferencedTable has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferencedTable := pRetVal;
end;

function TKey.Get_ReferencedColumns: Names;
begin
    Result := DefaultInterface.ReferencedColumns;
end;

function TKey.Get_type_: SQLDMO_KEY_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TKey.Set_type_(pRetVal: SQLDMO_KEY_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TKey.Get_ReferencedKey: WideString;
begin
    Result := DefaultInterface.ReferencedKey;
end;

function TKey.Get_ExcludeReplication: WordBool;
begin
    Result := DefaultInterface.ExcludeReplication;
end;

procedure TKey.Set_ExcludeReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExcludeReplication(pRetVal);
end;

function TKey.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TKey.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TKey.Get_Checked: WordBool;
begin
    Result := DefaultInterface.Checked;
end;

procedure TKey.Set_Checked(pRetVal: WordBool);
begin
  DefaultInterface.Set_Checked(pRetVal);
end;

procedure TKey.Remove;
begin
  DefaultInterface.Remove;
end;

function TKey.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                     Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

procedure TKey.RebuildIndex;
begin
  DefaultInterface.RebuildIndex;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKeyProperties.Create(AServer: TKey);
begin
  inherited Create;
  FServer := AServer;
end;

function TKeyProperties.GetDefaultInterface: _Key;
begin
  Result := FServer.DefaultInterface;
end;

function TKeyProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TKeyProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TKeyProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TKeyProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TKeyProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TKeyProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TKeyProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKeyProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TKeyProperties.Get_Clustered: WordBool;
begin
    Result := DefaultInterface.Clustered;
end;

procedure TKeyProperties.Set_Clustered(pRetVal: WordBool);
begin
  DefaultInterface.Set_Clustered(pRetVal);
end;

function TKeyProperties.Get_FillFactor: Integer;
begin
    Result := DefaultInterface.FillFactor;
end;

procedure TKeyProperties.Set_FillFactor(pRetVal: Integer);
begin
  DefaultInterface.Set_FillFactor(pRetVal);
end;

function TKeyProperties.Get_KeyColumns: Names;
begin
    Result := DefaultInterface.KeyColumns;
end;

function TKeyProperties.Get_ReferencedTable: WideString;
begin
    Result := DefaultInterface.ReferencedTable;
end;

procedure TKeyProperties.Set_ReferencedTable(const pRetVal: WideString);
  { Warning: The property ReferencedTable has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferencedTable := pRetVal;
end;

function TKeyProperties.Get_ReferencedColumns: Names;
begin
    Result := DefaultInterface.ReferencedColumns;
end;

function TKeyProperties.Get_type_: SQLDMO_KEY_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TKeyProperties.Set_type_(pRetVal: SQLDMO_KEY_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TKeyProperties.Get_ReferencedKey: WideString;
begin
    Result := DefaultInterface.ReferencedKey;
end;

function TKeyProperties.Get_ExcludeReplication: WordBool;
begin
    Result := DefaultInterface.ExcludeReplication;
end;

procedure TKeyProperties.Set_ExcludeReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExcludeReplication(pRetVal);
end;

function TKeyProperties.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TKeyProperties.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TKeyProperties.Get_Checked: WordBool;
begin
    Result := DefaultInterface.Checked;
end;

procedure TKeyProperties.Set_Checked(pRetVal: WordBool);
begin
  DefaultInterface.Set_Checked(pRetVal);
end;

{$ENDIF}

class function CoIndex.Create: _Index;
begin
  Result := CreateComObject(CLASS_Index) as _Index;
end;

class function CoIndex.CreateRemote(const MachineName: string): _Index;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Index) as _Index;
end;

procedure TIndex.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020E00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020E06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIndex.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Index;
  end;
end;

procedure TIndex.ConnectTo(svrIntf: _Index);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TIndex.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TIndex.GetDefaultInterface: _Index;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TIndex.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TIndexProperties.Create(Self);
{$ENDIF}
end;

destructor TIndex.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TIndex.GetServerProperties: TIndexProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TIndex.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TIndex.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TIndex.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TIndex.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TIndex.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TIndex.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TIndex.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TIndex.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

procedure TIndex.Set_IndexedColumns(const Param1: WideString);
  { Warning: The property IndexedColumns has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IndexedColumns := Param1;
end;

function TIndex.Get_SpaceUsed: Integer;
begin
    Result := DefaultInterface.SpaceUsed;
end;

function TIndex.Get_type_: SQLDMO_INDEX_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TIndex.Set_type_(pRetVal: SQLDMO_INDEX_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TIndex.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TIndex.Get_FillFactor: Integer;
begin
    Result := DefaultInterface.FillFactor;
end;

procedure TIndex.Set_FillFactor(pRetVal: Integer);
begin
  DefaultInterface.Set_FillFactor(pRetVal);
end;

function TIndex.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TIndex.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TIndex.Get_IsFullTextKey: WordBool;
begin
    Result := DefaultInterface.IsFullTextKey;
end;

function TIndex.Get_NoRecompute: WordBool;
begin
    Result := DefaultInterface.NoRecompute;
end;

procedure TIndex.Set_NoRecompute(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRecompute(pRetVal);
end;

function TIndex.Get_StatisticsIndex: WordBool;
begin
    Result := DefaultInterface.StatisticsIndex;
end;

procedure TIndex.Set_StatisticsIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_StatisticsIndex(pRetVal);
end;

procedure TIndex.UpdateStatistics;
begin
  DefaultInterface.UpdateStatistics;
end;

function TIndex.ListIndexedColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListIndexedColumns;
end;

procedure TIndex.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TIndex.Rebuild;
begin
  DefaultInterface.Rebuild;
end;

function TIndex.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

procedure TIndex.RecalcSpaceUsage;
begin
  DefaultInterface.RecalcSpaceUsage;
end;

function TIndex.EnumStatistics: QueryResults;
begin
  Result := DefaultInterface.EnumStatistics;
end;

function TIndex.GenerateCreationSQL(const TargetTable: Table): WideString;
begin
  Result := DefaultInterface.GenerateCreationSQL(TargetTable);
end;

function TIndex.CheckIndex: WideString;
begin
  Result := DefaultInterface.CheckIndex;
end;

function TIndex.GenerateSQL(const pTable: Table): WideString;
begin
  Result := DefaultInterface.GenerateSQL(pTable);
end;

procedure TIndex.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, EmptyParam, EmptyParam);
end;

procedure TIndex.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, ScanNumber, EmptyParam);
end;

procedure TIndex.UpdateStatisticsWith(ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                      ReCompute: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(ScanType, ScanNumber, ReCompute);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TIndexProperties.Create(AServer: TIndex);
begin
  inherited Create;
  FServer := AServer;
end;

function TIndexProperties.GetDefaultInterface: _Index;
begin
  Result := FServer.DefaultInterface;
end;

function TIndexProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TIndexProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TIndexProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TIndexProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TIndexProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TIndexProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TIndexProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TIndexProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

procedure TIndexProperties.Set_IndexedColumns(const Param1: WideString);
  { Warning: The property IndexedColumns has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IndexedColumns := Param1;
end;

function TIndexProperties.Get_SpaceUsed: Integer;
begin
    Result := DefaultInterface.SpaceUsed;
end;

function TIndexProperties.Get_type_: SQLDMO_INDEX_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TIndexProperties.Set_type_(pRetVal: SQLDMO_INDEX_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TIndexProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TIndexProperties.Get_FillFactor: Integer;
begin
    Result := DefaultInterface.FillFactor;
end;

procedure TIndexProperties.Set_FillFactor(pRetVal: Integer);
begin
  DefaultInterface.Set_FillFactor(pRetVal);
end;

function TIndexProperties.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TIndexProperties.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TIndexProperties.Get_IsFullTextKey: WordBool;
begin
    Result := DefaultInterface.IsFullTextKey;
end;

function TIndexProperties.Get_NoRecompute: WordBool;
begin
    Result := DefaultInterface.NoRecompute;
end;

procedure TIndexProperties.Set_NoRecompute(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRecompute(pRetVal);
end;

function TIndexProperties.Get_StatisticsIndex: WordBool;
begin
    Result := DefaultInterface.StatisticsIndex;
end;

procedure TIndexProperties.Set_StatisticsIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_StatisticsIndex(pRetVal);
end;

{$ENDIF}

class function CoBulkCopy.Create: _BulkCopy;
begin
  Result := CreateComObject(CLASS_BulkCopy) as _BulkCopy;
end;

class function CoBulkCopy.CreateRemote(const MachineName: string): _BulkCopy;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BulkCopy) as _BulkCopy;
end;

procedure TBulkCopy.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021C00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021C06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021C09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBulkCopy.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _BulkCopy;
  end;
end;

procedure TBulkCopy.ConnectTo(svrIntf: _BulkCopy);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TBulkCopy.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TBulkCopy.GetDefaultInterface: _BulkCopy;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBulkCopy.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBulkCopyProperties.Create(Self);
{$ENDIF}
end;

destructor TBulkCopy.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBulkCopy.GetServerProperties: TBulkCopyProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TBulkCopy.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnRowsCopied) then
         FOnRowsCopied(Self,
                       Params[0] {const WideString},
                       Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnBatchImported) then
         FOnBatchImported(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TBulkCopy.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBulkCopy.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBulkCopy.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBulkCopy.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBulkCopy.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBulkCopy.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBulkCopy.Get_DataFilePath: WideString;
begin
    Result := DefaultInterface.DataFilePath;
end;

procedure TBulkCopy.Set_DataFilePath(const pRetVal: WideString);
  { Warning: The property DataFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFilePath := pRetVal;
end;

function TBulkCopy.Get_FormatFilePath: WideString;
begin
    Result := DefaultInterface.FormatFilePath;
end;

procedure TBulkCopy.Set_FormatFilePath(const pRetVal: WideString);
  { Warning: The property FormatFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormatFilePath := pRetVal;
end;

function TBulkCopy.Get_ErrorFilePath: WideString;
begin
    Result := DefaultInterface.ErrorFilePath;
end;

procedure TBulkCopy.Set_ErrorFilePath(const pRetVal: WideString);
  { Warning: The property ErrorFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ErrorFilePath := pRetVal;
end;

function TBulkCopy.Get_LogFilePath: WideString;
begin
    Result := DefaultInterface.LogFilePath;
end;

procedure TBulkCopy.Set_LogFilePath(const pRetVal: WideString);
  { Warning: The property LogFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFilePath := pRetVal;
end;

function TBulkCopy.Get_ColumnDelimiter: WideString;
begin
    Result := DefaultInterface.ColumnDelimiter;
end;

procedure TBulkCopy.Set_ColumnDelimiter(const pRetVal: WideString);
  { Warning: The property ColumnDelimiter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ColumnDelimiter := pRetVal;
end;

function TBulkCopy.Get_RowDelimiter: WideString;
begin
    Result := DefaultInterface.RowDelimiter;
end;

procedure TBulkCopy.Set_RowDelimiter(const pRetVal: WideString);
  { Warning: The property RowDelimiter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RowDelimiter := pRetVal;
end;

function TBulkCopy.Get_DataFileType: SQLDMO_DATAFILE_TYPE;
begin
    Result := DefaultInterface.DataFileType;
end;

procedure TBulkCopy.Set_DataFileType(pRetVal: SQLDMO_DATAFILE_TYPE);
begin
  DefaultInterface.Set_DataFileType(pRetVal);
end;

function TBulkCopy.Get_FirstRow: Integer;
begin
    Result := DefaultInterface.FirstRow;
end;

procedure TBulkCopy.Set_FirstRow(pRetVal: Integer);
begin
  DefaultInterface.Set_FirstRow(pRetVal);
end;

function TBulkCopy.Get_LastRow: Integer;
begin
    Result := DefaultInterface.LastRow;
end;

procedure TBulkCopy.Set_LastRow(pRetVal: Integer);
begin
  DefaultInterface.Set_LastRow(pRetVal);
end;

function TBulkCopy.Get_MaximumErrorsBeforeAbort: Integer;
begin
    Result := DefaultInterface.MaximumErrorsBeforeAbort;
end;

procedure TBulkCopy.Set_MaximumErrorsBeforeAbort(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumErrorsBeforeAbort(pRetVal);
end;

function TBulkCopy.Get_IncludeIdentityValues: WordBool;
begin
    Result := DefaultInterface.IncludeIdentityValues;
end;

procedure TBulkCopy.Set_IncludeIdentityValues(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeIdentityValues(pRetVal);
end;

function TBulkCopy.Get_ImportRowsPerBatch: Integer;
begin
    Result := DefaultInterface.ImportRowsPerBatch;
end;

procedure TBulkCopy.Set_ImportRowsPerBatch(pRetVal: Integer);
begin
  DefaultInterface.Set_ImportRowsPerBatch(pRetVal);
end;

function TBulkCopy.Get_UseBulkCopyOption: WordBool;
begin
    Result := DefaultInterface.UseBulkCopyOption;
end;

procedure TBulkCopy.Set_UseBulkCopyOption(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseBulkCopyOption(pRetVal);
end;

function TBulkCopy.Get_SuspendIndexing: WordBool;
begin
    Result := DefaultInterface.SuspendIndexing;
end;

procedure TBulkCopy.Set_SuspendIndexing(pRetVal: WordBool);
begin
  DefaultInterface.Set_SuspendIndexing(pRetVal);
end;

function TBulkCopy.Get_TruncateLog: WordBool;
begin
    Result := DefaultInterface.TruncateLog;
end;

procedure TBulkCopy.Set_TruncateLog(pRetVal: WordBool);
begin
  DefaultInterface.Set_TruncateLog(pRetVal);
end;

function TBulkCopy.Get_UseExistingConnection: WordBool;
begin
    Result := DefaultInterface.UseExistingConnection;
end;

procedure TBulkCopy.Set_UseExistingConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseExistingConnection(pRetVal);
end;

function TBulkCopy.Get_Use6xCompatible: WordBool;
begin
    Result := DefaultInterface.Use6xCompatible;
end;

procedure TBulkCopy.Set_Use6xCompatible(pRetVal: WordBool);
begin
  DefaultInterface.Set_Use6xCompatible(pRetVal);
end;

function TBulkCopy.Get_CodePage: Integer;
begin
    Result := DefaultInterface.CodePage;
end;

function TBulkCopy.Get_UseServerSideBCP: WordBool;
begin
    Result := DefaultInterface.UseServerSideBCP;
end;

procedure TBulkCopy.Set_UseServerSideBCP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseServerSideBCP(pRetVal);
end;

function TBulkCopy.Get_ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE;
begin
    Result := DefaultInterface.ServerBCPDataFileType;
end;

procedure TBulkCopy.Set_ServerBCPDataFileType(pRetVal: SQLDMO_SERVERBCP_DATAFILE_TYPE);
begin
  DefaultInterface.Set_ServerBCPDataFileType(pRetVal);
end;

function TBulkCopy.Get_ServerBCPKeepIdentity: WordBool;
begin
    Result := DefaultInterface.ServerBCPKeepIdentity;
end;

procedure TBulkCopy.Set_ServerBCPKeepIdentity(pRetVal: WordBool);
begin
  DefaultInterface.Set_ServerBCPKeepIdentity(pRetVal);
end;

function TBulkCopy.Get_ServerBCPKeepNulls: WordBool;
begin
    Result := DefaultInterface.ServerBCPKeepNulls;
end;

procedure TBulkCopy.Set_ServerBCPKeepNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_ServerBCPKeepNulls(pRetVal);
end;

function TBulkCopy.Get_ExportWideChar: WordBool;
begin
    Result := DefaultInterface.ExportWideChar;
end;

procedure TBulkCopy.Set_ExportWideChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExportWideChar(pRetVal);
end;

procedure TBulkCopy.Abort;
begin
  DefaultInterface.Abort;
end;

procedure TBulkCopy.SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE);
begin
  DefaultInterface.SetCodePage(lNew, EmptyParam);
end;

procedure TBulkCopy.SetCodePage(lNew: SQLDMO_BCP_CODEPAGE_TYPE; UserCodePage: OleVariant);
begin
  DefaultInterface.SetCodePage(lNew, UserCodePage);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBulkCopyProperties.Create(AServer: TBulkCopy);
begin
  inherited Create;
  FServer := AServer;
end;

function TBulkCopyProperties.GetDefaultInterface: _BulkCopy;
begin
  Result := FServer.DefaultInterface;
end;

function TBulkCopyProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBulkCopyProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBulkCopyProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBulkCopyProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBulkCopyProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBulkCopyProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBulkCopyProperties.Get_DataFilePath: WideString;
begin
    Result := DefaultInterface.DataFilePath;
end;

procedure TBulkCopyProperties.Set_DataFilePath(const pRetVal: WideString);
  { Warning: The property DataFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFilePath := pRetVal;
end;

function TBulkCopyProperties.Get_FormatFilePath: WideString;
begin
    Result := DefaultInterface.FormatFilePath;
end;

procedure TBulkCopyProperties.Set_FormatFilePath(const pRetVal: WideString);
  { Warning: The property FormatFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormatFilePath := pRetVal;
end;

function TBulkCopyProperties.Get_ErrorFilePath: WideString;
begin
    Result := DefaultInterface.ErrorFilePath;
end;

procedure TBulkCopyProperties.Set_ErrorFilePath(const pRetVal: WideString);
  { Warning: The property ErrorFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ErrorFilePath := pRetVal;
end;

function TBulkCopyProperties.Get_LogFilePath: WideString;
begin
    Result := DefaultInterface.LogFilePath;
end;

procedure TBulkCopyProperties.Set_LogFilePath(const pRetVal: WideString);
  { Warning: The property LogFilePath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFilePath := pRetVal;
end;

function TBulkCopyProperties.Get_ColumnDelimiter: WideString;
begin
    Result := DefaultInterface.ColumnDelimiter;
end;

procedure TBulkCopyProperties.Set_ColumnDelimiter(const pRetVal: WideString);
  { Warning: The property ColumnDelimiter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ColumnDelimiter := pRetVal;
end;

function TBulkCopyProperties.Get_RowDelimiter: WideString;
begin
    Result := DefaultInterface.RowDelimiter;
end;

procedure TBulkCopyProperties.Set_RowDelimiter(const pRetVal: WideString);
  { Warning: The property RowDelimiter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RowDelimiter := pRetVal;
end;

function TBulkCopyProperties.Get_DataFileType: SQLDMO_DATAFILE_TYPE;
begin
    Result := DefaultInterface.DataFileType;
end;

procedure TBulkCopyProperties.Set_DataFileType(pRetVal: SQLDMO_DATAFILE_TYPE);
begin
  DefaultInterface.Set_DataFileType(pRetVal);
end;

function TBulkCopyProperties.Get_FirstRow: Integer;
begin
    Result := DefaultInterface.FirstRow;
end;

procedure TBulkCopyProperties.Set_FirstRow(pRetVal: Integer);
begin
  DefaultInterface.Set_FirstRow(pRetVal);
end;

function TBulkCopyProperties.Get_LastRow: Integer;
begin
    Result := DefaultInterface.LastRow;
end;

procedure TBulkCopyProperties.Set_LastRow(pRetVal: Integer);
begin
  DefaultInterface.Set_LastRow(pRetVal);
end;

function TBulkCopyProperties.Get_MaximumErrorsBeforeAbort: Integer;
begin
    Result := DefaultInterface.MaximumErrorsBeforeAbort;
end;

procedure TBulkCopyProperties.Set_MaximumErrorsBeforeAbort(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumErrorsBeforeAbort(pRetVal);
end;

function TBulkCopyProperties.Get_IncludeIdentityValues: WordBool;
begin
    Result := DefaultInterface.IncludeIdentityValues;
end;

procedure TBulkCopyProperties.Set_IncludeIdentityValues(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeIdentityValues(pRetVal);
end;

function TBulkCopyProperties.Get_ImportRowsPerBatch: Integer;
begin
    Result := DefaultInterface.ImportRowsPerBatch;
end;

procedure TBulkCopyProperties.Set_ImportRowsPerBatch(pRetVal: Integer);
begin
  DefaultInterface.Set_ImportRowsPerBatch(pRetVal);
end;

function TBulkCopyProperties.Get_UseBulkCopyOption: WordBool;
begin
    Result := DefaultInterface.UseBulkCopyOption;
end;

procedure TBulkCopyProperties.Set_UseBulkCopyOption(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseBulkCopyOption(pRetVal);
end;

function TBulkCopyProperties.Get_SuspendIndexing: WordBool;
begin
    Result := DefaultInterface.SuspendIndexing;
end;

procedure TBulkCopyProperties.Set_SuspendIndexing(pRetVal: WordBool);
begin
  DefaultInterface.Set_SuspendIndexing(pRetVal);
end;

function TBulkCopyProperties.Get_TruncateLog: WordBool;
begin
    Result := DefaultInterface.TruncateLog;
end;

procedure TBulkCopyProperties.Set_TruncateLog(pRetVal: WordBool);
begin
  DefaultInterface.Set_TruncateLog(pRetVal);
end;

function TBulkCopyProperties.Get_UseExistingConnection: WordBool;
begin
    Result := DefaultInterface.UseExistingConnection;
end;

procedure TBulkCopyProperties.Set_UseExistingConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseExistingConnection(pRetVal);
end;

function TBulkCopyProperties.Get_Use6xCompatible: WordBool;
begin
    Result := DefaultInterface.Use6xCompatible;
end;

procedure TBulkCopyProperties.Set_Use6xCompatible(pRetVal: WordBool);
begin
  DefaultInterface.Set_Use6xCompatible(pRetVal);
end;

function TBulkCopyProperties.Get_CodePage: Integer;
begin
    Result := DefaultInterface.CodePage;
end;

function TBulkCopyProperties.Get_UseServerSideBCP: WordBool;
begin
    Result := DefaultInterface.UseServerSideBCP;
end;

procedure TBulkCopyProperties.Set_UseServerSideBCP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseServerSideBCP(pRetVal);
end;

function TBulkCopyProperties.Get_ServerBCPDataFileType: SQLDMO_SERVERBCP_DATAFILE_TYPE;
begin
    Result := DefaultInterface.ServerBCPDataFileType;
end;

procedure TBulkCopyProperties.Set_ServerBCPDataFileType(pRetVal: SQLDMO_SERVERBCP_DATAFILE_TYPE);
begin
  DefaultInterface.Set_ServerBCPDataFileType(pRetVal);
end;

function TBulkCopyProperties.Get_ServerBCPKeepIdentity: WordBool;
begin
    Result := DefaultInterface.ServerBCPKeepIdentity;
end;

procedure TBulkCopyProperties.Set_ServerBCPKeepIdentity(pRetVal: WordBool);
begin
  DefaultInterface.Set_ServerBCPKeepIdentity(pRetVal);
end;

function TBulkCopyProperties.Get_ServerBCPKeepNulls: WordBool;
begin
    Result := DefaultInterface.ServerBCPKeepNulls;
end;

procedure TBulkCopyProperties.Set_ServerBCPKeepNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_ServerBCPKeepNulls(pRetVal);
end;

function TBulkCopyProperties.Get_ExportWideChar: WordBool;
begin
    Result := DefaultInterface.ExportWideChar;
end;

procedure TBulkCopyProperties.Set_ExportWideChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExportWideChar(pRetVal);
end;

{$ENDIF}

class function CoView.Create: _View;
begin
  Result := CreateComObject(CLASS_View) as _View;
end;

class function CoView.CreateRemote(const MachineName: string): _View;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_View) as _View;
end;

procedure TView.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020700-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020706-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TView.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _View;
  end;
end;

procedure TView.ConnectTo(svrIntf: _View);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TView.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TView.GetDefaultInterface: _View;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TView.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TViewProperties.Create(Self);
{$ENDIF}
end;

destructor TView.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TView.GetServerProperties: TViewProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TView.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TView.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TView.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TView.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TView.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TView.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TView.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TView.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TView.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TView.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TView.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TView.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TView.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TView.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TView.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TView.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TView.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TView.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                      ColumnNames: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, EmptyParam, EmptyParam);
end;

procedure TView.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                      ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, EmptyParam);
end;

procedure TView.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                      ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, AsRole);
end;

procedure TView.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                       ColumnNames: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TView.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant; 
                       RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          EmptyParam);
end;

procedure TView.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant; 
                       RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          AsRole);
end;

procedure TView.Remove;
begin
  DefaultInterface.Remove;
end;

function TView.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                      Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TView.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

function TView.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TView.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TView.ListColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListColumns;
end;

function TView.ExportData(const Bcp: BulkCopy): Integer;
begin
  Result := DefaultInterface.ExportData(Bcp);
end;

procedure TView.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam, EmptyParam);
end;

procedure TView.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                     ColumnNames: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, EmptyParam);
end;

procedure TView.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                     ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, GrantGrant);
end;

procedure TView.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TViewProperties.Create(AServer: TView);
begin
  inherited Create;
  FServer := AServer;
end;

function TViewProperties.GetDefaultInterface: _View;
begin
  Result := FServer.DefaultInterface;
end;

function TViewProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TViewProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TViewProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TViewProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TViewProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TViewProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TViewProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TViewProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TViewProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TViewProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TViewProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TViewProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TViewProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TViewProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TViewProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TViewProperties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TViewProperties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

{$ENDIF}

class function CoTrigger.Create: _Trigger;
begin
  Result := CreateComObject(CLASS_Trigger) as _Trigger;
end;

class function CoTrigger.CreateRemote(const MachineName: string): _Trigger;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Trigger) as _Trigger;
end;

procedure TTrigger.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021000-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021006-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTrigger.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Trigger;
  end;
end;

procedure TTrigger.ConnectTo(svrIntf: _Trigger);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTrigger.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTrigger.GetDefaultInterface: _Trigger;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTrigger.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTriggerProperties.Create(Self);
{$ENDIF}
end;

destructor TTrigger.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTrigger.GetServerProperties: TTriggerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTrigger.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTrigger.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTrigger.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTrigger.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTrigger.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTrigger.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTrigger.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTrigger.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTrigger.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTrigger.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTrigger.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTrigger.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTrigger.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTrigger.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TTrigger.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TTrigger.Get_type_: SQLDMO_TRIGGER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TTrigger.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTrigger.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTrigger.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTrigger.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TTrigger.Remove;
begin
  DefaultInterface.Remove;
end;

function TTrigger.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                         Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TTrigger.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TTrigger.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTriggerProperties.Create(AServer: TTrigger);
begin
  inherited Create;
  FServer := AServer;
end;

function TTriggerProperties.GetDefaultInterface: _Trigger;
begin
  Result := FServer.DefaultInterface;
end;

function TTriggerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTriggerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTriggerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTriggerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTriggerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTriggerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTriggerProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTriggerProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTriggerProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTriggerProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTriggerProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTriggerProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTriggerProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTriggerProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TTriggerProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TTriggerProperties.Get_type_: SQLDMO_TRIGGER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TTriggerProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTriggerProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTriggerProperties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTriggerProperties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

{$ENDIF}

class function CoCheck.Create: _Check;
begin
  Result := CreateComObject(CLASS_Check) as _Check;
end;

class function CoCheck.CreateRemote(const MachineName: string): _Check;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Check) as _Check;
end;

procedure TCheck.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021700-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021706-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCheck.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Check;
  end;
end;

procedure TCheck.ConnectTo(svrIntf: _Check);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCheck.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCheck.GetDefaultInterface: _Check;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCheck.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCheckProperties.Create(Self);
{$ENDIF}
end;

destructor TCheck.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCheck.GetServerProperties: TCheckProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCheck.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TCheck.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TCheck.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TCheck.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TCheck.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TCheck.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TCheck.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCheck.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TCheck.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TCheck.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TCheck.Get_ExcludeReplication: WordBool;
begin
    Result := DefaultInterface.ExcludeReplication;
end;

procedure TCheck.Set_ExcludeReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExcludeReplication(pRetVal);
end;

function TCheck.Get_Checked: WordBool;
begin
    Result := DefaultInterface.Checked;
end;

procedure TCheck.Set_Checked(pRetVal: WordBool);
begin
  DefaultInterface.Set_Checked(pRetVal);
end;

procedure TCheck.Remove;
begin
  DefaultInterface.Remove;
end;

function TCheck.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCheckProperties.Create(AServer: TCheck);
begin
  inherited Create;
  FServer := AServer;
end;

function TCheckProperties.GetDefaultInterface: _Check;
begin
  Result := FServer.DefaultInterface;
end;

function TCheckProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TCheckProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TCheckProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TCheckProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TCheckProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TCheckProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TCheckProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCheckProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TCheckProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TCheckProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TCheckProperties.Get_ExcludeReplication: WordBool;
begin
    Result := DefaultInterface.ExcludeReplication;
end;

procedure TCheckProperties.Set_ExcludeReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_ExcludeReplication(pRetVal);
end;

function TCheckProperties.Get_Checked: WordBool;
begin
    Result := DefaultInterface.Checked;
end;

procedure TCheckProperties.Set_Checked(pRetVal: WordBool);
begin
  DefaultInterface.Set_Checked(pRetVal);
end;

{$ENDIF}

class function CoTable.Create: _Table;
begin
  Result := CreateComObject(CLASS_Table) as _Table;
end;

class function CoTable.CreateRemote(const MachineName: string): _Table;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Table) as _Table;
end;

procedure TTable.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020400-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020406-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTable.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Table;
  end;
end;

procedure TTable.ConnectTo(svrIntf: _Table);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTable.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTable.GetDefaultInterface: _Table;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTable.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTableProperties.Create(Self);
{$ENDIF}
end;

destructor TTable.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTable.GetServerProperties: TTableProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTable.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTable.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTable.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTable.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTable.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTable.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTable.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTable.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTable.Get_Columns: Columns;
begin
    Result := DefaultInterface.Columns;
end;

function TTable.Get_DataSpaceUsed: Integer;
begin
    Result := DefaultInterface.DataSpaceUsed;
end;

function TTable.Get_IndexSpaceUsed: Integer;
begin
    Result := DefaultInterface.IndexSpaceUsed;
end;

function TTable.Get_Attributes: SQLDMO_TABLEATT_TYPE;
begin
    Result := DefaultInterface.Attributes;
end;

function TTable.Get_Keys: Keys;
begin
    Result := DefaultInterface.Keys;
end;

function TTable.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTable.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTable.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTable.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTable.Get_PrimaryKey: Key;
begin
    Result := DefaultInterface.PrimaryKey;
end;

function TTable.Get_Indexes: Indexes;
begin
    Result := DefaultInterface.Indexes;
end;

function TTable.Get_Triggers: Triggers;
begin
    Result := DefaultInterface.Triggers;
end;

function TTable.Get_Checks: Checks;
begin
    Result := DefaultInterface.Checks;
end;

function TTable.Get_ClusteredIndex: Index;
begin
    Result := DefaultInterface.ClusteredIndex;
end;

function TTable.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTable.Get_Rows: Integer;
begin
    Result := DefaultInterface.Rows;
end;

function TTable.Get_InAlter: WordBool;
begin
    Result := DefaultInterface.InAlter;
end;

function TTable.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TTable.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TTable.Get_TextFileGroup: WideString;
begin
    Result := DefaultInterface.TextFileGroup;
end;

procedure TTable.Set_TextFileGroup(const pRetVal: WideString);
  { Warning: The property TextFileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextFileGroup := pRetVal;
end;

function TTable.Get_FullTextIndex: WordBool;
begin
    Result := DefaultInterface.FullTextIndex;
end;

procedure TTable.Set_FullTextIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndex(pRetVal);
end;

function TTable.Get_UniqueIndexForFullText: WideString;
begin
    Result := DefaultInterface.UniqueIndexForFullText;
end;

procedure TTable.Set_UniqueIndexForFullText(const pRetVal: WideString);
  { Warning: The property UniqueIndexForFullText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniqueIndexForFullText := pRetVal;
end;

function TTable.Get_FullTextCatalogName: WideString;
begin
    Result := DefaultInterface.FullTextCatalogName;
end;

procedure TTable.Set_FullTextCatalogName(const pRetVal: WideString);
  { Warning: The property FullTextCatalogName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FullTextCatalogName := pRetVal;
end;

function TTable.Get_FullTextIndexActive: WordBool;
begin
    Result := DefaultInterface.FullTextIndexActive;
end;

procedure TTable.Set_FullTextIndexActive(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndexActive(pRetVal);
end;

function TTable.Get_FullTextKeyColumn: Integer;
begin
    Result := DefaultInterface.FullTextKeyColumn;
end;

function TTable.Get_HasClusteredIndex: WordBool;
begin
    Result := DefaultInterface.HasClusteredIndex;
end;

function TTable.Get_HasIndex: WordBool;
begin
    Result := DefaultInterface.HasIndex;
end;

function TTable.Get_FakeSystemTable: WordBool;
begin
    Result := DefaultInterface.FakeSystemTable;
end;

procedure TTable.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTable.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTable.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TTable.ReCompileReferences;
begin
  DefaultInterface.ReCompileReferences;
end;

procedure TTable.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TTable.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, EmptyParam, EmptyParam);
end;

procedure TTable.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, EmptyParam);
end;

procedure TTable.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, AsRole);
end;

procedure TTable.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TTable.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TTable.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TTable.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant; 
                        RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          EmptyParam);
end;

procedure TTable.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant; 
                        RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          AsRole);
end;

function TTable.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TTable.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TTable.CheckTable: WideString;
begin
  Result := DefaultInterface.CheckTable;
end;

procedure TTable.TruncateData;
begin
  DefaultInterface.TruncateData;
end;

procedure TTable.UpdateStatistics;
begin
  DefaultInterface.UpdateStatistics;
end;

procedure TTable.Remove;
begin
  DefaultInterface.Remove;
end;

function TTable.EnumReferencedKeys: QueryResults;
begin
  Result := DefaultInterface.EnumReferencedKeys(EmptyParam, EmptyParam);
end;

function TTable.EnumReferencedKeys(ReferencedTableName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencedKeys(ReferencedTableName, EmptyParam);
end;

function TTable.EnumReferencedKeys(ReferencedTableName: OleVariant; IncludeAllCandidates: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencedKeys(ReferencedTableName, IncludeAllCandidates);
end;

function TTable.EnumReferencedTables: QueryResults;
begin
  Result := DefaultInterface.EnumReferencedTables(EmptyParam);
end;

function TTable.EnumReferencedTables(IncludeAllCandidates: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencedTables(IncludeAllCandidates);
end;

function TTable.EnumReferencingKeys: QueryResults;
begin
  Result := DefaultInterface.EnumReferencingKeys(EmptyParam, EmptyParam);
end;

function TTable.EnumReferencingKeys(ReferencingTableName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencingKeys(ReferencingTableName, EmptyParam);
end;

function TTable.EnumReferencingKeys(ReferencingTableName: OleVariant; 
                                    IncludeAllCandidates: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencingKeys(ReferencingTableName, IncludeAllCandidates);
end;

function TTable.EnumReferencingTables: QueryResults;
begin
  Result := DefaultInterface.EnumReferencingTables(EmptyParam);
end;

function TTable.EnumReferencingTables(IncludeAllCandidates: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumReferencingTables(IncludeAllCandidates);
end;

function TTable.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TTable.InsertColumn(const NewColumn: Column; const BeforeColumnName: WideString);
begin
  DefaultInterface.InsertColumn(NewColumn, BeforeColumnName);
end;

procedure TTable.RecalcSpaceUsage;
begin
  DefaultInterface.RecalcSpaceUsage;
end;

function TTable.EnumLastStatisticsUpdates: QueryResults;
begin
  Result := DefaultInterface.EnumLastStatisticsUpdates(EmptyParam);
end;

function TTable.EnumLastStatisticsUpdates(IndexName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumLastStatisticsUpdates(IndexName);
end;

function TTable.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       NewName: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, NewName, Script2Type);
end;

procedure TTable.DoAlterWithNoCheck;
begin
  DefaultInterface.DoAlterWithNoCheck;
end;

procedure TTable.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TTable.ImportData(const Bcp: BulkCopy): Integer;
begin
  Result := DefaultInterface.ImportData(Bcp);
end;

function TTable.ExportData(const Bcp: BulkCopy): Integer;
begin
  Result := DefaultInterface.ExportData(Bcp);
end;

procedure TTable.RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE);
begin
  DefaultInterface.RebuildIndexes(SortedDataType, EmptyParam);
end;

procedure TTable.RebuildIndexes(SortedDataType: SQLDMO_INDEX_TYPE; FillFactor: OleVariant);
begin
  DefaultInterface.RebuildIndexes(SortedDataType, FillFactor);
end;

procedure TTable.CheckIdentityValue;
begin
  DefaultInterface.CheckIdentityValue;
end;

function TTable.CheckTableDataOnly: WideString;
begin
  Result := DefaultInterface.CheckTableDataOnly;
end;

procedure TTable.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam, EmptyParam);
end;

procedure TTable.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                      ColumnNames: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, EmptyParam);
end;

procedure TTable.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                      ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, GrantGrant);
end;

function TTable.GenerateSQL(const pDB: Database): WideString;
begin
  Result := DefaultInterface.GenerateSQL(pDB);
end;

function TTable.CheckTextAllocsFast: WideString;
begin
  Result := DefaultInterface.CheckTextAllocsFast;
end;

function TTable.CheckTextAllocsFull: WideString;
begin
  Result := DefaultInterface.CheckTextAllocsFull;
end;

procedure TTable.UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                      ScanType: SQLDMO_STAT_SCAN_TYPE);
begin
  DefaultInterface.UpdateStatisticsWith(AffectType, ScanType, EmptyParam, EmptyParam);
end;

procedure TTable.UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                      ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(AffectType, ScanType, ScanNumber, EmptyParam);
end;

procedure TTable.UpdateStatisticsWith(AffectType: SQLDMO_STAT_AFFECT_TYPE; 
                                      ScanType: SQLDMO_STAT_SCAN_TYPE; ScanNumber: OleVariant; 
                                      ReCompute: OleVariant);
begin
  DefaultInterface.UpdateStatisticsWith(AffectType, ScanType, ScanNumber, ReCompute);
end;

function TTable.ListAvailableUniqueIndexesForFullText: NameList;
begin
  Result := DefaultInterface.ListAvailableUniqueIndexesForFullText;
end;

function TTable.FullTextIndexScript: WideString;
begin
  Result := DefaultInterface.FullTextIndexScript;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTableProperties.Create(AServer: TTable);
begin
  inherited Create;
  FServer := AServer;
end;

function TTableProperties.GetDefaultInterface: _Table;
begin
  Result := FServer.DefaultInterface;
end;

function TTableProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTableProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTableProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTableProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTableProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTableProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTableProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTableProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTableProperties.Get_Columns: Columns;
begin
    Result := DefaultInterface.Columns;
end;

function TTableProperties.Get_DataSpaceUsed: Integer;
begin
    Result := DefaultInterface.DataSpaceUsed;
end;

function TTableProperties.Get_IndexSpaceUsed: Integer;
begin
    Result := DefaultInterface.IndexSpaceUsed;
end;

function TTableProperties.Get_Attributes: SQLDMO_TABLEATT_TYPE;
begin
    Result := DefaultInterface.Attributes;
end;

function TTableProperties.Get_Keys: Keys;
begin
    Result := DefaultInterface.Keys;
end;

function TTableProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTableProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTableProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTableProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTableProperties.Get_PrimaryKey: Key;
begin
    Result := DefaultInterface.PrimaryKey;
end;

function TTableProperties.Get_Indexes: Indexes;
begin
    Result := DefaultInterface.Indexes;
end;

function TTableProperties.Get_Triggers: Triggers;
begin
    Result := DefaultInterface.Triggers;
end;

function TTableProperties.Get_Checks: Checks;
begin
    Result := DefaultInterface.Checks;
end;

function TTableProperties.Get_ClusteredIndex: Index;
begin
    Result := DefaultInterface.ClusteredIndex;
end;

function TTableProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTableProperties.Get_Rows: Integer;
begin
    Result := DefaultInterface.Rows;
end;

function TTableProperties.Get_InAlter: WordBool;
begin
    Result := DefaultInterface.InAlter;
end;

function TTableProperties.Get_FileGroup: WideString;
begin
    Result := DefaultInterface.FileGroup;
end;

procedure TTableProperties.Set_FileGroup(const pRetVal: WideString);
  { Warning: The property FileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FileGroup := pRetVal;
end;

function TTableProperties.Get_TextFileGroup: WideString;
begin
    Result := DefaultInterface.TextFileGroup;
end;

procedure TTableProperties.Set_TextFileGroup(const pRetVal: WideString);
  { Warning: The property TextFileGroup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextFileGroup := pRetVal;
end;

function TTableProperties.Get_FullTextIndex: WordBool;
begin
    Result := DefaultInterface.FullTextIndex;
end;

procedure TTableProperties.Set_FullTextIndex(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndex(pRetVal);
end;

function TTableProperties.Get_UniqueIndexForFullText: WideString;
begin
    Result := DefaultInterface.UniqueIndexForFullText;
end;

procedure TTableProperties.Set_UniqueIndexForFullText(const pRetVal: WideString);
  { Warning: The property UniqueIndexForFullText has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniqueIndexForFullText := pRetVal;
end;

function TTableProperties.Get_FullTextCatalogName: WideString;
begin
    Result := DefaultInterface.FullTextCatalogName;
end;

procedure TTableProperties.Set_FullTextCatalogName(const pRetVal: WideString);
  { Warning: The property FullTextCatalogName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FullTextCatalogName := pRetVal;
end;

function TTableProperties.Get_FullTextIndexActive: WordBool;
begin
    Result := DefaultInterface.FullTextIndexActive;
end;

procedure TTableProperties.Set_FullTextIndexActive(pRetVal: WordBool);
begin
  DefaultInterface.Set_FullTextIndexActive(pRetVal);
end;

function TTableProperties.Get_FullTextKeyColumn: Integer;
begin
    Result := DefaultInterface.FullTextKeyColumn;
end;

function TTableProperties.Get_HasClusteredIndex: WordBool;
begin
    Result := DefaultInterface.HasClusteredIndex;
end;

function TTableProperties.Get_HasIndex: WordBool;
begin
    Result := DefaultInterface.HasIndex;
end;

function TTableProperties.Get_FakeSystemTable: WordBool;
begin
    Result := DefaultInterface.FakeSystemTable;
end;

{$ENDIF}

class function CoStoredProcedure.Create: _StoredProcedure;
begin
  Result := CreateComObject(CLASS_StoredProcedure) as _StoredProcedure;
end;

class function CoStoredProcedure.CreateRemote(const MachineName: string): _StoredProcedure;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredProcedure) as _StoredProcedure;
end;

procedure TStoredProcedure.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020D00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020D06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStoredProcedure.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _StoredProcedure;
  end;
end;

procedure TStoredProcedure.ConnectTo(svrIntf: _StoredProcedure);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStoredProcedure.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStoredProcedure.GetDefaultInterface: _StoredProcedure;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStoredProcedure.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStoredProcedureProperties.Create(Self);
{$ENDIF}
end;

destructor TStoredProcedure.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStoredProcedure.GetServerProperties: TStoredProcedureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStoredProcedure.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TStoredProcedure.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TStoredProcedure.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TStoredProcedure.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TStoredProcedure.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TStoredProcedure.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TStoredProcedure.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStoredProcedure.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TStoredProcedure.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TStoredProcedure.Get_type_: SQLDMO_PROCEDURE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TStoredProcedure.Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TStoredProcedure.Get_Startup: WordBool;
begin
    Result := DefaultInterface.Startup;
end;

procedure TStoredProcedure.Set_Startup(pRetVal: WordBool);
begin
  DefaultInterface.Set_Startup(pRetVal);
end;

function TStoredProcedure.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TStoredProcedure.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TStoredProcedure.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TStoredProcedure.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TStoredProcedure.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TStoredProcedure.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TStoredProcedure.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TStoredProcedure.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TStoredProcedure.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                                 GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, EmptyParam);
end;

procedure TStoredProcedure.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                                 GrantGrant: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, AsRole);
end;

procedure TStoredProcedure.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                  const RevokeeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                  const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                  RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, EmptyParam);
end;

procedure TStoredProcedure.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                  const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                  RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, AsRole);
end;

function TStoredProcedure.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TStoredProcedure.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TStoredProcedure.EnumParameters: QueryResults;
begin
  Result := DefaultInterface.EnumParameters;
end;

procedure TStoredProcedure.Remove;
begin
  DefaultInterface.Remove;
end;

function TStoredProcedure.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                                 Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TStoredProcedure.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TStoredProcedure.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam);
end;

procedure TStoredProcedure.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                                GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, GrantGrant);
end;

procedure TStoredProcedure.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStoredProcedureProperties.Create(AServer: TStoredProcedure);
begin
  inherited Create;
  FServer := AServer;
end;

function TStoredProcedureProperties.GetDefaultInterface: _StoredProcedure;
begin
  Result := FServer.DefaultInterface;
end;

function TStoredProcedureProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TStoredProcedureProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TStoredProcedureProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TStoredProcedureProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TStoredProcedureProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TStoredProcedureProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TStoredProcedureProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStoredProcedureProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TStoredProcedureProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TStoredProcedureProperties.Get_type_: SQLDMO_PROCEDURE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TStoredProcedureProperties.Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TStoredProcedureProperties.Get_Startup: WordBool;
begin
    Result := DefaultInterface.Startup;
end;

procedure TStoredProcedureProperties.Set_Startup(pRetVal: WordBool);
begin
  DefaultInterface.Set_Startup(pRetVal);
end;

function TStoredProcedureProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TStoredProcedureProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TStoredProcedureProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TStoredProcedureProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TStoredProcedureProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TStoredProcedureProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TStoredProcedureProperties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TStoredProcedureProperties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

{$ENDIF}

class function CoDefault.Create: _Default;
begin
  Result := CreateComObject(CLASS_Default) as _Default;
end;

class function CoDefault.CreateRemote(const MachineName: string): _Default;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Default) as _Default;
end;

procedure TDefault.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020900-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020906-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefault.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Default;
  end;
end;

procedure TDefault.ConnectTo(svrIntf: _Default);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefault.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefault.GetDefaultInterface: _Default;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefault.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefaultProperties.Create(Self);
{$ENDIF}
end;

destructor TDefault.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefault.GetServerProperties: TDefaultProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefault.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDefault.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDefault.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDefault.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDefault.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDefault.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDefault.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDefault.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDefault.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TDefault.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TDefault.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TDefault.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDefault.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TDefault.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

procedure TDefault.BindToColumn(const TableName: WideString; const ColumnName: WideString);
begin
  DefaultInterface.BindToColumn(TableName, ColumnName);
end;

procedure TDefault.BindToDatatype(const DatatypeName: WideString);
begin
  DefaultInterface.BindToDatatype(DatatypeName, EmptyParam);
end;

procedure TDefault.BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant);
begin
  DefaultInterface.BindToDatatype(DatatypeName, FutureOnly);
end;

procedure TDefault.UnbindFromColumn(const TableName: WideString; const ColumnName: WideString);
begin
  DefaultInterface.UnbindFromColumn(TableName, ColumnName);
end;

procedure TDefault.UnbindFromDatatype(const DatatypeName: WideString);
begin
  DefaultInterface.UnbindFromDatatype(DatatypeName, EmptyParam);
end;

procedure TDefault.UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant);
begin
  DefaultInterface.UnbindFromDatatype(DatatypeName, FutureOnly);
end;

function TDefault.ListBoundColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListBoundColumns;
end;

function TDefault.ListBoundDatatypes: SQLObjectList;
begin
  Result := DefaultInterface.ListBoundDatatypes;
end;

procedure TDefault.Remove;
begin
  DefaultInterface.Remove;
end;

function TDefault.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                         Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefaultProperties.Create(AServer: TDefault);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefaultProperties.GetDefaultInterface: _Default;
begin
  Result := FServer.DefaultInterface;
end;

function TDefaultProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDefaultProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDefaultProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDefaultProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDefaultProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDefaultProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDefaultProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDefaultProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDefaultProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TDefaultProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TDefaultProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TDefaultProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDefaultProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TDefaultProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

{$ENDIF}

class function CoRule.Create: _Rule;
begin
  Result := CreateComObject(CLASS_Rule) as _Rule;
end;

class function CoRule.CreateRemote(const MachineName: string): _Rule;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Rule) as _Rule;
end;

procedure TRule.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020A00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020A06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRule.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Rule;
  end;
end;

procedure TRule.ConnectTo(svrIntf: _Rule);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRule.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRule.GetDefaultInterface: _Rule;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRule.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuleProperties.Create(Self);
{$ENDIF}
end;

destructor TRule.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRule.GetServerProperties: TRuleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRule.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRule.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRule.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRule.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRule.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRule.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRule.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRule.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRule.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TRule.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TRule.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TRule.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TRule.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TRule.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

procedure TRule.BindToColumn(const TableName: WideString; const ColumnName: WideString);
begin
  DefaultInterface.BindToColumn(TableName, ColumnName);
end;

procedure TRule.BindToDatatype(const DatatypeName: WideString);
begin
  DefaultInterface.BindToDatatype(DatatypeName, EmptyParam);
end;

procedure TRule.BindToDatatype(const DatatypeName: WideString; FutureOnly: OleVariant);
begin
  DefaultInterface.BindToDatatype(DatatypeName, FutureOnly);
end;

procedure TRule.UnbindFromColumn(const TableName: WideString; const ColumnName: WideString);
begin
  DefaultInterface.UnbindFromColumn(TableName, ColumnName);
end;

procedure TRule.UnbindFromDatatype(const DatatypeName: WideString);
begin
  DefaultInterface.UnbindFromDatatype(DatatypeName, EmptyParam);
end;

procedure TRule.UnbindFromDatatype(const DatatypeName: WideString; FutureOnly: OleVariant);
begin
  DefaultInterface.UnbindFromDatatype(DatatypeName, FutureOnly);
end;

function TRule.ListBoundColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListBoundColumns;
end;

function TRule.ListBoundDatatypes: SQLObjectList;
begin
  Result := DefaultInterface.ListBoundDatatypes;
end;

procedure TRule.Remove;
begin
  DefaultInterface.Remove;
end;

function TRule.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                      Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuleProperties.Create(AServer: TRule);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuleProperties.GetDefaultInterface: _Rule;
begin
  Result := FServer.DefaultInterface;
end;

function TRuleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRuleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRuleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRuleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRuleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRuleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRuleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRuleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRuleProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TRuleProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TRuleProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TRuleProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TRuleProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TRuleProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

{$ENDIF}

class function CoUserDefinedDatatype.Create: _UserDefinedDatatype;
begin
  Result := CreateComObject(CLASS_UserDefinedDatatype) as _UserDefinedDatatype;
end;

class function CoUserDefinedDatatype.CreateRemote(const MachineName: string): _UserDefinedDatatype;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserDefinedDatatype) as _UserDefinedDatatype;
end;

procedure TUserDefinedDatatype.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020800-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020806-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUserDefinedDatatype.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UserDefinedDatatype;
  end;
end;

procedure TUserDefinedDatatype.ConnectTo(svrIntf: _UserDefinedDatatype);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUserDefinedDatatype.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUserDefinedDatatype.GetDefaultInterface: _UserDefinedDatatype;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUserDefinedDatatype.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUserDefinedDatatypeProperties.Create(Self);
{$ENDIF}
end;

destructor TUserDefinedDatatype.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUserDefinedDatatype.GetServerProperties: TUserDefinedDatatypeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUserDefinedDatatype.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUserDefinedDatatype.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUserDefinedDatatype.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUserDefinedDatatype.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUserDefinedDatatype.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUserDefinedDatatype.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUserDefinedDatatype.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUserDefinedDatatype.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUserDefinedDatatype.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TUserDefinedDatatype.Get_AllowNulls: WordBool;
begin
    Result := DefaultInterface.AllowNulls;
end;

procedure TUserDefinedDatatype.Set_AllowNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowNulls(pRetVal);
end;

function TUserDefinedDatatype.Get_BaseType: WideString;
begin
    Result := DefaultInterface.BaseType;
end;

procedure TUserDefinedDatatype.Set_BaseType(const pRetVal: WideString);
  { Warning: The property BaseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BaseType := pRetVal;
end;

function TUserDefinedDatatype.Get_Length: Integer;
begin
    Result := DefaultInterface.Length;
end;

procedure TUserDefinedDatatype.Set_Length(pRetVal: Integer);
begin
  DefaultInterface.Set_Length(pRetVal);
end;

function TUserDefinedDatatype.Get_Default: WideString;
begin
    Result := DefaultInterface.Default;
end;

procedure TUserDefinedDatatype.Set_Default(const pRetVal: WideString);
  { Warning: The property Default has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Default := pRetVal;
end;

function TUserDefinedDatatype.Get_Rule: WideString;
begin
    Result := DefaultInterface.Rule;
end;

procedure TUserDefinedDatatype.Set_Rule(const pRetVal: WideString);
  { Warning: The property Rule has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rule := pRetVal;
end;

function TUserDefinedDatatype.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUserDefinedDatatype.Get_NumericPrecision: Integer;
begin
    Result := DefaultInterface.NumericPrecision;
end;

procedure TUserDefinedDatatype.Set_NumericPrecision(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericPrecision(pRetVal);
end;

function TUserDefinedDatatype.Get_NumericScale: Integer;
begin
    Result := DefaultInterface.NumericScale;
end;

procedure TUserDefinedDatatype.Set_NumericScale(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericScale(pRetVal);
end;

function TUserDefinedDatatype.Get_AllowIdentity: WordBool;
begin
    Result := DefaultInterface.AllowIdentity;
end;

function TUserDefinedDatatype.Get_IsVariableLength: WordBool;
begin
    Result := DefaultInterface.IsVariableLength;
end;

function TUserDefinedDatatype.Get_MaxSize: Integer;
begin
    Result := DefaultInterface.MaxSize;
end;

function TUserDefinedDatatype.Get_DefaultOwner: WideString;
begin
    Result := DefaultInterface.DefaultOwner;
end;

function TUserDefinedDatatype.Get_RuleOwner: WideString;
begin
    Result := DefaultInterface.RuleOwner;
end;

function TUserDefinedDatatype.ListBoundColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListBoundColumns;
end;

procedure TUserDefinedDatatype.Remove;
begin
  DefaultInterface.Remove;
end;

function TUserDefinedDatatype.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                                     Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TUserDefinedDatatype.GenerateSQL(const pDB: Database): WideString;
begin
  Result := DefaultInterface.GenerateSQL(pDB);
end;

procedure TUserDefinedDatatype.BindDefault(const DefaultOwner: WideString; 
                                           const DefaultName: WideString; Bind: WordBool);
begin
  DefaultInterface.BindDefault(DefaultOwner, DefaultName, Bind);
end;

procedure TUserDefinedDatatype.BindRule(const RuleOwner: WideString; const RuleName: WideString; 
                                        Bind: WordBool);
begin
  DefaultInterface.BindRule(RuleOwner, RuleName, Bind);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUserDefinedDatatypeProperties.Create(AServer: TUserDefinedDatatype);
begin
  inherited Create;
  FServer := AServer;
end;

function TUserDefinedDatatypeProperties.GetDefaultInterface: _UserDefinedDatatype;
begin
  Result := FServer.DefaultInterface;
end;

function TUserDefinedDatatypeProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUserDefinedDatatypeProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUserDefinedDatatypeProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUserDefinedDatatypeProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUserDefinedDatatypeProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUserDefinedDatatypeProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUserDefinedDatatypeProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUserDefinedDatatypeProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUserDefinedDatatypeProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TUserDefinedDatatypeProperties.Get_AllowNulls: WordBool;
begin
    Result := DefaultInterface.AllowNulls;
end;

procedure TUserDefinedDatatypeProperties.Set_AllowNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowNulls(pRetVal);
end;

function TUserDefinedDatatypeProperties.Get_BaseType: WideString;
begin
    Result := DefaultInterface.BaseType;
end;

procedure TUserDefinedDatatypeProperties.Set_BaseType(const pRetVal: WideString);
  { Warning: The property BaseType has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BaseType := pRetVal;
end;

function TUserDefinedDatatypeProperties.Get_Length: Integer;
begin
    Result := DefaultInterface.Length;
end;

procedure TUserDefinedDatatypeProperties.Set_Length(pRetVal: Integer);
begin
  DefaultInterface.Set_Length(pRetVal);
end;

function TUserDefinedDatatypeProperties.Get_Default: WideString;
begin
    Result := DefaultInterface.Default;
end;

procedure TUserDefinedDatatypeProperties.Set_Default(const pRetVal: WideString);
  { Warning: The property Default has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Default := pRetVal;
end;

function TUserDefinedDatatypeProperties.Get_Rule: WideString;
begin
    Result := DefaultInterface.Rule;
end;

procedure TUserDefinedDatatypeProperties.Set_Rule(const pRetVal: WideString);
  { Warning: The property Rule has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rule := pRetVal;
end;

function TUserDefinedDatatypeProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUserDefinedDatatypeProperties.Get_NumericPrecision: Integer;
begin
    Result := DefaultInterface.NumericPrecision;
end;

procedure TUserDefinedDatatypeProperties.Set_NumericPrecision(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericPrecision(pRetVal);
end;

function TUserDefinedDatatypeProperties.Get_NumericScale: Integer;
begin
    Result := DefaultInterface.NumericScale;
end;

procedure TUserDefinedDatatypeProperties.Set_NumericScale(pRetVal: Integer);
begin
  DefaultInterface.Set_NumericScale(pRetVal);
end;

function TUserDefinedDatatypeProperties.Get_AllowIdentity: WordBool;
begin
    Result := DefaultInterface.AllowIdentity;
end;

function TUserDefinedDatatypeProperties.Get_IsVariableLength: WordBool;
begin
    Result := DefaultInterface.IsVariableLength;
end;

function TUserDefinedDatatypeProperties.Get_MaxSize: Integer;
begin
    Result := DefaultInterface.MaxSize;
end;

function TUserDefinedDatatypeProperties.Get_DefaultOwner: WideString;
begin
    Result := DefaultInterface.DefaultOwner;
end;

function TUserDefinedDatatypeProperties.Get_RuleOwner: WideString;
begin
    Result := DefaultInterface.RuleOwner;
end;

{$ENDIF}

class function CoUser.Create: _User;
begin
  Result := CreateComObject(CLASS_User) as _User;
end;

class function CoUser.CreateRemote(const MachineName: string): _User;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_User) as _User;
end;

procedure TUser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020B00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020B06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _User;
  end;
end;

procedure TUser.ConnectTo(svrIntf: _User);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUser.GetDefaultInterface: _User;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUserProperties.Create(Self);
{$ENDIF}
end;

destructor TUser.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUser.GetServerProperties: TUserProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUser.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUser.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUser.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUser.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUser.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUser.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUser.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUser.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUser.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TUser.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TUser.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TUser.Get_Group: WideString;
begin
    Result := DefaultInterface.Group;
end;

procedure TUser.Set_Group(const pRetVal: WideString);
  { Warning: The property Group has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Group := pRetVal;
end;

function TUser.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUser.Get_Role: WideString;
begin
    Result := DefaultInterface.Role;
end;

procedure TUser.Set_Role(const pRetVal: WideString);
  { Warning: The property Role has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Role := pRetVal;
end;

function TUser.Get_HasDBAccess: WordBool;
begin
    Result := DefaultInterface.HasDBAccess;
end;

procedure TUser.AddAlias(const LoginNames: WideString);
begin
  DefaultInterface.AddAlias(LoginNames);
end;

procedure TUser.RemoveAlias(const LoginNames: WideString);
begin
  DefaultInterface.RemoveAlias(LoginNames);
end;

function TUser.ListAliases: SQLObjectList;
begin
  Result := DefaultInterface.ListAliases;
end;

function TUser.ListOwnedObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListOwnedObjects(ObjectTypes, SortBy);
end;

function TUser.ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListDatabasePermissions(PrivilegeTypes);
end;

function TUser.ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListObjectPermissions(PrivilegeTypes);
end;

procedure TUser.Remove;
begin
  DefaultInterface.Remove;
end;

function TUser.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                      Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TUser.ListMembers: NameList;
begin
  Result := DefaultInterface.ListMembers;
end;

function TUser.IsMember(const DatabaseRole: WideString): WordBool;
begin
  Result := DefaultInterface.IsMember(DatabaseRole);
end;

procedure TUser.GrantNTUserDBAccess;
begin
  DefaultInterface.GrantNTUserDBAccess;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUserProperties.Create(AServer: TUser);
begin
  inherited Create;
  FServer := AServer;
end;

function TUserProperties.GetDefaultInterface: _User;
begin
  Result := FServer.DefaultInterface;
end;

function TUserProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUserProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUserProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUserProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUserProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUserProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUserProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUserProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUserProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TUserProperties.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TUserProperties.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TUserProperties.Get_Group: WideString;
begin
    Result := DefaultInterface.Group;
end;

procedure TUserProperties.Set_Group(const pRetVal: WideString);
  { Warning: The property Group has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Group := pRetVal;
end;

function TUserProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUserProperties.Get_Role: WideString;
begin
    Result := DefaultInterface.Role;
end;

procedure TUserProperties.Set_Role(const pRetVal: WideString);
  { Warning: The property Role has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Role := pRetVal;
end;

function TUserProperties.Get_HasDBAccess: WordBool;
begin
    Result := DefaultInterface.HasDBAccess;
end;

{$ENDIF}

class function CoGroup.Create: _Group;
begin
  Result := CreateComObject(CLASS_Group) as _Group;
end;

class function CoGroup.CreateRemote(const MachineName: string): _Group;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Group) as _Group;
end;

class function CoLogFile.Create: _LogFile;
begin
  Result := CreateComObject(CLASS_LogFile) as _LogFile;
end;

class function CoLogFile.CreateRemote(const MachineName: string): _LogFile;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogFile) as _LogFile;
end;

procedure TLogFile.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022E00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022E06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLogFile.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LogFile;
  end;
end;

procedure TLogFile.ConnectTo(svrIntf: _LogFile);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLogFile.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLogFile.GetDefaultInterface: _LogFile;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLogFile.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLogFileProperties.Create(Self);
{$ENDIF}
end;

destructor TLogFile.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLogFile.GetServerProperties: TLogFileProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLogFile.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLogFile.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLogFile.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLogFile.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLogFile.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLogFile.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLogFile.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLogFile.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLogFile.Get_PhysicalName: WideString;
begin
    Result := DefaultInterface.PhysicalName;
end;

procedure TLogFile.Set_PhysicalName(const pRetVal: WideString);
  { Warning: The property PhysicalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalName := pRetVal;
end;

function TLogFile.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

procedure TLogFile.Set_Size(pRetVal: Integer);
begin
  DefaultInterface.Set_Size(pRetVal);
end;

function TLogFile.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TLogFile.Get_FileGrowth: Integer;
begin
    Result := DefaultInterface.FileGrowth;
end;

procedure TLogFile.Set_FileGrowth(pRetVal: Integer);
begin
  DefaultInterface.Set_FileGrowth(pRetVal);
end;

function TLogFile.Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
begin
    Result := DefaultInterface.FileGrowthType;
end;

procedure TLogFile.Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
begin
  DefaultInterface.Set_FileGrowthType(pRetVal);
end;

function TLogFile.Get_FileGrowthInKB: Single;
begin
    Result := DefaultInterface.FileGrowthInKB;
end;

function TLogFile.Get_MaximumSize: Integer;
begin
    Result := DefaultInterface.MaximumSize;
end;

procedure TLogFile.Set_MaximumSize(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumSize(pRetVal);
end;

function TLogFile.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

procedure TLogFile.Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE);
begin
  DefaultInterface.Shrink(NewSizeInMB, Truncate);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLogFileProperties.Create(AServer: TLogFile);
begin
  inherited Create;
  FServer := AServer;
end;

function TLogFileProperties.GetDefaultInterface: _LogFile;
begin
  Result := FServer.DefaultInterface;
end;

function TLogFileProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLogFileProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLogFileProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLogFileProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLogFileProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLogFileProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLogFileProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLogFileProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLogFileProperties.Get_PhysicalName: WideString;
begin
    Result := DefaultInterface.PhysicalName;
end;

procedure TLogFileProperties.Set_PhysicalName(const pRetVal: WideString);
  { Warning: The property PhysicalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalName := pRetVal;
end;

function TLogFileProperties.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

procedure TLogFileProperties.Set_Size(pRetVal: Integer);
begin
  DefaultInterface.Set_Size(pRetVal);
end;

function TLogFileProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TLogFileProperties.Get_FileGrowth: Integer;
begin
    Result := DefaultInterface.FileGrowth;
end;

procedure TLogFileProperties.Set_FileGrowth(pRetVal: Integer);
begin
  DefaultInterface.Set_FileGrowth(pRetVal);
end;

function TLogFileProperties.Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
begin
    Result := DefaultInterface.FileGrowthType;
end;

procedure TLogFileProperties.Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
begin
  DefaultInterface.Set_FileGrowthType(pRetVal);
end;

function TLogFileProperties.Get_FileGrowthInKB: Single;
begin
    Result := DefaultInterface.FileGrowthInKB;
end;

function TLogFileProperties.Get_MaximumSize: Integer;
begin
    Result := DefaultInterface.MaximumSize;
end;

procedure TLogFileProperties.Set_MaximumSize(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumSize(pRetVal);
end;

function TLogFileProperties.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

{$ENDIF}

class function CoTransfer.Create: _Transfer;
begin
  Result := CreateComObject(CLASS_Transfer) as _Transfer;
end;

class function CoTransfer.CreateRemote(const MachineName: string): _Transfer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Transfer) as _Transfer;
end;

procedure TTransfer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021E00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021E06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021E09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransfer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Transfer;
  end;
end;

procedure TTransfer.ConnectTo(svrIntf: _Transfer);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTransfer.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTransfer.GetDefaultInterface: _Transfer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransfer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransferProperties.Create(Self);
{$ENDIF}
end;

destructor TTransfer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransfer.GetServerProperties: TTransferProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TTransfer.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnStatusMessage) then
         FOnStatusMessage(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentCompleteAtStep) then
         FOnPercentCompleteAtStep(Self,
                                  Params[0] {const WideString},
                                  Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnScriptTransferPercentComplete) then
         FOnScriptTransferPercentComplete(Self,
                                          Params[0] {const WideString},
                                          Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnTransferPercentComplete) then
         FOnTransferPercentComplete(Self,
                                    Params[0] {const WideString},
                                    Params[1] {Integer});
*)
  end; {case DispID}
end;

function TTransfer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransfer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransfer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransfer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransfer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransfer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransfer.Get_DestServer: WideString;
begin
    Result := DefaultInterface.DestServer;
end;

procedure TTransfer.Set_DestServer(const pRetVal: WideString);
  { Warning: The property DestServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestServer := pRetVal;
end;

function TTransfer.Get_DestLogin: WideString;
begin
    Result := DefaultInterface.DestLogin;
end;

procedure TTransfer.Set_DestLogin(const pRetVal: WideString);
  { Warning: The property DestLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestLogin := pRetVal;
end;

function TTransfer.Get_DestPassword: WideString;
begin
    Result := DefaultInterface.DestPassword;
end;

procedure TTransfer.Set_DestPassword(const pRetVal: WideString);
  { Warning: The property DestPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestPassword := pRetVal;
end;

function TTransfer.Get_DestDatabase: WideString;
begin
    Result := DefaultInterface.DestDatabase;
end;

procedure TTransfer.Set_DestDatabase(const pRetVal: WideString);
  { Warning: The property DestDatabase has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestDatabase := pRetVal;
end;

function TTransfer.Get_CopyData: SQLDMO_COPYDATA_TYPE;
begin
    Result := DefaultInterface.CopyData;
end;

procedure TTransfer.Set_CopyData(pRetVal: SQLDMO_COPYDATA_TYPE);
begin
  DefaultInterface.Set_CopyData(pRetVal);
end;

function TTransfer.Get_CopySchema: WordBool;
begin
    Result := DefaultInterface.CopySchema;
end;

procedure TTransfer.Set_CopySchema(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopySchema(pRetVal);
end;

function TTransfer.Get_CopyAllObjects: WordBool;
begin
    Result := DefaultInterface.CopyAllObjects;
end;

procedure TTransfer.Set_CopyAllObjects(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllObjects(pRetVal);
end;

function TTransfer.Get_CopyAllTables: WordBool;
begin
    Result := DefaultInterface.CopyAllTables;
end;

procedure TTransfer.Set_CopyAllTables(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllTables(pRetVal);
end;

function TTransfer.Get_CopyAllViews: WordBool;
begin
    Result := DefaultInterface.CopyAllViews;
end;

procedure TTransfer.Set_CopyAllViews(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllViews(pRetVal);
end;

function TTransfer.Get_CopyAllStoredProcedures: WordBool;
begin
    Result := DefaultInterface.CopyAllStoredProcedures;
end;

procedure TTransfer.Set_CopyAllStoredProcedures(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllStoredProcedures(pRetVal);
end;

function TTransfer.Get_CopyAllUserDefinedDatatypes: WordBool;
begin
    Result := DefaultInterface.CopyAllUserDefinedDatatypes;
end;

procedure TTransfer.Set_CopyAllUserDefinedDatatypes(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllUserDefinedDatatypes(pRetVal);
end;

function TTransfer.Get_CopyAllRules: WordBool;
begin
    Result := DefaultInterface.CopyAllRules;
end;

procedure TTransfer.Set_CopyAllRules(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllRules(pRetVal);
end;

function TTransfer.Get_CopyAllDefaults: WordBool;
begin
    Result := DefaultInterface.CopyAllDefaults;
end;

procedure TTransfer.Set_CopyAllDefaults(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllDefaults(pRetVal);
end;

function TTransfer.Get_CopyAllTriggers: WordBool;
begin
    Result := DefaultInterface.CopyAllTriggers;
end;

procedure TTransfer.Set_CopyAllTriggers(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllTriggers(pRetVal);
end;

function TTransfer.Get_IncludeDependencies: WordBool;
begin
    Result := DefaultInterface.IncludeDependencies;
end;

procedure TTransfer.Set_IncludeDependencies(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeDependencies(pRetVal);
end;

function TTransfer.Get_IncludeUsers: WordBool;
begin
    Result := DefaultInterface.IncludeUsers;
end;

procedure TTransfer.Set_IncludeUsers(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeUsers(pRetVal);
end;

function TTransfer.Get_IncludeGroups: WordBool;
begin
    Result := DefaultInterface.IncludeGroups;
end;

procedure TTransfer.Set_IncludeGroups(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeGroups(pRetVal);
end;

function TTransfer.Get_IncludeLogins: WordBool;
begin
    Result := DefaultInterface.IncludeLogins;
end;

procedure TTransfer.Set_IncludeLogins(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeLogins(pRetVal);
end;

function TTransfer.Get_DropDestObjectsFirst: WordBool;
begin
    Result := DefaultInterface.DropDestObjectsFirst;
end;

procedure TTransfer.Set_DropDestObjectsFirst(pRetVal: WordBool);
begin
  DefaultInterface.Set_DropDestObjectsFirst(pRetVal);
end;

function TTransfer.Get_ScriptType: SQLDMO_SCRIPT_TYPE;
begin
    Result := DefaultInterface.ScriptType;
end;

procedure TTransfer.Set_ScriptType(pRetVal: SQLDMO_SCRIPT_TYPE);
begin
  DefaultInterface.Set_ScriptType(pRetVal);
end;

function TTransfer.Get_DestUseTrustedConnection: WordBool;
begin
    Result := DefaultInterface.DestUseTrustedConnection;
end;

procedure TTransfer.Set_DestUseTrustedConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_DestUseTrustedConnection(pRetVal);
end;

function TTransfer.Get_Script2Type: SQLDMO_SCRIPT2_TYPE;
begin
    Result := DefaultInterface.Script2Type;
end;

procedure TTransfer.Set_Script2Type(pRetVal: SQLDMO_SCRIPT2_TYPE);
begin
  DefaultInterface.Set_Script2Type(pRetVal);
end;

procedure TTransfer.AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE);
begin
  DefaultInterface.AddObjectByName(ObjectName, ObjectType, EmptyParam);
end;

procedure TTransfer.AddObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                                    Owner: OleVariant);
begin
  DefaultInterface.AddObjectByName(ObjectName, ObjectType, Owner);
end;

procedure TTransfer.AddObject(const DBObject: DBObject);
begin
  DefaultInterface.AddObject(DBObject);
end;

function TTransfer.ListObjectNames(ObjectType: SQLDMO_OBJECT_TYPE): NameList;
begin
  Result := DefaultInterface.ListObjectNames(ObjectType);
end;

procedure TTransfer.Abort;
begin
  DefaultInterface.Abort;
end;

function TTransfer.RetrieveErrors: WideString;
begin
  Result := DefaultInterface.RetrieveErrors;
end;

function TTransfer.RetrieveWriteFileErrors: WideString;
begin
  Result := DefaultInterface.RetrieveWriteFileErrors;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransferProperties.Create(AServer: TTransfer);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransferProperties.GetDefaultInterface: _Transfer;
begin
  Result := FServer.DefaultInterface;
end;

function TTransferProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransferProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransferProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransferProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransferProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransferProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransferProperties.Get_DestServer: WideString;
begin
    Result := DefaultInterface.DestServer;
end;

procedure TTransferProperties.Set_DestServer(const pRetVal: WideString);
  { Warning: The property DestServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestServer := pRetVal;
end;

function TTransferProperties.Get_DestLogin: WideString;
begin
    Result := DefaultInterface.DestLogin;
end;

procedure TTransferProperties.Set_DestLogin(const pRetVal: WideString);
  { Warning: The property DestLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestLogin := pRetVal;
end;

function TTransferProperties.Get_DestPassword: WideString;
begin
    Result := DefaultInterface.DestPassword;
end;

procedure TTransferProperties.Set_DestPassword(const pRetVal: WideString);
  { Warning: The property DestPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestPassword := pRetVal;
end;

function TTransferProperties.Get_DestDatabase: WideString;
begin
    Result := DefaultInterface.DestDatabase;
end;

procedure TTransferProperties.Set_DestDatabase(const pRetVal: WideString);
  { Warning: The property DestDatabase has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestDatabase := pRetVal;
end;

function TTransferProperties.Get_CopyData: SQLDMO_COPYDATA_TYPE;
begin
    Result := DefaultInterface.CopyData;
end;

procedure TTransferProperties.Set_CopyData(pRetVal: SQLDMO_COPYDATA_TYPE);
begin
  DefaultInterface.Set_CopyData(pRetVal);
end;

function TTransferProperties.Get_CopySchema: WordBool;
begin
    Result := DefaultInterface.CopySchema;
end;

procedure TTransferProperties.Set_CopySchema(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopySchema(pRetVal);
end;

function TTransferProperties.Get_CopyAllObjects: WordBool;
begin
    Result := DefaultInterface.CopyAllObjects;
end;

procedure TTransferProperties.Set_CopyAllObjects(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllObjects(pRetVal);
end;

function TTransferProperties.Get_CopyAllTables: WordBool;
begin
    Result := DefaultInterface.CopyAllTables;
end;

procedure TTransferProperties.Set_CopyAllTables(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllTables(pRetVal);
end;

function TTransferProperties.Get_CopyAllViews: WordBool;
begin
    Result := DefaultInterface.CopyAllViews;
end;

procedure TTransferProperties.Set_CopyAllViews(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllViews(pRetVal);
end;

function TTransferProperties.Get_CopyAllStoredProcedures: WordBool;
begin
    Result := DefaultInterface.CopyAllStoredProcedures;
end;

procedure TTransferProperties.Set_CopyAllStoredProcedures(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllStoredProcedures(pRetVal);
end;

function TTransferProperties.Get_CopyAllUserDefinedDatatypes: WordBool;
begin
    Result := DefaultInterface.CopyAllUserDefinedDatatypes;
end;

procedure TTransferProperties.Set_CopyAllUserDefinedDatatypes(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllUserDefinedDatatypes(pRetVal);
end;

function TTransferProperties.Get_CopyAllRules: WordBool;
begin
    Result := DefaultInterface.CopyAllRules;
end;

procedure TTransferProperties.Set_CopyAllRules(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllRules(pRetVal);
end;

function TTransferProperties.Get_CopyAllDefaults: WordBool;
begin
    Result := DefaultInterface.CopyAllDefaults;
end;

procedure TTransferProperties.Set_CopyAllDefaults(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllDefaults(pRetVal);
end;

function TTransferProperties.Get_CopyAllTriggers: WordBool;
begin
    Result := DefaultInterface.CopyAllTriggers;
end;

procedure TTransferProperties.Set_CopyAllTriggers(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllTriggers(pRetVal);
end;

function TTransferProperties.Get_IncludeDependencies: WordBool;
begin
    Result := DefaultInterface.IncludeDependencies;
end;

procedure TTransferProperties.Set_IncludeDependencies(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeDependencies(pRetVal);
end;

function TTransferProperties.Get_IncludeUsers: WordBool;
begin
    Result := DefaultInterface.IncludeUsers;
end;

procedure TTransferProperties.Set_IncludeUsers(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeUsers(pRetVal);
end;

function TTransferProperties.Get_IncludeGroups: WordBool;
begin
    Result := DefaultInterface.IncludeGroups;
end;

procedure TTransferProperties.Set_IncludeGroups(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeGroups(pRetVal);
end;

function TTransferProperties.Get_IncludeLogins: WordBool;
begin
    Result := DefaultInterface.IncludeLogins;
end;

procedure TTransferProperties.Set_IncludeLogins(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeLogins(pRetVal);
end;

function TTransferProperties.Get_DropDestObjectsFirst: WordBool;
begin
    Result := DefaultInterface.DropDestObjectsFirst;
end;

procedure TTransferProperties.Set_DropDestObjectsFirst(pRetVal: WordBool);
begin
  DefaultInterface.Set_DropDestObjectsFirst(pRetVal);
end;

function TTransferProperties.Get_ScriptType: SQLDMO_SCRIPT_TYPE;
begin
    Result := DefaultInterface.ScriptType;
end;

procedure TTransferProperties.Set_ScriptType(pRetVal: SQLDMO_SCRIPT_TYPE);
begin
  DefaultInterface.Set_ScriptType(pRetVal);
end;

function TTransferProperties.Get_DestUseTrustedConnection: WordBool;
begin
    Result := DefaultInterface.DestUseTrustedConnection;
end;

procedure TTransferProperties.Set_DestUseTrustedConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_DestUseTrustedConnection(pRetVal);
end;

function TTransferProperties.Get_Script2Type: SQLDMO_SCRIPT2_TYPE;
begin
    Result := DefaultInterface.Script2Type;
end;

procedure TTransferProperties.Set_Script2Type(pRetVal: SQLDMO_SCRIPT2_TYPE);
begin
  DefaultInterface.Set_Script2Type(pRetVal);
end;

{$ENDIF}

class function CoDBFile.Create: _DBFile;
begin
  Result := CreateComObject(CLASS_DBFile) as _DBFile;
end;

class function CoDBFile.CreateRemote(const MachineName: string): _DBFile;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DBFile) as _DBFile;
end;

procedure TDBFile.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022D00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022D06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDBFile.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DBFile;
  end;
end;

procedure TDBFile.ConnectTo(svrIntf: _DBFile);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDBFile.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDBFile.GetDefaultInterface: _DBFile;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDBFile.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDBFileProperties.Create(Self);
{$ENDIF}
end;

destructor TDBFile.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDBFile.GetServerProperties: TDBFileProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDBFile.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDBFile.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDBFile.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDBFile.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDBFile.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDBFile.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDBFile.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDBFile.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDBFile.Get_PhysicalName: WideString;
begin
    Result := DefaultInterface.PhysicalName;
end;

procedure TDBFile.Set_PhysicalName(const pRetVal: WideString);
  { Warning: The property PhysicalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalName := pRetVal;
end;

function TDBFile.Get_PrimaryFile: WordBool;
begin
    Result := DefaultInterface.PrimaryFile;
end;

procedure TDBFile.Set_PrimaryFile(pRetVal: WordBool);
begin
  DefaultInterface.Set_PrimaryFile(pRetVal);
end;

function TDBFile.Get_FileGrowth: Integer;
begin
    Result := DefaultInterface.FileGrowth;
end;

procedure TDBFile.Set_FileGrowth(pRetVal: Integer);
begin
  DefaultInterface.Set_FileGrowth(pRetVal);
end;

function TDBFile.Get_MaximumSize: Integer;
begin
    Result := DefaultInterface.MaximumSize;
end;

procedure TDBFile.Set_MaximumSize(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumSize(pRetVal);
end;

function TDBFile.Get_SpaceAvailableInMB: Integer;
begin
    Result := DefaultInterface.SpaceAvailableInMB;
end;

function TDBFile.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

procedure TDBFile.Set_Size(pRetVal: Integer);
begin
  DefaultInterface.Set_Size(pRetVal);
end;

function TDBFile.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDBFile.Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
begin
    Result := DefaultInterface.FileGrowthType;
end;

procedure TDBFile.Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
begin
  DefaultInterface.Set_FileGrowthType(pRetVal);
end;

function TDBFile.Get_FileGrowthInKB: Single;
begin
    Result := DefaultInterface.FileGrowthInKB;
end;

function TDBFile.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

procedure TDBFile.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDBFile.Shrink(NewSizeInMB: Integer; Truncate: SQLDMO_SHRINK_TYPE);
begin
  DefaultInterface.Shrink(NewSizeInMB, Truncate);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDBFileProperties.Create(AServer: TDBFile);
begin
  inherited Create;
  FServer := AServer;
end;

function TDBFileProperties.GetDefaultInterface: _DBFile;
begin
  Result := FServer.DefaultInterface;
end;

function TDBFileProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDBFileProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDBFileProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDBFileProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDBFileProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDBFileProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDBFileProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDBFileProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDBFileProperties.Get_PhysicalName: WideString;
begin
    Result := DefaultInterface.PhysicalName;
end;

procedure TDBFileProperties.Set_PhysicalName(const pRetVal: WideString);
  { Warning: The property PhysicalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalName := pRetVal;
end;

function TDBFileProperties.Get_PrimaryFile: WordBool;
begin
    Result := DefaultInterface.PrimaryFile;
end;

procedure TDBFileProperties.Set_PrimaryFile(pRetVal: WordBool);
begin
  DefaultInterface.Set_PrimaryFile(pRetVal);
end;

function TDBFileProperties.Get_FileGrowth: Integer;
begin
    Result := DefaultInterface.FileGrowth;
end;

procedure TDBFileProperties.Set_FileGrowth(pRetVal: Integer);
begin
  DefaultInterface.Set_FileGrowth(pRetVal);
end;

function TDBFileProperties.Get_MaximumSize: Integer;
begin
    Result := DefaultInterface.MaximumSize;
end;

procedure TDBFileProperties.Set_MaximumSize(pRetVal: Integer);
begin
  DefaultInterface.Set_MaximumSize(pRetVal);
end;

function TDBFileProperties.Get_SpaceAvailableInMB: Integer;
begin
    Result := DefaultInterface.SpaceAvailableInMB;
end;

function TDBFileProperties.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

procedure TDBFileProperties.Set_Size(pRetVal: Integer);
begin
  DefaultInterface.Set_Size(pRetVal);
end;

function TDBFileProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDBFileProperties.Get_FileGrowthType: SQLDMO_GROWTH_TYPE;
begin
    Result := DefaultInterface.FileGrowthType;
end;

procedure TDBFileProperties.Set_FileGrowthType(pRetVal: SQLDMO_GROWTH_TYPE);
begin
  DefaultInterface.Set_FileGrowthType(pRetVal);
end;

function TDBFileProperties.Get_FileGrowthInKB: Single;
begin
    Result := DefaultInterface.FileGrowthInKB;
end;

function TDBFileProperties.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

{$ENDIF}

class function CoFileGroup.Create: _FileGroup;
begin
  Result := CreateComObject(CLASS_FileGroup) as _FileGroup;
end;

class function CoFileGroup.CreateRemote(const MachineName: string): _FileGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileGroup) as _FileGroup;
end;

procedure TFileGroup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022C00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022C06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFileGroup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FileGroup;
  end;
end;

procedure TFileGroup.ConnectTo(svrIntf: _FileGroup);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFileGroup.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFileGroup.GetDefaultInterface: _FileGroup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFileGroup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFileGroupProperties.Create(Self);
{$ENDIF}
end;

destructor TFileGroup.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFileGroup.GetServerProperties: TFileGroupProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFileGroup.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TFileGroup.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TFileGroup.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TFileGroup.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TFileGroup.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TFileGroup.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TFileGroup.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFileGroup.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TFileGroup.Get_DBFiles: DBFiles;
begin
    Result := DefaultInterface.DBFiles;
end;

function TFileGroup.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TFileGroup.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TFileGroup.Get_ReadOnly: WordBool;
begin
    Result := DefaultInterface.ReadOnly;
end;

procedure TFileGroup.Set_ReadOnly(pRetVal: WordBool);
begin
  DefaultInterface.Set_ReadOnly(pRetVal);
end;

function TFileGroup.Get_Default: WordBool;
begin
    Result := DefaultInterface.Default;
end;

procedure TFileGroup.Set_Default(pRetVal: WordBool);
begin
  DefaultInterface.Set_Default(pRetVal);
end;

procedure TFileGroup.Remove;
begin
  DefaultInterface.Remove;
end;

function TFileGroup.EnumObjects: QueryResults;
begin
  Result := DefaultInterface.EnumObjects;
end;

function TFileGroup.EnumFiles: QueryResults;
begin
  Result := DefaultInterface.EnumFiles;
end;

function TFileGroup.CheckFilegroup: WideString;
begin
  Result := DefaultInterface.CheckFilegroup;
end;

function TFileGroup.CheckFilegroupDataOnly: WideString;
begin
  Result := DefaultInterface.CheckFilegroupDataOnly;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFileGroupProperties.Create(AServer: TFileGroup);
begin
  inherited Create;
  FServer := AServer;
end;

function TFileGroupProperties.GetDefaultInterface: _FileGroup;
begin
  Result := FServer.DefaultInterface;
end;

function TFileGroupProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TFileGroupProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TFileGroupProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TFileGroupProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TFileGroupProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TFileGroupProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TFileGroupProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFileGroupProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TFileGroupProperties.Get_DBFiles: DBFiles;
begin
    Result := DefaultInterface.DBFiles;
end;

function TFileGroupProperties.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TFileGroupProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TFileGroupProperties.Get_ReadOnly: WordBool;
begin
    Result := DefaultInterface.ReadOnly;
end;

procedure TFileGroupProperties.Set_ReadOnly(pRetVal: WordBool);
begin
  DefaultInterface.Set_ReadOnly(pRetVal);
end;

function TFileGroupProperties.Get_Default: WordBool;
begin
    Result := DefaultInterface.Default;
end;

procedure TFileGroupProperties.Set_Default(pRetVal: WordBool);
begin
  DefaultInterface.Set_Default(pRetVal);
end;

{$ENDIF}

class function CoDatabaseRole.Create: _DatabaseRole;
begin
  Result := CreateComObject(CLASS_DatabaseRole) as _DatabaseRole;
end;

class function CoDatabaseRole.CreateRemote(const MachineName: string): _DatabaseRole;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatabaseRole) as _DatabaseRole;
end;

procedure TDatabaseRole.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDatabaseRole.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DatabaseRole;
  end;
end;

procedure TDatabaseRole.ConnectTo(svrIntf: _DatabaseRole);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDatabaseRole.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDatabaseRole.GetDefaultInterface: _DatabaseRole;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDatabaseRole.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDatabaseRoleProperties.Create(Self);
{$ENDIF}
end;

destructor TDatabaseRole.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDatabaseRole.GetServerProperties: TDatabaseRoleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDatabaseRole.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDatabaseRole.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDatabaseRole.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDatabaseRole.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDatabaseRole.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDatabaseRole.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDatabaseRole.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDatabaseRole.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDatabaseRole.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TDatabaseRole.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TDatabaseRole.Get_AppRole: WordBool;
begin
    Result := DefaultInterface.AppRole;
end;

procedure TDatabaseRole.Set_AppRole(pRetVal: WordBool);
begin
  DefaultInterface.Set_AppRole(pRetVal);
end;

procedure TDatabaseRole.Remove;
begin
  DefaultInterface.Remove;
end;

function TDatabaseRole.EnumDatabaseRoleMember: QueryResults;
begin
  Result := DefaultInterface.EnumDatabaseRoleMember;
end;

procedure TDatabaseRole.AddMember(const UserName: WideString);
begin
  DefaultInterface.AddMember(UserName);
end;

procedure TDatabaseRole.DropMember(const UserName: WideString);
begin
  DefaultInterface.DropMember(UserName);
end;

function TDatabaseRole.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                              Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TDatabaseRole.EnumFixedDatabaseRolePermission: QueryResults;
begin
  Result := DefaultInterface.EnumFixedDatabaseRolePermission;
end;

function TDatabaseRole.IsFixedRole: WordBool;
begin
  Result := DefaultInterface.IsFixedRole;
end;

function TDatabaseRole.ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListDatabasePermissions(PrivilegeTypes);
end;

function TDatabaseRole.ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListObjectPermissions(PrivilegeTypes);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDatabaseRoleProperties.Create(AServer: TDatabaseRole);
begin
  inherited Create;
  FServer := AServer;
end;

function TDatabaseRoleProperties.GetDefaultInterface: _DatabaseRole;
begin
  Result := FServer.DefaultInterface;
end;

function TDatabaseRoleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDatabaseRoleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDatabaseRoleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDatabaseRoleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDatabaseRoleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDatabaseRoleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDatabaseRoleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDatabaseRoleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDatabaseRoleProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TDatabaseRoleProperties.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TDatabaseRoleProperties.Get_AppRole: WordBool;
begin
    Result := DefaultInterface.AppRole;
end;

procedure TDatabaseRoleProperties.Set_AppRole(pRetVal: WordBool);
begin
  DefaultInterface.Set_AppRole(pRetVal);
end;

{$ENDIF}

class function CoFullTextCatalog.Create: _FullTextCatalog;
begin
  Result := CreateComObject(CLASS_FullTextCatalog) as _FullTextCatalog;
end;

class function CoFullTextCatalog.CreateRemote(const MachineName: string): _FullTextCatalog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FullTextCatalog) as _FullTextCatalog;
end;

procedure TFullTextCatalog.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023500-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023506-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFullTextCatalog.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FullTextCatalog;
  end;
end;

procedure TFullTextCatalog.ConnectTo(svrIntf: _FullTextCatalog);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFullTextCatalog.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFullTextCatalog.GetDefaultInterface: _FullTextCatalog;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFullTextCatalog.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFullTextCatalogProperties.Create(Self);
{$ENDIF}
end;

destructor TFullTextCatalog.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFullTextCatalog.GetServerProperties: TFullTextCatalogProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFullTextCatalog.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TFullTextCatalog.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TFullTextCatalog.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TFullTextCatalog.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TFullTextCatalog.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TFullTextCatalog.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TFullTextCatalog.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFullTextCatalog.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TFullTextCatalog.Get_RootPath: WideString;
begin
    Result := DefaultInterface.RootPath;
end;

procedure TFullTextCatalog.Set_RootPath(const pRetVal: WideString);
  { Warning: The property RootPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RootPath := pRetVal;
end;

function TFullTextCatalog.Get_ItemCount: Integer;
begin
    Result := DefaultInterface.ItemCount;
end;

function TFullTextCatalog.Get_PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE;
begin
    Result := DefaultInterface.PopulateStatus;
end;

function TFullTextCatalog.Get_FullTextIndexSize: Integer;
begin
    Result := DefaultInterface.FullTextIndexSize;
end;

function TFullTextCatalog.Get_UniqueKeyCount: Integer;
begin
    Result := DefaultInterface.UniqueKeyCount;
end;

function TFullTextCatalog.Get_PopulateCompletionDate: WideString;
begin
    Result := DefaultInterface.PopulateCompletionDate;
end;

function TFullTextCatalog.Get_ErrorLogSize: Integer;
begin
    Result := DefaultInterface.ErrorLogSize;
end;

function TFullTextCatalog.Get_HasFullTextIndexedTables: WordBool;
begin
    Result := DefaultInterface.HasFullTextIndexedTables;
end;

function TFullTextCatalog.Get_FullTextCatalogID: Integer;
begin
    Result := DefaultInterface.FullTextCatalogID;
end;

function TFullTextCatalog.Get_PopulateCompletionAge: Integer;
begin
    Result := DefaultInterface.PopulateCompletionAge;
end;

procedure TFullTextCatalog.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TFullTextCatalog.Start(StartType: SQLDMO_FULLTEXT_START_TYPE);
begin
  DefaultInterface.Start(StartType);
end;

procedure TFullTextCatalog.Stop;
begin
  DefaultInterface.Stop;
end;

function TFullTextCatalog.GenerateSQL: WideString;
begin
  Result := DefaultInterface.GenerateSQL;
end;

function TFullTextCatalog.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                                 Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

procedure TFullTextCatalog.Rebuild;
begin
  DefaultInterface.Rebuild;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFullTextCatalogProperties.Create(AServer: TFullTextCatalog);
begin
  inherited Create;
  FServer := AServer;
end;

function TFullTextCatalogProperties.GetDefaultInterface: _FullTextCatalog;
begin
  Result := FServer.DefaultInterface;
end;

function TFullTextCatalogProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TFullTextCatalogProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TFullTextCatalogProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TFullTextCatalogProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TFullTextCatalogProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TFullTextCatalogProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TFullTextCatalogProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFullTextCatalogProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TFullTextCatalogProperties.Get_RootPath: WideString;
begin
    Result := DefaultInterface.RootPath;
end;

procedure TFullTextCatalogProperties.Set_RootPath(const pRetVal: WideString);
  { Warning: The property RootPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RootPath := pRetVal;
end;

function TFullTextCatalogProperties.Get_ItemCount: Integer;
begin
    Result := DefaultInterface.ItemCount;
end;

function TFullTextCatalogProperties.Get_PopulateStatus: SQLDMO_FULLTEXTSTATUS_TYPE;
begin
    Result := DefaultInterface.PopulateStatus;
end;

function TFullTextCatalogProperties.Get_FullTextIndexSize: Integer;
begin
    Result := DefaultInterface.FullTextIndexSize;
end;

function TFullTextCatalogProperties.Get_UniqueKeyCount: Integer;
begin
    Result := DefaultInterface.UniqueKeyCount;
end;

function TFullTextCatalogProperties.Get_PopulateCompletionDate: WideString;
begin
    Result := DefaultInterface.PopulateCompletionDate;
end;

function TFullTextCatalogProperties.Get_ErrorLogSize: Integer;
begin
    Result := DefaultInterface.ErrorLogSize;
end;

function TFullTextCatalogProperties.Get_HasFullTextIndexedTables: WordBool;
begin
    Result := DefaultInterface.HasFullTextIndexedTables;
end;

function TFullTextCatalogProperties.Get_FullTextCatalogID: Integer;
begin
    Result := DefaultInterface.FullTextCatalogID;
end;

function TFullTextCatalogProperties.Get_PopulateCompletionAge: Integer;
begin
    Result := DefaultInterface.PopulateCompletionAge;
end;

{$ENDIF}

class function CoDatabase.Create: _Database;
begin
  Result := CreateComObject(CLASS_Database) as _Database;
end;

class function CoDatabase.CreateRemote(const MachineName: string): _Database;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Database) as _Database;
end;

procedure TDatabase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020300-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020306-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDatabase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Database;
  end;
end;

procedure TDatabase.ConnectTo(svrIntf: _Database);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDatabase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDatabase.GetDefaultInterface: _Database;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDatabase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDatabaseProperties.Create(Self);
{$ENDIF}
end;

destructor TDatabase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDatabase.GetServerProperties: TDatabaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDatabase.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDatabase.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDatabase.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDatabase.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDatabase.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDatabase.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDatabase.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDatabase.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDatabase.Get_Tables: Tables;
begin
    Result := DefaultInterface.Tables;
end;

function TDatabase.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TDatabase.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDatabase.Get_UserProfile: SQLDMO_DBUSERPROFILE_TYPE;
begin
    Result := DefaultInterface.UserProfile;
end;

function TDatabase.Get_CreateForAttach: WordBool;
begin
    Result := DefaultInterface.CreateForAttach;
end;

procedure TDatabase.Set_CreateForAttach(pRetVal: WordBool);
begin
  DefaultInterface.Set_CreateForAttach(pRetVal);
end;

function TDatabase.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TDatabase.Get_Version: Integer;
begin
    Result := DefaultInterface.Version;
end;

function TDatabase.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TDatabase.Get_DataSpaceUsage: Single;
begin
    Result := DefaultInterface.DataSpaceUsage;
end;

function TDatabase.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TDatabase.Set_UserName(const pRetVal: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := pRetVal;
end;

function TDatabase.Get_Status: SQLDMO_DBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

function TDatabase.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TDatabase.Get_SpaceAvailable: Integer;
begin
    Result := DefaultInterface.SpaceAvailable;
end;

function TDatabase.Get_IndexSpaceUsage: Single;
begin
    Result := DefaultInterface.IndexSpaceUsage;
end;

function TDatabase.Get_SpaceAvailableInMB: Single;
begin
    Result := DefaultInterface.SpaceAvailableInMB;
end;

function TDatabase.Get_Views: Views;
begin
    Result := DefaultInterface.Views;
end;

function TDatabase.Get_StoredProcedures: StoredProcedures;
begin
    Result := DefaultInterface.StoredProcedures;
end;

function TDatabase.Get_Defaults: Defaults;
begin
    Result := DefaultInterface.Defaults;
end;

function TDatabase.Get_Rules: Rules;
begin
    Result := DefaultInterface.Rules;
end;

function TDatabase.Get_UserDefinedDatatypes: UserDefinedDatatypes;
begin
    Result := DefaultInterface.UserDefinedDatatypes;
end;

function TDatabase.Get_Users: Users;
begin
    Result := DefaultInterface.Users;
end;

function TDatabase.Get_Groups: Groups;
begin
    Result := DefaultInterface.Groups;
end;

function TDatabase.Get_SystemDatatypes: SystemDatatypes;
begin
    Result := DefaultInterface.SystemDatatypes;
end;

function TDatabase.Get_TransactionLog: TransactionLog;
begin
    Result := DefaultInterface.TransactionLog;
end;

function TDatabase.Get_DBOption: DBOption;
begin
    Result := DefaultInterface.DBOption;
end;

function TDatabase.Get_DboLogin: WordBool;
begin
    Result := DefaultInterface.DboLogin;
end;

function TDatabase.Get_PrimaryFilePath: WideString;
begin
    Result := DefaultInterface.PrimaryFilePath;
end;

function TDatabase.Get_FileGroups: FileGroups;
begin
    Result := DefaultInterface.FileGroups;
end;

function TDatabase.Get_DatabaseRoles: DatabaseRoles;
begin
    Result := DefaultInterface.DatabaseRoles;
end;

function TDatabase.Get_Permissions: SQLDMO_PRIVILEGE_TYPE;
begin
    Result := DefaultInterface.Permissions;
end;

function TDatabase.Get_Isdb_accessadmin: WordBool;
begin
    Result := DefaultInterface.Isdb_accessadmin;
end;

function TDatabase.Get_Isdb_datareader: WordBool;
begin
    Result := DefaultInterface.Isdb_datareader;
end;

function TDatabase.Get_Isdb_ddladmin: WordBool;
begin
    Result := DefaultInterface.Isdb_ddladmin;
end;

function TDatabase.Get_Isdb_denydatareader: WordBool;
begin
    Result := DefaultInterface.Isdb_denydatareader;
end;

function TDatabase.Get_Isdb_denydatawriter: WordBool;
begin
    Result := DefaultInterface.Isdb_denydatawriter;
end;

function TDatabase.Get_Isdb_backupoperator: WordBool;
begin
    Result := DefaultInterface.Isdb_backupoperator;
end;

function TDatabase.Get_Isdb_owner: WordBool;
begin
    Result := DefaultInterface.Isdb_owner;
end;

function TDatabase.Get_Isdb_securityadmin: WordBool;
begin
    Result := DefaultInterface.Isdb_securityadmin;
end;

function TDatabase.Get_Isdb_datawriter: WordBool;
begin
    Result := DefaultInterface.Isdb_datawriter;
end;

function TDatabase.Get_IsFullTextEnabled: WordBool;
begin
    Result := DefaultInterface.IsFullTextEnabled;
end;

function TDatabase.Get_FullTextCatalogs: FullTextCatalogs;
begin
    Result := DefaultInterface.FullTextCatalogs;
end;

function TDatabase.Get_CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

procedure TDatabase.Set_CompatibilityLevel(pRetVal: SQLDMO_COMP_LEVEL_TYPE);
begin
  DefaultInterface.Set_CompatibilityLevel(pRetVal);
end;

function TDatabase.Get_UseServerName: WideString;
begin
    Result := DefaultInterface.UseServerName;
end;

procedure TDatabase.Set_UseServerName(const pRetVal: WideString);
  { Warning: The property UseServerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UseServerName := pRetVal;
end;

procedure TDatabase.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames);
end;

procedure TDatabase.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames);
end;

procedure TDatabase.ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE);
begin
  DefaultInterface.ExecuteImmediate(Command, ExecType, EmptyParam);
end;

procedure TDatabase.ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                                     Length: OleVariant);
begin
  DefaultInterface.ExecuteImmediate(Command, ExecType, Length);
end;

function TDatabase.GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE): DBObject;
begin
  Result := DefaultInterface.GetObjectByName(ObjectName, ObjectType, EmptyParam);
end;

function TDatabase.GetObjectByName(const ObjectName: WideString; ObjectType: SQLDMO_OBJECT_TYPE; 
                                   Owner: OleVariant): DBObject;
begin
  Result := DefaultInterface.GetObjectByName(ObjectName, ObjectType, Owner);
end;

procedure TDatabase.Checkpoint;
begin
  DefaultInterface.Checkpoint;
end;

function TDatabase.CheckTables(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString;
begin
  Result := DefaultInterface.CheckTables(RepairType);
end;

function TDatabase.CheckAllocations(RepairType: SQLDMO_DBCC_REPAIR_TYPE): WideString;
begin
  Result := DefaultInterface.CheckAllocations(RepairType);
end;

function TDatabase.CheckCatalog: WideString;
begin
  Result := DefaultInterface.CheckCatalog;
end;

function TDatabase.GetMemoryUsage: WideString;
begin
  Result := DefaultInterface.GetMemoryUsage;
end;

function TDatabase.ExecuteWithResults(const Command: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, EmptyParam);
end;

function TDatabase.ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, Length);
end;

function TDatabase.ListObjectPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListObjectPermissions(PrivilegeTypes);
end;

function TDatabase.EnumLocks: QueryResults;
begin
  Result := DefaultInterface.EnumLocks(EmptyParam);
end;

function TDatabase.EnumLocks(Who: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumLocks(Who);
end;

function TDatabase.ListObjects(ObjectTypes: SQLDMO_OBJECT_TYPE; SortBy: SQLDMO_OBJSORT_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListObjects(ObjectTypes, SortBy);
end;

function TDatabase.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TDatabase.SetOwner(const LoginName: WideString);
begin
  DefaultInterface.SetOwner(LoginName, EmptyParam, EmptyParam);
end;

procedure TDatabase.SetOwner(const LoginName: WideString; TransferAliases: OleVariant);
begin
  DefaultInterface.SetOwner(LoginName, TransferAliases, EmptyParam);
end;

procedure TDatabase.SetOwner(const LoginName: WideString; TransferAliases: OleVariant; 
                             OverrideIfAlreadyUser: OleVariant);
begin
  DefaultInterface.SetOwner(LoginName, TransferAliases, OverrideIfAlreadyUser);
end;

function TDatabase.ListDatabasePermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListDatabasePermissions(PrivilegeTypes);
end;

procedure TDatabase.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDatabase.RecalcSpaceUsage;
begin
  DefaultInterface.RecalcSpaceUsage;
end;

function TDatabase.EnumCandidateKeys: QueryResults;
begin
  Result := DefaultInterface.EnumCandidateKeys;
end;

function TDatabase.IsValidKeyDatatype(const KeyColType: WideString): WordBool;
begin
  Result := DefaultInterface.IsValidKeyDatatype(KeyColType, EmptyParam);
end;

function TDatabase.IsValidKeyDatatype(const KeyColType: WideString; ReferencingColType: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsValidKeyDatatype(KeyColType, ReferencingColType);
end;

function TDatabase.GetDatatypeByName(const TypeName: WideString): _IVSQLDMOStdObject;
begin
  Result := DefaultInterface.GetDatatypeByName(TypeName);
end;

function TDatabase.ScriptTransfer(const TransferSpec: Transfer; 
                                  ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE): WideString;
begin
  Result := DefaultInterface.ScriptTransfer(TransferSpec, ScriptFileMode, EmptyParam);
end;

function TDatabase.ScriptTransfer(const TransferSpec: Transfer; 
                                  ScriptFileMode: SQLDMO_XFRSCRIPTMODE_TYPE; 
                                  ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptTransfer(TransferSpec, ScriptFileMode, ScriptFilePath);
end;

procedure TDatabase.Transfer(const TransferSpec: Transfer);
begin
  DefaultInterface.Transfer(TransferSpec);
end;

procedure TDatabase.CheckIdentityValues;
begin
  DefaultInterface.CheckIdentityValues;
end;

function TDatabase.ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                                 out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages(Command, Length, Messages);
end;

function TDatabase.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                          Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TDatabase.CheckTablesDataOnly: WideString;
begin
  Result := DefaultInterface.CheckTablesDataOnly;
end;

function TDatabase.CheckAllocationsDataOnly: WideString;
begin
  Result := DefaultInterface.CheckAllocationsDataOnly;
end;

procedure TDatabase.UpdateIndexStatistics;
begin
  DefaultInterface.UpdateIndexStatistics;
end;

function TDatabase.EnumLoginMappings: QueryResults;
begin
  Result := DefaultInterface.EnumLoginMappings;
end;

function TDatabase.EnumFiles: QueryResults;
begin
  Result := DefaultInterface.EnumFiles;
end;

function TDatabase.EnumFileGroups: QueryResults;
begin
  Result := DefaultInterface.EnumFileGroups;
end;

function TDatabase.EnumUsers: QueryResults;
begin
  Result := DefaultInterface.EnumUsers(EmptyParam);
end;

function TDatabase.EnumUsers(Who: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumUsers(Who);
end;

function TDatabase.EnumNTGroups: QueryResults;
begin
  Result := DefaultInterface.EnumNTGroups(EmptyParam);
end;

function TDatabase.EnumNTGroups(Who: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumNTGroups(Who);
end;

procedure TDatabase.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames);
end;

function TDatabase.IsUser(const UserName: WideString): WordBool;
begin
  Result := DefaultInterface.IsUser(UserName);
end;

function TDatabase.GenerateSQL: WideString;
begin
  Result := DefaultInterface.GenerateSQL;
end;

procedure TDatabase.Shrink(FreeSpaceInPercent: Integer; Truncate: SQLDMO_SHRINK_TYPE);
begin
  DefaultInterface.Shrink(FreeSpaceInPercent, Truncate);
end;

function TDatabase.CheckTextAllocsFast: WideString;
begin
  Result := DefaultInterface.CheckTextAllocsFast;
end;

function TDatabase.CheckTextAllocsFull: WideString;
begin
  Result := DefaultInterface.CheckTextAllocsFull;
end;

function TDatabase.EnumMatchingSPs(const Text: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumMatchingSPs(Text, EmptyParam);
end;

function TDatabase.EnumMatchingSPs(const Text: WideString; IncludeSystemSP: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumMatchingSPs(Text, IncludeSystemSP);
end;

procedure TDatabase.EnableFullTextCatalogs;
begin
  DefaultInterface.EnableFullTextCatalogs;
end;

procedure TDatabase.RemoveFullTextCatalogs;
begin
  DefaultInterface.RemoveFullTextCatalogs;
end;

function TDatabase.FullTextIndexScript: WideString;
begin
  Result := DefaultInterface.FullTextIndexScript;
end;

procedure TDatabase.DisableFullTextCatalogs;
begin
  DefaultInterface.DisableFullTextCatalogs;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDatabaseProperties.Create(AServer: TDatabase);
begin
  inherited Create;
  FServer := AServer;
end;

function TDatabaseProperties.GetDefaultInterface: _Database;
begin
  Result := FServer.DefaultInterface;
end;

function TDatabaseProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDatabaseProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDatabaseProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDatabaseProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDatabaseProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDatabaseProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDatabaseProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDatabaseProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDatabaseProperties.Get_Tables: Tables;
begin
    Result := DefaultInterface.Tables;
end;

function TDatabaseProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TDatabaseProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDatabaseProperties.Get_UserProfile: SQLDMO_DBUSERPROFILE_TYPE;
begin
    Result := DefaultInterface.UserProfile;
end;

function TDatabaseProperties.Get_CreateForAttach: WordBool;
begin
    Result := DefaultInterface.CreateForAttach;
end;

procedure TDatabaseProperties.Set_CreateForAttach(pRetVal: WordBool);
begin
  DefaultInterface.Set_CreateForAttach(pRetVal);
end;

function TDatabaseProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

function TDatabaseProperties.Get_Version: Integer;
begin
    Result := DefaultInterface.Version;
end;

function TDatabaseProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TDatabaseProperties.Get_DataSpaceUsage: Single;
begin
    Result := DefaultInterface.DataSpaceUsage;
end;

function TDatabaseProperties.Get_UserName: WideString;
begin
    Result := DefaultInterface.UserName;
end;

procedure TDatabaseProperties.Set_UserName(const pRetVal: WideString);
  { Warning: The property UserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UserName := pRetVal;
end;

function TDatabaseProperties.Get_Status: SQLDMO_DBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

function TDatabaseProperties.Get_Size: Integer;
begin
    Result := DefaultInterface.Size;
end;

function TDatabaseProperties.Get_SpaceAvailable: Integer;
begin
    Result := DefaultInterface.SpaceAvailable;
end;

function TDatabaseProperties.Get_IndexSpaceUsage: Single;
begin
    Result := DefaultInterface.IndexSpaceUsage;
end;

function TDatabaseProperties.Get_SpaceAvailableInMB: Single;
begin
    Result := DefaultInterface.SpaceAvailableInMB;
end;

function TDatabaseProperties.Get_Views: Views;
begin
    Result := DefaultInterface.Views;
end;

function TDatabaseProperties.Get_StoredProcedures: StoredProcedures;
begin
    Result := DefaultInterface.StoredProcedures;
end;

function TDatabaseProperties.Get_Defaults: Defaults;
begin
    Result := DefaultInterface.Defaults;
end;

function TDatabaseProperties.Get_Rules: Rules;
begin
    Result := DefaultInterface.Rules;
end;

function TDatabaseProperties.Get_UserDefinedDatatypes: UserDefinedDatatypes;
begin
    Result := DefaultInterface.UserDefinedDatatypes;
end;

function TDatabaseProperties.Get_Users: Users;
begin
    Result := DefaultInterface.Users;
end;

function TDatabaseProperties.Get_Groups: Groups;
begin
    Result := DefaultInterface.Groups;
end;

function TDatabaseProperties.Get_SystemDatatypes: SystemDatatypes;
begin
    Result := DefaultInterface.SystemDatatypes;
end;

function TDatabaseProperties.Get_TransactionLog: TransactionLog;
begin
    Result := DefaultInterface.TransactionLog;
end;

function TDatabaseProperties.Get_DBOption: DBOption;
begin
    Result := DefaultInterface.DBOption;
end;

function TDatabaseProperties.Get_DboLogin: WordBool;
begin
    Result := DefaultInterface.DboLogin;
end;

function TDatabaseProperties.Get_PrimaryFilePath: WideString;
begin
    Result := DefaultInterface.PrimaryFilePath;
end;

function TDatabaseProperties.Get_FileGroups: FileGroups;
begin
    Result := DefaultInterface.FileGroups;
end;

function TDatabaseProperties.Get_DatabaseRoles: DatabaseRoles;
begin
    Result := DefaultInterface.DatabaseRoles;
end;

function TDatabaseProperties.Get_Permissions: SQLDMO_PRIVILEGE_TYPE;
begin
    Result := DefaultInterface.Permissions;
end;

function TDatabaseProperties.Get_Isdb_accessadmin: WordBool;
begin
    Result := DefaultInterface.Isdb_accessadmin;
end;

function TDatabaseProperties.Get_Isdb_datareader: WordBool;
begin
    Result := DefaultInterface.Isdb_datareader;
end;

function TDatabaseProperties.Get_Isdb_ddladmin: WordBool;
begin
    Result := DefaultInterface.Isdb_ddladmin;
end;

function TDatabaseProperties.Get_Isdb_denydatareader: WordBool;
begin
    Result := DefaultInterface.Isdb_denydatareader;
end;

function TDatabaseProperties.Get_Isdb_denydatawriter: WordBool;
begin
    Result := DefaultInterface.Isdb_denydatawriter;
end;

function TDatabaseProperties.Get_Isdb_backupoperator: WordBool;
begin
    Result := DefaultInterface.Isdb_backupoperator;
end;

function TDatabaseProperties.Get_Isdb_owner: WordBool;
begin
    Result := DefaultInterface.Isdb_owner;
end;

function TDatabaseProperties.Get_Isdb_securityadmin: WordBool;
begin
    Result := DefaultInterface.Isdb_securityadmin;
end;

function TDatabaseProperties.Get_Isdb_datawriter: WordBool;
begin
    Result := DefaultInterface.Isdb_datawriter;
end;

function TDatabaseProperties.Get_IsFullTextEnabled: WordBool;
begin
    Result := DefaultInterface.IsFullTextEnabled;
end;

function TDatabaseProperties.Get_FullTextCatalogs: FullTextCatalogs;
begin
    Result := DefaultInterface.FullTextCatalogs;
end;

function TDatabaseProperties.Get_CompatibilityLevel: SQLDMO_COMP_LEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

procedure TDatabaseProperties.Set_CompatibilityLevel(pRetVal: SQLDMO_COMP_LEVEL_TYPE);
begin
  DefaultInterface.Set_CompatibilityLevel(pRetVal);
end;

function TDatabaseProperties.Get_UseServerName: WideString;
begin
    Result := DefaultInterface.UseServerName;
end;

procedure TDatabaseProperties.Set_UseServerName(const pRetVal: WideString);
  { Warning: The property UseServerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UseServerName := pRetVal;
end;

{$ENDIF}

class function CoUserDefinedFunction.Create: _UserDefinedFunction;
begin
  Result := CreateComObject(CLASS_UserDefinedFunction) as _UserDefinedFunction;
end;

class function CoUserDefinedFunction.CreateRemote(const MachineName: string): _UserDefinedFunction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserDefinedFunction) as _UserDefinedFunction;
end;

procedure TUserDefinedFunction.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023700-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023706-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUserDefinedFunction.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UserDefinedFunction;
  end;
end;

procedure TUserDefinedFunction.ConnectTo(svrIntf: _UserDefinedFunction);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUserDefinedFunction.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUserDefinedFunction.GetDefaultInterface: _UserDefinedFunction;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUserDefinedFunction.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUserDefinedFunctionProperties.Create(Self);
{$ENDIF}
end;

destructor TUserDefinedFunction.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUserDefinedFunction.GetServerProperties: TUserDefinedFunctionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUserDefinedFunction.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUserDefinedFunction.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUserDefinedFunction.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUserDefinedFunction.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUserDefinedFunction.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUserDefinedFunction.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUserDefinedFunction.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUserDefinedFunction.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUserDefinedFunction.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TUserDefinedFunction.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TUserDefinedFunction.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TUserDefinedFunction.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TUserDefinedFunction.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUserDefinedFunction.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TUserDefinedFunction.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TUserDefinedFunction.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TUserDefinedFunction.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TUserDefinedFunction.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TUserDefinedFunction.Get_type_: SQLDMO_UDF_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TUserDefinedFunction.Get_IsDeterministic: WordBool;
begin
    Result := DefaultInterface.IsDeterministic;
end;

function TUserDefinedFunction.Get_IsSchemaBound: WordBool;
begin
    Result := DefaultInterface.IsSchemaBound;
end;

function TUserDefinedFunction.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TUserDefinedFunction.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

procedure TUserDefinedFunction.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                     const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam);
end;

procedure TUserDefinedFunction.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                     const GranteeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, EmptyParam);
end;

procedure TUserDefinedFunction.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                     const GranteeNames: WideString; GrantGrant: OleVariant; 
                                     AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, AsRole);
end;

procedure TUserDefinedFunction.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                      const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TUserDefinedFunction.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                      const RevokeeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TUserDefinedFunction.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                      const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                      RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, EmptyParam);
end;

procedure TUserDefinedFunction.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                      const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                      RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, AsRole);
end;

function TUserDefinedFunction.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TUserDefinedFunction.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TUserDefinedFunction.EnumParameters: QueryResults;
begin
  Result := DefaultInterface.EnumParameters;
end;

procedure TUserDefinedFunction.Remove;
begin
  DefaultInterface.Remove;
end;

function TUserDefinedFunction.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                                     Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TUserDefinedFunction.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TUserDefinedFunction.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam);
end;

procedure TUserDefinedFunction.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                    const DenyeeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, GrantGrant);
end;

procedure TUserDefinedFunction.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

function TUserDefinedFunction.EnumOutputs: QueryResults;
begin
  Result := DefaultInterface.EnumOutputs;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUserDefinedFunctionProperties.Create(AServer: TUserDefinedFunction);
begin
  inherited Create;
  FServer := AServer;
end;

function TUserDefinedFunctionProperties.GetDefaultInterface: _UserDefinedFunction;
begin
  Result := FServer.DefaultInterface;
end;

function TUserDefinedFunctionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TUserDefinedFunctionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TUserDefinedFunctionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TUserDefinedFunctionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TUserDefinedFunctionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TUserDefinedFunctionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TUserDefinedFunctionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUserDefinedFunctionProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TUserDefinedFunctionProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TUserDefinedFunctionProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TUserDefinedFunctionProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TUserDefinedFunctionProperties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TUserDefinedFunctionProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TUserDefinedFunctionProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TUserDefinedFunctionProperties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TUserDefinedFunctionProperties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TUserDefinedFunctionProperties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TUserDefinedFunctionProperties.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TUserDefinedFunctionProperties.Get_type_: SQLDMO_UDF_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TUserDefinedFunctionProperties.Get_IsDeterministic: WordBool;
begin
    Result := DefaultInterface.IsDeterministic;
end;

function TUserDefinedFunctionProperties.Get_IsSchemaBound: WordBool;
begin
    Result := DefaultInterface.IsSchemaBound;
end;

function TUserDefinedFunctionProperties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TUserDefinedFunctionProperties.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

{$ENDIF}

class function CoBackupDevice.Create: _BackupDevice;
begin
  Result := CreateComObject(CLASS_BackupDevice) as _BackupDevice;
end;

class function CoBackupDevice.CreateRemote(const MachineName: string): _BackupDevice;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BackupDevice) as _BackupDevice;
end;

procedure TBackupDevice.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBackupDevice.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _BackupDevice;
  end;
end;

procedure TBackupDevice.ConnectTo(svrIntf: _BackupDevice);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBackupDevice.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBackupDevice.GetDefaultInterface: _BackupDevice;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBackupDevice.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBackupDeviceProperties.Create(Self);
{$ENDIF}
end;

destructor TBackupDevice.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBackupDevice.GetServerProperties: TBackupDeviceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBackupDevice.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBackupDevice.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBackupDevice.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBackupDevice.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBackupDevice.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBackupDevice.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBackupDevice.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TBackupDevice.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TBackupDevice.Get_DeviceNumber: Integer;
begin
    Result := DefaultInterface.DeviceNumber;
end;

function TBackupDevice.Get_SkipTapeLabel: WordBool;
begin
    Result := DefaultInterface.SkipTapeLabel;
end;

procedure TBackupDevice.Set_SkipTapeLabel(pRetVal: WordBool);
begin
  DefaultInterface.Set_SkipTapeLabel(pRetVal);
end;

function TBackupDevice.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TBackupDevice.Get_PhysicalLocation: WideString;
begin
    Result := DefaultInterface.PhysicalLocation;
end;

procedure TBackupDevice.Set_PhysicalLocation(const pRetVal: WideString);
  { Warning: The property PhysicalLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalLocation := pRetVal;
end;

function TBackupDevice.Get_type_: SQLDMO_DEVICE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TBackupDevice.Set_type_(pRetVal: SQLDMO_DEVICE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TBackupDevice.Get_Status: Integer;
begin
    Result := DefaultInterface.Status;
end;

procedure TBackupDevice.Remove;
begin
  DefaultInterface.Remove;
end;

function TBackupDevice.ReadBackupHeader: QueryResults;
begin
  Result := DefaultInterface.ReadBackupHeader;
end;

function TBackupDevice.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                              NewPhysicalLocation: OleVariant; Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, NewPhysicalLocation, Script2Type);
end;

function TBackupDevice.ReadMediaHeader: QueryResults;
begin
  Result := DefaultInterface.ReadMediaHeader;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBackupDeviceProperties.Create(AServer: TBackupDevice);
begin
  inherited Create;
  FServer := AServer;
end;

function TBackupDeviceProperties.GetDefaultInterface: _BackupDevice;
begin
  Result := FServer.DefaultInterface;
end;

function TBackupDeviceProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBackupDeviceProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBackupDeviceProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBackupDeviceProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBackupDeviceProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBackupDeviceProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBackupDeviceProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TBackupDeviceProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TBackupDeviceProperties.Get_DeviceNumber: Integer;
begin
    Result := DefaultInterface.DeviceNumber;
end;

function TBackupDeviceProperties.Get_SkipTapeLabel: WordBool;
begin
    Result := DefaultInterface.SkipTapeLabel;
end;

procedure TBackupDeviceProperties.Set_SkipTapeLabel(pRetVal: WordBool);
begin
  DefaultInterface.Set_SkipTapeLabel(pRetVal);
end;

function TBackupDeviceProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TBackupDeviceProperties.Get_PhysicalLocation: WideString;
begin
    Result := DefaultInterface.PhysicalLocation;
end;

procedure TBackupDeviceProperties.Set_PhysicalLocation(const pRetVal: WideString);
  { Warning: The property PhysicalLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PhysicalLocation := pRetVal;
end;

function TBackupDeviceProperties.Get_type_: SQLDMO_DEVICE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TBackupDeviceProperties.Set_type_(pRetVal: SQLDMO_DEVICE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TBackupDeviceProperties.Get_Status: Integer;
begin
    Result := DefaultInterface.Status;
end;

{$ENDIF}

class function CoLanguage.Create: _Language;
begin
  Result := CreateComObject(CLASS_Language) as _Language;
end;

class function CoLanguage.CreateRemote(const MachineName: string): _Language;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Language) as _Language;
end;

procedure TLanguage.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021400-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021406-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLanguage.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Language;
  end;
end;

procedure TLanguage.ConnectTo(svrIntf: _Language);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLanguage.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLanguage.GetDefaultInterface: _Language;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLanguage.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLanguageProperties.Create(Self);
{$ENDIF}
end;

destructor TLanguage.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLanguage.GetServerProperties: TLanguageProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLanguage.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLanguage.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLanguage.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLanguage.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLanguage.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLanguage.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLanguage.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TLanguage.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TLanguage.Get_Upgrade: Integer;
begin
    Result := DefaultInterface.Upgrade;
end;

function TLanguage.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TLanguage.Set_Alias(const pRetVal: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := pRetVal;
end;

function TLanguage.Get_Months: WideString;
begin
    Result := DefaultInterface.Months;
end;

function TLanguage.Get_ShortMonths: WideString;
begin
    Result := DefaultInterface.ShortMonths;
end;

function TLanguage.Get_Days: WideString;
begin
    Result := DefaultInterface.Days;
end;

function TLanguage.Get_LangDateFormat: WideString;
begin
    Result := DefaultInterface.LangDateFormat;
end;

function TLanguage.Get_FirstDayOfWeek: SYSINT;
begin
    Result := DefaultInterface.FirstDayOfWeek;
end;

function TLanguage.Get_Month(Month: SYSINT): WideString;
begin
    Result := DefaultInterface.Month[Month];
end;

function TLanguage.Get_ShortMonth(Month: SYSINT): WideString;
begin
    Result := DefaultInterface.ShortMonth[Month];
end;

function TLanguage.Get_Day(Day: SYSINT): WideString;
begin
    Result := DefaultInterface.Day[Day];
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLanguageProperties.Create(AServer: TLanguage);
begin
  inherited Create;
  FServer := AServer;
end;

function TLanguageProperties.GetDefaultInterface: _Language;
begin
  Result := FServer.DefaultInterface;
end;

function TLanguageProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLanguageProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLanguageProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLanguageProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLanguageProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLanguageProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLanguageProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TLanguageProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TLanguageProperties.Get_Upgrade: Integer;
begin
    Result := DefaultInterface.Upgrade;
end;

function TLanguageProperties.Get_Alias: WideString;
begin
    Result := DefaultInterface.Alias;
end;

procedure TLanguageProperties.Set_Alias(const pRetVal: WideString);
  { Warning: The property Alias has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alias := pRetVal;
end;

function TLanguageProperties.Get_Months: WideString;
begin
    Result := DefaultInterface.Months;
end;

function TLanguageProperties.Get_ShortMonths: WideString;
begin
    Result := DefaultInterface.ShortMonths;
end;

function TLanguageProperties.Get_Days: WideString;
begin
    Result := DefaultInterface.Days;
end;

function TLanguageProperties.Get_LangDateFormat: WideString;
begin
    Result := DefaultInterface.LangDateFormat;
end;

function TLanguageProperties.Get_FirstDayOfWeek: SYSINT;
begin
    Result := DefaultInterface.FirstDayOfWeek;
end;

function TLanguageProperties.Get_Month(Month: SYSINT): WideString;
begin
    Result := DefaultInterface.Month[Month];
end;

function TLanguageProperties.Get_ShortMonth(Month: SYSINT): WideString;
begin
    Result := DefaultInterface.ShortMonth[Month];
end;

function TLanguageProperties.Get_Day(Day: SYSINT): WideString;
begin
    Result := DefaultInterface.Day[Day];
end;

{$ENDIF}

class function CoRemoteLogin.Create: _RemoteLogin;
begin
  Result := CreateComObject(CLASS_RemoteLogin) as _RemoteLogin;
end;

class function CoRemoteLogin.CreateRemote(const MachineName: string): _RemoteLogin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RemoteLogin) as _RemoteLogin;
end;

procedure TRemoteLogin.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021600-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021606-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRemoteLogin.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RemoteLogin;
  end;
end;

procedure TRemoteLogin.ConnectTo(svrIntf: _RemoteLogin);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRemoteLogin.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRemoteLogin.GetDefaultInterface: _RemoteLogin;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRemoteLogin.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRemoteLoginProperties.Create(Self);
{$ENDIF}
end;

destructor TRemoteLogin.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRemoteLogin.GetServerProperties: TRemoteLoginProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRemoteLogin.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRemoteLogin.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRemoteLogin.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRemoteLogin.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRemoteLogin.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRemoteLogin.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRemoteLogin.Get_LocalName: WideString;
begin
    Result := DefaultInterface.LocalName;
end;

procedure TRemoteLogin.Set_LocalName(const pRetVal: WideString);
  { Warning: The property LocalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalName := pRetVal;
end;

function TRemoteLogin.Get_RemoteName: WideString;
begin
    Result := DefaultInterface.RemoteName;
end;

procedure TRemoteLogin.Set_RemoteName(const pRetVal: WideString);
  { Warning: The property RemoteName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemoteName := pRetVal;
end;

function TRemoteLogin.Get_Trusted: WordBool;
begin
    Result := DefaultInterface.Trusted;
end;

procedure TRemoteLogin.Set_Trusted(pRetVal: WordBool);
begin
  DefaultInterface.Set_Trusted(pRetVal);
end;

procedure TRemoteLogin.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRemoteLoginProperties.Create(AServer: TRemoteLogin);
begin
  inherited Create;
  FServer := AServer;
end;

function TRemoteLoginProperties.GetDefaultInterface: _RemoteLogin;
begin
  Result := FServer.DefaultInterface;
end;

function TRemoteLoginProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRemoteLoginProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRemoteLoginProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRemoteLoginProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRemoteLoginProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRemoteLoginProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRemoteLoginProperties.Get_LocalName: WideString;
begin
    Result := DefaultInterface.LocalName;
end;

procedure TRemoteLoginProperties.Set_LocalName(const pRetVal: WideString);
  { Warning: The property LocalName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalName := pRetVal;
end;

function TRemoteLoginProperties.Get_RemoteName: WideString;
begin
    Result := DefaultInterface.RemoteName;
end;

procedure TRemoteLoginProperties.Set_RemoteName(const pRetVal: WideString);
  { Warning: The property RemoteName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemoteName := pRetVal;
end;

function TRemoteLoginProperties.Get_Trusted: WordBool;
begin
    Result := DefaultInterface.Trusted;
end;

procedure TRemoteLoginProperties.Set_Trusted(pRetVal: WordBool);
begin
  DefaultInterface.Set_Trusted(pRetVal);
end;

{$ENDIF}

class function CoRemoteServer.Create: _RemoteServer;
begin
  Result := CreateComObject(CLASS_RemoteServer) as _RemoteServer;
end;

class function CoRemoteServer.CreateRemote(const MachineName: string): _RemoteServer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RemoteServer) as _RemoteServer;
end;

procedure TRemoteServer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021500-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021506-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRemoteServer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RemoteServer;
  end;
end;

procedure TRemoteServer.ConnectTo(svrIntf: _RemoteServer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRemoteServer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRemoteServer.GetDefaultInterface: _RemoteServer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRemoteServer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRemoteServerProperties.Create(Self);
{$ENDIF}
end;

destructor TRemoteServer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRemoteServer.GetServerProperties: TRemoteServerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRemoteServer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRemoteServer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRemoteServer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRemoteServer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRemoteServer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRemoteServer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRemoteServer.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRemoteServer.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRemoteServer.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TRemoteServer.Get_NetName: WideString;
begin
    Result := DefaultInterface.NetName;
end;

procedure TRemoteServer.Set_NetName(const pRetVal: WideString);
  { Warning: The property NetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetName := pRetVal;
end;

function TRemoteServer.Get_RemoteLogins: RemoteLogins;
begin
    Result := DefaultInterface.RemoteLogins;
end;

function TRemoteServer.Get_Options: SQLDMO_SRVOPTION_TYPE;
begin
    Result := DefaultInterface.Options;
end;

function TRemoteServer.Get_TopologyX: Integer;
begin
    Result := DefaultInterface.TopologyX;
end;

function TRemoteServer.Get_TopologyY: Integer;
begin
    Result := DefaultInterface.TopologyY;
end;

procedure TRemoteServer.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TRemoteServer.ExecuteImmediate(const Command: WideString);
begin
  DefaultInterface.ExecuteImmediate(Command, EmptyParam);
end;

procedure TRemoteServer.ExecuteImmediate(const Command: WideString; Length: OleVariant);
begin
  DefaultInterface.ExecuteImmediate(Command, Length);
end;

function TRemoteServer.ExecuteWithResults(const Command: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, EmptyParam);
end;

function TRemoteServer.ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, Length);
end;

procedure TRemoteServer.SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool);
begin
  DefaultInterface.SetOptions(Options, Setting);
end;

procedure TRemoteServer.SetTopologyXY(X: Integer; Y: Integer);
begin
  DefaultInterface.SetTopologyXY(X, Y);
end;

function TRemoteServer.ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                                     out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages(Command, Length, Messages);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRemoteServerProperties.Create(AServer: TRemoteServer);
begin
  inherited Create;
  FServer := AServer;
end;

function TRemoteServerProperties.GetDefaultInterface: _RemoteServer;
begin
  Result := FServer.DefaultInterface;
end;

function TRemoteServerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRemoteServerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRemoteServerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRemoteServerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRemoteServerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRemoteServerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRemoteServerProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRemoteServerProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRemoteServerProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TRemoteServerProperties.Get_NetName: WideString;
begin
    Result := DefaultInterface.NetName;
end;

procedure TRemoteServerProperties.Set_NetName(const pRetVal: WideString);
  { Warning: The property NetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetName := pRetVal;
end;

function TRemoteServerProperties.Get_RemoteLogins: RemoteLogins;
begin
    Result := DefaultInterface.RemoteLogins;
end;

function TRemoteServerProperties.Get_Options: SQLDMO_SRVOPTION_TYPE;
begin
    Result := DefaultInterface.Options;
end;

function TRemoteServerProperties.Get_TopologyX: Integer;
begin
    Result := DefaultInterface.TopologyX;
end;

function TRemoteServerProperties.Get_TopologyY: Integer;
begin
    Result := DefaultInterface.TopologyY;
end;

{$ENDIF}

class function CoLogin.Create: _Login;
begin
  Result := CreateComObject(CLASS_Login) as _Login;
end;

class function CoLogin.CreateRemote(const MachineName: string): _Login;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Login) as _Login;
end;

procedure TLogin.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021300-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021306-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLogin.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Login;
  end;
end;

procedure TLogin.ConnectTo(svrIntf: _Login);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLogin.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLogin.GetDefaultInterface: _Login;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLogin.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLoginProperties.Create(Self);
{$ENDIF}
end;

destructor TLogin.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLogin.GetServerProperties: TLoginProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLogin.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLogin.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLogin.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLogin.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLogin.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLogin.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLogin.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLogin.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLogin.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TLogin.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

procedure TLogin.Set_Language(const pRetVal: WideString);
  { Warning: The property Language has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Language := pRetVal;
end;

function TLogin.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TLogin.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TLogin.Get_type_: SQLDMO_LOGIN_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TLogin.Set_type_(pRetVal: SQLDMO_LOGIN_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TLogin.Get_DenyNTLogin: WordBool;
begin
    Result := DefaultInterface.DenyNTLogin;
end;

procedure TLogin.Set_DenyNTLogin(pRetVal: WordBool);
begin
  DefaultInterface.Set_DenyNTLogin(pRetVal);
end;

function TLogin.Get_LanguageAlias: WideString;
begin
    Result := DefaultInterface.LanguageAlias;
end;

function TLogin.Get_NTLoginAccessType: SQLDMO_NTACCESS_TYPE;
begin
    Result := DefaultInterface.NTLoginAccessType;
end;

procedure TLogin.Remove;
begin
  DefaultInterface.Remove;
end;

function TLogin.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

procedure TLogin.SetPassword(const OldPassword: WideString; const NewPassword: WideString);
begin
  DefaultInterface.SetPassword(OldPassword, NewPassword);
end;

function TLogin.EnumDatabaseMappings: QueryResults;
begin
  Result := DefaultInterface.EnumDatabaseMappings;
end;

function TLogin.ListMembers: NameList;
begin
  Result := DefaultInterface.ListMembers;
end;

function TLogin.IsMember(const ServerRole: WideString): WordBool;
begin
  Result := DefaultInterface.IsMember(ServerRole);
end;

function TLogin.GetUserName(const DatabaseName: WideString): WideString;
begin
  Result := DefaultInterface.GetUserName(DatabaseName);
end;

function TLogin.GetAliasName(const DatabaseName: WideString): WideString;
begin
  Result := DefaultInterface.GetAliasName(DatabaseName);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLoginProperties.Create(AServer: TLogin);
begin
  inherited Create;
  FServer := AServer;
end;

function TLoginProperties.GetDefaultInterface: _Login;
begin
  Result := FServer.DefaultInterface;
end;

function TLoginProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLoginProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLoginProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLoginProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLoginProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLoginProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLoginProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLoginProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLoginProperties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TLoginProperties.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

procedure TLoginProperties.Set_Language(const pRetVal: WideString);
  { Warning: The property Language has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Language := pRetVal;
end;

function TLoginProperties.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TLoginProperties.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TLoginProperties.Get_type_: SQLDMO_LOGIN_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TLoginProperties.Set_type_(pRetVal: SQLDMO_LOGIN_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TLoginProperties.Get_DenyNTLogin: WordBool;
begin
    Result := DefaultInterface.DenyNTLogin;
end;

procedure TLoginProperties.Set_DenyNTLogin(pRetVal: WordBool);
begin
  DefaultInterface.Set_DenyNTLogin(pRetVal);
end;

function TLoginProperties.Get_LanguageAlias: WideString;
begin
    Result := DefaultInterface.LanguageAlias;
end;

function TLoginProperties.Get_NTLoginAccessType: SQLDMO_NTACCESS_TYPE;
begin
    Result := DefaultInterface.NTLoginAccessType;
end;

{$ENDIF}

class function CoOperator.Create: _Operator;
begin
  Result := CreateComObject(CLASS_Operator) as _Operator;
end;

class function CoOperator.CreateRemote(const MachineName: string): _Operator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Operator) as _Operator;
end;

procedure TOperator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10040200-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10040206-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOperator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Operator;
  end;
end;

procedure TOperator.ConnectTo(svrIntf: _Operator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TOperator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TOperator.GetDefaultInterface: _Operator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOperator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOperatorProperties.Create(Self);
{$ENDIF}
end;

destructor TOperator.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOperator.GetServerProperties: TOperatorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TOperator.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TOperator.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TOperator.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TOperator.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TOperator.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TOperator.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TOperator.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TOperator.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TOperator.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TOperator.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TOperator.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TOperator.Get_EmailAddress: WideString;
begin
    Result := DefaultInterface.EmailAddress;
end;

procedure TOperator.Set_EmailAddress(const pRetVal: WideString);
  { Warning: The property EmailAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EmailAddress := pRetVal;
end;

function TOperator.Get_LastEmailDate: TDateTime;
begin
    Result := DefaultInterface.LastEmailDate;
end;

function TOperator.Get_PagerAddress: WideString;
begin
    Result := DefaultInterface.PagerAddress;
end;

procedure TOperator.Set_PagerAddress(const pRetVal: WideString);
  { Warning: The property PagerAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PagerAddress := pRetVal;
end;

function TOperator.Get_LastPageDate: TDateTime;
begin
    Result := DefaultInterface.LastPageDate;
end;

function TOperator.Get_WeekdayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.WeekdayPagerStartTime;
end;

procedure TOperator.Set_WeekdayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_WeekdayPagerStartTime(pRetVal);
end;

function TOperator.Get_WeekdayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.WeekdayPagerEndTime;
end;

procedure TOperator.Set_WeekdayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_WeekdayPagerEndTime(pRetVal);
end;

function TOperator.Get_SaturdayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.SaturdayPagerStartTime;
end;

procedure TOperator.Set_SaturdayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SaturdayPagerStartTime(pRetVal);
end;

function TOperator.Get_SaturdayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.SaturdayPagerEndTime;
end;

procedure TOperator.Set_SaturdayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SaturdayPagerEndTime(pRetVal);
end;

function TOperator.Get_SundayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.SundayPagerStartTime;
end;

procedure TOperator.Set_SundayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SundayPagerStartTime(pRetVal);
end;

function TOperator.Get_SundayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.SundayPagerEndTime;
end;

procedure TOperator.Set_SundayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SundayPagerEndTime(pRetVal);
end;

function TOperator.Get_PagerDays: SQLDMO_WEEKDAY_TYPE;
begin
    Result := DefaultInterface.PagerDays;
end;

procedure TOperator.Set_PagerDays(pRetVal: SQLDMO_WEEKDAY_TYPE);
begin
  DefaultInterface.Set_PagerDays(pRetVal);
end;

function TOperator.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TOperator.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TOperator.Get_NetSendAddress: WideString;
begin
    Result := DefaultInterface.NetSendAddress;
end;

procedure TOperator.Set_NetSendAddress(const pRetVal: WideString);
  { Warning: The property NetSendAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetSendAddress := pRetVal;
end;

function TOperator.Get_LastNetSendDate: Integer;
begin
    Result := DefaultInterface.LastNetSendDate;
end;

function TOperator.Get_LastNetSendTime: Integer;
begin
    Result := DefaultInterface.LastNetSendTime;
end;

procedure TOperator.AddNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.AddNotification(AlertName, NotifyMethod);
end;

procedure TOperator.UpdateNotification(const AlertName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.UpdateNotification(AlertName, NotifyMethod);
end;

procedure TOperator.RemoveNotification(const AlertName: WideString);
begin
  DefaultInterface.RemoveNotification(AlertName);
end;

function TOperator.EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                                     AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumNotifications(NotifyMethod, AlertsToEnum, EmptyParam);
end;

function TOperator.EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                                     AlertsToEnum: SQLDMO_ENUMNOTIFY_TYPE; AlertName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumNotifications(NotifyMethod, AlertsToEnum, AlertName);
end;

procedure TOperator.Remove;
begin
  DefaultInterface.Remove(EmptyParam);
end;

procedure TOperator.Remove(NewName: OleVariant);
begin
  DefaultInterface.Remove(NewName);
end;

procedure TOperator.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TOperator.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TOperator.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TOperator.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TOperator.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                          Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TOperator.EnumJobNotifications: QueryResults;
begin
  Result := DefaultInterface.EnumJobNotifications;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOperatorProperties.Create(AServer: TOperator);
begin
  inherited Create;
  FServer := AServer;
end;

function TOperatorProperties.GetDefaultInterface: _Operator;
begin
  Result := FServer.DefaultInterface;
end;

function TOperatorProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TOperatorProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TOperatorProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TOperatorProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TOperatorProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TOperatorProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TOperatorProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TOperatorProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TOperatorProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TOperatorProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TOperatorProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TOperatorProperties.Get_EmailAddress: WideString;
begin
    Result := DefaultInterface.EmailAddress;
end;

procedure TOperatorProperties.Set_EmailAddress(const pRetVal: WideString);
  { Warning: The property EmailAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EmailAddress := pRetVal;
end;

function TOperatorProperties.Get_LastEmailDate: TDateTime;
begin
    Result := DefaultInterface.LastEmailDate;
end;

function TOperatorProperties.Get_PagerAddress: WideString;
begin
    Result := DefaultInterface.PagerAddress;
end;

procedure TOperatorProperties.Set_PagerAddress(const pRetVal: WideString);
  { Warning: The property PagerAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PagerAddress := pRetVal;
end;

function TOperatorProperties.Get_LastPageDate: TDateTime;
begin
    Result := DefaultInterface.LastPageDate;
end;

function TOperatorProperties.Get_WeekdayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.WeekdayPagerStartTime;
end;

procedure TOperatorProperties.Set_WeekdayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_WeekdayPagerStartTime(pRetVal);
end;

function TOperatorProperties.Get_WeekdayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.WeekdayPagerEndTime;
end;

procedure TOperatorProperties.Set_WeekdayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_WeekdayPagerEndTime(pRetVal);
end;

function TOperatorProperties.Get_SaturdayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.SaturdayPagerStartTime;
end;

procedure TOperatorProperties.Set_SaturdayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SaturdayPagerStartTime(pRetVal);
end;

function TOperatorProperties.Get_SaturdayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.SaturdayPagerEndTime;
end;

procedure TOperatorProperties.Set_SaturdayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SaturdayPagerEndTime(pRetVal);
end;

function TOperatorProperties.Get_SundayPagerStartTime: TDateTime;
begin
    Result := DefaultInterface.SundayPagerStartTime;
end;

procedure TOperatorProperties.Set_SundayPagerStartTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SundayPagerStartTime(pRetVal);
end;

function TOperatorProperties.Get_SundayPagerEndTime: TDateTime;
begin
    Result := DefaultInterface.SundayPagerEndTime;
end;

procedure TOperatorProperties.Set_SundayPagerEndTime(pRetVal: TDateTime);
begin
  DefaultInterface.Set_SundayPagerEndTime(pRetVal);
end;

function TOperatorProperties.Get_PagerDays: SQLDMO_WEEKDAY_TYPE;
begin
    Result := DefaultInterface.PagerDays;
end;

procedure TOperatorProperties.Set_PagerDays(pRetVal: SQLDMO_WEEKDAY_TYPE);
begin
  DefaultInterface.Set_PagerDays(pRetVal);
end;

function TOperatorProperties.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TOperatorProperties.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TOperatorProperties.Get_NetSendAddress: WideString;
begin
    Result := DefaultInterface.NetSendAddress;
end;

procedure TOperatorProperties.Set_NetSendAddress(const pRetVal: WideString);
  { Warning: The property NetSendAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NetSendAddress := pRetVal;
end;

function TOperatorProperties.Get_LastNetSendDate: Integer;
begin
    Result := DefaultInterface.LastNetSendDate;
end;

function TOperatorProperties.Get_LastNetSendTime: Integer;
begin
    Result := DefaultInterface.LastNetSendTime;
end;

{$ENDIF}

class function CoAlert.Create: _Alert;
begin
  Result := CreateComObject(CLASS_Alert) as _Alert;
end;

class function CoAlert.CreateRemote(const MachineName: string): _Alert;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Alert) as _Alert;
end;

procedure TAlert.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10040600-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10040606-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAlert.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Alert;
  end;
end;

procedure TAlert.ConnectTo(svrIntf: _Alert);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAlert.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAlert.GetDefaultInterface: _Alert;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAlert.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAlertProperties.Create(Self);
{$ENDIF}
end;

destructor TAlert.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAlert.GetServerProperties: TAlertProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAlert.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TAlert.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TAlert.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TAlert.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TAlert.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TAlert.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAlert.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAlert.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TAlert.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TAlert.Get_EventSource: WideString;
begin
    Result := DefaultInterface.EventSource;
end;

function TAlert.Get_EventCategoryID: Integer;
begin
    Result := DefaultInterface.EventCategoryID;
end;

function TAlert.Get_EventID: Integer;
begin
    Result := DefaultInterface.EventID;
end;

function TAlert.Get_MessageID: Integer;
begin
    Result := DefaultInterface.MessageID;
end;

procedure TAlert.Set_MessageID(pRetVal: Integer);
begin
  DefaultInterface.Set_MessageID(pRetVal);
end;

function TAlert.Get_Severity: Integer;
begin
    Result := DefaultInterface.Severity;
end;

procedure TAlert.Set_Severity(pRetVal: Integer);
begin
  DefaultInterface.Set_Severity(pRetVal);
end;

function TAlert.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TAlert.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TAlert.Get_DelayBetweenResponses: Integer;
begin
    Result := DefaultInterface.DelayBetweenResponses;
end;

procedure TAlert.Set_DelayBetweenResponses(pRetVal: Integer);
begin
  DefaultInterface.Set_DelayBetweenResponses(pRetVal);
end;

function TAlert.Get_LastOccurrenceDate: TDateTime;
begin
    Result := DefaultInterface.LastOccurrenceDate;
end;

procedure TAlert.Set_LastOccurrenceDate(pRetVal: TDateTime);
begin
  DefaultInterface.Set_LastOccurrenceDate(pRetVal);
end;

function TAlert.Get_LastResponseDate: TDateTime;
begin
    Result := DefaultInterface.LastResponseDate;
end;

procedure TAlert.Set_LastResponseDate(pRetVal: TDateTime);
begin
  DefaultInterface.Set_LastResponseDate(pRetVal);
end;

function TAlert.Get_NotificationMessage: WideString;
begin
    Result := DefaultInterface.NotificationMessage;
end;

procedure TAlert.Set_NotificationMessage(const pRetVal: WideString);
  { Warning: The property NotificationMessage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NotificationMessage := pRetVal;
end;

function TAlert.Get_IncludeEventDescription: SQLDMO_NOTIFY_TYPE;
begin
    Result := DefaultInterface.IncludeEventDescription;
end;

procedure TAlert.Set_IncludeEventDescription(pRetVal: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.Set_IncludeEventDescription(pRetVal);
end;

function TAlert.Get_DatabaseName: WideString;
begin
    Result := DefaultInterface.DatabaseName;
end;

procedure TAlert.Set_DatabaseName(const pRetVal: WideString);
  { Warning: The property DatabaseName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseName := pRetVal;
end;

function TAlert.Get_EventDescriptionKeyword: WideString;
begin
    Result := DefaultInterface.EventDescriptionKeyword;
end;

procedure TAlert.Set_EventDescriptionKeyword(const pRetVal: WideString);
  { Warning: The property EventDescriptionKeyword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EventDescriptionKeyword := pRetVal;
end;

function TAlert.Get_OccurrenceCount: Integer;
begin
    Result := DefaultInterface.OccurrenceCount;
end;

function TAlert.Get_CountResetDate: TDateTime;
begin
    Result := DefaultInterface.CountResetDate;
end;

function TAlert.Get_JobName: WideString;
begin
    Result := DefaultInterface.JobName;
end;

function TAlert.Get_HasNotification: Integer;
begin
    Result := DefaultInterface.HasNotification;
end;

function TAlert.Get_RaiseSNMPTrap: WordBool;
begin
    Result := DefaultInterface.RaiseSNMPTrap;
end;

procedure TAlert.Set_RaiseSNMPTrap(pRetVal: WordBool);
begin
  DefaultInterface.Set_RaiseSNMPTrap(pRetVal);
end;

function TAlert.Get_PerformanceCondition: WideString;
begin
    Result := DefaultInterface.PerformanceCondition;
end;

procedure TAlert.Set_PerformanceCondition(const pRetVal: WideString);
  { Warning: The property PerformanceCondition has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PerformanceCondition := pRetVal;
end;

function TAlert.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

procedure TAlert.Set_JobID(const pRetVal: WideString);
  { Warning: The property JobID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JobID := pRetVal;
end;

function TAlert.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TAlert.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TAlert.Get_type_: SQLDMO_ALERT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TAlert.AddNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.AddNotification(OperatorName, NotifyMethod);
end;

procedure TAlert.UpdateNotification(const OperatorName: WideString; NotifyMethod: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.UpdateNotification(OperatorName, NotifyMethod);
end;

procedure TAlert.RemoveNotification(const OperatorName: WideString);
begin
  DefaultInterface.RemoveNotification(OperatorName);
end;

function TAlert.EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                                  OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumNotifications(NotifyMethod, OperatorsToEnum, EmptyParam);
end;

function TAlert.EnumNotifications(NotifyMethod: SQLDMO_NOTIFY_TYPE; 
                                  OperatorsToEnum: SQLDMO_ENUMNOTIFY_TYPE; OperatorName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumNotifications(NotifyMethod, OperatorsToEnum, OperatorName);
end;

procedure TAlert.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TAlert.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TAlert.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TAlert.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TAlert.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TAlert.ResetOccurrenceCount;
begin
  DefaultInterface.ResetOccurrenceCount;
end;

function TAlert.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAlertProperties.Create(AServer: TAlert);
begin
  inherited Create;
  FServer := AServer;
end;

function TAlertProperties.GetDefaultInterface: _Alert;
begin
  Result := FServer.DefaultInterface;
end;

function TAlertProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TAlertProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TAlertProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TAlertProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TAlertProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TAlertProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAlertProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAlertProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TAlertProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TAlertProperties.Get_EventSource: WideString;
begin
    Result := DefaultInterface.EventSource;
end;

function TAlertProperties.Get_EventCategoryID: Integer;
begin
    Result := DefaultInterface.EventCategoryID;
end;

function TAlertProperties.Get_EventID: Integer;
begin
    Result := DefaultInterface.EventID;
end;

function TAlertProperties.Get_MessageID: Integer;
begin
    Result := DefaultInterface.MessageID;
end;

procedure TAlertProperties.Set_MessageID(pRetVal: Integer);
begin
  DefaultInterface.Set_MessageID(pRetVal);
end;

function TAlertProperties.Get_Severity: Integer;
begin
    Result := DefaultInterface.Severity;
end;

procedure TAlertProperties.Set_Severity(pRetVal: Integer);
begin
  DefaultInterface.Set_Severity(pRetVal);
end;

function TAlertProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TAlertProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TAlertProperties.Get_DelayBetweenResponses: Integer;
begin
    Result := DefaultInterface.DelayBetweenResponses;
end;

procedure TAlertProperties.Set_DelayBetweenResponses(pRetVal: Integer);
begin
  DefaultInterface.Set_DelayBetweenResponses(pRetVal);
end;

function TAlertProperties.Get_LastOccurrenceDate: TDateTime;
begin
    Result := DefaultInterface.LastOccurrenceDate;
end;

procedure TAlertProperties.Set_LastOccurrenceDate(pRetVal: TDateTime);
begin
  DefaultInterface.Set_LastOccurrenceDate(pRetVal);
end;

function TAlertProperties.Get_LastResponseDate: TDateTime;
begin
    Result := DefaultInterface.LastResponseDate;
end;

procedure TAlertProperties.Set_LastResponseDate(pRetVal: TDateTime);
begin
  DefaultInterface.Set_LastResponseDate(pRetVal);
end;

function TAlertProperties.Get_NotificationMessage: WideString;
begin
    Result := DefaultInterface.NotificationMessage;
end;

procedure TAlertProperties.Set_NotificationMessage(const pRetVal: WideString);
  { Warning: The property NotificationMessage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NotificationMessage := pRetVal;
end;

function TAlertProperties.Get_IncludeEventDescription: SQLDMO_NOTIFY_TYPE;
begin
    Result := DefaultInterface.IncludeEventDescription;
end;

procedure TAlertProperties.Set_IncludeEventDescription(pRetVal: SQLDMO_NOTIFY_TYPE);
begin
  DefaultInterface.Set_IncludeEventDescription(pRetVal);
end;

function TAlertProperties.Get_DatabaseName: WideString;
begin
    Result := DefaultInterface.DatabaseName;
end;

procedure TAlertProperties.Set_DatabaseName(const pRetVal: WideString);
  { Warning: The property DatabaseName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseName := pRetVal;
end;

function TAlertProperties.Get_EventDescriptionKeyword: WideString;
begin
    Result := DefaultInterface.EventDescriptionKeyword;
end;

procedure TAlertProperties.Set_EventDescriptionKeyword(const pRetVal: WideString);
  { Warning: The property EventDescriptionKeyword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EventDescriptionKeyword := pRetVal;
end;

function TAlertProperties.Get_OccurrenceCount: Integer;
begin
    Result := DefaultInterface.OccurrenceCount;
end;

function TAlertProperties.Get_CountResetDate: TDateTime;
begin
    Result := DefaultInterface.CountResetDate;
end;

function TAlertProperties.Get_JobName: WideString;
begin
    Result := DefaultInterface.JobName;
end;

function TAlertProperties.Get_HasNotification: Integer;
begin
    Result := DefaultInterface.HasNotification;
end;

function TAlertProperties.Get_RaiseSNMPTrap: WordBool;
begin
    Result := DefaultInterface.RaiseSNMPTrap;
end;

procedure TAlertProperties.Set_RaiseSNMPTrap(pRetVal: WordBool);
begin
  DefaultInterface.Set_RaiseSNMPTrap(pRetVal);
end;

function TAlertProperties.Get_PerformanceCondition: WideString;
begin
    Result := DefaultInterface.PerformanceCondition;
end;

procedure TAlertProperties.Set_PerformanceCondition(const pRetVal: WideString);
  { Warning: The property PerformanceCondition has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PerformanceCondition := pRetVal;
end;

function TAlertProperties.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

procedure TAlertProperties.Set_JobID(const pRetVal: WideString);
  { Warning: The property JobID has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JobID := pRetVal;
end;

function TAlertProperties.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TAlertProperties.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TAlertProperties.Get_type_: SQLDMO_ALERT_TYPE;
begin
    Result := DefaultInterface.type_;
end;

{$ENDIF}

class function CoJob.Create: _Job;
begin
  Result := CreateComObject(CLASS_Job) as _Job;
end;

class function CoJob.CreateRemote(const MachineName: string): _Job;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Job) as _Job;
end;

procedure TJob.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10040800-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10040806-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJob.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Job;
  end;
end;

procedure TJob.ConnectTo(svrIntf: _Job);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJob.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJob.GetDefaultInterface: _Job;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJob.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobProperties.Create(Self);
{$ENDIF}
end;

destructor TJob.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJob.GetServerProperties: TJobProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJob.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJob.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJob.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJob.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJob.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJob.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJob.Get_JobSteps: JobSteps;
begin
    Result := DefaultInterface.JobSteps;
end;

function TJob.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

function TJob.Get_OriginatingServer: WideString;
begin
    Result := DefaultInterface.OriginatingServer;
end;

function TJob.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJob.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJob.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TJob.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TJob.Get_StartStepID: Integer;
begin
    Result := DefaultInterface.StartStepID;
end;

procedure TJob.Set_StartStepID(pRetVal: Integer);
begin
  DefaultInterface.Set_StartStepID(pRetVal);
end;

function TJob.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJob.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TJob.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TJob.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TJob.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TJob.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TJob.Get_EventlogLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.EventlogLevel;
end;

procedure TJob.Set_EventlogLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_EventlogLevel(pRetVal);
end;

function TJob.Get_EmailLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.EmailLevel;
end;

procedure TJob.Set_EmailLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_EmailLevel(pRetVal);
end;

function TJob.Get_OperatorToEmail: WideString;
begin
    Result := DefaultInterface.OperatorToEmail;
end;

procedure TJob.Set_OperatorToEmail(const pRetVal: WideString);
  { Warning: The property OperatorToEmail has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToEmail := pRetVal;
end;

function TJob.Get_DateCreated: WideString;
begin
    Result := DefaultInterface.DateCreated;
end;

function TJob.Get_DateLastModified: WideString;
begin
    Result := DefaultInterface.DateLastModified;
end;

function TJob.Get_LastRunDate: Integer;
begin
    Result := DefaultInterface.LastRunDate;
end;

function TJob.Get_LastRunTime: Integer;
begin
    Result := DefaultInterface.LastRunTime;
end;

function TJob.Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
begin
    Result := DefaultInterface.LastRunOutcome;
end;

function TJob.Get_CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS;
begin
    Result := DefaultInterface.CurrentRunStatus;
end;

function TJob.Get_CurrentRunStep: WideString;
begin
    Result := DefaultInterface.CurrentRunStep;
end;

function TJob.Get_NetSendLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.NetSendLevel;
end;

procedure TJob.Set_NetSendLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_NetSendLevel(pRetVal);
end;

function TJob.Get_DeleteLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.DeleteLevel;
end;

procedure TJob.Set_DeleteLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_DeleteLevel(pRetVal);
end;

function TJob.Get_HasStep: WordBool;
begin
    Result := DefaultInterface.HasStep;
end;

function TJob.Get_HasServer: WordBool;
begin
    Result := DefaultInterface.HasServer;
end;

function TJob.Get_type_: SQLDMO_JOB_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TJob.Get_JobSchedules: JobSchedules;
begin
    Result := DefaultInterface.JobSchedules;
end;

function TJob.Get_HasSchedule: WordBool;
begin
    Result := DefaultInterface.HasSchedule;
end;

function TJob.Get_VersionNumber: Integer;
begin
    Result := DefaultInterface.VersionNumber;
end;

function TJob.Get_NextRunDate: Integer;
begin
    Result := DefaultInterface.NextRunDate;
end;

function TJob.Get_NextRunTime: Integer;
begin
    Result := DefaultInterface.NextRunTime;
end;

function TJob.Get_CurrentRunRetryAttempt: Integer;
begin
    Result := DefaultInterface.CurrentRunRetryAttempt;
end;

function TJob.Get_NextRunScheduleID: Integer;
begin
    Result := DefaultInterface.NextRunScheduleID;
end;

function TJob.Get_PageLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.PageLevel;
end;

procedure TJob.Set_PageLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_PageLevel(pRetVal);
end;

function TJob.Get_OperatorToNetSend: WideString;
begin
    Result := DefaultInterface.OperatorToNetSend;
end;

procedure TJob.Set_OperatorToNetSend(const pRetVal: WideString);
  { Warning: The property OperatorToNetSend has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToNetSend := pRetVal;
end;

function TJob.Get_OperatorToPage: WideString;
begin
    Result := DefaultInterface.OperatorToPage;
end;

procedure TJob.Set_OperatorToPage(const pRetVal: WideString);
  { Warning: The property OperatorToPage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToPage := pRetVal;
end;

procedure TJob.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TJob.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TJob.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TJob.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TJob.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TJob.ApplyToTargetServer(const Val: WideString);
begin
  DefaultInterface.ApplyToTargetServer(Val);
end;

procedure TJob.RemoveFromTargetServer(const Val: WideString);
begin
  DefaultInterface.RemoveFromTargetServer(Val);
end;

function TJob.EnumTargetServers: QueryResults;
begin
  Result := DefaultInterface.EnumTargetServers;
end;

procedure TJob.ApplyToTargetServerGroup(const Val: WideString);
begin
  DefaultInterface.ApplyToTargetServerGroup(Val);
end;

function TJob.EnumHistory: QueryResults;
begin
  Result := DefaultInterface.EnumHistory(EmptyParam);
end;

function TJob.EnumHistory(JobHistoryFilter: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumHistory(JobHistoryFilter);
end;

procedure TJob.PurgeHistory;
begin
  DefaultInterface.PurgeHistory;
end;

procedure TJob.Invoke_;
begin
  DefaultInterface.Invoke_;
end;

procedure TJob.AddStepToJob(const JobStep: JobStep);
begin
  DefaultInterface.AddStepToJob(JobStep);
end;

procedure TJob.RemoveFromTargetServerGroup(const Val: WideString);
begin
  DefaultInterface.RemoveFromTargetServerGroup(Val);
end;

procedure TJob.RemoveAllJobSteps;
begin
  DefaultInterface.RemoveAllJobSteps;
end;

procedure TJob.Start;
begin
  DefaultInterface.Start(EmptyParam);
end;

procedure TJob.Start(Val: OleVariant);
begin
  DefaultInterface.Start(Val);
end;

procedure TJob.Stop;
begin
  DefaultInterface.Stop;
end;

procedure TJob.RemoveAllJobSchedules;
begin
  DefaultInterface.RemoveAllJobSchedules;
end;

function TJob.EnumAlerts: QueryResults;
begin
  Result := DefaultInterface.EnumAlerts;
end;

function TJob.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                     Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobProperties.Create(AServer: TJob);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobProperties.GetDefaultInterface: _Job;
begin
  Result := FServer.DefaultInterface;
end;

function TJobProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJobProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJobProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJobProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJobProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJobProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJobProperties.Get_JobSteps: JobSteps;
begin
    Result := DefaultInterface.JobSteps;
end;

function TJobProperties.Get_JobID: WideString;
begin
    Result := DefaultInterface.JobID;
end;

function TJobProperties.Get_OriginatingServer: WideString;
begin
    Result := DefaultInterface.OriginatingServer;
end;

function TJobProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJobProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJobProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TJobProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TJobProperties.Get_StartStepID: Integer;
begin
    Result := DefaultInterface.StartStepID;
end;

procedure TJobProperties.Set_StartStepID(pRetVal: Integer);
begin
  DefaultInterface.Set_StartStepID(pRetVal);
end;

function TJobProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TJobProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TJobProperties.Get_Category: WideString;
begin
    Result := DefaultInterface.Category;
end;

procedure TJobProperties.Set_Category(const pRetVal: WideString);
  { Warning: The property Category has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Category := pRetVal;
end;

function TJobProperties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TJobProperties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TJobProperties.Get_EventlogLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.EventlogLevel;
end;

procedure TJobProperties.Set_EventlogLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_EventlogLevel(pRetVal);
end;

function TJobProperties.Get_EmailLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.EmailLevel;
end;

procedure TJobProperties.Set_EmailLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_EmailLevel(pRetVal);
end;

function TJobProperties.Get_OperatorToEmail: WideString;
begin
    Result := DefaultInterface.OperatorToEmail;
end;

procedure TJobProperties.Set_OperatorToEmail(const pRetVal: WideString);
  { Warning: The property OperatorToEmail has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToEmail := pRetVal;
end;

function TJobProperties.Get_DateCreated: WideString;
begin
    Result := DefaultInterface.DateCreated;
end;

function TJobProperties.Get_DateLastModified: WideString;
begin
    Result := DefaultInterface.DateLastModified;
end;

function TJobProperties.Get_LastRunDate: Integer;
begin
    Result := DefaultInterface.LastRunDate;
end;

function TJobProperties.Get_LastRunTime: Integer;
begin
    Result := DefaultInterface.LastRunTime;
end;

function TJobProperties.Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
begin
    Result := DefaultInterface.LastRunOutcome;
end;

function TJobProperties.Get_CurrentRunStatus: SQLDMO_JOBEXECUTION_STATUS;
begin
    Result := DefaultInterface.CurrentRunStatus;
end;

function TJobProperties.Get_CurrentRunStep: WideString;
begin
    Result := DefaultInterface.CurrentRunStep;
end;

function TJobProperties.Get_NetSendLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.NetSendLevel;
end;

procedure TJobProperties.Set_NetSendLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_NetSendLevel(pRetVal);
end;

function TJobProperties.Get_DeleteLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.DeleteLevel;
end;

procedure TJobProperties.Set_DeleteLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_DeleteLevel(pRetVal);
end;

function TJobProperties.Get_HasStep: WordBool;
begin
    Result := DefaultInterface.HasStep;
end;

function TJobProperties.Get_HasServer: WordBool;
begin
    Result := DefaultInterface.HasServer;
end;

function TJobProperties.Get_type_: SQLDMO_JOB_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TJobProperties.Get_JobSchedules: JobSchedules;
begin
    Result := DefaultInterface.JobSchedules;
end;

function TJobProperties.Get_HasSchedule: WordBool;
begin
    Result := DefaultInterface.HasSchedule;
end;

function TJobProperties.Get_VersionNumber: Integer;
begin
    Result := DefaultInterface.VersionNumber;
end;

function TJobProperties.Get_NextRunDate: Integer;
begin
    Result := DefaultInterface.NextRunDate;
end;

function TJobProperties.Get_NextRunTime: Integer;
begin
    Result := DefaultInterface.NextRunTime;
end;

function TJobProperties.Get_CurrentRunRetryAttempt: Integer;
begin
    Result := DefaultInterface.CurrentRunRetryAttempt;
end;

function TJobProperties.Get_NextRunScheduleID: Integer;
begin
    Result := DefaultInterface.NextRunScheduleID;
end;

function TJobProperties.Get_PageLevel: SQLDMO_COMPLETION_TYPE;
begin
    Result := DefaultInterface.PageLevel;
end;

procedure TJobProperties.Set_PageLevel(pRetVal: SQLDMO_COMPLETION_TYPE);
begin
  DefaultInterface.Set_PageLevel(pRetVal);
end;

function TJobProperties.Get_OperatorToNetSend: WideString;
begin
    Result := DefaultInterface.OperatorToNetSend;
end;

procedure TJobProperties.Set_OperatorToNetSend(const pRetVal: WideString);
  { Warning: The property OperatorToNetSend has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToNetSend := pRetVal;
end;

function TJobProperties.Get_OperatorToPage: WideString;
begin
    Result := DefaultInterface.OperatorToPage;
end;

procedure TJobProperties.Set_OperatorToPage(const pRetVal: WideString);
  { Warning: The property OperatorToPage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OperatorToPage := pRetVal;
end;

{$ENDIF}

class function CoJobStep.Create: _JobStep;
begin
  Result := CreateComObject(CLASS_JobStep) as _JobStep;
end;

class function CoJobStep.CreateRemote(const MachineName: string): _JobStep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JobStep) as _JobStep;
end;

procedure TJobStep.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10040900-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10040906-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJobStep.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JobStep;
  end;
end;

procedure TJobStep.ConnectTo(svrIntf: _JobStep);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJobStep.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJobStep.GetDefaultInterface: _JobStep;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJobStep.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobStepProperties.Create(Self);
{$ENDIF}
end;

destructor TJobStep.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJobStep.GetServerProperties: TJobStepProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJobStep.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJobStep.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJobStep.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJobStep.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJobStep.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJobStep.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJobStep.Get_StepID: Integer;
begin
    Result := DefaultInterface.StepID;
end;

procedure TJobStep.Set_StepID(pRetVal: Integer);
begin
  DefaultInterface.Set_StepID(pRetVal);
end;

function TJobStep.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJobStep.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJobStep.Get_SubSystem: WideString;
begin
    Result := DefaultInterface.SubSystem;
end;

procedure TJobStep.Set_SubSystem(const pRetVal: WideString);
  { Warning: The property SubSystem has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubSystem := pRetVal;
end;

function TJobStep.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TJobStep.Set_Command(const pRetVal: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := pRetVal;
end;

function TJobStep.Get_Flags: Integer;
begin
    Result := DefaultInterface.Flags;
end;

procedure TJobStep.Set_Flags(pRetVal: Integer);
begin
  DefaultInterface.Set_Flags(pRetVal);
end;

function TJobStep.Get_AdditionalParameters: WideString;
begin
    Result := DefaultInterface.AdditionalParameters;
end;

procedure TJobStep.Set_AdditionalParameters(const pRetVal: WideString);
  { Warning: The property AdditionalParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdditionalParameters := pRetVal;
end;

function TJobStep.Get_CmdExecSuccessCode: Integer;
begin
    Result := DefaultInterface.CmdExecSuccessCode;
end;

procedure TJobStep.Set_CmdExecSuccessCode(pRetVal: Integer);
begin
  DefaultInterface.Set_CmdExecSuccessCode(pRetVal);
end;

function TJobStep.Get_OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE;
begin
    Result := DefaultInterface.OnSuccessAction;
end;

procedure TJobStep.Set_OnSuccessAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
begin
  DefaultInterface.Set_OnSuccessAction(pRetVal);
end;

function TJobStep.Get_OnSuccessStep: Integer;
begin
    Result := DefaultInterface.OnSuccessStep;
end;

procedure TJobStep.Set_OnSuccessStep(pRetVal: Integer);
begin
  DefaultInterface.Set_OnSuccessStep(pRetVal);
end;

function TJobStep.Get_OnFailAction: SQLDMO_JOBSTEPACTION_TYPE;
begin
    Result := DefaultInterface.OnFailAction;
end;

procedure TJobStep.Set_OnFailAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
begin
  DefaultInterface.Set_OnFailAction(pRetVal);
end;

function TJobStep.Get_OnFailStep: Integer;
begin
    Result := DefaultInterface.OnFailStep;
end;

procedure TJobStep.Set_OnFailStep(pRetVal: Integer);
begin
  DefaultInterface.Set_OnFailStep(pRetVal);
end;

function TJobStep.Get_Server: WideString;
begin
    Result := DefaultInterface.Server;
end;

procedure TJobStep.Set_Server(const pRetVal: WideString);
  { Warning: The property Server has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Server := pRetVal;
end;

function TJobStep.Get_DatabaseName: WideString;
begin
    Result := DefaultInterface.DatabaseName;
end;

procedure TJobStep.Set_DatabaseName(const pRetVal: WideString);
  { Warning: The property DatabaseName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseName := pRetVal;
end;

function TJobStep.Get_DatabaseUserName: WideString;
begin
    Result := DefaultInterface.DatabaseUserName;
end;

procedure TJobStep.Set_DatabaseUserName(const pRetVal: WideString);
  { Warning: The property DatabaseUserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseUserName := pRetVal;
end;

function TJobStep.Get_RetryAttempts: Integer;
begin
    Result := DefaultInterface.RetryAttempts;
end;

procedure TJobStep.Set_RetryAttempts(pRetVal: Integer);
begin
  DefaultInterface.Set_RetryAttempts(pRetVal);
end;

function TJobStep.Get_RetryInterval: Integer;
begin
    Result := DefaultInterface.RetryInterval;
end;

procedure TJobStep.Set_RetryInterval(pRetVal: Integer);
begin
  DefaultInterface.Set_RetryInterval(pRetVal);
end;

function TJobStep.Get_OSRunPriority: SQLDMO_RUNPRIORITY_TYPE;
begin
    Result := DefaultInterface.OSRunPriority;
end;

procedure TJobStep.Set_OSRunPriority(pRetVal: SQLDMO_RUNPRIORITY_TYPE);
begin
  DefaultInterface.Set_OSRunPriority(pRetVal);
end;

function TJobStep.Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
begin
    Result := DefaultInterface.LastRunOutcome;
end;

function TJobStep.Get_LastRunDuration: Integer;
begin
    Result := DefaultInterface.LastRunDuration;
end;

function TJobStep.Get_LastRunRetries: Integer;
begin
    Result := DefaultInterface.LastRunRetries;
end;

function TJobStep.Get_LastRunDate: Integer;
begin
    Result := DefaultInterface.LastRunDate;
end;

function TJobStep.Get_LastRunTime: Integer;
begin
    Result := DefaultInterface.LastRunTime;
end;

function TJobStep.Get_OutputFileName: WideString;
begin
    Result := DefaultInterface.OutputFileName;
end;

procedure TJobStep.Set_OutputFileName(const pRetVal: WideString);
  { Warning: The property OutputFileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OutputFileName := pRetVal;
end;

procedure TJobStep.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TJobStep.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TJobStep.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TJobStep.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TJobStep.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobStepProperties.Create(AServer: TJobStep);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobStepProperties.GetDefaultInterface: _JobStep;
begin
  Result := FServer.DefaultInterface;
end;

function TJobStepProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJobStepProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJobStepProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJobStepProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJobStepProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJobStepProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJobStepProperties.Get_StepID: Integer;
begin
    Result := DefaultInterface.StepID;
end;

procedure TJobStepProperties.Set_StepID(pRetVal: Integer);
begin
  DefaultInterface.Set_StepID(pRetVal);
end;

function TJobStepProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJobStepProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJobStepProperties.Get_SubSystem: WideString;
begin
    Result := DefaultInterface.SubSystem;
end;

procedure TJobStepProperties.Set_SubSystem(const pRetVal: WideString);
  { Warning: The property SubSystem has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubSystem := pRetVal;
end;

function TJobStepProperties.Get_Command: WideString;
begin
    Result := DefaultInterface.Command;
end;

procedure TJobStepProperties.Set_Command(const pRetVal: WideString);
  { Warning: The property Command has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Command := pRetVal;
end;

function TJobStepProperties.Get_Flags: Integer;
begin
    Result := DefaultInterface.Flags;
end;

procedure TJobStepProperties.Set_Flags(pRetVal: Integer);
begin
  DefaultInterface.Set_Flags(pRetVal);
end;

function TJobStepProperties.Get_AdditionalParameters: WideString;
begin
    Result := DefaultInterface.AdditionalParameters;
end;

procedure TJobStepProperties.Set_AdditionalParameters(const pRetVal: WideString);
  { Warning: The property AdditionalParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AdditionalParameters := pRetVal;
end;

function TJobStepProperties.Get_CmdExecSuccessCode: Integer;
begin
    Result := DefaultInterface.CmdExecSuccessCode;
end;

procedure TJobStepProperties.Set_CmdExecSuccessCode(pRetVal: Integer);
begin
  DefaultInterface.Set_CmdExecSuccessCode(pRetVal);
end;

function TJobStepProperties.Get_OnSuccessAction: SQLDMO_JOBSTEPACTION_TYPE;
begin
    Result := DefaultInterface.OnSuccessAction;
end;

procedure TJobStepProperties.Set_OnSuccessAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
begin
  DefaultInterface.Set_OnSuccessAction(pRetVal);
end;

function TJobStepProperties.Get_OnSuccessStep: Integer;
begin
    Result := DefaultInterface.OnSuccessStep;
end;

procedure TJobStepProperties.Set_OnSuccessStep(pRetVal: Integer);
begin
  DefaultInterface.Set_OnSuccessStep(pRetVal);
end;

function TJobStepProperties.Get_OnFailAction: SQLDMO_JOBSTEPACTION_TYPE;
begin
    Result := DefaultInterface.OnFailAction;
end;

procedure TJobStepProperties.Set_OnFailAction(pRetVal: SQLDMO_JOBSTEPACTION_TYPE);
begin
  DefaultInterface.Set_OnFailAction(pRetVal);
end;

function TJobStepProperties.Get_OnFailStep: Integer;
begin
    Result := DefaultInterface.OnFailStep;
end;

procedure TJobStepProperties.Set_OnFailStep(pRetVal: Integer);
begin
  DefaultInterface.Set_OnFailStep(pRetVal);
end;

function TJobStepProperties.Get_Server: WideString;
begin
    Result := DefaultInterface.Server;
end;

procedure TJobStepProperties.Set_Server(const pRetVal: WideString);
  { Warning: The property Server has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Server := pRetVal;
end;

function TJobStepProperties.Get_DatabaseName: WideString;
begin
    Result := DefaultInterface.DatabaseName;
end;

procedure TJobStepProperties.Set_DatabaseName(const pRetVal: WideString);
  { Warning: The property DatabaseName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseName := pRetVal;
end;

function TJobStepProperties.Get_DatabaseUserName: WideString;
begin
    Result := DefaultInterface.DatabaseUserName;
end;

procedure TJobStepProperties.Set_DatabaseUserName(const pRetVal: WideString);
  { Warning: The property DatabaseUserName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseUserName := pRetVal;
end;

function TJobStepProperties.Get_RetryAttempts: Integer;
begin
    Result := DefaultInterface.RetryAttempts;
end;

procedure TJobStepProperties.Set_RetryAttempts(pRetVal: Integer);
begin
  DefaultInterface.Set_RetryAttempts(pRetVal);
end;

function TJobStepProperties.Get_RetryInterval: Integer;
begin
    Result := DefaultInterface.RetryInterval;
end;

procedure TJobStepProperties.Set_RetryInterval(pRetVal: Integer);
begin
  DefaultInterface.Set_RetryInterval(pRetVal);
end;

function TJobStepProperties.Get_OSRunPriority: SQLDMO_RUNPRIORITY_TYPE;
begin
    Result := DefaultInterface.OSRunPriority;
end;

procedure TJobStepProperties.Set_OSRunPriority(pRetVal: SQLDMO_RUNPRIORITY_TYPE);
begin
  DefaultInterface.Set_OSRunPriority(pRetVal);
end;

function TJobStepProperties.Get_LastRunOutcome: SQLDMO_JOBOUTCOME_TYPE;
begin
    Result := DefaultInterface.LastRunOutcome;
end;

function TJobStepProperties.Get_LastRunDuration: Integer;
begin
    Result := DefaultInterface.LastRunDuration;
end;

function TJobStepProperties.Get_LastRunRetries: Integer;
begin
    Result := DefaultInterface.LastRunRetries;
end;

function TJobStepProperties.Get_LastRunDate: Integer;
begin
    Result := DefaultInterface.LastRunDate;
end;

function TJobStepProperties.Get_LastRunTime: Integer;
begin
    Result := DefaultInterface.LastRunTime;
end;

function TJobStepProperties.Get_OutputFileName: WideString;
begin
    Result := DefaultInterface.OutputFileName;
end;

procedure TJobStepProperties.Set_OutputFileName(const pRetVal: WideString);
  { Warning: The property OutputFileName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OutputFileName := pRetVal;
end;

{$ENDIF}

class function CoJobSchedule.Create: _JobSchedule;
begin
  Result := CreateComObject(CLASS_JobSchedule) as _JobSchedule;
end;

class function CoJobSchedule.CreateRemote(const MachineName: string): _JobSchedule;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JobSchedule) as _JobSchedule;
end;

procedure TJobSchedule.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10041600-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10041606-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TJobSchedule.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _JobSchedule;
  end;
end;

procedure TJobSchedule.ConnectTo(svrIntf: _JobSchedule);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TJobSchedule.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TJobSchedule.GetDefaultInterface: _JobSchedule;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TJobSchedule.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TJobScheduleProperties.Create(Self);
{$ENDIF}
end;

destructor TJobSchedule.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TJobSchedule.GetServerProperties: TJobScheduleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TJobSchedule.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJobSchedule.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJobSchedule.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJobSchedule.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJobSchedule.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJobSchedule.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJobSchedule.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJobSchedule.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJobSchedule.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TJobSchedule.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TJobSchedule.Get_Schedule: Schedule;
begin
    Result := DefaultInterface.Schedule;
end;

function TJobSchedule.Get_DateCreated: WideString;
begin
    Result := DefaultInterface.DateCreated;
end;

function TJobSchedule.Get_ScheduleID: Integer;
begin
    Result := DefaultInterface.ScheduleID;
end;

procedure TJobSchedule.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TJobSchedule.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TJobSchedule.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TJobSchedule.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TJobSchedule.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TJobScheduleProperties.Create(AServer: TJobSchedule);
begin
  inherited Create;
  FServer := AServer;
end;

function TJobScheduleProperties.GetDefaultInterface: _JobSchedule;
begin
  Result := FServer.DefaultInterface;
end;

function TJobScheduleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TJobScheduleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TJobScheduleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TJobScheduleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TJobScheduleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TJobScheduleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TJobScheduleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TJobScheduleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TJobScheduleProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TJobScheduleProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TJobScheduleProperties.Get_Schedule: Schedule;
begin
    Result := DefaultInterface.Schedule;
end;

function TJobScheduleProperties.Get_DateCreated: WideString;
begin
    Result := DefaultInterface.DateCreated;
end;

function TJobScheduleProperties.Get_ScheduleID: Integer;
begin
    Result := DefaultInterface.ScheduleID;
end;

{$ENDIF}

class function CoTargetServer.Create: _TargetServer;
begin
  Result := CreateComObject(CLASS_TargetServer) as _TargetServer;
end;

class function CoTargetServer.CreateRemote(const MachineName: string): _TargetServer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TargetServer) as _TargetServer;
end;

procedure TTargetServer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10041000-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10041006-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTargetServer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TargetServer;
  end;
end;

procedure TTargetServer.ConnectTo(svrIntf: _TargetServer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTargetServer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTargetServer.GetDefaultInterface: _TargetServer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTargetServer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTargetServerProperties.Create(Self);
{$ENDIF}
end;

destructor TTargetServer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTargetServer.GetServerProperties: TTargetServerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTargetServer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTargetServer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTargetServer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTargetServer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTargetServer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTargetServer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTargetServer.Get_ServerID: Integer;
begin
    Result := DefaultInterface.ServerID;
end;

function TTargetServer.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

function TTargetServer.Get_EnlistDate: WideString;
begin
    Result := DefaultInterface.EnlistDate;
end;

function TTargetServer.Get_LastPollDate: WideString;
begin
    Result := DefaultInterface.LastPollDate;
end;

function TTargetServer.Get_Status: Integer;
begin
    Result := DefaultInterface.Status;
end;

function TTargetServer.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TTargetServer.Set_Location(const pRetVal: WideString);
  { Warning: The property Location has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Location := pRetVal;
end;

function TTargetServer.Get_TimeZoneAdjustment: Integer;
begin
    Result := DefaultInterface.TimeZoneAdjustment;
end;

function TTargetServer.Get_PendingInstructions: Integer;
begin
    Result := DefaultInterface.PendingInstructions;
end;

function TTargetServer.Get_LocalTime: WideString;
begin
    Result := DefaultInterface.LocalTime;
end;

function TTargetServer.Get_PollingInterval: Integer;
begin
    Result := DefaultInterface.PollingInterval;
end;

procedure TTargetServer.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTargetServerProperties.Create(AServer: TTargetServer);
begin
  inherited Create;
  FServer := AServer;
end;

function TTargetServerProperties.GetDefaultInterface: _TargetServer;
begin
  Result := FServer.DefaultInterface;
end;

function TTargetServerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTargetServerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTargetServerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTargetServerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTargetServerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTargetServerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTargetServerProperties.Get_ServerID: Integer;
begin
    Result := DefaultInterface.ServerID;
end;

function TTargetServerProperties.Get_ServerName: WideString;
begin
    Result := DefaultInterface.ServerName;
end;

function TTargetServerProperties.Get_EnlistDate: WideString;
begin
    Result := DefaultInterface.EnlistDate;
end;

function TTargetServerProperties.Get_LastPollDate: WideString;
begin
    Result := DefaultInterface.LastPollDate;
end;

function TTargetServerProperties.Get_Status: Integer;
begin
    Result := DefaultInterface.Status;
end;

function TTargetServerProperties.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TTargetServerProperties.Set_Location(const pRetVal: WideString);
  { Warning: The property Location has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Location := pRetVal;
end;

function TTargetServerProperties.Get_TimeZoneAdjustment: Integer;
begin
    Result := DefaultInterface.TimeZoneAdjustment;
end;

function TTargetServerProperties.Get_PendingInstructions: Integer;
begin
    Result := DefaultInterface.PendingInstructions;
end;

function TTargetServerProperties.Get_LocalTime: WideString;
begin
    Result := DefaultInterface.LocalTime;
end;

function TTargetServerProperties.Get_PollingInterval: Integer;
begin
    Result := DefaultInterface.PollingInterval;
end;

{$ENDIF}

class function CoTargetServerGroup.Create: _TargetServerGroup;
begin
  Result := CreateComObject(CLASS_TargetServerGroup) as _TargetServerGroup;
end;

class function CoTargetServerGroup.CreateRemote(const MachineName: string): _TargetServerGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TargetServerGroup) as _TargetServerGroup;
end;

procedure TTargetServerGroup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10041100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10041106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTargetServerGroup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TargetServerGroup;
  end;
end;

procedure TTargetServerGroup.ConnectTo(svrIntf: _TargetServerGroup);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTargetServerGroup.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTargetServerGroup.GetDefaultInterface: _TargetServerGroup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTargetServerGroup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTargetServerGroupProperties.Create(Self);
{$ENDIF}
end;

destructor TTargetServerGroup.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTargetServerGroup.GetServerProperties: TTargetServerGroupProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTargetServerGroup.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTargetServerGroup.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTargetServerGroup.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTargetServerGroup.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTargetServerGroup.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTargetServerGroup.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTargetServerGroup.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTargetServerGroup.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTargetServerGroup.Get_GroupID: Integer;
begin
    Result := DefaultInterface.GroupID;
end;

procedure TTargetServerGroup.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TTargetServerGroup.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTargetServerGroup.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTargetServerGroup.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TTargetServerGroup.Refresh;
begin
  DefaultInterface.Refresh;
end;

function TTargetServerGroup.ListMemberServers: NameList;
begin
  Result := DefaultInterface.ListMemberServers;
end;

procedure TTargetServerGroup.AddMemberServer(const Val: WideString);
begin
  DefaultInterface.AddMemberServer(Val);
end;

procedure TTargetServerGroup.RemoveMemberServer(const Val: WideString);
begin
  DefaultInterface.RemoveMemberServer(Val);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTargetServerGroupProperties.Create(AServer: TTargetServerGroup);
begin
  inherited Create;
  FServer := AServer;
end;

function TTargetServerGroupProperties.GetDefaultInterface: _TargetServerGroup;
begin
  Result := FServer.DefaultInterface;
end;

function TTargetServerGroupProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTargetServerGroupProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTargetServerGroupProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTargetServerGroupProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTargetServerGroupProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTargetServerGroupProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTargetServerGroupProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTargetServerGroupProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTargetServerGroupProperties.Get_GroupID: Integer;
begin
    Result := DefaultInterface.GroupID;
end;

{$ENDIF}

class function CoCategory.Create: _Category;
begin
  Result := CreateComObject(CLASS_Category) as _Category;
end;

class function CoCategory.CreateRemote(const MachineName: string): _Category;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Category) as _Category;
end;

procedure TCategory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10041500-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10041512-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCategory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Category;
  end;
end;

procedure TCategory.ConnectTo(svrIntf: _Category);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCategory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCategory.GetDefaultInterface: _Category;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCategory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCategoryProperties.Create(Self);
{$ENDIF}
end;

destructor TCategory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCategory.GetServerProperties: TCategoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCategory.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TCategory.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TCategory.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TCategory.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TCategory.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TCategory.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TCategory.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCategory.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TCategory.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TCategory.Get_type_: SQLDMO_CATEGORYTYPE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TCategory.Set_type_(pRetVal: SQLDMO_CATEGORYTYPE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

procedure TCategory.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TCategory.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TCategory.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TCategory.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TCategory.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCategoryProperties.Create(AServer: TCategory);
begin
  inherited Create;
  FServer := AServer;
end;

function TCategoryProperties.GetDefaultInterface: _Category;
begin
  Result := FServer.DefaultInterface;
end;

function TCategoryProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TCategoryProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TCategoryProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TCategoryProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TCategoryProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TCategoryProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TCategoryProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCategoryProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TCategoryProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TCategoryProperties.Get_type_: SQLDMO_CATEGORYTYPE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TCategoryProperties.Set_type_(pRetVal: SQLDMO_CATEGORYTYPE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

{$ENDIF}

class function CoRestore.Create: _Restore;
begin
  Result := CreateComObject(CLASS_Restore) as _Restore;
end;

class function CoRestore.CreateRemote(const MachineName: string): _Restore;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Restore) as _Restore;
end;

procedure TRestore.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023200-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023203-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10023206-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRestore.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Restore;
  end;
end;

procedure TRestore.ConnectTo(svrIntf: _Restore);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TRestore.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TRestore.GetDefaultInterface: _Restore;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRestore.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRestoreProperties.Create(Self);
{$ENDIF}
end;

destructor TRestore.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRestore.GetServerProperties: TRestoreProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TRestore.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnNextMedia) then
         FOnNextMedia(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnComplete) then
         FOnComplete(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TRestore.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRestore.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRestore.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRestore.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRestore.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRestore.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRestore.Get_PercentCompleteNotification: Integer;
begin
    Result := DefaultInterface.PercentCompleteNotification;
end;

procedure TRestore.Set_PercentCompleteNotification(pRetVal: Integer);
begin
  DefaultInterface.Set_PercentCompleteNotification(pRetVal);
end;

function TRestore.Get_UnloadTapeAfter: WordBool;
begin
    Result := DefaultInterface.UnloadTapeAfter;
end;

procedure TRestore.Set_UnloadTapeAfter(pRetVal: WordBool);
begin
  DefaultInterface.Set_UnloadTapeAfter(pRetVal);
end;

function TRestore.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TRestore.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TRestore.Get_Devices: WideString;
begin
    Result := DefaultInterface.Devices;
end;

procedure TRestore.Set_Devices(const pRetVal: WideString);
  { Warning: The property Devices has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Devices := pRetVal;
end;

function TRestore.Get_Files: WideString;
begin
    Result := DefaultInterface.Files;
end;

procedure TRestore.Set_Files(const pRetVal: WideString);
  { Warning: The property Files has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Files := pRetVal;
end;

function TRestore.Get_Tapes: WideString;
begin
    Result := DefaultInterface.Tapes;
end;

procedure TRestore.Set_Tapes(const pRetVal: WideString);
  { Warning: The property Tapes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tapes := pRetVal;
end;

function TRestore.Get_Pipes: WideString;
begin
    Result := DefaultInterface.Pipes;
end;

procedure TRestore.Set_Pipes(const pRetVal: WideString);
  { Warning: The property Pipes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pipes := pRetVal;
end;

function TRestore.Get_DatabaseFileGroups: WideString;
begin
    Result := DefaultInterface.DatabaseFileGroups;
end;

procedure TRestore.Set_DatabaseFileGroups(const pRetVal: WideString);
  { Warning: The property DatabaseFileGroups has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFileGroups := pRetVal;
end;

function TRestore.Get_DatabaseFiles: WideString;
begin
    Result := DefaultInterface.DatabaseFiles;
end;

procedure TRestore.Set_DatabaseFiles(const pRetVal: WideString);
  { Warning: The property DatabaseFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFiles := pRetVal;
end;

function TRestore.Get_Action: SQLDMO_RESTORE_TYPE;
begin
    Result := DefaultInterface.Action;
end;

procedure TRestore.Set_Action(pRetVal: SQLDMO_RESTORE_TYPE);
begin
  DefaultInterface.Set_Action(pRetVal);
end;

function TRestore.Get_BackupSetName: WideString;
begin
    Result := DefaultInterface.BackupSetName;
end;

procedure TRestore.Set_BackupSetName(const pRetVal: WideString);
  { Warning: The property BackupSetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetName := pRetVal;
end;

function TRestore.Get_RelocateFiles: WideString;
begin
    Result := DefaultInterface.RelocateFiles;
end;

procedure TRestore.Set_RelocateFiles(const pRetVal: WideString);
  { Warning: The property RelocateFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RelocateFiles := pRetVal;
end;

function TRestore.Get_ReplaceDatabase: WordBool;
begin
    Result := DefaultInterface.ReplaceDatabase;
end;

procedure TRestore.Set_ReplaceDatabase(pRetVal: WordBool);
begin
  DefaultInterface.Set_ReplaceDatabase(pRetVal);
end;

function TRestore.Get_LastRestore: WordBool;
begin
    Result := DefaultInterface.LastRestore;
end;

procedure TRestore.Set_LastRestore(pRetVal: WordBool);
begin
  DefaultInterface.Set_LastRestore(pRetVal);
end;

function TRestore.Get_Restart: WordBool;
begin
    Result := DefaultInterface.Restart;
end;

procedure TRestore.Set_Restart(pRetVal: WordBool);
begin
  DefaultInterface.Set_Restart(pRetVal);
end;

function TRestore.Get_MediaName: WideString;
begin
    Result := DefaultInterface.MediaName;
end;

procedure TRestore.Set_MediaName(const pRetVal: WideString);
  { Warning: The property MediaName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaName := pRetVal;
end;

function TRestore.Get_LoadHistory: WordBool;
begin
    Result := DefaultInterface.LoadHistory;
end;

procedure TRestore.Set_LoadHistory(pRetVal: WordBool);
begin
  DefaultInterface.Set_LoadHistory(pRetVal);
end;

function TRestore.Get_FileNumber: Integer;
begin
    Result := DefaultInterface.FileNumber;
end;

procedure TRestore.Set_FileNumber(pRetVal: Integer);
begin
  DefaultInterface.Set_FileNumber(pRetVal);
end;

function TRestore.Get_ToPointInTime: WideString;
begin
    Result := DefaultInterface.ToPointInTime;
end;

procedure TRestore.Set_ToPointInTime(const pRetVal: WideString);
  { Warning: The property ToPointInTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToPointInTime := pRetVal;
end;

function TRestore.Get_StandbyFiles: WideString;
begin
    Result := DefaultInterface.StandbyFiles;
end;

procedure TRestore.Set_StandbyFiles(const pRetVal: WideString);
  { Warning: The property StandbyFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandbyFiles := pRetVal;
end;

procedure TRestore.Abort;
begin
  DefaultInterface.Abort;
end;

procedure TRestore.SQLRestore(const ServerObject: SQLServer);
begin
  DefaultInterface.SQLRestore(ServerObject);
end;

procedure TRestore.SQLVerify(const ServerObject: SQLServer);
begin
  DefaultInterface.SQLVerify(ServerObject);
end;

function TRestore.GenerateSQL: WideString;
begin
  Result := DefaultInterface.GenerateSQL;
end;

function TRestore.ReadBackupHeader(const ServerObject: SQLServer): QueryResults;
begin
  Result := DefaultInterface.ReadBackupHeader(ServerObject);
end;

function TRestore.ReadFileList(const ServerObject: SQLServer): QueryResults;
begin
  Result := DefaultInterface.ReadFileList(ServerObject);
end;

function TRestore.ReadMediaHeader(const ServerObject: SQLServer): QueryResults;
begin
  Result := DefaultInterface.ReadMediaHeader(ServerObject);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRestoreProperties.Create(AServer: TRestore);
begin
  inherited Create;
  FServer := AServer;
end;

function TRestoreProperties.GetDefaultInterface: _Restore;
begin
  Result := FServer.DefaultInterface;
end;

function TRestoreProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRestoreProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRestoreProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRestoreProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRestoreProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRestoreProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRestoreProperties.Get_PercentCompleteNotification: Integer;
begin
    Result := DefaultInterface.PercentCompleteNotification;
end;

procedure TRestoreProperties.Set_PercentCompleteNotification(pRetVal: Integer);
begin
  DefaultInterface.Set_PercentCompleteNotification(pRetVal);
end;

function TRestoreProperties.Get_UnloadTapeAfter: WordBool;
begin
    Result := DefaultInterface.UnloadTapeAfter;
end;

procedure TRestoreProperties.Set_UnloadTapeAfter(pRetVal: WordBool);
begin
  DefaultInterface.Set_UnloadTapeAfter(pRetVal);
end;

function TRestoreProperties.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TRestoreProperties.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TRestoreProperties.Get_Devices: WideString;
begin
    Result := DefaultInterface.Devices;
end;

procedure TRestoreProperties.Set_Devices(const pRetVal: WideString);
  { Warning: The property Devices has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Devices := pRetVal;
end;

function TRestoreProperties.Get_Files: WideString;
begin
    Result := DefaultInterface.Files;
end;

procedure TRestoreProperties.Set_Files(const pRetVal: WideString);
  { Warning: The property Files has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Files := pRetVal;
end;

function TRestoreProperties.Get_Tapes: WideString;
begin
    Result := DefaultInterface.Tapes;
end;

procedure TRestoreProperties.Set_Tapes(const pRetVal: WideString);
  { Warning: The property Tapes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tapes := pRetVal;
end;

function TRestoreProperties.Get_Pipes: WideString;
begin
    Result := DefaultInterface.Pipes;
end;

procedure TRestoreProperties.Set_Pipes(const pRetVal: WideString);
  { Warning: The property Pipes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pipes := pRetVal;
end;

function TRestoreProperties.Get_DatabaseFileGroups: WideString;
begin
    Result := DefaultInterface.DatabaseFileGroups;
end;

procedure TRestoreProperties.Set_DatabaseFileGroups(const pRetVal: WideString);
  { Warning: The property DatabaseFileGroups has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFileGroups := pRetVal;
end;

function TRestoreProperties.Get_DatabaseFiles: WideString;
begin
    Result := DefaultInterface.DatabaseFiles;
end;

procedure TRestoreProperties.Set_DatabaseFiles(const pRetVal: WideString);
  { Warning: The property DatabaseFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFiles := pRetVal;
end;

function TRestoreProperties.Get_Action: SQLDMO_RESTORE_TYPE;
begin
    Result := DefaultInterface.Action;
end;

procedure TRestoreProperties.Set_Action(pRetVal: SQLDMO_RESTORE_TYPE);
begin
  DefaultInterface.Set_Action(pRetVal);
end;

function TRestoreProperties.Get_BackupSetName: WideString;
begin
    Result := DefaultInterface.BackupSetName;
end;

procedure TRestoreProperties.Set_BackupSetName(const pRetVal: WideString);
  { Warning: The property BackupSetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetName := pRetVal;
end;

function TRestoreProperties.Get_RelocateFiles: WideString;
begin
    Result := DefaultInterface.RelocateFiles;
end;

procedure TRestoreProperties.Set_RelocateFiles(const pRetVal: WideString);
  { Warning: The property RelocateFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RelocateFiles := pRetVal;
end;

function TRestoreProperties.Get_ReplaceDatabase: WordBool;
begin
    Result := DefaultInterface.ReplaceDatabase;
end;

procedure TRestoreProperties.Set_ReplaceDatabase(pRetVal: WordBool);
begin
  DefaultInterface.Set_ReplaceDatabase(pRetVal);
end;

function TRestoreProperties.Get_LastRestore: WordBool;
begin
    Result := DefaultInterface.LastRestore;
end;

procedure TRestoreProperties.Set_LastRestore(pRetVal: WordBool);
begin
  DefaultInterface.Set_LastRestore(pRetVal);
end;

function TRestoreProperties.Get_Restart: WordBool;
begin
    Result := DefaultInterface.Restart;
end;

procedure TRestoreProperties.Set_Restart(pRetVal: WordBool);
begin
  DefaultInterface.Set_Restart(pRetVal);
end;

function TRestoreProperties.Get_MediaName: WideString;
begin
    Result := DefaultInterface.MediaName;
end;

procedure TRestoreProperties.Set_MediaName(const pRetVal: WideString);
  { Warning: The property MediaName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaName := pRetVal;
end;

function TRestoreProperties.Get_LoadHistory: WordBool;
begin
    Result := DefaultInterface.LoadHistory;
end;

procedure TRestoreProperties.Set_LoadHistory(pRetVal: WordBool);
begin
  DefaultInterface.Set_LoadHistory(pRetVal);
end;

function TRestoreProperties.Get_FileNumber: Integer;
begin
    Result := DefaultInterface.FileNumber;
end;

procedure TRestoreProperties.Set_FileNumber(pRetVal: Integer);
begin
  DefaultInterface.Set_FileNumber(pRetVal);
end;

function TRestoreProperties.Get_ToPointInTime: WideString;
begin
    Result := DefaultInterface.ToPointInTime;
end;

procedure TRestoreProperties.Set_ToPointInTime(const pRetVal: WideString);
  { Warning: The property ToPointInTime has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToPointInTime := pRetVal;
end;

function TRestoreProperties.Get_StandbyFiles: WideString;
begin
    Result := DefaultInterface.StandbyFiles;
end;

procedure TRestoreProperties.Set_StandbyFiles(const pRetVal: WideString);
  { Warning: The property StandbyFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandbyFiles := pRetVal;
end;

{$ENDIF}

class function CoRegisteredSubscriber.Create: _RegisteredSubscriber;
begin
  Result := CreateComObject(CLASS_RegisteredSubscriber) as _RegisteredSubscriber;
end;

class function CoRegisteredSubscriber.CreateRemote(const MachineName: string): _RegisteredSubscriber;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegisteredSubscriber) as _RegisteredSubscriber;
end;

procedure TRegisteredSubscriber.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030900-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030906-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRegisteredSubscriber.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RegisteredSubscriber;
  end;
end;

procedure TRegisteredSubscriber.ConnectTo(svrIntf: _RegisteredSubscriber);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRegisteredSubscriber.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRegisteredSubscriber.GetDefaultInterface: _RegisteredSubscriber;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRegisteredSubscriber.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRegisteredSubscriberProperties.Create(Self);
{$ENDIF}
end;

destructor TRegisteredSubscriber.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRegisteredSubscriber.GetServerProperties: TRegisteredSubscriberProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRegisteredSubscriber.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRegisteredSubscriber.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRegisteredSubscriber.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRegisteredSubscriber.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRegisteredSubscriber.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRegisteredSubscriber.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRegisteredSubscriber.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRegisteredSubscriber.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRegisteredSubscriber.Get_type_: SQLDMO_SUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TRegisteredSubscriber.Set_type_(pRetVal: SQLDMO_SUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TRegisteredSubscriber.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TRegisteredSubscriber.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TRegisteredSubscriber.Get_ReplicationSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.ReplicationSecurity;
end;

function TRegisteredSubscriber.Get_DefaultDistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DefaultDistributionSchedule;
end;

function TRegisteredSubscriber.Get_DefaultMergeSchedule: Schedule;
begin
    Result := DefaultInterface.DefaultMergeSchedule;
end;

procedure TRegisteredSubscriber.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TRegisteredSubscriber.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TRegisteredSubscriber.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TRegisteredSubscriber.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TRegisteredSubscriber.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TRegisteredSubscriber.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TRegisteredSubscriber.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TRegisteredSubscriber.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRegisteredSubscriberProperties.Create(AServer: TRegisteredSubscriber);
begin
  inherited Create;
  FServer := AServer;
end;

function TRegisteredSubscriberProperties.GetDefaultInterface: _RegisteredSubscriber;
begin
  Result := FServer.DefaultInterface;
end;

function TRegisteredSubscriberProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRegisteredSubscriberProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRegisteredSubscriberProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRegisteredSubscriberProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRegisteredSubscriberProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRegisteredSubscriberProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRegisteredSubscriberProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRegisteredSubscriberProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRegisteredSubscriberProperties.Get_type_: SQLDMO_SUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TRegisteredSubscriberProperties.Set_type_(pRetVal: SQLDMO_SUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TRegisteredSubscriberProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TRegisteredSubscriberProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TRegisteredSubscriberProperties.Get_ReplicationSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.ReplicationSecurity;
end;

function TRegisteredSubscriberProperties.Get_DefaultDistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DefaultDistributionSchedule;
end;

function TRegisteredSubscriberProperties.Get_DefaultMergeSchedule: Schedule;
begin
    Result := DefaultInterface.DefaultMergeSchedule;
end;

{$ENDIF}

class function CoReplicationSecurity.Create: _ReplicationSecurity;
begin
  Result := CreateComObject(CLASS_ReplicationSecurity) as _ReplicationSecurity;
end;

class function CoReplicationSecurity.CreateRemote(const MachineName: string): _ReplicationSecurity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReplicationSecurity) as _ReplicationSecurity;
end;

procedure TReplicationSecurity.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10031200-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031206-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReplicationSecurity.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _ReplicationSecurity;
  end;
end;

procedure TReplicationSecurity.ConnectTo(svrIntf: _ReplicationSecurity);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TReplicationSecurity.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TReplicationSecurity.GetDefaultInterface: _ReplicationSecurity;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TReplicationSecurity.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReplicationSecurityProperties.Create(Self);
{$ENDIF}
end;

destructor TReplicationSecurity.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TReplicationSecurity.GetServerProperties: TReplicationSecurityProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TReplicationSecurity.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TReplicationSecurity.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TReplicationSecurity.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TReplicationSecurity.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TReplicationSecurity.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TReplicationSecurity.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TReplicationSecurity.Get_SecurityMode: SQLDMO_REPLSECURITY_TYPE;
begin
    Result := DefaultInterface.SecurityMode;
end;

procedure TReplicationSecurity.Set_SecurityMode(pRetVal: SQLDMO_REPLSECURITY_TYPE);
begin
  DefaultInterface.Set_SecurityMode(pRetVal);
end;

function TReplicationSecurity.Get_StandardLogin: WideString;
begin
    Result := DefaultInterface.StandardLogin;
end;

procedure TReplicationSecurity.Set_StandardLogin(const pRetVal: WideString);
  { Warning: The property StandardLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardLogin := pRetVal;
end;

function TReplicationSecurity.Get_StandardPassword: WideString;
begin
    Result := DefaultInterface.StandardPassword;
end;

procedure TReplicationSecurity.Set_StandardPassword(const pRetVal: WideString);
  { Warning: The property StandardPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardPassword := pRetVal;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReplicationSecurityProperties.Create(AServer: TReplicationSecurity);
begin
  inherited Create;
  FServer := AServer;
end;

function TReplicationSecurityProperties.GetDefaultInterface: _ReplicationSecurity;
begin
  Result := FServer.DefaultInterface;
end;

function TReplicationSecurityProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TReplicationSecurityProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TReplicationSecurityProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TReplicationSecurityProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TReplicationSecurityProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TReplicationSecurityProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TReplicationSecurityProperties.Get_SecurityMode: SQLDMO_REPLSECURITY_TYPE;
begin
    Result := DefaultInterface.SecurityMode;
end;

procedure TReplicationSecurityProperties.Set_SecurityMode(pRetVal: SQLDMO_REPLSECURITY_TYPE);
begin
  DefaultInterface.Set_SecurityMode(pRetVal);
end;

function TReplicationSecurityProperties.Get_StandardLogin: WideString;
begin
    Result := DefaultInterface.StandardLogin;
end;

procedure TReplicationSecurityProperties.Set_StandardLogin(const pRetVal: WideString);
  { Warning: The property StandardLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardLogin := pRetVal;
end;

function TReplicationSecurityProperties.Get_StandardPassword: WideString;
begin
    Result := DefaultInterface.StandardPassword;
end;

procedure TReplicationSecurityProperties.Set_StandardPassword(const pRetVal: WideString);
  { Warning: The property StandardPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardPassword := pRetVal;
end;

{$ENDIF}

class function CoDistributionArticle.Create: _DistributionArticle;
begin
  Result := CreateComObject(CLASS_DistributionArticle) as _DistributionArticle;
end;

class function CoDistributionArticle.CreateRemote(const MachineName: string): _DistributionArticle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionArticle) as _DistributionArticle;
end;

procedure TDistributionArticle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10033100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10033106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionArticle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionArticle;
  end;
end;

procedure TDistributionArticle.ConnectTo(svrIntf: _DistributionArticle);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionArticle.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionArticle.GetDefaultInterface: _DistributionArticle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionArticle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionArticleProperties.Create(Self);
{$ENDIF}
end;

destructor TDistributionArticle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionArticle.GetServerProperties: TDistributionArticleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionArticle.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionArticle.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionArticle.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionArticle.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionArticle.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionArticle.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionArticle.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionArticle.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionArticle.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDistributionArticle.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TDistributionArticle.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TDistributionArticle.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TDistributionArticle.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TDistributionArticle.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TDistributionArticle.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

procedure TDistributionArticle.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDistributionArticle.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TDistributionArticle.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TDistributionArticle.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionArticleProperties.Create(AServer: TDistributionArticle);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionArticleProperties.GetDefaultInterface: _DistributionArticle;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionArticleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionArticleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionArticleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionArticleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionArticleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionArticleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionArticleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionArticleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionArticleProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDistributionArticleProperties.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TDistributionArticleProperties.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TDistributionArticleProperties.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TDistributionArticleProperties.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TDistributionArticleProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TDistributionArticleProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

{$ENDIF}

class function CoDistributionSubscription.Create: _DistributionSubscription;
begin
  Result := CreateComObject(CLASS_DistributionSubscription) as _DistributionSubscription;
end;

class function CoDistributionSubscription.CreateRemote(const MachineName: string): _DistributionSubscription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionSubscription) as _DistributionSubscription;
end;

procedure TDistributionSubscription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10034100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10034106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionSubscription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionSubscription;
  end;
end;

procedure TDistributionSubscription.ConnectTo(svrIntf: _DistributionSubscription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionSubscription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionSubscription.GetDefaultInterface: _DistributionSubscription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionSubscription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionSubscriptionProperties.Create(Self);
{$ENDIF}
end;

destructor TDistributionSubscription.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionSubscription.GetServerProperties: TDistributionSubscriptionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionSubscription.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionSubscription.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionSubscription.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionSubscription.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionSubscription.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionSubscription.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionSubscription.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TDistributionSubscription.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TDistributionSubscription.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TDistributionSubscription.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TDistributionSubscription.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TDistributionSubscription.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TDistributionSubscription.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TDistributionSubscription.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TDistributionSubscription.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TDistributionSubscription.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TDistributionSubscription.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TDistributionSubscription.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TDistributionSubscription.Get_DistributionAgent: WideString;
begin
    Result := DefaultInterface.DistributionAgent;
end;

procedure TDistributionSubscription.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDistributionSubscription.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TDistributionSubscription.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TDistributionSubscription.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionSubscriptionProperties.Create(AServer: TDistributionSubscription);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionSubscriptionProperties.GetDefaultInterface: _DistributionSubscription;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionSubscriptionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionSubscriptionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionSubscriptionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionSubscriptionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionSubscriptionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionSubscriptionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionSubscriptionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TDistributionSubscriptionProperties.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TDistributionSubscriptionProperties.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TDistributionSubscriptionProperties.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TDistributionSubscriptionProperties.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TDistributionSubscriptionProperties.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TDistributionSubscriptionProperties.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TDistributionSubscriptionProperties.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TDistributionSubscriptionProperties.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TDistributionSubscriptionProperties.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TDistributionSubscriptionProperties.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TDistributionSubscriptionProperties.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TDistributionSubscriptionProperties.Get_DistributionAgent: WideString;
begin
    Result := DefaultInterface.DistributionAgent;
end;

{$ENDIF}

class function CoDistributionPublication.Create: _DistributionPublication;
begin
  Result := CreateComObject(CLASS_DistributionPublication) as _DistributionPublication;
end;

class function CoDistributionPublication.CreateRemote(const MachineName: string): _DistributionPublication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionPublication) as _DistributionPublication;
end;

procedure TDistributionPublication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10032100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10032106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionPublication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionPublication;
  end;
end;

procedure TDistributionPublication.ConnectTo(svrIntf: _DistributionPublication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionPublication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionPublication.GetDefaultInterface: _DistributionPublication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionPublication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionPublicationProperties.Create(Self);
{$ENDIF}
end;

destructor TDistributionPublication.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionPublication.GetServerProperties: TDistributionPublicationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionPublication.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionPublication.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionPublication.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionPublication.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionPublication.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionPublication.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionPublication.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionPublication.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionPublication.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDistributionPublication.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TDistributionPublication.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TDistributionPublication.Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
begin
    Result := DefaultInterface.PublicationType;
end;

procedure TDistributionPublication.Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
begin
  DefaultInterface.Set_PublicationType(pRetVal);
end;

function TDistributionPublication.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TDistributionPublication.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TDistributionPublication.Get_SnapshotAgent: WideString;
begin
    Result := DefaultInterface.SnapshotAgent;
end;

procedure TDistributionPublication.Set_SnapshotAgent(const pRetVal: WideString);
  { Warning: The property SnapshotAgent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotAgent := pRetVal;
end;

function TDistributionPublication.Get_LogReaderAgent: WideString;
begin
    Result := DefaultInterface.LogReaderAgent;
end;

procedure TDistributionPublication.Set_LogReaderAgent(const pRetVal: WideString);
  { Warning: The property LogReaderAgent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogReaderAgent := pRetVal;
end;

function TDistributionPublication.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TDistributionPublication.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TDistributionPublication.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TDistributionPublication.Set_VendorName(const pRetVal: WideString);
  { Warning: The property VendorName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VendorName := pRetVal;
end;

function TDistributionPublication.Get_DistributionArticles: DistributionArticles;
begin
    Result := DefaultInterface.DistributionArticles;
end;

function TDistributionPublication.Get_DistributionSubscriptions: DistributionSubscriptions;
begin
    Result := DefaultInterface.DistributionSubscriptions;
end;

procedure TDistributionPublication.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDistributionPublication.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TDistributionPublication.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TDistributionPublication.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TDistributionPublication.EnumSubscriptionViews: QueryResults;
begin
  Result := DefaultInterface.EnumSubscriptionViews;
end;

function TDistributionPublication.EnumSnapshotAgentView: QueryResults;
begin
  Result := DefaultInterface.EnumSnapshotAgentView;
end;

function TDistributionPublication.EnumLogReaderAgentView: QueryResults;
begin
  Result := DefaultInterface.EnumLogReaderAgentView;
end;

procedure TDistributionPublication.GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                                                   out pRetValTimeStamp: WideString);
begin
  DefaultInterface.GetAgentsStatus(pRetValStatus, pRetValTimeStamp);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionPublicationProperties.Create(AServer: TDistributionPublication);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionPublicationProperties.GetDefaultInterface: _DistributionPublication;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionPublicationProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionPublicationProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionPublicationProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionPublicationProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionPublicationProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionPublicationProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionPublicationProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionPublicationProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionPublicationProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TDistributionPublicationProperties.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TDistributionPublicationProperties.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TDistributionPublicationProperties.Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
begin
    Result := DefaultInterface.PublicationType;
end;

procedure TDistributionPublicationProperties.Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
begin
  DefaultInterface.Set_PublicationType(pRetVal);
end;

function TDistributionPublicationProperties.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TDistributionPublicationProperties.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TDistributionPublicationProperties.Get_SnapshotAgent: WideString;
begin
    Result := DefaultInterface.SnapshotAgent;
end;

procedure TDistributionPublicationProperties.Set_SnapshotAgent(const pRetVal: WideString);
  { Warning: The property SnapshotAgent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotAgent := pRetVal;
end;

function TDistributionPublicationProperties.Get_LogReaderAgent: WideString;
begin
    Result := DefaultInterface.LogReaderAgent;
end;

procedure TDistributionPublicationProperties.Set_LogReaderAgent(const pRetVal: WideString);
  { Warning: The property LogReaderAgent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogReaderAgent := pRetVal;
end;

function TDistributionPublicationProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TDistributionPublicationProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TDistributionPublicationProperties.Get_VendorName: WideString;
begin
    Result := DefaultInterface.VendorName;
end;

procedure TDistributionPublicationProperties.Set_VendorName(const pRetVal: WideString);
  { Warning: The property VendorName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VendorName := pRetVal;
end;

function TDistributionPublicationProperties.Get_DistributionArticles: DistributionArticles;
begin
    Result := DefaultInterface.DistributionArticles;
end;

function TDistributionPublicationProperties.Get_DistributionSubscriptions: DistributionSubscriptions;
begin
    Result := DefaultInterface.DistributionSubscriptions;
end;

{$ENDIF}

class function CoDistributionPublisher.Create: _DistributionPublisher;
begin
  Result := CreateComObject(CLASS_DistributionPublisher) as _DistributionPublisher;
end;

class function CoDistributionPublisher.CreateRemote(const MachineName: string): _DistributionPublisher;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionPublisher) as _DistributionPublisher;
end;

procedure TDistributionPublisher.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030700-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030706-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionPublisher.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionPublisher;
  end;
end;

procedure TDistributionPublisher.ConnectTo(svrIntf: _DistributionPublisher);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionPublisher.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionPublisher.GetDefaultInterface: _DistributionPublisher;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionPublisher.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionPublisherProperties.Create(Self);
{$ENDIF}
end;

destructor TDistributionPublisher.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionPublisher.GetServerProperties: TDistributionPublisherProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionPublisher.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionPublisher.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionPublisher.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionPublisher.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionPublisher.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionPublisher.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionPublisher.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionPublisher.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionPublisher.Get_DistributionDatabase: WideString;
begin
    Result := DefaultInterface.DistributionDatabase;
end;

procedure TDistributionPublisher.Set_DistributionDatabase(const pRetVal: WideString);
  { Warning: The property DistributionDatabase has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DistributionDatabase := pRetVal;
end;

function TDistributionPublisher.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TDistributionPublisher.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

function TDistributionPublisher.Get_DistributionWorkingDirectory: WideString;
begin
    Result := DefaultInterface.DistributionWorkingDirectory;
end;

procedure TDistributionPublisher.Set_DistributionWorkingDirectory(const pRetVal: WideString);
  { Warning: The property DistributionWorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DistributionWorkingDirectory := pRetVal;
end;

function TDistributionPublisher.Get_TrustedDistributorConnection: WordBool;
begin
    Result := DefaultInterface.TrustedDistributorConnection;
end;

procedure TDistributionPublisher.Set_TrustedDistributorConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_TrustedDistributorConnection(pRetVal);
end;

function TDistributionPublisher.Get_ThirdParty: WordBool;
begin
    Result := DefaultInterface.ThirdParty;
end;

procedure TDistributionPublisher.Set_ThirdParty(pRetVal: WordBool);
begin
  DefaultInterface.Set_ThirdParty(pRetVal);
end;

function TDistributionPublisher.Get_DistributionPublications: DistributionPublications;
begin
    Result := DefaultInterface.DistributionPublications;
end;

function TDistributionPublisher.Get_RegisteredSubscribers: RegisteredSubscribers;
begin
    Result := DefaultInterface.RegisteredSubscribers;
end;

procedure TDistributionPublisher.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDistributionPublisher.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TDistributionPublisher.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TDistributionPublisher.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TDistributionPublisher.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TDistributionPublisher.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TDistributionPublisher.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TDistributionPublisher.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TDistributionPublisher.EnumSnapshotAgentSessions(const AgentName: WideString; 
                                                          SessionType: SQLDMO_SESSION_TYPE; 
                                                          SessionDuration: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumSnapshotAgentSessions(AgentName, SessionType, SessionDuration);
end;

function TDistributionPublisher.EnumLogReaderAgentSessions(const AgentName: WideString; 
                                                           SessionType: SQLDMO_SESSION_TYPE; 
                                                           SessionDuration: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumLogReaderAgentSessions(AgentName, SessionType, SessionDuration);
end;

function TDistributionPublisher.EnumDistributionAgentSessions(const AgentName: WideString; 
                                                              SessionType: SQLDMO_SESSION_TYPE; 
                                                              SessionDuration: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumDistributionAgentSessions(AgentName, SessionType, SessionDuration);
end;

function TDistributionPublisher.EnumMergeAgentSessions(const AgentName: WideString; 
                                                       SessionType: SQLDMO_SESSION_TYPE; 
                                                       SessionDuration: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumMergeAgentSessions(AgentName, SessionType, SessionDuration);
end;

function TDistributionPublisher.EnumSnapshotAgentSessionDetails(const AgentName: WideString; 
                                                                const SessionID: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumSnapshotAgentSessionDetails(AgentName, SessionID);
end;

function TDistributionPublisher.EnumLogReaderAgentSessionDetails(const AgentName: WideString; 
                                                                 const SessionID: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumLogReaderAgentSessionDetails(AgentName, SessionID);
end;

function TDistributionPublisher.EnumDistributionAgentSessionDetails(const AgentName: WideString; 
                                                                    const SessionID: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumDistributionAgentSessionDetails(AgentName, SessionID);
end;

function TDistributionPublisher.EnumMergeAgentSessionDetails(const AgentName: WideString; 
                                                             const SessionID: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumMergeAgentSessionDetails(AgentName, SessionID);
end;

function TDistributionPublisher.EnumAgentErrorRecords(ErrorID: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumAgentErrorRecords(ErrorID);
end;

procedure TDistributionPublisher.GetAgentsStatus(out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                                                 out pRetValTimeStamp: WideString);
begin
  DefaultInterface.GetAgentsStatus(pRetValStatus, pRetValTimeStamp);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionPublisherProperties.Create(AServer: TDistributionPublisher);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionPublisherProperties.GetDefaultInterface: _DistributionPublisher;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionPublisherProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionPublisherProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionPublisherProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionPublisherProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionPublisherProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionPublisherProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionPublisherProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionPublisherProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionPublisherProperties.Get_DistributionDatabase: WideString;
begin
    Result := DefaultInterface.DistributionDatabase;
end;

procedure TDistributionPublisherProperties.Set_DistributionDatabase(const pRetVal: WideString);
  { Warning: The property DistributionDatabase has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DistributionDatabase := pRetVal;
end;

function TDistributionPublisherProperties.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TDistributionPublisherProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

function TDistributionPublisherProperties.Get_DistributionWorkingDirectory: WideString;
begin
    Result := DefaultInterface.DistributionWorkingDirectory;
end;

procedure TDistributionPublisherProperties.Set_DistributionWorkingDirectory(const pRetVal: WideString);
  { Warning: The property DistributionWorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DistributionWorkingDirectory := pRetVal;
end;

function TDistributionPublisherProperties.Get_TrustedDistributorConnection: WordBool;
begin
    Result := DefaultInterface.TrustedDistributorConnection;
end;

procedure TDistributionPublisherProperties.Set_TrustedDistributorConnection(pRetVal: WordBool);
begin
  DefaultInterface.Set_TrustedDistributorConnection(pRetVal);
end;

function TDistributionPublisherProperties.Get_ThirdParty: WordBool;
begin
    Result := DefaultInterface.ThirdParty;
end;

procedure TDistributionPublisherProperties.Set_ThirdParty(pRetVal: WordBool);
begin
  DefaultInterface.Set_ThirdParty(pRetVal);
end;

function TDistributionPublisherProperties.Get_DistributionPublications: DistributionPublications;
begin
    Result := DefaultInterface.DistributionPublications;
end;

function TDistributionPublisherProperties.Get_RegisteredSubscribers: RegisteredSubscribers;
begin
    Result := DefaultInterface.RegisteredSubscribers;
end;

{$ENDIF}

class function CoDistributionDatabase.Create: _DistributionDatabase;
begin
  Result := CreateComObject(CLASS_DistributionDatabase) as _DistributionDatabase;
end;

class function CoDistributionDatabase.CreateRemote(const MachineName: string): _DistributionDatabase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionDatabase) as _DistributionDatabase;
end;

procedure TDistributionDatabase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10031300-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031306-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionDatabase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionDatabase;
  end;
end;

procedure TDistributionDatabase.ConnectTo(svrIntf: _DistributionDatabase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionDatabase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionDatabase.GetDefaultInterface: _DistributionDatabase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionDatabase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionDatabaseProperties.Create(Self);
{$ENDIF}
end;

destructor TDistributionDatabase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionDatabase.GetServerProperties: TDistributionDatabaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionDatabase.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionDatabase.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionDatabase.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionDatabase.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionDatabase.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionDatabase.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionDatabase.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionDatabase.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionDatabase.Get_MinDistributionRetention: Integer;
begin
    Result := DefaultInterface.MinDistributionRetention;
end;

procedure TDistributionDatabase.Set_MinDistributionRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_MinDistributionRetention(pRetVal);
end;

function TDistributionDatabase.Get_MaxDistributionRetention: Integer;
begin
    Result := DefaultInterface.MaxDistributionRetention;
end;

procedure TDistributionDatabase.Set_MaxDistributionRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxDistributionRetention(pRetVal);
end;

function TDistributionDatabase.Get_HistoryRetention: Integer;
begin
    Result := DefaultInterface.HistoryRetention;
end;

procedure TDistributionDatabase.Set_HistoryRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_HistoryRetention(pRetVal);
end;

function TDistributionDatabase.Get_HistoryCleanupTaskName: WideString;
begin
    Result := DefaultInterface.HistoryCleanupTaskName;
end;

function TDistributionDatabase.Get_DistributionCleanupTaskName: WideString;
begin
    Result := DefaultInterface.DistributionCleanupTaskName;
end;

function TDistributionDatabase.Get_AgentsStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.AgentsStatus;
end;

function TDistributionDatabase.Get_DataFolder: WideString;
begin
    Result := DefaultInterface.DataFolder;
end;

procedure TDistributionDatabase.Set_DataFolder(const pRetVal: WideString);
  { Warning: The property DataFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFolder := pRetVal;
end;

function TDistributionDatabase.Get_DataFile: WideString;
begin
    Result := DefaultInterface.DataFile;
end;

procedure TDistributionDatabase.Set_DataFile(const pRetVal: WideString);
  { Warning: The property DataFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFile := pRetVal;
end;

function TDistributionDatabase.Get_DataFileSize: Integer;
begin
    Result := DefaultInterface.DataFileSize;
end;

procedure TDistributionDatabase.Set_DataFileSize(pRetVal: Integer);
begin
  DefaultInterface.Set_DataFileSize(pRetVal);
end;

function TDistributionDatabase.Get_LogFolder: WideString;
begin
    Result := DefaultInterface.LogFolder;
end;

procedure TDistributionDatabase.Set_LogFolder(const pRetVal: WideString);
  { Warning: The property LogFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFolder := pRetVal;
end;

function TDistributionDatabase.Get_LogFile: WideString;
begin
    Result := DefaultInterface.LogFile;
end;

procedure TDistributionDatabase.Set_LogFile(const pRetVal: WideString);
  { Warning: The property LogFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFile := pRetVal;
end;

function TDistributionDatabase.Get_LogFileSize: Integer;
begin
    Result := DefaultInterface.LogFileSize;
end;

procedure TDistributionDatabase.Set_LogFileSize(pRetVal: Integer);
begin
  DefaultInterface.Set_LogFileSize(pRetVal);
end;

procedure TDistributionDatabase.Set_SecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SecurityMode(Param1);
end;

procedure TDistributionDatabase.Set_StandardLogin(const Param1: WideString);
  { Warning: The property StandardLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardLogin := Param1;
end;

procedure TDistributionDatabase.Set_StandardPassword(const Param1: WideString);
  { Warning: The property StandardPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardPassword := Param1;
end;

procedure TDistributionDatabase.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TDistributionDatabase.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TDistributionDatabase.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TDistributionDatabase.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TDistributionDatabase.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TDistributionDatabase.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TDistributionDatabase.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TDistributionDatabase.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionDatabaseProperties.Create(AServer: TDistributionDatabase);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionDatabaseProperties.GetDefaultInterface: _DistributionDatabase;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionDatabaseProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TDistributionDatabaseProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TDistributionDatabaseProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TDistributionDatabaseProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TDistributionDatabaseProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TDistributionDatabaseProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TDistributionDatabaseProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDistributionDatabaseProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TDistributionDatabaseProperties.Get_MinDistributionRetention: Integer;
begin
    Result := DefaultInterface.MinDistributionRetention;
end;

procedure TDistributionDatabaseProperties.Set_MinDistributionRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_MinDistributionRetention(pRetVal);
end;

function TDistributionDatabaseProperties.Get_MaxDistributionRetention: Integer;
begin
    Result := DefaultInterface.MaxDistributionRetention;
end;

procedure TDistributionDatabaseProperties.Set_MaxDistributionRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxDistributionRetention(pRetVal);
end;

function TDistributionDatabaseProperties.Get_HistoryRetention: Integer;
begin
    Result := DefaultInterface.HistoryRetention;
end;

procedure TDistributionDatabaseProperties.Set_HistoryRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_HistoryRetention(pRetVal);
end;

function TDistributionDatabaseProperties.Get_HistoryCleanupTaskName: WideString;
begin
    Result := DefaultInterface.HistoryCleanupTaskName;
end;

function TDistributionDatabaseProperties.Get_DistributionCleanupTaskName: WideString;
begin
    Result := DefaultInterface.DistributionCleanupTaskName;
end;

function TDistributionDatabaseProperties.Get_AgentsStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.AgentsStatus;
end;

function TDistributionDatabaseProperties.Get_DataFolder: WideString;
begin
    Result := DefaultInterface.DataFolder;
end;

procedure TDistributionDatabaseProperties.Set_DataFolder(const pRetVal: WideString);
  { Warning: The property DataFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFolder := pRetVal;
end;

function TDistributionDatabaseProperties.Get_DataFile: WideString;
begin
    Result := DefaultInterface.DataFile;
end;

procedure TDistributionDatabaseProperties.Set_DataFile(const pRetVal: WideString);
  { Warning: The property DataFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataFile := pRetVal;
end;

function TDistributionDatabaseProperties.Get_DataFileSize: Integer;
begin
    Result := DefaultInterface.DataFileSize;
end;

procedure TDistributionDatabaseProperties.Set_DataFileSize(pRetVal: Integer);
begin
  DefaultInterface.Set_DataFileSize(pRetVal);
end;

function TDistributionDatabaseProperties.Get_LogFolder: WideString;
begin
    Result := DefaultInterface.LogFolder;
end;

procedure TDistributionDatabaseProperties.Set_LogFolder(const pRetVal: WideString);
  { Warning: The property LogFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFolder := pRetVal;
end;

function TDistributionDatabaseProperties.Get_LogFile: WideString;
begin
    Result := DefaultInterface.LogFile;
end;

procedure TDistributionDatabaseProperties.Set_LogFile(const pRetVal: WideString);
  { Warning: The property LogFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LogFile := pRetVal;
end;

function TDistributionDatabaseProperties.Get_LogFileSize: Integer;
begin
    Result := DefaultInterface.LogFileSize;
end;

procedure TDistributionDatabaseProperties.Set_LogFileSize(pRetVal: Integer);
begin
  DefaultInterface.Set_LogFileSize(pRetVal);
end;

procedure TDistributionDatabaseProperties.Set_SecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SecurityMode(Param1);
end;

procedure TDistributionDatabaseProperties.Set_StandardLogin(const Param1: WideString);
  { Warning: The property StandardLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardLogin := Param1;
end;

procedure TDistributionDatabaseProperties.Set_StandardPassword(const Param1: WideString);
  { Warning: The property StandardPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StandardPassword := Param1;
end;

{$ENDIF}

class function CoTransSubscription.Create: _TransSubscription;
begin
  Result := CreateComObject(CLASS_TransSubscription) as _TransSubscription;
end;

class function CoTransSubscription.CreateRemote(const MachineName: string): _TransSubscription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransSubscription) as _TransSubscription;
end;

procedure TTransSubscription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030300-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030306-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransSubscription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransSubscription;
  end;
end;

procedure TTransSubscription.ConnectTo(svrIntf: _TransSubscription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransSubscription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransSubscription.GetDefaultInterface: _TransSubscription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransSubscription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransSubscriptionProperties.Create(Self);
{$ENDIF}
end;

destructor TTransSubscription.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransSubscription.GetServerProperties: TTransSubscriptionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransSubscription.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransSubscription.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransSubscription.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransSubscription.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransSubscription.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransSubscription.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransSubscription.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TTransSubscription.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TTransSubscription.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TTransSubscription.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TTransSubscription.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TTransSubscription.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TTransSubscription.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TTransSubscription.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TTransSubscription.Get_FullSubscription: WordBool;
begin
    Result := DefaultInterface.FullSubscription;
end;

function TTransSubscription.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TTransSubscription.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTransSubscription.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

function TTransSubscription.Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TTransSubscription.Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TTransSubscription.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

procedure TTransSubscription.Set_EnabledForSyncMgr(Param1: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(Param1);
end;

procedure TTransSubscription.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TTransSubscription.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTransSubscription.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTransSubscription.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TTransSubscription.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TTransSubscription.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TTransSubscription.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

procedure TTransSubscription.ReInitialize;
begin
  DefaultInterface.ReInitialize;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransSubscriptionProperties.Create(AServer: TTransSubscription);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransSubscriptionProperties.GetDefaultInterface: _TransSubscription;
begin
  Result := FServer.DefaultInterface;
end;

function TTransSubscriptionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransSubscriptionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransSubscriptionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransSubscriptionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransSubscriptionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransSubscriptionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransSubscriptionProperties.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TTransSubscriptionProperties.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TTransSubscriptionProperties.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TTransSubscriptionProperties.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TTransSubscriptionProperties.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TTransSubscriptionProperties.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TTransSubscriptionProperties.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TTransSubscriptionProperties.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TTransSubscriptionProperties.Get_FullSubscription: WordBool;
begin
    Result := DefaultInterface.FullSubscription;
end;

function TTransSubscriptionProperties.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TTransSubscriptionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTransSubscriptionProperties.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

function TTransSubscriptionProperties.Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TTransSubscriptionProperties.Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TTransSubscriptionProperties.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

procedure TTransSubscriptionProperties.Set_EnabledForSyncMgr(Param1: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(Param1);
end;

{$ENDIF}

class function CoTransArticle.Create: _TransArticle;
begin
  Result := CreateComObject(CLASS_TransArticle) as _TransArticle;
end;

class function CoTransArticle.CreateRemote(const MachineName: string): _TransArticle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransArticle) as _TransArticle;
end;

procedure TTransArticle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030200-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030206-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransArticle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransArticle;
  end;
end;

procedure TTransArticle.ConnectTo(svrIntf: _TransArticle);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransArticle.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransArticle.GetDefaultInterface: _TransArticle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransArticle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransArticleProperties.Create(Self);
{$ENDIF}
end;

destructor TTransArticle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransArticle.GetServerProperties: TTransArticleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransArticle.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransArticle.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransArticle.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransArticle.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransArticle.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransArticle.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransArticle.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTransArticle.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTransArticle.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTransArticle.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TTransArticle.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TTransArticle.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TTransArticle.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TTransArticle.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransArticle.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransArticle.Get_ReplicateAllColumns: WordBool;
begin
    Result := DefaultInterface.ReplicateAllColumns;
end;

function TTransArticle.Get_SnapshotObjectOwner: WideString;
begin
    Result := DefaultInterface.SnapshotObjectOwner;
end;

procedure TTransArticle.Set_SnapshotObjectOwner(const pRetVal: WideString);
  { Warning: The property SnapshotObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotObjectOwner := pRetVal;
end;

function TTransArticle.Get_SnapshotObjectName: WideString;
begin
    Result := DefaultInterface.SnapshotObjectName;
end;

procedure TTransArticle.Set_SnapshotObjectName(const pRetVal: WideString);
  { Warning: The property SnapshotObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotObjectName := pRetVal;
end;

function TTransArticle.Get_ArticleType: SQLDMO_ARTICLE_TYPE;
begin
    Result := DefaultInterface.ArticleType;
end;

procedure TTransArticle.Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
begin
  DefaultInterface.Set_ArticleType(pRetVal);
end;

function TTransArticle.Get_InsertCommand: WideString;
begin
    Result := DefaultInterface.InsertCommand;
end;

procedure TTransArticle.Set_InsertCommand(const pRetVal: WideString);
  { Warning: The property InsertCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InsertCommand := pRetVal;
end;

function TTransArticle.Get_UpdateCommand: WideString;
begin
    Result := DefaultInterface.UpdateCommand;
end;

procedure TTransArticle.Set_UpdateCommand(const pRetVal: WideString);
  { Warning: The property UpdateCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UpdateCommand := pRetVal;
end;

function TTransArticle.Get_DeleteCommand: WideString;
begin
    Result := DefaultInterface.DeleteCommand;
end;

procedure TTransArticle.Set_DeleteCommand(const pRetVal: WideString);
  { Warning: The property DeleteCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeleteCommand := pRetVal;
end;

function TTransArticle.Get_ReplicationFilterProcOwner: WideString;
begin
    Result := DefaultInterface.ReplicationFilterProcOwner;
end;

procedure TTransArticle.Set_ReplicationFilterProcOwner(const pRetVal: WideString);
  { Warning: The property ReplicationFilterProcOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReplicationFilterProcOwner := pRetVal;
end;

function TTransArticle.Get_ReplicationFilterProcName: WideString;
begin
    Result := DefaultInterface.ReplicationFilterProcName;
end;

procedure TTransArticle.Set_ReplicationFilterProcName(const pRetVal: WideString);
  { Warning: The property ReplicationFilterProcName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReplicationFilterProcName := pRetVal;
end;

function TTransArticle.Get_CreationScriptPath: WideString;
begin
    Result := DefaultInterface.CreationScriptPath;
end;

procedure TTransArticle.Set_CreationScriptPath(const pRetVal: WideString);
  { Warning: The property CreationScriptPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreationScriptPath := pRetVal;
end;

function TTransArticle.Get_DestinationOwnerName: WideString;
begin
    Result := DefaultInterface.DestinationOwnerName;
end;

procedure TTransArticle.Set_DestinationOwnerName(const pRetVal: WideString);
  { Warning: The property DestinationOwnerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationOwnerName := pRetVal;
end;

function TTransArticle.Get_DestinationObjectName: WideString;
begin
    Result := DefaultInterface.DestinationObjectName;
end;

procedure TTransArticle.Set_DestinationObjectName(const pRetVal: WideString);
  { Warning: The property DestinationObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationObjectName := pRetVal;
end;

function TTransArticle.Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
begin
    Result := DefaultInterface.PreCreationMethod;
end;

procedure TTransArticle.Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
begin
  DefaultInterface.Set_PreCreationMethod(pRetVal);
end;

function TTransArticle.Get_FilterClause: WideString;
begin
    Result := DefaultInterface.FilterClause;
end;

procedure TTransArticle.Set_FilterClause(const pRetVal: WideString);
  { Warning: The property FilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FilterClause := pRetVal;
end;

function TTransArticle.Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
begin
    Result := DefaultInterface.CreationScriptOptions;
end;

procedure TTransArticle.Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
begin
  DefaultInterface.Set_CreationScriptOptions(pRetVal);
end;

function TTransArticle.Get_CommandOptions: SQLDMO_COMMANDOPTION_TYPE;
begin
    Result := DefaultInterface.CommandOptions;
end;

procedure TTransArticle.Set_CommandOptions(pRetVal: SQLDMO_COMMANDOPTION_TYPE);
begin
  DefaultInterface.Set_CommandOptions(pRetVal);
end;

function TTransArticle.Get_TransSubscriptions: TransSubscriptions;
begin
    Result := DefaultInterface.TransSubscriptions;
end;

procedure TTransArticle.Remove;
begin
  DefaultInterface.Remove;
end;

function TTransArticle.ListReplicatedColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListReplicatedColumns;
end;

procedure TTransArticle.AddReplicatedColumns(const Columns: WideString);
begin
  DefaultInterface.AddReplicatedColumns(Columns);
end;

procedure TTransArticle.RemoveReplicatedColumns(const Columns: WideString);
begin
  DefaultInterface.RemoveReplicatedColumns(Columns);
end;

procedure TTransArticle.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTransArticle.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTransArticle.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TTransArticle.ScriptDestinationObject: WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(EmptyParam, EmptyParam, EmptyParam);
end;

function TTransArticle.ScriptDestinationObject(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, EmptyParam, EmptyParam);
end;

function TTransArticle.ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, ScriptFilePath, EmptyParam);
end;

function TTransArticle.ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                               Script2Type: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransArticleProperties.Create(AServer: TTransArticle);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransArticleProperties.GetDefaultInterface: _TransArticle;
begin
  Result := FServer.DefaultInterface;
end;

function TTransArticleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransArticleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransArticleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransArticleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransArticleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransArticleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransArticleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTransArticleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTransArticleProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTransArticleProperties.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TTransArticleProperties.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TTransArticleProperties.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TTransArticleProperties.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TTransArticleProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransArticleProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransArticleProperties.Get_ReplicateAllColumns: WordBool;
begin
    Result := DefaultInterface.ReplicateAllColumns;
end;

function TTransArticleProperties.Get_SnapshotObjectOwner: WideString;
begin
    Result := DefaultInterface.SnapshotObjectOwner;
end;

procedure TTransArticleProperties.Set_SnapshotObjectOwner(const pRetVal: WideString);
  { Warning: The property SnapshotObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotObjectOwner := pRetVal;
end;

function TTransArticleProperties.Get_SnapshotObjectName: WideString;
begin
    Result := DefaultInterface.SnapshotObjectName;
end;

procedure TTransArticleProperties.Set_SnapshotObjectName(const pRetVal: WideString);
  { Warning: The property SnapshotObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SnapshotObjectName := pRetVal;
end;

function TTransArticleProperties.Get_ArticleType: SQLDMO_ARTICLE_TYPE;
begin
    Result := DefaultInterface.ArticleType;
end;

procedure TTransArticleProperties.Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
begin
  DefaultInterface.Set_ArticleType(pRetVal);
end;

function TTransArticleProperties.Get_InsertCommand: WideString;
begin
    Result := DefaultInterface.InsertCommand;
end;

procedure TTransArticleProperties.Set_InsertCommand(const pRetVal: WideString);
  { Warning: The property InsertCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InsertCommand := pRetVal;
end;

function TTransArticleProperties.Get_UpdateCommand: WideString;
begin
    Result := DefaultInterface.UpdateCommand;
end;

procedure TTransArticleProperties.Set_UpdateCommand(const pRetVal: WideString);
  { Warning: The property UpdateCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UpdateCommand := pRetVal;
end;

function TTransArticleProperties.Get_DeleteCommand: WideString;
begin
    Result := DefaultInterface.DeleteCommand;
end;

procedure TTransArticleProperties.Set_DeleteCommand(const pRetVal: WideString);
  { Warning: The property DeleteCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DeleteCommand := pRetVal;
end;

function TTransArticleProperties.Get_ReplicationFilterProcOwner: WideString;
begin
    Result := DefaultInterface.ReplicationFilterProcOwner;
end;

procedure TTransArticleProperties.Set_ReplicationFilterProcOwner(const pRetVal: WideString);
  { Warning: The property ReplicationFilterProcOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReplicationFilterProcOwner := pRetVal;
end;

function TTransArticleProperties.Get_ReplicationFilterProcName: WideString;
begin
    Result := DefaultInterface.ReplicationFilterProcName;
end;

procedure TTransArticleProperties.Set_ReplicationFilterProcName(const pRetVal: WideString);
  { Warning: The property ReplicationFilterProcName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReplicationFilterProcName := pRetVal;
end;

function TTransArticleProperties.Get_CreationScriptPath: WideString;
begin
    Result := DefaultInterface.CreationScriptPath;
end;

procedure TTransArticleProperties.Set_CreationScriptPath(const pRetVal: WideString);
  { Warning: The property CreationScriptPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreationScriptPath := pRetVal;
end;

function TTransArticleProperties.Get_DestinationOwnerName: WideString;
begin
    Result := DefaultInterface.DestinationOwnerName;
end;

procedure TTransArticleProperties.Set_DestinationOwnerName(const pRetVal: WideString);
  { Warning: The property DestinationOwnerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationOwnerName := pRetVal;
end;

function TTransArticleProperties.Get_DestinationObjectName: WideString;
begin
    Result := DefaultInterface.DestinationObjectName;
end;

procedure TTransArticleProperties.Set_DestinationObjectName(const pRetVal: WideString);
  { Warning: The property DestinationObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationObjectName := pRetVal;
end;

function TTransArticleProperties.Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
begin
    Result := DefaultInterface.PreCreationMethod;
end;

procedure TTransArticleProperties.Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
begin
  DefaultInterface.Set_PreCreationMethod(pRetVal);
end;

function TTransArticleProperties.Get_FilterClause: WideString;
begin
    Result := DefaultInterface.FilterClause;
end;

procedure TTransArticleProperties.Set_FilterClause(const pRetVal: WideString);
  { Warning: The property FilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FilterClause := pRetVal;
end;

function TTransArticleProperties.Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
begin
    Result := DefaultInterface.CreationScriptOptions;
end;

procedure TTransArticleProperties.Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
begin
  DefaultInterface.Set_CreationScriptOptions(pRetVal);
end;

function TTransArticleProperties.Get_CommandOptions: SQLDMO_COMMANDOPTION_TYPE;
begin
    Result := DefaultInterface.CommandOptions;
end;

procedure TTransArticleProperties.Set_CommandOptions(pRetVal: SQLDMO_COMMANDOPTION_TYPE);
begin
  DefaultInterface.Set_CommandOptions(pRetVal);
end;

function TTransArticleProperties.Get_TransSubscriptions: TransSubscriptions;
begin
    Result := DefaultInterface.TransSubscriptions;
end;

{$ENDIF}

class function CoTransPublication.Create: _TransPublication;
begin
  Result := CreateComObject(CLASS_TransPublication) as _TransPublication;
end;

class function CoTransPublication.CreateRemote(const MachineName: string): _TransPublication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransPublication) as _TransPublication;
end;

procedure TTransPublication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransPublication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransPublication;
  end;
end;

procedure TTransPublication.ConnectTo(svrIntf: _TransPublication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransPublication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransPublication.GetDefaultInterface: _TransPublication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransPublication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransPublicationProperties.Create(Self);
{$ENDIF}
end;

destructor TTransPublication.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransPublication.GetServerProperties: TTransPublicationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransPublication.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransPublication.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransPublication.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransPublication.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransPublication.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransPublication.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransPublication.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTransPublication.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTransPublication.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTransPublication.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransPublication.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransPublication.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTransPublication.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTransPublication.Get_RetentionPeriod: Integer;
begin
    Result := DefaultInterface.RetentionPeriod;
end;

procedure TTransPublication.Set_RetentionPeriod(pRetVal: Integer);
begin
  DefaultInterface.Set_RetentionPeriod(pRetVal);
end;

function TTransPublication.Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
begin
    Result := DefaultInterface.SnapshotMethod;
end;

procedure TTransPublication.Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
begin
  DefaultInterface.Set_SnapshotMethod(pRetVal);
end;

function TTransPublication.Get_SnapshotAvailable: WordBool;
begin
    Result := DefaultInterface.SnapshotAvailable;
end;

procedure TTransPublication.Set_SnapshotAvailable(pRetVal: WordBool);
begin
  DefaultInterface.Set_SnapshotAvailable(pRetVal);
end;

function TTransPublication.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

function TTransPublication.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

function TTransPublication.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TTransPublication.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TTransPublication.Get_HasSubscription: WordBool;
begin
    Result := DefaultInterface.HasSubscription;
end;

function TTransPublication.Get_AllowSynchronousTransactions: WordBool;
begin
    Result := DefaultInterface.AllowSynchronousTransactions;
end;

procedure TTransPublication.Set_AllowSynchronousTransactions(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowSynchronousTransactions(pRetVal);
end;

function TTransPublication.Get_AutogenerateSyncProcedures: WordBool;
begin
    Result := DefaultInterface.AutogenerateSyncProcedures;
end;

procedure TTransPublication.Set_AutogenerateSyncProcedures(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutogenerateSyncProcedures(pRetVal);
end;

function TTransPublication.Get_ReplicationFrequency: SQLDMO_REPFREQ_TYPE;
begin
    Result := DefaultInterface.ReplicationFrequency;
end;

procedure TTransPublication.Set_ReplicationFrequency(pRetVal: SQLDMO_REPFREQ_TYPE);
begin
  DefaultInterface.Set_ReplicationFrequency(pRetVal);
end;

function TTransPublication.Get_TransArticles: TransArticles;
begin
    Result := DefaultInterface.TransArticles;
end;

function TTransPublication.Get_TransSubscriptions: TransSubscriptions;
begin
    Result := DefaultInterface.TransSubscriptions;
end;

procedure TTransPublication.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TTransPublication.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTransPublication.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTransPublication.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

procedure TTransPublication.ActivateSubscriptions;
begin
  DefaultInterface.ActivateSubscriptions;
end;

function TTransPublication.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TTransPublication.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TTransPublication.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TTransPublication.EnumSubscriptions: QueryResults;
begin
  Result := DefaultInterface.EnumSubscriptions;
end;

procedure TTransPublication.RefreshChildren;
begin
  DefaultInterface.RefreshChildren;
end;

procedure TTransPublication.ReInitializeAllSubscriptions;
begin
  DefaultInterface.ReInitializeAllSubscriptions;
end;

function TTransPublication.EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults;
begin
  Result := DefaultInterface.EnumPublicationAccesses(bReturnGranted);
end;

procedure TTransPublication.GrantPublicationAccess(const szLoginName: WideString);
begin
  DefaultInterface.GrantPublicationAccess(szLoginName);
end;

procedure TTransPublication.RevokePublicationAccess(const szLoginName: WideString);
begin
  DefaultInterface.RevokePublicationAccess(szLoginName);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransPublicationProperties.Create(AServer: TTransPublication);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransPublicationProperties.GetDefaultInterface: _TransPublication;
begin
  Result := FServer.DefaultInterface;
end;

function TTransPublicationProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransPublicationProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransPublicationProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransPublicationProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransPublicationProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransPublicationProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransPublicationProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTransPublicationProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTransPublicationProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTransPublicationProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransPublicationProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransPublicationProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTransPublicationProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTransPublicationProperties.Get_RetentionPeriod: Integer;
begin
    Result := DefaultInterface.RetentionPeriod;
end;

procedure TTransPublicationProperties.Set_RetentionPeriod(pRetVal: Integer);
begin
  DefaultInterface.Set_RetentionPeriod(pRetVal);
end;

function TTransPublicationProperties.Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
begin
    Result := DefaultInterface.SnapshotMethod;
end;

procedure TTransPublicationProperties.Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
begin
  DefaultInterface.Set_SnapshotMethod(pRetVal);
end;

function TTransPublicationProperties.Get_SnapshotAvailable: WordBool;
begin
    Result := DefaultInterface.SnapshotAvailable;
end;

procedure TTransPublicationProperties.Set_SnapshotAvailable(pRetVal: WordBool);
begin
  DefaultInterface.Set_SnapshotAvailable(pRetVal);
end;

function TTransPublicationProperties.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

function TTransPublicationProperties.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

function TTransPublicationProperties.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TTransPublicationProperties.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TTransPublicationProperties.Get_HasSubscription: WordBool;
begin
    Result := DefaultInterface.HasSubscription;
end;

function TTransPublicationProperties.Get_AllowSynchronousTransactions: WordBool;
begin
    Result := DefaultInterface.AllowSynchronousTransactions;
end;

procedure TTransPublicationProperties.Set_AllowSynchronousTransactions(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowSynchronousTransactions(pRetVal);
end;

function TTransPublicationProperties.Get_AutogenerateSyncProcedures: WordBool;
begin
    Result := DefaultInterface.AutogenerateSyncProcedures;
end;

procedure TTransPublicationProperties.Set_AutogenerateSyncProcedures(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutogenerateSyncProcedures(pRetVal);
end;

function TTransPublicationProperties.Get_ReplicationFrequency: SQLDMO_REPFREQ_TYPE;
begin
    Result := DefaultInterface.ReplicationFrequency;
end;

procedure TTransPublicationProperties.Set_ReplicationFrequency(pRetVal: SQLDMO_REPFREQ_TYPE);
begin
  DefaultInterface.Set_ReplicationFrequency(pRetVal);
end;

function TTransPublicationProperties.Get_TransArticles: TransArticles;
begin
    Result := DefaultInterface.TransArticles;
end;

function TTransPublicationProperties.Get_TransSubscriptions: TransSubscriptions;
begin
    Result := DefaultInterface.TransSubscriptions;
end;

{$ENDIF}

class function CoMergeSubsetFilter.Create: _MergeSubsetFilter;
begin
  Result := CreateComObject(CLASS_MergeSubsetFilter) as _MergeSubsetFilter;
end;

class function CoMergeSubsetFilter.CreateRemote(const MachineName: string): _MergeSubsetFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeSubsetFilter) as _MergeSubsetFilter;
end;

procedure TMergeSubsetFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10035100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10035106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeSubsetFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeSubsetFilter;
  end;
end;

procedure TMergeSubsetFilter.ConnectTo(svrIntf: _MergeSubsetFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeSubsetFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeSubsetFilter.GetDefaultInterface: _MergeSubsetFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeSubsetFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeSubsetFilterProperties.Create(Self);
{$ENDIF}
end;

destructor TMergeSubsetFilter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeSubsetFilter.GetServerProperties: TMergeSubsetFilterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeSubsetFilter.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeSubsetFilter.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeSubsetFilter.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeSubsetFilter.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeSubsetFilter.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeSubsetFilter.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeSubsetFilter.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeSubsetFilter.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeSubsetFilter.Get_JoinArticleName: WideString;
begin
    Result := DefaultInterface.JoinArticleName;
end;

procedure TMergeSubsetFilter.Set_JoinArticleName(const pRetVal: WideString);
  { Warning: The property JoinArticleName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JoinArticleName := pRetVal;
end;

function TMergeSubsetFilter.Get_JoinFilterClause: WideString;
begin
    Result := DefaultInterface.JoinFilterClause;
end;

procedure TMergeSubsetFilter.Set_JoinFilterClause(const pRetVal: WideString);
  { Warning: The property JoinFilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JoinFilterClause := pRetVal;
end;

function TMergeSubsetFilter.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergeSubsetFilter.Get_JoinUniqueKey: WordBool;
begin
    Result := DefaultInterface.JoinUniqueKey;
end;

procedure TMergeSubsetFilter.Set_JoinUniqueKey(pRetVal: WordBool);
begin
  DefaultInterface.Set_JoinUniqueKey(pRetVal);
end;

procedure TMergeSubsetFilter.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergeSubsetFilter.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergeSubsetFilter.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergeSubsetFilter.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeSubsetFilterProperties.Create(AServer: TMergeSubsetFilter);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeSubsetFilterProperties.GetDefaultInterface: _MergeSubsetFilter;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeSubsetFilterProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeSubsetFilterProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeSubsetFilterProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeSubsetFilterProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeSubsetFilterProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeSubsetFilterProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeSubsetFilterProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeSubsetFilterProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeSubsetFilterProperties.Get_JoinArticleName: WideString;
begin
    Result := DefaultInterface.JoinArticleName;
end;

procedure TMergeSubsetFilterProperties.Set_JoinArticleName(const pRetVal: WideString);
  { Warning: The property JoinArticleName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JoinArticleName := pRetVal;
end;

function TMergeSubsetFilterProperties.Get_JoinFilterClause: WideString;
begin
    Result := DefaultInterface.JoinFilterClause;
end;

procedure TMergeSubsetFilterProperties.Set_JoinFilterClause(const pRetVal: WideString);
  { Warning: The property JoinFilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.JoinFilterClause := pRetVal;
end;

function TMergeSubsetFilterProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergeSubsetFilterProperties.Get_JoinUniqueKey: WordBool;
begin
    Result := DefaultInterface.JoinUniqueKey;
end;

procedure TMergeSubsetFilterProperties.Set_JoinUniqueKey(pRetVal: WordBool);
begin
  DefaultInterface.Set_JoinUniqueKey(pRetVal);
end;

{$ENDIF}

class function CoMergeArticle.Create: _MergeArticle;
begin
  Result := CreateComObject(CLASS_MergeArticle) as _MergeArticle;
end;

class function CoMergeArticle.CreateRemote(const MachineName: string): _MergeArticle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeArticle) as _MergeArticle;
end;

procedure TMergeArticle.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030500-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030506-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeArticle.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeArticle;
  end;
end;

procedure TMergeArticle.ConnectTo(svrIntf: _MergeArticle);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeArticle.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeArticle.GetDefaultInterface: _MergeArticle;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeArticle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeArticleProperties.Create(Self);
{$ENDIF}
end;

destructor TMergeArticle.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeArticle.GetServerProperties: TMergeArticleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeArticle.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeArticle.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeArticle.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeArticle.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeArticle.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeArticle.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeArticle.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeArticle.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeArticle.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergeArticle.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TMergeArticle.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TMergeArticle.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TMergeArticle.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TMergeArticle.Get_Status: SQLDMO_ARTSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TMergeArticle.Set_Status(pRetVal: SQLDMO_ARTSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TMergeArticle.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergeArticle.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergeArticle.Get_ConflictTable: WideString;
begin
    Result := DefaultInterface.ConflictTable;
end;

function TMergeArticle.Get_ArticleResolver: WideString;
begin
    Result := DefaultInterface.ArticleResolver;
end;

procedure TMergeArticle.Set_ArticleResolver(const pRetVal: WideString);
  { Warning: The property ArticleResolver has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ArticleResolver := pRetVal;
end;

function TMergeArticle.Get_SubsetFilterClause: WideString;
begin
    Result := DefaultInterface.SubsetFilterClause;
end;

procedure TMergeArticle.Set_SubsetFilterClause(const pRetVal: WideString);
  { Warning: The property SubsetFilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubsetFilterClause := pRetVal;
end;

function TMergeArticle.Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
begin
    Result := DefaultInterface.PreCreationMethod;
end;

procedure TMergeArticle.Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
begin
  DefaultInterface.Set_PreCreationMethod(pRetVal);
end;

function TMergeArticle.Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
begin
    Result := DefaultInterface.CreationScriptOptions;
end;

procedure TMergeArticle.Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
begin
  DefaultInterface.Set_CreationScriptOptions(pRetVal);
end;

function TMergeArticle.Get_ArticleType: SQLDMO_ARTICLE_TYPE;
begin
    Result := DefaultInterface.ArticleType;
end;

procedure TMergeArticle.Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
begin
  DefaultInterface.Set_ArticleType(pRetVal);
end;

function TMergeArticle.Get_ColumnTracking: WordBool;
begin
    Result := DefaultInterface.ColumnTracking;
end;

procedure TMergeArticle.Set_ColumnTracking(pRetVal: WordBool);
begin
  DefaultInterface.Set_ColumnTracking(pRetVal);
end;

function TMergeArticle.Get_CreationScriptPath: WideString;
begin
    Result := DefaultInterface.CreationScriptPath;
end;

procedure TMergeArticle.Set_CreationScriptPath(const pRetVal: WideString);
  { Warning: The property CreationScriptPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreationScriptPath := pRetVal;
end;

function TMergeArticle.Get_SnapshotObjectOwner: WideString;
begin
    Result := DefaultInterface.SnapshotObjectOwner;
end;

function TMergeArticle.Get_SnapshotObjectName: WideString;
begin
    Result := DefaultInterface.SnapshotObjectName;
end;

function TMergeArticle.Get_ResolverInfo: WideString;
begin
    Result := DefaultInterface.ResolverInfo;
end;

procedure TMergeArticle.Set_ResolverInfo(const pRetVal: WideString);
  { Warning: The property ResolverInfo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResolverInfo := pRetVal;
end;

function TMergeArticle.Get_MergeSubsetFilters: MergeSubsetFilters;
begin
    Result := DefaultInterface.MergeSubsetFilters;
end;

procedure TMergeArticle.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergeArticle.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergeArticle.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergeArticle.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TMergeArticle.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TMergeArticle.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TMergeArticle.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TMergeArticle.ScriptDestinationObject: WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(EmptyParam, EmptyParam, EmptyParam);
end;

function TMergeArticle.ScriptDestinationObject(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, EmptyParam, EmptyParam);
end;

function TMergeArticle.ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, ScriptFilePath, EmptyParam);
end;

function TMergeArticle.ScriptDestinationObject(ScriptType: OleVariant; ScriptFilePath: OleVariant; 
                                               Script2Type: OleVariant): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject(ScriptType, ScriptFilePath, Script2Type);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeArticleProperties.Create(AServer: TMergeArticle);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeArticleProperties.GetDefaultInterface: _MergeArticle;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeArticleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeArticleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeArticleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeArticleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeArticleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeArticleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeArticleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeArticleProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeArticleProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergeArticleProperties.Get_SourceObjectOwner: WideString;
begin
    Result := DefaultInterface.SourceObjectOwner;
end;

procedure TMergeArticleProperties.Set_SourceObjectOwner(const pRetVal: WideString);
  { Warning: The property SourceObjectOwner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectOwner := pRetVal;
end;

function TMergeArticleProperties.Get_SourceObjectName: WideString;
begin
    Result := DefaultInterface.SourceObjectName;
end;

procedure TMergeArticleProperties.Set_SourceObjectName(const pRetVal: WideString);
  { Warning: The property SourceObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SourceObjectName := pRetVal;
end;

function TMergeArticleProperties.Get_Status: SQLDMO_ARTSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TMergeArticleProperties.Set_Status(pRetVal: SQLDMO_ARTSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TMergeArticleProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergeArticleProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergeArticleProperties.Get_ConflictTable: WideString;
begin
    Result := DefaultInterface.ConflictTable;
end;

function TMergeArticleProperties.Get_ArticleResolver: WideString;
begin
    Result := DefaultInterface.ArticleResolver;
end;

procedure TMergeArticleProperties.Set_ArticleResolver(const pRetVal: WideString);
  { Warning: The property ArticleResolver has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ArticleResolver := pRetVal;
end;

function TMergeArticleProperties.Get_SubsetFilterClause: WideString;
begin
    Result := DefaultInterface.SubsetFilterClause;
end;

procedure TMergeArticleProperties.Set_SubsetFilterClause(const pRetVal: WideString);
  { Warning: The property SubsetFilterClause has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubsetFilterClause := pRetVal;
end;

function TMergeArticleProperties.Get_PreCreationMethod: SQLDMO_PREARTICLE_TYPE;
begin
    Result := DefaultInterface.PreCreationMethod;
end;

procedure TMergeArticleProperties.Set_PreCreationMethod(pRetVal: SQLDMO_PREARTICLE_TYPE);
begin
  DefaultInterface.Set_PreCreationMethod(pRetVal);
end;

function TMergeArticleProperties.Get_CreationScriptOptions: SQLDMO_CREATIONSCRIPT_TYPE;
begin
    Result := DefaultInterface.CreationScriptOptions;
end;

procedure TMergeArticleProperties.Set_CreationScriptOptions(pRetVal: SQLDMO_CREATIONSCRIPT_TYPE);
begin
  DefaultInterface.Set_CreationScriptOptions(pRetVal);
end;

function TMergeArticleProperties.Get_ArticleType: SQLDMO_ARTICLE_TYPE;
begin
    Result := DefaultInterface.ArticleType;
end;

procedure TMergeArticleProperties.Set_ArticleType(pRetVal: SQLDMO_ARTICLE_TYPE);
begin
  DefaultInterface.Set_ArticleType(pRetVal);
end;

function TMergeArticleProperties.Get_ColumnTracking: WordBool;
begin
    Result := DefaultInterface.ColumnTracking;
end;

procedure TMergeArticleProperties.Set_ColumnTracking(pRetVal: WordBool);
begin
  DefaultInterface.Set_ColumnTracking(pRetVal);
end;

function TMergeArticleProperties.Get_CreationScriptPath: WideString;
begin
    Result := DefaultInterface.CreationScriptPath;
end;

procedure TMergeArticleProperties.Set_CreationScriptPath(const pRetVal: WideString);
  { Warning: The property CreationScriptPath has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CreationScriptPath := pRetVal;
end;

function TMergeArticleProperties.Get_SnapshotObjectOwner: WideString;
begin
    Result := DefaultInterface.SnapshotObjectOwner;
end;

function TMergeArticleProperties.Get_SnapshotObjectName: WideString;
begin
    Result := DefaultInterface.SnapshotObjectName;
end;

function TMergeArticleProperties.Get_ResolverInfo: WideString;
begin
    Result := DefaultInterface.ResolverInfo;
end;

procedure TMergeArticleProperties.Set_ResolverInfo(const pRetVal: WideString);
  { Warning: The property ResolverInfo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResolverInfo := pRetVal;
end;

function TMergeArticleProperties.Get_MergeSubsetFilters: MergeSubsetFilters;
begin
    Result := DefaultInterface.MergeSubsetFilters;
end;

{$ENDIF}

class function CoMergeSubscription.Create: _MergeSubscription;
begin
  Result := CreateComObject(CLASS_MergeSubscription) as _MergeSubscription;
end;

class function CoMergeSubscription.CreateRemote(const MachineName: string): _MergeSubscription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeSubscription) as _MergeSubscription;
end;

procedure TMergeSubscription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030600-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030606-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeSubscription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeSubscription;
  end;
end;

procedure TMergeSubscription.ConnectTo(svrIntf: _MergeSubscription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeSubscription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeSubscription.GetDefaultInterface: _MergeSubscription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeSubscription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeSubscriptionProperties.Create(Self);
{$ENDIF}
end;

destructor TMergeSubscription.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeSubscription.GetServerProperties: TMergeSubscriptionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeSubscription.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeSubscription.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeSubscription.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeSubscription.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeSubscription.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeSubscription.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeSubscription.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TMergeSubscription.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TMergeSubscription.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TMergeSubscription.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TMergeSubscription.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TMergeSubscription.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TMergeSubscription.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TMergeSubscription.Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TMergeSubscription.Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TMergeSubscription.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

procedure TMergeSubscription.Set_Priority(pRetVal: Single);
begin
  DefaultInterface.Set_Priority(pRetVal);
end;

function TMergeSubscription.Get_MergeSchedule: Schedule;
begin
    Result := DefaultInterface.MergeSchedule;
end;

function TMergeSubscription.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TMergeSubscription.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TMergeSubscription.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

function TMergeSubscription.Get_MergeJobID: WideString;
begin
    Result := DefaultInterface.MergeJobID;
end;

function TMergeSubscription.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergeSubscription.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

procedure TMergeSubscription.Set_EnabledForSyncMgr(Param1: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(Param1);
end;

procedure TMergeSubscription.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergeSubscription.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergeSubscription.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergeSubscription.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TMergeSubscription.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TMergeSubscription.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TMergeSubscription.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

procedure TMergeSubscription.ReInitialize;
begin
  DefaultInterface.ReInitialize;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeSubscriptionProperties.Create(AServer: TMergeSubscription);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeSubscriptionProperties.GetDefaultInterface: _MergeSubscription;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeSubscriptionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeSubscriptionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeSubscriptionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeSubscriptionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeSubscriptionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeSubscriptionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeSubscriptionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TMergeSubscriptionProperties.Get_Subscriber: WideString;
begin
    Result := DefaultInterface.Subscriber;
end;

procedure TMergeSubscriptionProperties.Set_Subscriber(const pRetVal: WideString);
  { Warning: The property Subscriber has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Subscriber := pRetVal;
end;

function TMergeSubscriptionProperties.Get_SubscriptionDB: WideString;
begin
    Result := DefaultInterface.SubscriptionDB;
end;

procedure TMergeSubscriptionProperties.Set_SubscriptionDB(const pRetVal: WideString);
  { Warning: The property SubscriptionDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriptionDB := pRetVal;
end;

function TMergeSubscriptionProperties.Get_Status: SQLDMO_SUBSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

procedure TMergeSubscriptionProperties.Set_Status(pRetVal: SQLDMO_SUBSTATUS_TYPE);
begin
  DefaultInterface.Set_Status(pRetVal);
end;

function TMergeSubscriptionProperties.Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TMergeSubscriptionProperties.Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TMergeSubscriptionProperties.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

procedure TMergeSubscriptionProperties.Set_Priority(pRetVal: Single);
begin
  DefaultInterface.Set_Priority(pRetVal);
end;

function TMergeSubscriptionProperties.Get_MergeSchedule: Schedule;
begin
    Result := DefaultInterface.MergeSchedule;
end;

function TMergeSubscriptionProperties.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TMergeSubscriptionProperties.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TMergeSubscriptionProperties.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

function TMergeSubscriptionProperties.Get_MergeJobID: WideString;
begin
    Result := DefaultInterface.MergeJobID;
end;

function TMergeSubscriptionProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergeSubscriptionProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

procedure TMergeSubscriptionProperties.Set_EnabledForSyncMgr(Param1: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(Param1);
end;

{$ENDIF}

class function CoMergePublication.Create: _MergePublication;
begin
  Result := CreateComObject(CLASS_MergePublication) as _MergePublication;
end;

class function CoMergePublication.CreateRemote(const MachineName: string): _MergePublication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergePublication) as _MergePublication;
end;

procedure TMergePublication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030400-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030406-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergePublication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergePublication;
  end;
end;

procedure TMergePublication.ConnectTo(svrIntf: _MergePublication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergePublication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergePublication.GetDefaultInterface: _MergePublication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergePublication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergePublicationProperties.Create(Self);
{$ENDIF}
end;

destructor TMergePublication.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergePublication.GetServerProperties: TMergePublicationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergePublication.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergePublication.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergePublication.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergePublication.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergePublication.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergePublication.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergePublication.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergePublication.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergePublication.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergePublication.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergePublication.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergePublication.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TMergePublication.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TMergePublication.Get_RetentionPeriod: Integer;
begin
    Result := DefaultInterface.RetentionPeriod;
end;

procedure TMergePublication.Set_RetentionPeriod(pRetVal: Integer);
begin
  DefaultInterface.Set_RetentionPeriod(pRetVal);
end;

function TMergePublication.Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
begin
    Result := DefaultInterface.SnapshotMethod;
end;

procedure TMergePublication.Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
begin
  DefaultInterface.Set_SnapshotMethod(pRetVal);
end;

function TMergePublication.Get_SnapshotAvailable: WordBool;
begin
    Result := DefaultInterface.SnapshotAvailable;
end;

procedure TMergePublication.Set_SnapshotAvailable(pRetVal: WordBool);
begin
  DefaultInterface.Set_SnapshotAvailable(pRetVal);
end;

function TMergePublication.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

function TMergePublication.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

function TMergePublication.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TMergePublication.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TMergePublication.Get_HasSubscription: WordBool;
begin
    Result := DefaultInterface.HasSubscription;
end;

function TMergePublication.Get_CentralizedConflicts: WordBool;
begin
    Result := DefaultInterface.CentralizedConflicts;
end;

procedure TMergePublication.Set_CentralizedConflicts(pRetVal: WordBool);
begin
  DefaultInterface.Set_CentralizedConflicts(pRetVal);
end;

function TMergePublication.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

function TMergePublication.Get_DynamicFilters: WordBool;
begin
    Result := DefaultInterface.DynamicFilters;
end;

procedure TMergePublication.Set_DynamicFilters(pRetVal: WordBool);
begin
  DefaultInterface.Set_DynamicFilters(pRetVal);
end;

function TMergePublication.Get_MergeArticles: MergeArticles;
begin
    Result := DefaultInterface.MergeArticles;
end;

function TMergePublication.Get_MergeSubscriptions: MergeSubscriptions;
begin
    Result := DefaultInterface.MergeSubscriptions;
end;

procedure TMergePublication.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergePublication.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergePublication.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergePublication.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TMergePublication.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TMergePublication.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TMergePublication.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TMergePublication.EnumSubscriptions: QueryResults;
begin
  Result := DefaultInterface.EnumSubscriptions;
end;

procedure TMergePublication.RefreshChildren;
begin
  DefaultInterface.RefreshChildren;
end;

function TMergePublication.EnumPublicationReferences: QueryResults;
begin
  Result := DefaultInterface.EnumPublicationReferences;
end;

procedure TMergePublication.ReInitializeAllSubscriptions;
begin
  DefaultInterface.ReInitializeAllSubscriptions;
end;

function TMergePublication.EnumPublicationAccesses(bReturnGranted: WordBool): QueryResults;
begin
  Result := DefaultInterface.EnumPublicationAccesses(bReturnGranted);
end;

procedure TMergePublication.GrantPublicationAccess(const szLoginName: WideString);
begin
  DefaultInterface.GrantPublicationAccess(szLoginName);
end;

procedure TMergePublication.RevokePublicationAccess(const szLoginName: WideString);
begin
  DefaultInterface.RevokePublicationAccess(szLoginName);
end;

procedure TMergePublication.GenerateFilters;
begin
  DefaultInterface.GenerateFilters;
end;

function TMergePublication.EnumGeneratedSubsetFilters(const ArticleName: WideString; 
                                                      const SubsetFilterClause: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumGeneratedSubsetFilters(ArticleName, SubsetFilterClause);
end;

function TMergePublication.EnumAllSubsetFilters: QueryResults;
begin
  Result := DefaultInterface.EnumAllSubsetFilters;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergePublicationProperties.Create(AServer: TMergePublication);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergePublicationProperties.GetDefaultInterface: _MergePublication;
begin
  Result := FServer.DefaultInterface;
end;

function TMergePublicationProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergePublicationProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergePublicationProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergePublicationProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergePublicationProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergePublicationProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergePublicationProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergePublicationProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergePublicationProperties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TMergePublicationProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergePublicationProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergePublicationProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TMergePublicationProperties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TMergePublicationProperties.Get_RetentionPeriod: Integer;
begin
    Result := DefaultInterface.RetentionPeriod;
end;

procedure TMergePublicationProperties.Set_RetentionPeriod(pRetVal: Integer);
begin
  DefaultInterface.Set_RetentionPeriod(pRetVal);
end;

function TMergePublicationProperties.Get_SnapshotMethod: SQLDMO_INITIALSYNC_TYPE;
begin
    Result := DefaultInterface.SnapshotMethod;
end;

procedure TMergePublicationProperties.Set_SnapshotMethod(pRetVal: SQLDMO_INITIALSYNC_TYPE);
begin
  DefaultInterface.Set_SnapshotMethod(pRetVal);
end;

function TMergePublicationProperties.Get_SnapshotAvailable: WordBool;
begin
    Result := DefaultInterface.SnapshotAvailable;
end;

procedure TMergePublicationProperties.Set_SnapshotAvailable(pRetVal: WordBool);
begin
  DefaultInterface.Set_SnapshotAvailable(pRetVal);
end;

function TMergePublicationProperties.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

function TMergePublicationProperties.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

function TMergePublicationProperties.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TMergePublicationProperties.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

function TMergePublicationProperties.Get_HasSubscription: WordBool;
begin
    Result := DefaultInterface.HasSubscription;
end;

function TMergePublicationProperties.Get_CentralizedConflicts: WordBool;
begin
    Result := DefaultInterface.CentralizedConflicts;
end;

procedure TMergePublicationProperties.Set_CentralizedConflicts(pRetVal: WordBool);
begin
  DefaultInterface.Set_CentralizedConflicts(pRetVal);
end;

function TMergePublicationProperties.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

function TMergePublicationProperties.Get_DynamicFilters: WordBool;
begin
    Result := DefaultInterface.DynamicFilters;
end;

procedure TMergePublicationProperties.Set_DynamicFilters(pRetVal: WordBool);
begin
  DefaultInterface.Set_DynamicFilters(pRetVal);
end;

function TMergePublicationProperties.Get_MergeArticles: MergeArticles;
begin
    Result := DefaultInterface.MergeArticles;
end;

function TMergePublicationProperties.Get_MergeSubscriptions: MergeSubscriptions;
begin
    Result := DefaultInterface.MergeSubscriptions;
end;

{$ENDIF}

class function CoMergeDynamicSnapshotJob.Create: _MergeDynamicSnapshotJob;
begin
  Result := CreateComObject(CLASS_MergeDynamicSnapshotJob) as _MergeDynamicSnapshotJob;
end;

class function CoMergeDynamicSnapshotJob.CreateRemote(const MachineName: string): _MergeDynamicSnapshotJob;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeDynamicSnapshotJob) as _MergeDynamicSnapshotJob;
end;

procedure TMergeDynamicSnapshotJob.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10036100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10036106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeDynamicSnapshotJob.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeDynamicSnapshotJob;
  end;
end;

procedure TMergeDynamicSnapshotJob.ConnectTo(svrIntf: _MergeDynamicSnapshotJob);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeDynamicSnapshotJob.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeDynamicSnapshotJob.GetDefaultInterface: _MergeDynamicSnapshotJob;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeDynamicSnapshotJob.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeDynamicSnapshotJobProperties.Create(Self);
{$ENDIF}
end;

destructor TMergeDynamicSnapshotJob.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeDynamicSnapshotJob.GetServerProperties: TMergeDynamicSnapshotJobProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeDynamicSnapshotJob.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeDynamicSnapshotJob.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeDynamicSnapshotJob.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeDynamicSnapshotJob.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeDynamicSnapshotJob.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeDynamicSnapshotJob.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeDynamicSnapshotJob.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeDynamicSnapshotJob.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeDynamicSnapshotJob.Get_DynamicSnapshotJobID: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotJobID;
end;

function TMergeDynamicSnapshotJob.Get_DynamicFilterLogin: WideString;
begin
    Result := DefaultInterface.DynamicFilterLogin;
end;

procedure TMergeDynamicSnapshotJob.Set_DynamicFilterLogin(const pRetVal: WideString);
  { Warning: The property DynamicFilterLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicFilterLogin := pRetVal;
end;

function TMergeDynamicSnapshotJob.Get_DynamicFilterHostName: WideString;
begin
    Result := DefaultInterface.DynamicFilterHostName;
end;

procedure TMergeDynamicSnapshotJob.Set_DynamicFilterHostName(const pRetVal: WideString);
  { Warning: The property DynamicFilterHostName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicFilterHostName := pRetVal;
end;

function TMergeDynamicSnapshotJob.Get_DynamicSnapshotLocation: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotLocation;
end;

procedure TMergeDynamicSnapshotJob.Set_DynamicSnapshotLocation(const pRetVal: WideString);
  { Warning: The property DynamicSnapshotLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicSnapshotLocation := pRetVal;
end;

function TMergeDynamicSnapshotJob.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

procedure TMergeDynamicSnapshotJob.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergeDynamicSnapshotJob.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergeDynamicSnapshotJob.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergeDynamicSnapshotJob.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeDynamicSnapshotJobProperties.Create(AServer: TMergeDynamicSnapshotJob);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeDynamicSnapshotJobProperties.GetDefaultInterface: _MergeDynamicSnapshotJob;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeDynamicSnapshotJobProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergeDynamicSnapshotJobProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergeDynamicSnapshotJobProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergeDynamicSnapshotJobProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergeDynamicSnapshotJobProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergeDynamicSnapshotJobProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergeDynamicSnapshotJobProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMergeDynamicSnapshotJobProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TMergeDynamicSnapshotJobProperties.Get_DynamicSnapshotJobID: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotJobID;
end;

function TMergeDynamicSnapshotJobProperties.Get_DynamicFilterLogin: WideString;
begin
    Result := DefaultInterface.DynamicFilterLogin;
end;

procedure TMergeDynamicSnapshotJobProperties.Set_DynamicFilterLogin(const pRetVal: WideString);
  { Warning: The property DynamicFilterLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicFilterLogin := pRetVal;
end;

function TMergeDynamicSnapshotJobProperties.Get_DynamicFilterHostName: WideString;
begin
    Result := DefaultInterface.DynamicFilterHostName;
end;

procedure TMergeDynamicSnapshotJobProperties.Set_DynamicFilterHostName(const pRetVal: WideString);
  { Warning: The property DynamicFilterHostName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicFilterHostName := pRetVal;
end;

function TMergeDynamicSnapshotJobProperties.Get_DynamicSnapshotLocation: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotLocation;
end;

procedure TMergeDynamicSnapshotJobProperties.Set_DynamicSnapshotLocation(const pRetVal: WideString);
  { Warning: The property DynamicSnapshotLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicSnapshotLocation := pRetVal;
end;

function TMergeDynamicSnapshotJobProperties.Get_SnapshotSchedule: Schedule;
begin
    Result := DefaultInterface.SnapshotSchedule;
end;

{$ENDIF}

class function CoTransPullSubscription.Create: _TransPullSubscription;
begin
  Result := CreateComObject(CLASS_TransPullSubscription) as _TransPullSubscription;
end;

class function CoTransPullSubscription.CreateRemote(const MachineName: string): _TransPullSubscription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransPullSubscription) as _TransPullSubscription;
end;

procedure TTransPullSubscription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030B00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030B06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransPullSubscription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransPullSubscription;
  end;
end;

procedure TTransPullSubscription.ConnectTo(svrIntf: _TransPullSubscription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransPullSubscription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransPullSubscription.GetDefaultInterface: _TransPullSubscription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransPullSubscription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransPullSubscriptionProperties.Create(Self);
{$ENDIF}
end;

destructor TTransPullSubscription.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransPullSubscription.GetServerProperties: TTransPullSubscriptionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransPullSubscription.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransPullSubscription.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransPullSubscription.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransPullSubscription.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransPullSubscription.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransPullSubscription.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransPullSubscription.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTransPullSubscription.Get_Publisher: WideString;
begin
    Result := DefaultInterface.Publisher;
end;

procedure TTransPullSubscription.Set_Publisher(const pRetVal: WideString);
  { Warning: The property Publisher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publisher := pRetVal;
end;

function TTransPullSubscription.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TTransPullSubscription.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TTransPullSubscription.Get_Publication: WideString;
begin
    Result := DefaultInterface.Publication;
end;

procedure TTransPullSubscription.Set_Publication(const pRetVal: WideString);
  { Warning: The property Publication has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publication := pRetVal;
end;

function TTransPullSubscription.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransPullSubscription.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransPullSubscription.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TTransPullSubscription.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TTransPullSubscription.Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TTransPullSubscription.Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TTransPullSubscription.Get_Distributor: WideString;
begin
    Result := DefaultInterface.Distributor;
end;

procedure TTransPullSubscription.Set_Distributor(const pRetVal: WideString);
  { Warning: The property Distributor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Distributor := pRetVal;
end;

function TTransPullSubscription.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TTransPullSubscription.Get_DistributorSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.DistributorSecurity;
end;

procedure TTransPullSubscription.Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SubscriberSecurityMode(Param1);
end;

procedure TTransPullSubscription.Set_SubscriberLogin(const Param1: WideString);
  { Warning: The property SubscriberLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberLogin := Param1;
end;

procedure TTransPullSubscription.Set_SubscriberPassword(const Param1: WideString);
  { Warning: The property SubscriberPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberPassword := Param1;
end;

function TTransPullSubscription.Get_EnabledForSyncMgr: WordBool;
begin
    Result := DefaultInterface.EnabledForSyncMgr;
end;

procedure TTransPullSubscription.Set_EnabledForSyncMgr(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(pRetVal);
end;

function TTransPullSubscription.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TTransPullSubscription.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TTransPullSubscription.Get_FTPPort: LongWord;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TTransPullSubscription.Set_FTPPort(pRetVal: LongWord);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TTransPullSubscription.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TTransPullSubscription.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TTransPullSubscription.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TTransPullSubscription.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TTransPullSubscription.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

function TTransPullSubscription.Get_LastDistributionDate: WideString;
begin
    Result := DefaultInterface.LastDistributionDate;
end;

function TTransPullSubscription.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TTransPullSubscription.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

procedure TTransPullSubscription.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TTransPullSubscription.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TTransPullSubscription.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TTransPullSubscription.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TTransPullSubscription.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TTransPullSubscription.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TTransPullSubscription.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TTransPullSubscription.EnumJobInfo: QueryResults;
begin
  Result := DefaultInterface.EnumJobInfo;
end;

procedure TTransPullSubscription.ReInitialize;
begin
  DefaultInterface.ReInitialize;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransPullSubscriptionProperties.Create(AServer: TTransPullSubscription);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransPullSubscriptionProperties.GetDefaultInterface: _TransPullSubscription;
begin
  Result := FServer.DefaultInterface;
end;

function TTransPullSubscriptionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTransPullSubscriptionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTransPullSubscriptionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTransPullSubscriptionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTransPullSubscriptionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTransPullSubscriptionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTransPullSubscriptionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTransPullSubscriptionProperties.Get_Publisher: WideString;
begin
    Result := DefaultInterface.Publisher;
end;

procedure TTransPullSubscriptionProperties.Set_Publisher(const pRetVal: WideString);
  { Warning: The property Publisher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publisher := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TTransPullSubscriptionProperties.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_Publication: WideString;
begin
    Result := DefaultInterface.Publication;
end;

procedure TTransPullSubscriptionProperties.Set_Publication(const pRetVal: WideString);
  { Warning: The property Publication has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publication := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TTransPullSubscriptionProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TTransPullSubscriptionProperties.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TTransPullSubscriptionProperties.Get_SubscriberType: SQLDMO_TRANSUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TTransPullSubscriptionProperties.Set_SubscriberType(pRetVal: SQLDMO_TRANSUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TTransPullSubscriptionProperties.Get_Distributor: WideString;
begin
    Result := DefaultInterface.Distributor;
end;

procedure TTransPullSubscriptionProperties.Set_Distributor(const pRetVal: WideString);
  { Warning: The property Distributor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Distributor := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TTransPullSubscriptionProperties.Get_DistributorSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.DistributorSecurity;
end;

procedure TTransPullSubscriptionProperties.Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SubscriberSecurityMode(Param1);
end;

procedure TTransPullSubscriptionProperties.Set_SubscriberLogin(const Param1: WideString);
  { Warning: The property SubscriberLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberLogin := Param1;
end;

procedure TTransPullSubscriptionProperties.Set_SubscriberPassword(const Param1: WideString);
  { Warning: The property SubscriberPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberPassword := Param1;
end;

function TTransPullSubscriptionProperties.Get_EnabledForSyncMgr: WordBool;
begin
    Result := DefaultInterface.EnabledForSyncMgr;
end;

procedure TTransPullSubscriptionProperties.Set_EnabledForSyncMgr(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(pRetVal);
end;

function TTransPullSubscriptionProperties.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TTransPullSubscriptionProperties.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TTransPullSubscriptionProperties.Get_FTPPort: LongWord;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TTransPullSubscriptionProperties.Set_FTPPort(pRetVal: LongWord);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TTransPullSubscriptionProperties.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TTransPullSubscriptionProperties.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TTransPullSubscriptionProperties.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TTransPullSubscriptionProperties.Get_DistributionSchedule: Schedule;
begin
    Result := DefaultInterface.DistributionSchedule;
end;

function TTransPullSubscriptionProperties.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

function TTransPullSubscriptionProperties.Get_LastDistributionDate: WideString;
begin
    Result := DefaultInterface.LastDistributionDate;
end;

function TTransPullSubscriptionProperties.Get_PublicationAttributes: SQLDMO_PUBATTRIB_TYPE;
begin
    Result := DefaultInterface.PublicationAttributes;
end;

procedure TTransPullSubscriptionProperties.Set_PublicationAttributes(pRetVal: SQLDMO_PUBATTRIB_TYPE);
begin
  DefaultInterface.Set_PublicationAttributes(pRetVal);
end;

{$ENDIF}

class function CoMergePullSubscription.Create: _MergePullSubscription;
begin
  Result := CreateComObject(CLASS_MergePullSubscription) as _MergePullSubscription;
end;

class function CoMergePullSubscription.CreateRemote(const MachineName: string): _MergePullSubscription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergePullSubscription) as _MergePullSubscription;
end;

procedure TMergePullSubscription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10031100-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031106-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergePullSubscription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergePullSubscription;
  end;
end;

procedure TMergePullSubscription.ConnectTo(svrIntf: _MergePullSubscription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergePullSubscription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergePullSubscription.GetDefaultInterface: _MergePullSubscription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergePullSubscription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergePullSubscriptionProperties.Create(Self);
{$ENDIF}
end;

destructor TMergePullSubscription.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergePullSubscription.GetServerProperties: TMergePullSubscriptionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergePullSubscription.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergePullSubscription.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergePullSubscription.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergePullSubscription.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergePullSubscription.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergePullSubscription.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergePullSubscription.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TMergePullSubscription.Get_Publisher: WideString;
begin
    Result := DefaultInterface.Publisher;
end;

procedure TMergePullSubscription.Set_Publisher(const pRetVal: WideString);
  { Warning: The property Publisher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publisher := pRetVal;
end;

function TMergePullSubscription.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TMergePullSubscription.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TMergePullSubscription.Get_Publication: WideString;
begin
    Result := DefaultInterface.Publication;
end;

procedure TMergePullSubscription.Set_Publication(const pRetVal: WideString);
  { Warning: The property Publication has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publication := pRetVal;
end;

function TMergePullSubscription.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergePullSubscription.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergePullSubscription.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TMergePullSubscription.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TMergePullSubscription.Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TMergePullSubscription.Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TMergePullSubscription.Get_Distributor: WideString;
begin
    Result := DefaultInterface.Distributor;
end;

procedure TMergePullSubscription.Set_Distributor(const pRetVal: WideString);
  { Warning: The property Distributor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Distributor := pRetVal;
end;

function TMergePullSubscription.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TMergePullSubscription.Get_DistributorSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.DistributorSecurity;
end;

procedure TMergePullSubscription.Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SubscriberSecurityMode(Param1);
end;

procedure TMergePullSubscription.Set_SubscriberLogin(const Param1: WideString);
  { Warning: The property SubscriberLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberLogin := Param1;
end;

procedure TMergePullSubscription.Set_SubscriberPassword(const Param1: WideString);
  { Warning: The property SubscriberPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberPassword := Param1;
end;

function TMergePullSubscription.Get_EnabledForSyncMgr: WordBool;
begin
    Result := DefaultInterface.EnabledForSyncMgr;
end;

procedure TMergePullSubscription.Set_EnabledForSyncMgr(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(pRetVal);
end;

function TMergePullSubscription.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TMergePullSubscription.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TMergePullSubscription.Get_FTPPort: LongWord;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TMergePullSubscription.Set_FTPPort(pRetVal: LongWord);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TMergePullSubscription.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TMergePullSubscription.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TMergePullSubscription.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TMergePullSubscription.Get_MergeSchedule: Schedule;
begin
    Result := DefaultInterface.MergeSchedule;
end;

function TMergePullSubscription.Get_MergeJobID: WideString;
begin
    Result := DefaultInterface.MergeJobID;
end;

function TMergePullSubscription.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TMergePullSubscription.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TMergePullSubscription.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

procedure TMergePullSubscription.Set_Priority(pRetVal: Single);
begin
  DefaultInterface.Set_Priority(pRetVal);
end;

procedure TMergePullSubscription.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TMergePullSubscription.BeginAlter;
begin
  DefaultInterface.BeginAlter;
end;

procedure TMergePullSubscription.DoAlter;
begin
  DefaultInterface.DoAlter;
end;

procedure TMergePullSubscription.CancelAlter;
begin
  DefaultInterface.CancelAlter;
end;

function TMergePullSubscription.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TMergePullSubscription.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TMergePullSubscription.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TMergePullSubscription.EnumJobInfo: QueryResults;
begin
  Result := DefaultInterface.EnumJobInfo;
end;

procedure TMergePullSubscription.ReInitialize;
begin
  DefaultInterface.ReInitialize;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergePullSubscriptionProperties.Create(AServer: TMergePullSubscription);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergePullSubscriptionProperties.GetDefaultInterface: _MergePullSubscription;
begin
  Result := FServer.DefaultInterface;
end;

function TMergePullSubscriptionProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TMergePullSubscriptionProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TMergePullSubscriptionProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TMergePullSubscriptionProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TMergePullSubscriptionProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TMergePullSubscriptionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TMergePullSubscriptionProperties.Get_Publisher: WideString;
begin
    Result := DefaultInterface.Publisher;
end;

procedure TMergePullSubscriptionProperties.Set_Publisher(const pRetVal: WideString);
  { Warning: The property Publisher has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publisher := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_PublicationDB: WideString;
begin
    Result := DefaultInterface.PublicationDB;
end;

procedure TMergePullSubscriptionProperties.Set_PublicationDB(const pRetVal: WideString);
  { Warning: The property PublicationDB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublicationDB := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_Publication: WideString;
begin
    Result := DefaultInterface.Publication;
end;

procedure TMergePullSubscriptionProperties.Set_Publication(const pRetVal: WideString);
  { Warning: The property Publication has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Publication := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

procedure TMergePullSubscriptionProperties.Set_Description(const pRetVal: WideString);
  { Warning: The property Description has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Description := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_SubscriptionType: SQLDMO_SUBSCRIPTION_TYPE;
begin
    Result := DefaultInterface.SubscriptionType;
end;

procedure TMergePullSubscriptionProperties.Set_SubscriptionType(pRetVal: SQLDMO_SUBSCRIPTION_TYPE);
begin
  DefaultInterface.Set_SubscriptionType(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_SubscriberType: SQLDMO_MERGESUBSCRIBER_TYPE;
begin
    Result := DefaultInterface.SubscriberType;
end;

procedure TMergePullSubscriptionProperties.Set_SubscriberType(pRetVal: SQLDMO_MERGESUBSCRIBER_TYPE);
begin
  DefaultInterface.Set_SubscriberType(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_Distributor: WideString;
begin
    Result := DefaultInterface.Distributor;
end;

procedure TMergePullSubscriptionProperties.Set_Distributor(const pRetVal: WideString);
  { Warning: The property Distributor has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Distributor := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_PublisherSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.PublisherSecurity;
end;

function TMergePullSubscriptionProperties.Get_DistributorSecurity: ReplicationSecurity;
begin
    Result := DefaultInterface.DistributorSecurity;
end;

procedure TMergePullSubscriptionProperties.Set_SubscriberSecurityMode(Param1: SQLDMO_SECURITY_TYPE);
begin
  DefaultInterface.Set_SubscriberSecurityMode(Param1);
end;

procedure TMergePullSubscriptionProperties.Set_SubscriberLogin(const Param1: WideString);
  { Warning: The property SubscriberLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberLogin := Param1;
end;

procedure TMergePullSubscriptionProperties.Set_SubscriberPassword(const Param1: WideString);
  { Warning: The property SubscriberPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberPassword := Param1;
end;

function TMergePullSubscriptionProperties.Get_EnabledForSyncMgr: WordBool;
begin
    Result := DefaultInterface.EnabledForSyncMgr;
end;

procedure TMergePullSubscriptionProperties.Set_EnabledForSyncMgr(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnabledForSyncMgr(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TMergePullSubscriptionProperties.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TMergePullSubscriptionProperties.Get_FTPPort: LongWord;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TMergePullSubscriptionProperties.Set_FTPPort(pRetVal: LongWord);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TMergePullSubscriptionProperties.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TMergePullSubscriptionProperties.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TMergePullSubscriptionProperties.Get_MergeSchedule: Schedule;
begin
    Result := DefaultInterface.MergeSchedule;
end;

function TMergePullSubscriptionProperties.Get_MergeJobID: WideString;
begin
    Result := DefaultInterface.MergeJobID;
end;

function TMergePullSubscriptionProperties.Get_SyncType: SQLDMO_SUBSYNC_TYPE;
begin
    Result := DefaultInterface.SyncType;
end;

procedure TMergePullSubscriptionProperties.Set_SyncType(pRetVal: SQLDMO_SUBSYNC_TYPE);
begin
  DefaultInterface.Set_SyncType(pRetVal);
end;

function TMergePullSubscriptionProperties.Get_Priority: Single;
begin
    Result := DefaultInterface.Priority;
end;

procedure TMergePullSubscriptionProperties.Set_Priority(pRetVal: Single);
begin
  DefaultInterface.Set_Priority(pRetVal);
end;

{$ENDIF}

class function CoReplication.Create: _Replication;
begin
  Result := CreateComObject(CLASS_Replication) as _Replication;
end;

class function CoReplication.CreateRemote(const MachineName: string): _Replication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Replication) as _Replication;
end;

procedure TReplication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10031000-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031006-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10031009-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReplication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Replication;
  end;
end;

procedure TReplication.ConnectTo(svrIntf: _Replication);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TReplication.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TReplication.GetDefaultInterface: _Replication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TReplication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReplicationProperties.Create(Self);
{$ENDIF}
end;

destructor TReplication.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TReplication.GetServerProperties: TReplicationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TReplication.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnStatusMessage) then
         FOnStatusMessage(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
  end; {case DispID}
end;

function TReplication.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TReplication.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TReplication.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TReplication.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TReplication.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TReplication.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TReplication.Get_Publisher: Publisher;
begin
    Result := DefaultInterface.Publisher;
end;

function TReplication.Get_Subscriber: Subscriber;
begin
    Result := DefaultInterface.Subscriber;
end;

function TReplication.Get_Distributor: Distributor;
begin
    Result := DefaultInterface.Distributor;
end;

function TReplication.Get_ReplicationDatabases: ReplicationDatabases;
begin
    Result := DefaultInterface.ReplicationDatabases;
end;

function TReplication.Script: WideString;
begin
  Result := DefaultInterface.Script(EmptyParam, EmptyParam);
end;

function TReplication.Script(ScriptType: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, EmptyParam);
end;

function TReplication.Script(ScriptType: OleVariant; ScriptFilePath: OleVariant): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath);
end;

function TReplication.EnumDataSourceNames: QueryResults;
begin
  Result := DefaultInterface.EnumDataSourceNames;
end;

procedure TReplication.Uninstall(bIgnoreDistributor: WordBool);
begin
  DefaultInterface.Uninstall(bIgnoreDistributor);
end;

function TReplication.EnumCustomResolvers(const Distributor: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumCustomResolvers(Distributor);
end;

procedure TReplication.ValidateDataSource(const DataSourceName: WideString; 
                                          const Login: WideString; const Password: WideString; 
                                          SubscriberType: SQLDMO_SUBSCRIBER_TYPE);
begin
  DefaultInterface.ValidateDataSource(DataSourceName, Login, Password, SubscriberType);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReplicationProperties.Create(AServer: TReplication);
begin
  inherited Create;
  FServer := AServer;
end;

function TReplicationProperties.GetDefaultInterface: _Replication;
begin
  Result := FServer.DefaultInterface;
end;

function TReplicationProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TReplicationProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TReplicationProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TReplicationProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TReplicationProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TReplicationProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TReplicationProperties.Get_Publisher: Publisher;
begin
    Result := DefaultInterface.Publisher;
end;

function TReplicationProperties.Get_Subscriber: Subscriber;
begin
    Result := DefaultInterface.Subscriber;
end;

function TReplicationProperties.Get_Distributor: Distributor;
begin
    Result := DefaultInterface.Distributor;
end;

function TReplicationProperties.Get_ReplicationDatabases: ReplicationDatabases;
begin
    Result := DefaultInterface.ReplicationDatabases;
end;

{$ENDIF}

class function CoServerRole.Create: _ServerRole;
begin
  Result := CreateComObject(CLASS_ServerRole) as _ServerRole;
end;

class function CoServerRole.CreateRemote(const MachineName: string): _ServerRole;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServerRole) as _ServerRole;
end;

procedure TServerRole.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022F00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022F06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TServerRole.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _ServerRole;
  end;
end;

procedure TServerRole.ConnectTo(svrIntf: _ServerRole);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TServerRole.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TServerRole.GetDefaultInterface: _ServerRole;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TServerRole.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TServerRoleProperties.Create(Self);
{$ENDIF}
end;

destructor TServerRole.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TServerRole.GetServerProperties: TServerRoleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TServerRole.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TServerRole.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TServerRole.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TServerRole.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TServerRole.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TServerRole.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TServerRole.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TServerRole.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TServerRole.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

function TServerRole.EnumServerRolePermission: QueryResults;
begin
  Result := DefaultInterface.EnumServerRolePermission;
end;

function TServerRole.EnumServerRoleMember: QueryResults;
begin
  Result := DefaultInterface.EnumServerRoleMember;
end;

procedure TServerRole.AddMember(const LoginName: WideString);
begin
  DefaultInterface.AddMember(LoginName);
end;

procedure TServerRole.DropMember(const LoginName: WideString);
begin
  DefaultInterface.DropMember(LoginName);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TServerRoleProperties.Create(AServer: TServerRole);
begin
  inherited Create;
  FServer := AServer;
end;

function TServerRoleProperties.GetDefaultInterface: _ServerRole;
begin
  Result := FServer.DefaultInterface;
end;

function TServerRoleProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TServerRoleProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TServerRoleProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TServerRoleProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TServerRoleProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TServerRoleProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TServerRoleProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TServerRoleProperties.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TServerRoleProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

{$ENDIF}

class function CoLinkedServerLogin.Create: _LinkedServerLogin;
begin
  Result := CreateComObject(CLASS_LinkedServerLogin) as _LinkedServerLogin;
end;

class function CoLinkedServerLogin.CreateRemote(const MachineName: string): _LinkedServerLogin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinkedServerLogin) as _LinkedServerLogin;
end;

procedure TLinkedServerLogin.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023400-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023406-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLinkedServerLogin.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LinkedServerLogin;
  end;
end;

procedure TLinkedServerLogin.ConnectTo(svrIntf: _LinkedServerLogin);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLinkedServerLogin.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLinkedServerLogin.GetDefaultInterface: _LinkedServerLogin;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLinkedServerLogin.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLinkedServerLoginProperties.Create(Self);
{$ENDIF}
end;

destructor TLinkedServerLogin.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLinkedServerLogin.GetServerProperties: TLinkedServerLoginProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLinkedServerLogin.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLinkedServerLogin.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLinkedServerLogin.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLinkedServerLogin.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLinkedServerLogin.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLinkedServerLogin.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLinkedServerLogin.Get_LocalLogin: WideString;
begin
    Result := DefaultInterface.LocalLogin;
end;

procedure TLinkedServerLogin.Set_LocalLogin(const pRetVal: WideString);
  { Warning: The property LocalLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalLogin := pRetVal;
end;

function TLinkedServerLogin.Get_RemoteUser: WideString;
begin
    Result := DefaultInterface.RemoteUser;
end;

procedure TLinkedServerLogin.Set_RemoteUser(const pRetVal: WideString);
  { Warning: The property RemoteUser has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemoteUser := pRetVal;
end;

procedure TLinkedServerLogin.Set_RemotePassword(const Param1: WideString);
  { Warning: The property RemotePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemotePassword := Param1;
end;

function TLinkedServerLogin.Get_Impersonate: WordBool;
begin
    Result := DefaultInterface.Impersonate;
end;

procedure TLinkedServerLogin.Set_Impersonate(pRetVal: WordBool);
begin
  DefaultInterface.Set_Impersonate(pRetVal);
end;

procedure TLinkedServerLogin.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLinkedServerLoginProperties.Create(AServer: TLinkedServerLogin);
begin
  inherited Create;
  FServer := AServer;
end;

function TLinkedServerLoginProperties.GetDefaultInterface: _LinkedServerLogin;
begin
  Result := FServer.DefaultInterface;
end;

function TLinkedServerLoginProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLinkedServerLoginProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLinkedServerLoginProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLinkedServerLoginProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLinkedServerLoginProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLinkedServerLoginProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLinkedServerLoginProperties.Get_LocalLogin: WideString;
begin
    Result := DefaultInterface.LocalLogin;
end;

procedure TLinkedServerLoginProperties.Set_LocalLogin(const pRetVal: WideString);
  { Warning: The property LocalLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LocalLogin := pRetVal;
end;

function TLinkedServerLoginProperties.Get_RemoteUser: WideString;
begin
    Result := DefaultInterface.RemoteUser;
end;

procedure TLinkedServerLoginProperties.Set_RemoteUser(const pRetVal: WideString);
  { Warning: The property RemoteUser has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemoteUser := pRetVal;
end;

procedure TLinkedServerLoginProperties.Set_RemotePassword(const Param1: WideString);
  { Warning: The property RemotePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RemotePassword := Param1;
end;

function TLinkedServerLoginProperties.Get_Impersonate: WordBool;
begin
    Result := DefaultInterface.Impersonate;
end;

procedure TLinkedServerLoginProperties.Set_Impersonate(pRetVal: WordBool);
begin
  DefaultInterface.Set_Impersonate(pRetVal);
end;

{$ENDIF}

class function CoLinkedServer.Create: _LinkedServer;
begin
  Result := CreateComObject(CLASS_LinkedServer) as _LinkedServer;
end;

class function CoLinkedServer.CreateRemote(const MachineName: string): _LinkedServer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinkedServer) as _LinkedServer;
end;

procedure TLinkedServer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10023300-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023306-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLinkedServer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LinkedServer;
  end;
end;

procedure TLinkedServer.ConnectTo(svrIntf: _LinkedServer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLinkedServer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLinkedServer.GetDefaultInterface: _LinkedServer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLinkedServer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLinkedServerProperties.Create(Self);
{$ENDIF}
end;

destructor TLinkedServer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLinkedServer.GetServerProperties: TLinkedServerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLinkedServer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLinkedServer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLinkedServer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLinkedServer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLinkedServer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLinkedServer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLinkedServer.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLinkedServer.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLinkedServer.Get_ProductName: WideString;
begin
    Result := DefaultInterface.ProductName;
end;

procedure TLinkedServer.Set_ProductName(const pRetVal: WideString);
  { Warning: The property ProductName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductName := pRetVal;
end;

function TLinkedServer.Get_LinkedServerLogins: LinkedServerLogins;
begin
    Result := DefaultInterface.LinkedServerLogins;
end;

function TLinkedServer.Get_ProviderName: WideString;
begin
    Result := DefaultInterface.ProviderName;
end;

procedure TLinkedServer.Set_ProviderName(const pRetVal: WideString);
  { Warning: The property ProviderName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderName := pRetVal;
end;

function TLinkedServer.Get_DataSource: WideString;
begin
    Result := DefaultInterface.DataSource;
end;

procedure TLinkedServer.Set_DataSource(const pRetVal: WideString);
  { Warning: The property DataSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSource := pRetVal;
end;

function TLinkedServer.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TLinkedServer.Set_Location(const pRetVal: WideString);
  { Warning: The property Location has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Location := pRetVal;
end;

function TLinkedServer.Get_ProviderString: WideString;
begin
    Result := DefaultInterface.ProviderString;
end;

procedure TLinkedServer.Set_ProviderString(const pRetVal: WideString);
  { Warning: The property ProviderString has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderString := pRetVal;
end;

function TLinkedServer.Get_Options: SQLDMO_SRVOPTION_TYPE;
begin
    Result := DefaultInterface.Options;
end;

function TLinkedServer.Get_Catalog: WideString;
begin
    Result := DefaultInterface.Catalog;
end;

procedure TLinkedServer.Set_Catalog(const pRetVal: WideString);
  { Warning: The property Catalog has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Catalog := pRetVal;
end;

function TLinkedServer.Get_DropLogins: WordBool;
begin
    Result := DefaultInterface.DropLogins;
end;

procedure TLinkedServer.Set_DropLogins(pRetVal: WordBool);
begin
  DefaultInterface.Set_DropLogins(pRetVal);
end;

procedure TLinkedServer.Remove;
begin
  DefaultInterface.Remove;
end;

procedure TLinkedServer.ExecuteImmediate(const Command: WideString);
begin
  DefaultInterface.ExecuteImmediate(Command, EmptyParam);
end;

procedure TLinkedServer.ExecuteImmediate(const Command: WideString; Length: OleVariant);
begin
  DefaultInterface.ExecuteImmediate(Command, Length);
end;

function TLinkedServer.ExecuteWithResults(const Command: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, EmptyParam);
end;

function TLinkedServer.ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, Length);
end;

function TLinkedServer.ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                                     out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages(Command, Length, Messages);
end;

procedure TLinkedServer.SetOptions(Options: SQLDMO_SRVOPTION_TYPE; Setting: WordBool);
begin
  DefaultInterface.SetOptions(Options, Setting);
end;

function TLinkedServer.EnumTables: QueryResults;
begin
  Result := DefaultInterface.EnumTables(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumTables(TableName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumTables(TableName, EmptyParam, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumTables(TableName: OleVariant; SchemaName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumTables(TableName, SchemaName, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumTables(TableName: OleVariant; SchemaName: OleVariant; 
                                  CatalogName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumTables(TableName, SchemaName, CatalogName, EmptyParam);
end;

function TLinkedServer.EnumTables(TableName: OleVariant; SchemaName: OleVariant; 
                                  CatalogName: OleVariant; TableType: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumTables(TableName, SchemaName, CatalogName, TableType);
end;

function TLinkedServer.EnumColumns: QueryResults;
begin
  Result := DefaultInterface.EnumColumns(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumColumns(TableName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumColumns(TableName, EmptyParam, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumColumns(TableName: OleVariant; SchemaName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumColumns(TableName, SchemaName, EmptyParam, EmptyParam);
end;

function TLinkedServer.EnumColumns(TableName: OleVariant; SchemaName: OleVariant; 
                                   CatalogName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumColumns(TableName, SchemaName, CatalogName, EmptyParam);
end;

function TLinkedServer.EnumColumns(TableName: OleVariant; SchemaName: OleVariant; 
                                   CatalogName: OleVariant; ColumnName: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumColumns(TableName, SchemaName, CatalogName, ColumnName);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLinkedServerProperties.Create(AServer: TLinkedServer);
begin
  inherited Create;
  FServer := AServer;
end;

function TLinkedServerProperties.GetDefaultInterface: _LinkedServer;
begin
  Result := FServer.DefaultInterface;
end;

function TLinkedServerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TLinkedServerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TLinkedServerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TLinkedServerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TLinkedServerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TLinkedServerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TLinkedServerProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TLinkedServerProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TLinkedServerProperties.Get_ProductName: WideString;
begin
    Result := DefaultInterface.ProductName;
end;

procedure TLinkedServerProperties.Set_ProductName(const pRetVal: WideString);
  { Warning: The property ProductName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProductName := pRetVal;
end;

function TLinkedServerProperties.Get_LinkedServerLogins: LinkedServerLogins;
begin
    Result := DefaultInterface.LinkedServerLogins;
end;

function TLinkedServerProperties.Get_ProviderName: WideString;
begin
    Result := DefaultInterface.ProviderName;
end;

procedure TLinkedServerProperties.Set_ProviderName(const pRetVal: WideString);
  { Warning: The property ProviderName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderName := pRetVal;
end;

function TLinkedServerProperties.Get_DataSource: WideString;
begin
    Result := DefaultInterface.DataSource;
end;

procedure TLinkedServerProperties.Set_DataSource(const pRetVal: WideString);
  { Warning: The property DataSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSource := pRetVal;
end;

function TLinkedServerProperties.Get_Location: WideString;
begin
    Result := DefaultInterface.Location;
end;

procedure TLinkedServerProperties.Set_Location(const pRetVal: WideString);
  { Warning: The property Location has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Location := pRetVal;
end;

function TLinkedServerProperties.Get_ProviderString: WideString;
begin
    Result := DefaultInterface.ProviderString;
end;

procedure TLinkedServerProperties.Set_ProviderString(const pRetVal: WideString);
  { Warning: The property ProviderString has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProviderString := pRetVal;
end;

function TLinkedServerProperties.Get_Options: SQLDMO_SRVOPTION_TYPE;
begin
    Result := DefaultInterface.Options;
end;

function TLinkedServerProperties.Get_Catalog: WideString;
begin
    Result := DefaultInterface.Catalog;
end;

procedure TLinkedServerProperties.Set_Catalog(const pRetVal: WideString);
  { Warning: The property Catalog has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Catalog := pRetVal;
end;

function TLinkedServerProperties.Get_DropLogins: WordBool;
begin
    Result := DefaultInterface.DropLogins;
end;

procedure TLinkedServerProperties.Set_DropLogins(pRetVal: WordBool);
begin
  DefaultInterface.Set_DropLogins(pRetVal);
end;

{$ENDIF}

class function CoSQLServer.Create: _SQLServer;
begin
  Result := CreateComObject(CLASS_SQLServer) as _SQLServer;
end;

class function CoSQLServer.CreateRemote(const MachineName: string): _SQLServer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SQLServer) as _SQLServer;
end;

procedure TSQLServer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020200-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020206-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10020209-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSQLServer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _SQLServer;
  end;
end;

procedure TSQLServer.ConnectTo(svrIntf: _SQLServer);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TSQLServer.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TSQLServer.GetDefaultInterface: _SQLServer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSQLServer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSQLServerProperties.Create(Self);
{$ENDIF}
end;

destructor TSQLServer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSQLServer.GetServerProperties: TSQLServerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TSQLServer.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnQueryTimeout) then
         FOnQueryTimeout(Self,
                         Params[0] {const WideString},
                         WordBool((TVarData(Params[1]).VPointer)^) {out WordBool});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnServerMessage) then
         FOnServerMessage(Self,
                          Params[0] {Integer},
                          Params[1] {Integer},
                          Params[2] {Integer},
                          Params[3] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnConnectionBroken) then
         FOnConnectionBroken(Self,
                             Params[0] {const WideString},
                             WordBool((TVarData(Params[1]).VPointer)^) {out WordBool});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnRemoteLoginFailed) then
         FOnRemoteLoginFailed(Self,
                              Params[0] {Integer},
                              Params[1] {Integer},
                              Params[2] {Integer},
                              Params[3] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnCommandSent) then
         FOnCommandSent(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TSQLServer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TSQLServer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TSQLServer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TSQLServer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TSQLServer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TSQLServer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TSQLServer.Get_Databases: Databases;
begin
    Result := DefaultInterface.Databases;
end;

function TSQLServer.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TSQLServer.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TSQLServer.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSQLServer.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TSQLServer.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TSQLServer.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TSQLServer.Get_VersionString: WideString;
begin
    Result := DefaultInterface.VersionString;
end;

function TSQLServer.Get_BackupDevices: BackupDevices;
begin
    Result := DefaultInterface.BackupDevices;
end;

function TSQLServer.Get_VersionMajor: Integer;
begin
    Result := DefaultInterface.VersionMajor;
end;

function TSQLServer.Get_VersionMinor: Integer;
begin
    Result := DefaultInterface.VersionMinor;
end;

function TSQLServer.Get_CommandTerminator: WideString;
begin
    Result := DefaultInterface.CommandTerminator;
end;

procedure TSQLServer.Set_CommandTerminator(const pRetVal: WideString);
  { Warning: The property CommandTerminator has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandTerminator := pRetVal;
end;

function TSQLServer.Get_TrueName: WideString;
begin
    Result := DefaultInterface.TrueName;
end;

function TSQLServer.Get_ConnectionID: Integer;
begin
    Result := DefaultInterface.ConnectionID;
end;

function TSQLServer.Get_TrueLogin: WideString;
begin
    Result := DefaultInterface.TrueLogin;
end;

function TSQLServer.Get_IntegratedSecurity: IntegratedSecurity;
begin
    Result := DefaultInterface.IntegratedSecurity;
end;

function TSQLServer.Get_Languages: Languages;
begin
    Result := DefaultInterface.Languages;
end;

function TSQLServer.Get_RemoteServers: RemoteServers;
begin
    Result := DefaultInterface.RemoteServers;
end;

function TSQLServer.Get_Logins: Logins;
begin
    Result := DefaultInterface.Logins;
end;

function TSQLServer.Get_UserProfile: SQLDMO_SRVUSERPROFILE_TYPE;
begin
    Result := DefaultInterface.UserProfile;
end;

function TSQLServer.Get_MaxNumericPrecision: Integer;
begin
    Result := DefaultInterface.MaxNumericPrecision;
end;

function TSQLServer.Get_NextDeviceNumber: Integer;
begin
    Result := DefaultInterface.NextDeviceNumber;
end;

function TSQLServer.Get_QueryTimeout: Integer;
begin
    Result := DefaultInterface.QueryTimeout;
end;

procedure TSQLServer.Set_QueryTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_QueryTimeout(pRetVal);
end;

function TSQLServer.Get_LoginTimeout: Integer;
begin
    Result := DefaultInterface.LoginTimeout;
end;

procedure TSQLServer.Set_LoginTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_LoginTimeout(pRetVal);
end;

function TSQLServer.Get_NetPacketSize: Integer;
begin
    Result := DefaultInterface.NetPacketSize;
end;

procedure TSQLServer.Set_NetPacketSize(pRetVal: Integer);
begin
  DefaultInterface.Set_NetPacketSize(pRetVal);
end;

function TSQLServer.Get_HostName: WideString;
begin
    Result := DefaultInterface.HostName;
end;

procedure TSQLServer.Set_HostName(const pRetVal: WideString);
  { Warning: The property HostName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HostName := pRetVal;
end;

function TSQLServer.Get_ApplicationName: WideString;
begin
    Result := DefaultInterface.ApplicationName;
end;

procedure TSQLServer.Set_ApplicationName(const pRetVal: WideString);
  { Warning: The property ApplicationName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ApplicationName := pRetVal;
end;

function TSQLServer.Get_LoginSecure: WordBool;
begin
    Result := DefaultInterface.LoginSecure;
end;

procedure TSQLServer.Set_LoginSecure(pRetVal: WordBool);
begin
  DefaultInterface.Set_LoginSecure(pRetVal);
end;

function TSQLServer.Get_ProcessID: Integer;
begin
    Result := DefaultInterface.ProcessID;
end;

function TSQLServer.Get_Status: SQLDMO_SVCSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

function TSQLServer.Get_Registry: Registry;
begin
    Result := DefaultInterface.Registry;
end;

function TSQLServer.Get_Configuration: Configuration;
begin
    Result := DefaultInterface.Configuration;
end;

function TSQLServer.Get_JobServer: JobServer;
begin
    Result := DefaultInterface.JobServer;
end;

function TSQLServer.Get_ProcessInputBuffer(ProcessID: Integer): WideString;
begin
    Result := DefaultInterface.ProcessInputBuffer[ProcessID];
end;

function TSQLServer.Get_ProcessOutputBuffer(ProcessID: Integer): WideString;
begin
    Result := DefaultInterface.ProcessOutputBuffer[ProcessID];
end;

function TSQLServer.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

procedure TSQLServer.Set_Language(const pRetVal: WideString);
  { Warning: The property Language has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Language := pRetVal;
end;

function TSQLServer.Get_AutoReConnect: WordBool;
begin
    Result := DefaultInterface.AutoReConnect;
end;

procedure TSQLServer.Set_AutoReConnect(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoReConnect(pRetVal);
end;

function TSQLServer.Get_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE): Integer;
begin
    Result := DefaultInterface.StatusInfoRefetchInterval[StatusInfoType];
end;

procedure TSQLServer.Set_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE; 
                                                   pRetVal: Integer);
begin
  DefaultInterface.StatusInfoRefetchInterval[StatusInfoType] := pRetVal;
end;

function TSQLServer.Get_SaLogin: WordBool;
begin
    Result := DefaultInterface.SaLogin;
end;

function TSQLServer.Get_AnsiNulls: WordBool;
begin
    Result := DefaultInterface.AnsiNulls;
end;

procedure TSQLServer.Set_AnsiNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNulls(pRetVal);
end;

function TSQLServer.Get_NetName: WideString;
begin
    Result := DefaultInterface.NetName;
end;

function TSQLServer.Get_Replication: Replication;
begin
    Result := DefaultInterface.Replication;
end;

function TSQLServer.Get_EnableBcp: WordBool;
begin
    Result := DefaultInterface.EnableBcp;
end;

procedure TSQLServer.Set_EnableBcp(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnableBcp(pRetVal);
end;

function TSQLServer.Get_BlockingTimeout: Integer;
begin
    Result := DefaultInterface.BlockingTimeout;
end;

procedure TSQLServer.Set_BlockingTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_BlockingTimeout(pRetVal);
end;

function TSQLServer.Get_ServerRoles: ServerRoles;
begin
    Result := DefaultInterface.ServerRoles;
end;

function TSQLServer.Get_Isdbcreator: WordBool;
begin
    Result := DefaultInterface.Isdbcreator;
end;

function TSQLServer.Get_Isdiskadmin: WordBool;
begin
    Result := DefaultInterface.Isdiskadmin;
end;

function TSQLServer.Get_Isprocessadmin: WordBool;
begin
    Result := DefaultInterface.Isprocessadmin;
end;

function TSQLServer.Get_Issecurityadmin: WordBool;
begin
    Result := DefaultInterface.Issecurityadmin;
end;

function TSQLServer.Get_Isserveradmin: WordBool;
begin
    Result := DefaultInterface.Isserveradmin;
end;

function TSQLServer.Get_Issetupadmin: WordBool;
begin
    Result := DefaultInterface.Issetupadmin;
end;

function TSQLServer.Get_Issysadmin: WordBool;
begin
    Result := DefaultInterface.Issysadmin;
end;

function TSQLServer.Get_QuotedIdentifier: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifier;
end;

procedure TSQLServer.Set_QuotedIdentifier(pRetVal: WordBool);
begin
  DefaultInterface.Set_QuotedIdentifier(pRetVal);
end;

function TSQLServer.Get_LinkedServers: LinkedServers;
begin
    Result := DefaultInterface.LinkedServers;
end;

procedure TSQLServer.Set_CodePageOverride(Param1: Integer);
begin
  DefaultInterface.Set_CodePageOverride(Param1);
end;

function TSQLServer.Get_FullTextService: FullTextService;
begin
    Result := DefaultInterface.FullTextService;
end;

function TSQLServer.Get_ODBCPrefix: WordBool;
begin
    Result := DefaultInterface.ODBCPrefix;
end;

procedure TSQLServer.Set_ODBCPrefix(pRetVal: WordBool);
begin
  DefaultInterface.Set_ODBCPrefix(pRetVal);
end;

function TSQLServer.Get_RegionalSetting: WordBool;
begin
    Result := DefaultInterface.RegionalSetting;
end;

procedure TSQLServer.Set_RegionalSetting(pRetVal: WordBool);
begin
  DefaultInterface.Set_RegionalSetting(pRetVal);
end;

function TSQLServer.Get_CodePage: Integer;
begin
    Result := DefaultInterface.CodePage;
end;

function TSQLServer.Get_ServerTime: WideString;
begin
    Result := DefaultInterface.ServerTime;
end;

function TSQLServer.Get_TranslateChar: WordBool;
begin
    Result := DefaultInterface.TranslateChar;
end;

procedure TSQLServer.Set_TranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_TranslateChar(pRetVal);
end;

procedure TSQLServer.Connect1;
begin
  DefaultInterface.Connect(EmptyParam, EmptyParam, EmptyParam);
end;

procedure TSQLServer.Connect1(ServerName: OleVariant);
begin
  DefaultInterface.Connect(ServerName, EmptyParam, EmptyParam);
end;

procedure TSQLServer.Connect1(ServerName: OleVariant; Login: OleVariant);
begin
  DefaultInterface.Connect(ServerName, Login, EmptyParam);
end;

procedure TSQLServer.Connect1(ServerName: OleVariant; Login: OleVariant; Password: OleVariant);
begin
  DefaultInterface.Connect(ServerName, Login, Password);
end;

procedure TSQLServer.Close;
begin
  DefaultInterface.Close;
end;

procedure TSQLServer.DisConnect1;
begin
  DefaultInterface.DisConnect;
end;

procedure TSQLServer.KillProcess(lProcessID: Integer);
begin
  DefaultInterface.KillProcess(lProcessID);
end;

procedure TSQLServer.ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE);
begin
  DefaultInterface.ExecuteImmediate(Command, ExecType, EmptyParam);
end;

procedure TSQLServer.ExecuteImmediate(const Command: WideString; ExecType: SQLDMO_EXEC_TYPE; 
                                      Length: OleVariant);
begin
  DefaultInterface.ExecuteImmediate(Command, ExecType, Length);
end;

procedure TSQLServer.ReConnect;
begin
  DefaultInterface.ReConnect;
end;

procedure TSQLServer.Shutdown;
begin
  DefaultInterface.Shutdown(EmptyParam);
end;

procedure TSQLServer.Shutdown(Wait: OleVariant);
begin
  DefaultInterface.Shutdown(Wait);
end;

procedure TSQLServer.Start(StartMode: WordBool);
begin
  DefaultInterface.Start(StartMode, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TSQLServer.Start(StartMode: WordBool; Server: OleVariant);
begin
  DefaultInterface.Start(StartMode, Server, EmptyParam, EmptyParam);
end;

procedure TSQLServer.Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant);
begin
  DefaultInterface.Start(StartMode, Server, Login, EmptyParam);
end;

procedure TSQLServer.Start(StartMode: WordBool; Server: OleVariant; Login: OleVariant; 
                           Password: OleVariant);
begin
  DefaultInterface.Start(StartMode, Server, Login, Password);
end;

procedure TSQLServer.UnloadODSDLL(const DLLName: WideString);
begin
  DefaultInterface.UnloadODSDLL(DLLName);
end;

procedure TSQLServer.KillDatabase(const DatabaseName: WideString);
begin
  DefaultInterface.KillDatabase(DatabaseName);
end;

function TSQLServer.ExecuteWithResults(const Command: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, EmptyParam);
end;

function TSQLServer.ExecuteWithResults(const Command: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResults(Command, Length);
end;

function TSQLServer.ListStartupProcedures: SQLObjectList;
begin
  Result := DefaultInterface.ListStartupProcedures;
end;

procedure TSQLServer.BeginTransaction;
begin
  DefaultInterface.BeginTransaction(EmptyParam);
end;

procedure TSQLServer.BeginTransaction(TransactionName: OleVariant);
begin
  DefaultInterface.BeginTransaction(TransactionName);
end;

procedure TSQLServer.CommitTransaction;
begin
  DefaultInterface.CommitTransaction(EmptyParam);
end;

procedure TSQLServer.CommitTransaction(TransactionName: OleVariant);
begin
  DefaultInterface.CommitTransaction(TransactionName);
end;

procedure TSQLServer.SaveTransaction(const SavepointName: WideString);
begin
  DefaultInterface.SaveTransaction(SavepointName);
end;

procedure TSQLServer.RollbackTransaction;
begin
  DefaultInterface.RollbackTransaction(EmptyParam);
end;

procedure TSQLServer.RollbackTransaction(TransactionOrSavepointName: OleVariant);
begin
  DefaultInterface.RollbackTransaction(TransactionOrSavepointName);
end;

procedure TSQLServer.CommandShellImmediate(const Command: WideString);
begin
  DefaultInterface.CommandShellImmediate(Command);
end;

function TSQLServer.ReadErrorLog: QueryResults;
begin
  Result := DefaultInterface.ReadErrorLog(EmptyParam);
end;

function TSQLServer.ReadErrorLog(LogNumber: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ReadErrorLog(LogNumber);
end;

function TSQLServer.EnumErrorLogs: QueryResults;
begin
  Result := DefaultInterface.EnumErrorLogs;
end;

function TSQLServer.EnumAvailableMedia(MediaType: SQLDMO_MEDIA_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumAvailableMedia(MediaType);
end;

function TSQLServer.EnumDirectories(const PathName: WideString): QueryResults;
begin
  Result := DefaultInterface.EnumDirectories(PathName);
end;

function TSQLServer.EnumServerAttributes: QueryResults;
begin
  Result := DefaultInterface.EnumServerAttributes;
end;

function TSQLServer.EnumVersionInfo: QueryResults;
begin
  Result := DefaultInterface.EnumVersionInfo(EmptyParam);
end;

function TSQLServer.EnumVersionInfo(Prefixes: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumVersionInfo(Prefixes);
end;

function TSQLServer.EnumLocks: QueryResults;
begin
  Result := DefaultInterface.EnumLocks(EmptyParam);
end;

function TSQLServer.EnumLocks(WhoByID: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumLocks(WhoByID);
end;

function TSQLServer.CommandShellWithResults(const Command: WideString): QueryResults;
begin
  Result := DefaultInterface.CommandShellWithResults(Command);
end;

function TSQLServer.ReadBackupHeader(const LoadSpec: Restore): QueryResults;
begin
  Result := DefaultInterface.ReadBackupHeader(LoadSpec);
end;

function TSQLServer.EnumProcesses: QueryResults;
begin
  Result := DefaultInterface.EnumProcesses(EmptyParam);
end;

function TSQLServer.EnumProcesses(WhoByNameOrID: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumProcesses(WhoByNameOrID);
end;

procedure TSQLServer.Pause;
begin
  DefaultInterface.Pause;
end;

procedure TSQLServer.Continue;
begin
  DefaultInterface.Continue;
end;

function TSQLServer.VerifyConnection: WordBool;
begin
  Result := DefaultInterface.VerifyConnection(EmptyParam);
end;

function TSQLServer.VerifyConnection(ReconnectIfDead: OleVariant): WordBool;
begin
  Result := DefaultInterface.VerifyConnection(ReconnectIfDead);
end;

function TSQLServer.IsOS(lType: SQLDMO_OS_TYPE): WordBool;
begin
  Result := DefaultInterface.IsOS(lType);
end;

procedure TSQLServer.AddStartParameter(const NewParam: WideString);
begin
  DefaultInterface.AddStartParameter(NewParam);
end;

function TSQLServer.ExecuteWithResultsAndMessages(const Command: WideString; Length: OleVariant; 
                                                  out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages(Command, Length, Messages);
end;

function TSQLServer.EnumLoginMappings: QueryResults;
begin
  Result := DefaultInterface.EnumLoginMappings;
end;

function TSQLServer.EnumNTDomainGroups: QueryResults;
begin
  Result := DefaultInterface.EnumNTDomainGroups(EmptyParam);
end;

function TSQLServer.EnumNTDomainGroups(Domain: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumNTDomainGroups(Domain);
end;

function TSQLServer.EnumAccountInfo: QueryResults;
begin
  Result := DefaultInterface.EnumAccountInfo(EmptyParam, EmptyParam);
end;

function TSQLServer.EnumAccountInfo(Account: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumAccountInfo(Account, EmptyParam);
end;

function TSQLServer.EnumAccountInfo(Account: OleVariant; ListAll: OleVariant): QueryResults;
begin
  Result := DefaultInterface.EnumAccountInfo(Account, ListAll);
end;

function TSQLServer.ListMembers(Type_: SQLDMO_ROLE_TYPE): NameList;
begin
  Result := DefaultInterface.ListMembers(Type_);
end;

function TSQLServer.IsLogin(const LoginName: WideString): WordBool;
begin
  Result := DefaultInterface.IsLogin(LoginName);
end;

procedure TSQLServer.Abort;
begin
  DefaultInterface.Abort;
end;

function TSQLServer.DetachDB(const DBName: WideString; bCheck: WordBool): WideString;
begin
  Result := DefaultInterface.DetachDB(DBName, bCheck);
end;

function TSQLServer.AttachDB(const DBName: WideString; const DataFiles: WideString): WideString;
begin
  Result := DefaultInterface.AttachDB(DBName, DataFiles);
end;

procedure TSQLServer.Stop;
begin
  DefaultInterface.Stop;
end;

function TSQLServer.PingSQLServerVersion: SQLDMO_SQL_VER;
begin
  Result := DefaultInterface.PingSQLServerVersion(EmptyParam, EmptyParam, EmptyParam);
end;

function TSQLServer.PingSQLServerVersion(ServerName: OleVariant): SQLDMO_SQL_VER;
begin
  Result := DefaultInterface.PingSQLServerVersion(ServerName, EmptyParam, EmptyParam);
end;

function TSQLServer.PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant): SQLDMO_SQL_VER;
begin
  Result := DefaultInterface.PingSQLServerVersion(ServerName, Login, EmptyParam);
end;

function TSQLServer.PingSQLServerVersion(ServerName: OleVariant; Login: OleVariant; 
                                         Password: OleVariant): SQLDMO_SQL_VER;
begin
  Result := DefaultInterface.PingSQLServerVersion(ServerName, Login, Password);
end;

function TSQLServer.IsPackage: SQLDMO_PACKAGE_TYPE;
begin
  Result := DefaultInterface.IsPackage;
end;

function TSQLServer.AttachDBWithSingleFile(const DBName: WideString; const DataFile: WideString): WideString;
begin
  Result := DefaultInterface.AttachDBWithSingleFile(DBName, DataFile);
end;

function TSQLServer.IsNTGroupMember(const NTGroup: WideString; const NTUser: WideString): WordBool;
begin
  Result := DefaultInterface.IsNTGroupMember(NTGroup, NTUser);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSQLServerProperties.Create(AServer: TSQLServer);
begin
  inherited Create;
  FServer := AServer;
end;

function TSQLServerProperties.GetDefaultInterface: _SQLServer;
begin
  Result := FServer.DefaultInterface;
end;

function TSQLServerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TSQLServerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TSQLServerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TSQLServerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TSQLServerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TSQLServerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TSQLServerProperties.Get_Databases: Databases;
begin
    Result := DefaultInterface.Databases;
end;

function TSQLServerProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TSQLServerProperties.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TSQLServerProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSQLServerProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TSQLServerProperties.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TSQLServerProperties.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TSQLServerProperties.Get_VersionString: WideString;
begin
    Result := DefaultInterface.VersionString;
end;

function TSQLServerProperties.Get_BackupDevices: BackupDevices;
begin
    Result := DefaultInterface.BackupDevices;
end;

function TSQLServerProperties.Get_VersionMajor: Integer;
begin
    Result := DefaultInterface.VersionMajor;
end;

function TSQLServerProperties.Get_VersionMinor: Integer;
begin
    Result := DefaultInterface.VersionMinor;
end;

function TSQLServerProperties.Get_CommandTerminator: WideString;
begin
    Result := DefaultInterface.CommandTerminator;
end;

procedure TSQLServerProperties.Set_CommandTerminator(const pRetVal: WideString);
  { Warning: The property CommandTerminator has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandTerminator := pRetVal;
end;

function TSQLServerProperties.Get_TrueName: WideString;
begin
    Result := DefaultInterface.TrueName;
end;

function TSQLServerProperties.Get_ConnectionID: Integer;
begin
    Result := DefaultInterface.ConnectionID;
end;

function TSQLServerProperties.Get_TrueLogin: WideString;
begin
    Result := DefaultInterface.TrueLogin;
end;

function TSQLServerProperties.Get_IntegratedSecurity: IntegratedSecurity;
begin
    Result := DefaultInterface.IntegratedSecurity;
end;

function TSQLServerProperties.Get_Languages: Languages;
begin
    Result := DefaultInterface.Languages;
end;

function TSQLServerProperties.Get_RemoteServers: RemoteServers;
begin
    Result := DefaultInterface.RemoteServers;
end;

function TSQLServerProperties.Get_Logins: Logins;
begin
    Result := DefaultInterface.Logins;
end;

function TSQLServerProperties.Get_UserProfile: SQLDMO_SRVUSERPROFILE_TYPE;
begin
    Result := DefaultInterface.UserProfile;
end;

function TSQLServerProperties.Get_MaxNumericPrecision: Integer;
begin
    Result := DefaultInterface.MaxNumericPrecision;
end;

function TSQLServerProperties.Get_NextDeviceNumber: Integer;
begin
    Result := DefaultInterface.NextDeviceNumber;
end;

function TSQLServerProperties.Get_QueryTimeout: Integer;
begin
    Result := DefaultInterface.QueryTimeout;
end;

procedure TSQLServerProperties.Set_QueryTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_QueryTimeout(pRetVal);
end;

function TSQLServerProperties.Get_LoginTimeout: Integer;
begin
    Result := DefaultInterface.LoginTimeout;
end;

procedure TSQLServerProperties.Set_LoginTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_LoginTimeout(pRetVal);
end;

function TSQLServerProperties.Get_NetPacketSize: Integer;
begin
    Result := DefaultInterface.NetPacketSize;
end;

procedure TSQLServerProperties.Set_NetPacketSize(pRetVal: Integer);
begin
  DefaultInterface.Set_NetPacketSize(pRetVal);
end;

function TSQLServerProperties.Get_HostName: WideString;
begin
    Result := DefaultInterface.HostName;
end;

procedure TSQLServerProperties.Set_HostName(const pRetVal: WideString);
  { Warning: The property HostName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HostName := pRetVal;
end;

function TSQLServerProperties.Get_ApplicationName: WideString;
begin
    Result := DefaultInterface.ApplicationName;
end;

procedure TSQLServerProperties.Set_ApplicationName(const pRetVal: WideString);
  { Warning: The property ApplicationName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ApplicationName := pRetVal;
end;

function TSQLServerProperties.Get_LoginSecure: WordBool;
begin
    Result := DefaultInterface.LoginSecure;
end;

procedure TSQLServerProperties.Set_LoginSecure(pRetVal: WordBool);
begin
  DefaultInterface.Set_LoginSecure(pRetVal);
end;

function TSQLServerProperties.Get_ProcessID: Integer;
begin
    Result := DefaultInterface.ProcessID;
end;

function TSQLServerProperties.Get_Status: SQLDMO_SVCSTATUS_TYPE;
begin
    Result := DefaultInterface.Status;
end;

function TSQLServerProperties.Get_Registry: Registry;
begin
    Result := DefaultInterface.Registry;
end;

function TSQLServerProperties.Get_Configuration: Configuration;
begin
    Result := DefaultInterface.Configuration;
end;

function TSQLServerProperties.Get_JobServer: JobServer;
begin
    Result := DefaultInterface.JobServer;
end;

function TSQLServerProperties.Get_ProcessInputBuffer(ProcessID: Integer): WideString;
begin
    Result := DefaultInterface.ProcessInputBuffer[ProcessID];
end;

function TSQLServerProperties.Get_ProcessOutputBuffer(ProcessID: Integer): WideString;
begin
    Result := DefaultInterface.ProcessOutputBuffer[ProcessID];
end;

function TSQLServerProperties.Get_Language: WideString;
begin
    Result := DefaultInterface.Language;
end;

procedure TSQLServerProperties.Set_Language(const pRetVal: WideString);
  { Warning: The property Language has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Language := pRetVal;
end;

function TSQLServerProperties.Get_AutoReConnect: WordBool;
begin
    Result := DefaultInterface.AutoReConnect;
end;

procedure TSQLServerProperties.Set_AutoReConnect(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoReConnect(pRetVal);
end;

function TSQLServerProperties.Get_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE): Integer;
begin
    Result := DefaultInterface.StatusInfoRefetchInterval[StatusInfoType];
end;

procedure TSQLServerProperties.Set_StatusInfoRefetchInterval(StatusInfoType: SQLDMO_STATUSINFO_TYPE; 
                                                             pRetVal: Integer);
begin
  DefaultInterface.StatusInfoRefetchInterval[StatusInfoType] := pRetVal;
end;

function TSQLServerProperties.Get_SaLogin: WordBool;
begin
    Result := DefaultInterface.SaLogin;
end;

function TSQLServerProperties.Get_AnsiNulls: WordBool;
begin
    Result := DefaultInterface.AnsiNulls;
end;

procedure TSQLServerProperties.Set_AnsiNulls(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNulls(pRetVal);
end;

function TSQLServerProperties.Get_NetName: WideString;
begin
    Result := DefaultInterface.NetName;
end;

function TSQLServerProperties.Get_Replication: Replication;
begin
    Result := DefaultInterface.Replication;
end;

function TSQLServerProperties.Get_EnableBcp: WordBool;
begin
    Result := DefaultInterface.EnableBcp;
end;

procedure TSQLServerProperties.Set_EnableBcp(pRetVal: WordBool);
begin
  DefaultInterface.Set_EnableBcp(pRetVal);
end;

function TSQLServerProperties.Get_BlockingTimeout: Integer;
begin
    Result := DefaultInterface.BlockingTimeout;
end;

procedure TSQLServerProperties.Set_BlockingTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_BlockingTimeout(pRetVal);
end;

function TSQLServerProperties.Get_ServerRoles: ServerRoles;
begin
    Result := DefaultInterface.ServerRoles;
end;

function TSQLServerProperties.Get_Isdbcreator: WordBool;
begin
    Result := DefaultInterface.Isdbcreator;
end;

function TSQLServerProperties.Get_Isdiskadmin: WordBool;
begin
    Result := DefaultInterface.Isdiskadmin;
end;

function TSQLServerProperties.Get_Isprocessadmin: WordBool;
begin
    Result := DefaultInterface.Isprocessadmin;
end;

function TSQLServerProperties.Get_Issecurityadmin: WordBool;
begin
    Result := DefaultInterface.Issecurityadmin;
end;

function TSQLServerProperties.Get_Isserveradmin: WordBool;
begin
    Result := DefaultInterface.Isserveradmin;
end;

function TSQLServerProperties.Get_Issetupadmin: WordBool;
begin
    Result := DefaultInterface.Issetupadmin;
end;

function TSQLServerProperties.Get_Issysadmin: WordBool;
begin
    Result := DefaultInterface.Issysadmin;
end;

function TSQLServerProperties.Get_QuotedIdentifier: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifier;
end;

procedure TSQLServerProperties.Set_QuotedIdentifier(pRetVal: WordBool);
begin
  DefaultInterface.Set_QuotedIdentifier(pRetVal);
end;

function TSQLServerProperties.Get_LinkedServers: LinkedServers;
begin
    Result := DefaultInterface.LinkedServers;
end;

procedure TSQLServerProperties.Set_CodePageOverride(Param1: Integer);
begin
  DefaultInterface.Set_CodePageOverride(Param1);
end;

function TSQLServerProperties.Get_FullTextService: FullTextService;
begin
    Result := DefaultInterface.FullTextService;
end;

function TSQLServerProperties.Get_ODBCPrefix: WordBool;
begin
    Result := DefaultInterface.ODBCPrefix;
end;

procedure TSQLServerProperties.Set_ODBCPrefix(pRetVal: WordBool);
begin
  DefaultInterface.Set_ODBCPrefix(pRetVal);
end;

function TSQLServerProperties.Get_RegionalSetting: WordBool;
begin
    Result := DefaultInterface.RegionalSetting;
end;

procedure TSQLServerProperties.Set_RegionalSetting(pRetVal: WordBool);
begin
  DefaultInterface.Set_RegionalSetting(pRetVal);
end;

function TSQLServerProperties.Get_CodePage: Integer;
begin
    Result := DefaultInterface.CodePage;
end;

function TSQLServerProperties.Get_ServerTime: WideString;
begin
    Result := DefaultInterface.ServerTime;
end;

function TSQLServerProperties.Get_TranslateChar: WordBool;
begin
    Result := DefaultInterface.TranslateChar;
end;

procedure TSQLServerProperties.Set_TranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_TranslateChar(pRetVal);
end;

{$ENDIF}

class function CoServerGroup.Create: _ServerGroup;
begin
  Result := CreateComObject(CLASS_ServerGroup) as _ServerGroup;
end;

class function CoServerGroup.CreateRemote(const MachineName: string): _ServerGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ServerGroup) as _ServerGroup;
end;

procedure TServerGroup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021800-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021806-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TServerGroup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _ServerGroup;
  end;
end;

procedure TServerGroup.ConnectTo(svrIntf: _ServerGroup);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TServerGroup.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TServerGroup.GetDefaultInterface: _ServerGroup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TServerGroup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TServerGroupProperties.Create(Self);
{$ENDIF}
end;

destructor TServerGroup.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TServerGroup.GetServerProperties: TServerGroupProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TServerGroup.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TServerGroup.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TServerGroup.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TServerGroup.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TServerGroup.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TServerGroup.Get_RegisteredServers: RegisteredServers;
begin
    Result := DefaultInterface.RegisteredServers;
end;

function TServerGroup.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TServerGroup.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TServerGroup.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TServerGroup.Get_ServerGroups: ServerGroups;
begin
    Result := DefaultInterface.ServerGroups;
end;

procedure TServerGroup.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TServerGroupProperties.Create(AServer: TServerGroup);
begin
  inherited Create;
  FServer := AServer;
end;

function TServerGroupProperties.GetDefaultInterface: _ServerGroup;
begin
  Result := FServer.DefaultInterface;
end;

function TServerGroupProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TServerGroupProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TServerGroupProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TServerGroupProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TServerGroupProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TServerGroupProperties.Get_RegisteredServers: RegisteredServers;
begin
    Result := DefaultInterface.RegisteredServers;
end;

function TServerGroupProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TServerGroupProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TServerGroupProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TServerGroupProperties.Get_ServerGroups: ServerGroups;
begin
    Result := DefaultInterface.ServerGroups;
end;

{$ENDIF}

class function CoRegisteredServer.Create: _RegisteredServer;
begin
  Result := CreateComObject(CLASS_RegisteredServer) as _RegisteredServer;
end;

class function CoRegisteredServer.CreateRemote(const MachineName: string): _RegisteredServer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RegisteredServer) as _RegisteredServer;
end;

procedure TRegisteredServer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021900-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021906-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRegisteredServer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RegisteredServer;
  end;
end;

procedure TRegisteredServer.ConnectTo(svrIntf: _RegisteredServer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRegisteredServer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRegisteredServer.GetDefaultInterface: _RegisteredServer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRegisteredServer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRegisteredServerProperties.Create(Self);
{$ENDIF}
end;

destructor TRegisteredServer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRegisteredServer.GetServerProperties: TRegisteredServerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRegisteredServer.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRegisteredServer.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRegisteredServer.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRegisteredServer.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRegisteredServer.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRegisteredServer.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRegisteredServer.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRegisteredServer.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRegisteredServer.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TRegisteredServer.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TRegisteredServer.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TRegisteredServer.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TRegisteredServer.Get_UseTrustedConnection: Integer;
begin
    Result := DefaultInterface.UseTrustedConnection;
end;

procedure TRegisteredServer.Set_UseTrustedConnection(pRetVal: Integer);
begin
  DefaultInterface.Set_UseTrustedConnection(pRetVal);
end;

function TRegisteredServer.Get_VersionMajor: Integer;
begin
    Result := DefaultInterface.VersionMajor;
end;

function TRegisteredServer.Get_VersionMinor: Integer;
begin
    Result := DefaultInterface.VersionMinor;
end;

function TRegisteredServer.Get_SaLogin: WordBool;
begin
    Result := DefaultInterface.SaLogin;
end;

function TRegisteredServer.Get_PersistFlags: Integer;
begin
    Result := DefaultInterface.PersistFlags;
end;

procedure TRegisteredServer.Set_PersistFlags(pRetVal: Integer);
begin
  DefaultInterface.Set_PersistFlags(pRetVal);
end;

procedure TRegisteredServer.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRegisteredServerProperties.Create(AServer: TRegisteredServer);
begin
  inherited Create;
  FServer := AServer;
end;

function TRegisteredServerProperties.GetDefaultInterface: _RegisteredServer;
begin
  Result := FServer.DefaultInterface;
end;

function TRegisteredServerProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TRegisteredServerProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TRegisteredServerProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TRegisteredServerProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TRegisteredServerProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TRegisteredServerProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TRegisteredServerProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TRegisteredServerProperties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TRegisteredServerProperties.Get_Login: WideString;
begin
    Result := DefaultInterface.Login;
end;

procedure TRegisteredServerProperties.Set_Login(const pRetVal: WideString);
  { Warning: The property Login has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Login := pRetVal;
end;

function TRegisteredServerProperties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TRegisteredServerProperties.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TRegisteredServerProperties.Get_UseTrustedConnection: Integer;
begin
    Result := DefaultInterface.UseTrustedConnection;
end;

procedure TRegisteredServerProperties.Set_UseTrustedConnection(pRetVal: Integer);
begin
  DefaultInterface.Set_UseTrustedConnection(pRetVal);
end;

function TRegisteredServerProperties.Get_VersionMajor: Integer;
begin
    Result := DefaultInterface.VersionMajor;
end;

function TRegisteredServerProperties.Get_VersionMinor: Integer;
begin
    Result := DefaultInterface.VersionMinor;
end;

function TRegisteredServerProperties.Get_SaLogin: WordBool;
begin
    Result := DefaultInterface.SaLogin;
end;

function TRegisteredServerProperties.Get_PersistFlags: Integer;
begin
    Result := DefaultInterface.PersistFlags;
end;

procedure TRegisteredServerProperties.Set_PersistFlags(pRetVal: Integer);
begin
  DefaultInterface.Set_PersistFlags(pRetVal);
end;

{$ENDIF}

class function CoSQLServer2.Create: _SQLServer2;
begin
  Result := CreateComObject(CLASS_SQLServer2) as _SQLServer2;
end;

class function CoSQLServer2.CreateRemote(const MachineName: string): _SQLServer2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SQLServer2) as _SQLServer2;
end;

procedure TSQLServer2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100202C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020216-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10020209-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSQLServer2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _SQLServer2;
  end;
end;

procedure TSQLServer2.ConnectTo(svrIntf: _SQLServer2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TSQLServer2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TSQLServer2.GetDefaultInterface: _SQLServer2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSQLServer2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSQLServer2Properties.Create(Self);
{$ENDIF}
end;

destructor TSQLServer2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSQLServer2.GetServerProperties: TSQLServer2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TSQLServer2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnQueryTimeout) then
         FOnQueryTimeout(Self,
                         Params[0] {const WideString},
                         WordBool((TVarData(Params[1]).VPointer)^) {out WordBool});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnServerMessage) then
         FOnServerMessage(Self,
                          Params[0] {Integer},
                          Params[1] {Integer},
                          Params[2] {Integer},
                          Params[3] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnConnectionBroken) then
         FOnConnectionBroken(Self,
                             Params[0] {const WideString},
                             WordBool((TVarData(Params[1]).VPointer)^) {out WordBool});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnRemoteLoginFailed) then
         FOnRemoteLoginFailed(Self,
                              Params[0] {Integer},
                              Params[1] {Integer},
                              Params[2] {Integer},
                              Params[3] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnCommandSent) then
         FOnCommandSent(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TSQLServer2.Get_AutoStart: WordBool;
begin
    Result := DefaultInterface.AutoStart;
end;

procedure TSQLServer2.Set_AutoStart(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoStart(pRetVal);
end;

function TSQLServer2.Get_StartupAccount: WideString;
begin
    Result := DefaultInterface.StartupAccount;
end;

function TSQLServer2.Get_InstanceName: WideString;
begin
    Result := DefaultInterface.InstanceName;
end;

function TSQLServer2.Get_ServiceName: WideString;
begin
    Result := DefaultInterface.ServiceName;
end;

function TSQLServer2.Get_PID: Integer;
begin
    Result := DefaultInterface.PID;
end;

function TSQLServer2.Get_IsClustered: WordBool;
begin
    Result := DefaultInterface.IsClustered;
end;

function TSQLServer2.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

function TSQLServer2.Get_IsFullTextInstalled: WordBool;
begin
    Result := DefaultInterface.IsFullTextInstalled;
end;

function TSQLServer2.Get_ProductLevel: WideString;
begin
    Result := DefaultInterface.ProductLevel;
end;

function TSQLServer2.Get_Isbulkadmin: WordBool;
begin
    Result := DefaultInterface.Isbulkadmin;
end;

function TSQLServer2.IsDetachedPrimaryFile(const MDFName: WideString): WordBool;
begin
  Result := DefaultInterface.IsDetachedPrimaryFile(MDFName);
end;

function TSQLServer2.ListDetachedDBFiles(const MDFName: WideString): NameList;
begin
  Result := DefaultInterface.ListDetachedDBFiles(MDFName);
end;

function TSQLServer2.DetachedDBInfo(const MDFName: WideString): QueryResults;
begin
  Result := DefaultInterface.DetachedDBInfo(MDFName);
end;

function TSQLServer2.ListCompatibilityLevels: NameList;
begin
  Result := DefaultInterface.ListCompatibilityLevels;
end;

function TSQLServer2.ListCollations: NameList;
begin
  Result := DefaultInterface.ListCollations;
end;

function TSQLServer2.ListDetachedLogFiles(const MDFName: WideString): NameList;
begin
  Result := DefaultInterface.ListDetachedLogFiles(MDFName);
end;

function TSQLServer2.ServerLoginMode(const ServerName: WideString): SQLDMO_SECURITY_TYPE;
begin
  Result := DefaultInterface.ServerLoginMode(ServerName);
end;

function TSQLServer2.AttachDBWithSingleFile2(const DBName: WideString; const DataFile: WideString): WordBool;
begin
  Result := DefaultInterface.AttachDBWithSingleFile2(DBName, DataFile);
end;

function TSQLServer2.ListInstalledInstances: NameList;
begin
  Result := DefaultInterface.ListInstalledInstances(EmptyParam);
end;

function TSQLServer2.ListInstalledInstances(ServerName: OleVariant): NameList;
begin
  Result := DefaultInterface.ListInstalledInstances(ServerName);
end;

function TSQLServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                    out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, EmptyParam);
end;

function TSQLServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                    out Messages: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, Length);
end;

function TSQLServer2.EnumCollations: QueryResults;
begin
  Result := DefaultInterface.EnumCollations;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSQLServer2Properties.Create(AServer: TSQLServer2);
begin
  inherited Create;
  FServer := AServer;
end;

function TSQLServer2Properties.GetDefaultInterface: _SQLServer2;
begin
  Result := FServer.DefaultInterface;
end;

function TSQLServer2Properties.Get_AutoStart: WordBool;
begin
    Result := DefaultInterface.AutoStart;
end;

procedure TSQLServer2Properties.Set_AutoStart(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoStart(pRetVal);
end;

function TSQLServer2Properties.Get_StartupAccount: WideString;
begin
    Result := DefaultInterface.StartupAccount;
end;

function TSQLServer2Properties.Get_InstanceName: WideString;
begin
    Result := DefaultInterface.InstanceName;
end;

function TSQLServer2Properties.Get_ServiceName: WideString;
begin
    Result := DefaultInterface.ServiceName;
end;

function TSQLServer2Properties.Get_PID: Integer;
begin
    Result := DefaultInterface.PID;
end;

function TSQLServer2Properties.Get_IsClustered: WordBool;
begin
    Result := DefaultInterface.IsClustered;
end;

function TSQLServer2Properties.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

function TSQLServer2Properties.Get_IsFullTextInstalled: WordBool;
begin
    Result := DefaultInterface.IsFullTextInstalled;
end;

function TSQLServer2Properties.Get_ProductLevel: WideString;
begin
    Result := DefaultInterface.ProductLevel;
end;

function TSQLServer2Properties.Get_Isbulkadmin: WordBool;
begin
    Result := DefaultInterface.Isbulkadmin;
end;

{$ENDIF}

class function CoDatabase2.Create: _Database2;
begin
  Result := CreateComObject(CLASS_Database2) as _Database2;
end;

class function CoDatabase2.CreateRemote(const MachineName: string): _Database2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Database2) as _Database2;
end;

procedure TDatabase2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100203C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020316-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDatabase2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Database2;
  end;
end;

procedure TDatabase2.ConnectTo(svrIntf: _Database2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDatabase2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDatabase2.GetDefaultInterface: _Database2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDatabase2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDatabase2Properties.Create(Self);
{$ENDIF}
end;

destructor TDatabase2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDatabase2.GetServerProperties: TDatabase2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDatabase2.Get_CurrentCompatibility: WideString;
begin
    Result := DefaultInterface.CurrentCompatibility;
end;

procedure TDatabase2.Set_CurrentCompatibility(const pRetVal: WideString);
  { Warning: The property CurrentCompatibility has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CurrentCompatibility := pRetVal;
end;

function TDatabase2.Get_UserDefinedFunctions: UserDefinedFunctions;
begin
    Result := DefaultInterface.UserDefinedFunctions;
end;

function TDatabase2.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

procedure TDatabase2.Set_Collation(const pRetVal: WideString);
  { Warning: The property Collation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Collation := pRetVal;
end;

function TDatabase2.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

function TDatabase2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TDatabase2.CheckTablesWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults;
begin
  Result := DefaultInterface.CheckTablesWithResult(RepairType);
end;

function TDatabase2.CheckAllocationsWithResult(RepairType: SQLDMO_DBCC_REPAIR_TYPE): QueryResults;
begin
  Result := DefaultInterface.CheckAllocationsWithResult(RepairType);
end;

function TDatabase2.CheckCatalogWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckCatalogWithResult;
end;

function TDatabase2.CheckTablesDataOnlyWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckTablesDataOnlyWithResult;
end;

function TDatabase2.CheckAllocationsDataOnlyWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckAllocationsDataOnlyWithResult;
end;

function TDatabase2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                   out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, EmptyParam);
end;

function TDatabase2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                   out Messages: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, Length);
end;

procedure TDatabase2.CheckRuleSyntax(const Rule: Rule);
begin
  DefaultInterface.CheckRuleSyntax(Rule);
end;

procedure TDatabase2.CheckDefaultSyntax(const Default: Default);
begin
  DefaultInterface.CheckDefaultSyntax(Default);
end;

function TDatabase2.IsObjectDeleted(ObjectType: SQLDMO_OBJECT_TYPE; const ObjectName: WideString; 
                                    const ObjectOwner: WideString): WordBool;
begin
  Result := DefaultInterface.IsObjectDeleted(ObjectType, ObjectName, ObjectOwner);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDatabase2Properties.Create(AServer: TDatabase2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDatabase2Properties.GetDefaultInterface: _Database2;
begin
  Result := FServer.DefaultInterface;
end;

function TDatabase2Properties.Get_CurrentCompatibility: WideString;
begin
    Result := DefaultInterface.CurrentCompatibility;
end;

procedure TDatabase2Properties.Set_CurrentCompatibility(const pRetVal: WideString);
  { Warning: The property CurrentCompatibility has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CurrentCompatibility := pRetVal;
end;

function TDatabase2Properties.Get_UserDefinedFunctions: UserDefinedFunctions;
begin
    Result := DefaultInterface.UserDefinedFunctions;
end;

function TDatabase2Properties.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

procedure TDatabase2Properties.Set_Collation(const pRetVal: WideString);
  { Warning: The property Collation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Collation := pRetVal;
end;

function TDatabase2Properties.Get_SizeInKB: Single;
begin
    Result := DefaultInterface.SizeInKB;
end;

function TDatabase2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoTable2.Create: _Table2;
begin
  Result := CreateComObject(CLASS_Table2) as _Table2;
end;

class function CoTable2.CreateRemote(const MachineName: string): _Table2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Table2) as _Table2;
end;

procedure TTable2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100204C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020416-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTable2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Table2;
  end;
end;

procedure TTable2.ConnectTo(svrIntf: _Table2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTable2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTable2.GetDefaultInterface: _Table2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTable2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTable2Properties.Create(Self);
{$ENDIF}
end;

destructor TTable2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTable2.GetServerProperties: TTable2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTable2.Get_TableFullTextChangeTrackingOn: WordBool;
begin
    Result := DefaultInterface.TableFullTextChangeTrackingOn;
end;

procedure TTable2.Set_TableFullTextChangeTrackingOn(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableFullTextChangeTrackingOn(pRetVal);
end;

function TTable2.Get_TableFullTextUpdateIndexOn: WordBool;
begin
    Result := DefaultInterface.TableFullTextUpdateIndexOn;
end;

procedure TTable2.Set_TableFullTextUpdateIndexOn(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableFullTextUpdateIndexOn(pRetVal);
end;

function TTable2.Get_FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS;
begin
    Result := DefaultInterface.FullTextPopulateStatus;
end;

function TTable2.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTable2.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

function TTable2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TTable2.CheckTableWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckTableWithResult;
end;

function TTable2.CheckTableDataOnlyWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckTableDataOnlyWithResult;
end;

function TTable2.ListUserColumnPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserColumnPermissions(UserName);
end;

procedure TTable2.FullTextUpdateIndex;
begin
  DefaultInterface.FullTextUpdateIndex;
end;

procedure TTable2.FullTextPopulation(Type_: SQLDMO_FULLTEXT_POPULATE_TYPE);
begin
  DefaultInterface.FullTextPopulation(Type_);
end;

function TTable2.ListColumnPermissions: SQLObjectList;
begin
  Result := DefaultInterface.ListColumnPermissions;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTable2Properties.Create(AServer: TTable2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTable2Properties.GetDefaultInterface: _Table2;
begin
  Result := FServer.DefaultInterface;
end;

function TTable2Properties.Get_TableFullTextChangeTrackingOn: WordBool;
begin
    Result := DefaultInterface.TableFullTextChangeTrackingOn;
end;

procedure TTable2Properties.Set_TableFullTextChangeTrackingOn(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableFullTextChangeTrackingOn(pRetVal);
end;

function TTable2Properties.Get_TableFullTextUpdateIndexOn: WordBool;
begin
    Result := DefaultInterface.TableFullTextUpdateIndexOn;
end;

procedure TTable2Properties.Set_TableFullTextUpdateIndexOn(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableFullTextUpdateIndexOn(pRetVal);
end;

function TTable2Properties.Get_FullTextPopulateStatus: SQLDMO_FULLTEXT_POPULATE_STATUS;
begin
    Result := DefaultInterface.FullTextPopulateStatus;
end;

function TTable2Properties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTable2Properties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

function TTable2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoColumn2.Create: _Column2;
begin
  Result := CreateComObject(CLASS_Column2) as _Column2;
end;

class function CoColumn2.CreateRemote(const MachineName: string): _Column2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Column2) as _Column2;
end;

procedure TColumn2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100205C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020516-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TColumn2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Column2;
  end;
end;

procedure TColumn2.ConnectTo(svrIntf: _Column2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TColumn2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TColumn2.GetDefaultInterface: _Column2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TColumn2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TColumn2Properties.Create(Self);
{$ENDIF}
end;

destructor TColumn2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TColumn2.GetServerProperties: TColumn2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TColumn2.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

procedure TColumn2.Set_Collation(const pRetVal: WideString);
  { Warning: The property Collation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Collation := pRetVal;
end;

function TColumn2.Get_FullTextImageColumnType: WideString;
begin
    Result := DefaultInterface.FullTextImageColumnType;
end;

function TColumn2.Get_FullTextColumnLanguageID: Integer;
begin
    Result := DefaultInterface.FullTextColumnLanguageID;
end;

procedure TColumn2.SetFullTextIndexWithOptions(Index: WordBool; LanguageID: Integer; 
                                               const ColumnType: WideString);
begin
  DefaultInterface.SetFullTextIndexWithOptions(Index, LanguageID, ColumnType);
end;

procedure TColumn2.AlterDataType(const Datatype: WideString; Length: Integer; Precision: Integer; 
                                 Scale: Integer);
begin
  DefaultInterface.AlterDataType(Datatype, Length, Precision, Scale);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TColumn2Properties.Create(AServer: TColumn2);
begin
  inherited Create;
  FServer := AServer;
end;

function TColumn2Properties.GetDefaultInterface: _Column2;
begin
  Result := FServer.DefaultInterface;
end;

function TColumn2Properties.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

procedure TColumn2Properties.Set_Collation(const pRetVal: WideString);
  { Warning: The property Collation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Collation := pRetVal;
end;

function TColumn2Properties.Get_FullTextImageColumnType: WideString;
begin
    Result := DefaultInterface.FullTextImageColumnType;
end;

function TColumn2Properties.Get_FullTextColumnLanguageID: Integer;
begin
    Result := DefaultInterface.FullTextColumnLanguageID;
end;

{$ENDIF}

class function CoView2.Create: _View2;
begin
  Result := CreateComObject(CLASS_View2) as _View2;
end;

class function CoView2.CreateRemote(const MachineName: string): _View2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_View2) as _View2;
end;

procedure TView2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100207C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020716-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TView2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _View2;
  end;
end;

procedure TView2.ConnectTo(svrIntf: _View2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TView2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TView2.GetDefaultInterface: _View2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TView2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TView2Properties.Create(Self);
{$ENDIF}
end;

destructor TView2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TView2.GetServerProperties: TView2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TView2.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TView2.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TView2.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TView2.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TView2.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TView2.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TView2.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TView2.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TView2.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TView2.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TView2.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TView2.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TView2.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TView2.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TView2.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TView2.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TView2.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TView2.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TView2.Get_Indexes: Indexes;
begin
    Result := DefaultInterface.Indexes;
end;

function TView2.Get_ClusteredIndex: Index;
begin
    Result := DefaultInterface.ClusteredIndex;
end;

function TView2.Get_IsSchemaBound: WordBool;
begin
    Result := DefaultInterface.IsSchemaBound;
end;

function TView2.Get_Triggers: Triggers;
begin
    Result := DefaultInterface.Triggers;
end;

function TView2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TView2.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

procedure TView2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, EmptyParam, EmptyParam);
end;

procedure TView2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, EmptyParam);
end;

procedure TView2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString; 
                       ColumnNames: OleVariant; GrantGrant: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, ColumnNames, GrantGrant, AsRole);
end;

procedure TView2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TView2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TView2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant; 
                        RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          EmptyParam);
end;

procedure TView2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString; 
                        ColumnNames: OleVariant; GrantGrant: OleVariant; 
                        RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, ColumnNames, GrantGrant, RevokeGrantOption, 
                          AsRole);
end;

procedure TView2.Remove;
begin
  DefaultInterface.Remove;
end;

function TView2.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                       Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TView2.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

function TView2.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TView2.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TView2.ListColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListColumns;
end;

function TView2.ExportData(const Bcp: BulkCopy): Integer;
begin
  Result := DefaultInterface.ExportData(Bcp);
end;

procedure TView2.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam, EmptyParam);
end;

procedure TView2.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                      ColumnNames: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, EmptyParam);
end;

procedure TView2.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                      ColumnNames: OleVariant; GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, ColumnNames, GrantGrant);
end;

procedure TView2.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

function TView2.ListUserColumnPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserColumnPermissions(UserName);
end;

function TView2.ListColumnPermissions: SQLObjectList;
begin
  Result := DefaultInterface.ListColumnPermissions;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TView2Properties.Create(AServer: TView2);
begin
  inherited Create;
  FServer := AServer;
end;

function TView2Properties.GetDefaultInterface: _View2;
begin
  Result := FServer.DefaultInterface;
end;

function TView2Properties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TView2Properties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TView2Properties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TView2Properties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TView2Properties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TView2Properties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TView2Properties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TView2Properties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TView2Properties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TView2Properties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TView2Properties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TView2Properties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TView2Properties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TView2Properties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TView2Properties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TView2Properties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TView2Properties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TView2Properties.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TView2Properties.Get_Indexes: Indexes;
begin
    Result := DefaultInterface.Indexes;
end;

function TView2Properties.Get_ClusteredIndex: Index;
begin
    Result := DefaultInterface.ClusteredIndex;
end;

function TView2Properties.Get_IsSchemaBound: WordBool;
begin
    Result := DefaultInterface.IsSchemaBound;
end;

function TView2Properties.Get_Triggers: Triggers;
begin
    Result := DefaultInterface.Triggers;
end;

function TView2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TView2Properties.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

{$ENDIF}

class function CoUserDefinedDatatype2.Create: _UserDefinedDatatype2;
begin
  Result := CreateComObject(CLASS_UserDefinedDatatype2) as _UserDefinedDatatype2;
end;

class function CoUserDefinedDatatype2.CreateRemote(const MachineName: string): _UserDefinedDatatype2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserDefinedDatatype2) as _UserDefinedDatatype2;
end;

procedure TUserDefinedDatatype2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100208C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020816-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUserDefinedDatatype2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UserDefinedDatatype2;
  end;
end;

procedure TUserDefinedDatatype2.ConnectTo(svrIntf: _UserDefinedDatatype2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUserDefinedDatatype2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUserDefinedDatatype2.GetDefaultInterface: _UserDefinedDatatype2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUserDefinedDatatype2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUserDefinedDatatype2Properties.Create(Self);
{$ENDIF}
end;

destructor TUserDefinedDatatype2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUserDefinedDatatype2.GetServerProperties: TUserDefinedDatatype2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUserDefinedDatatype2.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

function TUserDefinedDatatype2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUserDefinedDatatype2Properties.Create(AServer: TUserDefinedDatatype2);
begin
  inherited Create;
  FServer := AServer;
end;

function TUserDefinedDatatype2Properties.GetDefaultInterface: _UserDefinedDatatype2;
begin
  Result := FServer.DefaultInterface;
end;

function TUserDefinedDatatype2Properties.Get_Collation: WideString;
begin
    Result := DefaultInterface.Collation;
end;

function TUserDefinedDatatype2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoDefault2.Create: _Default2;
begin
  Result := CreateComObject(CLASS_Default2) as _Default2;
end;

class function CoDefault2.CreateRemote(const MachineName: string): _Default2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Default2) as _Default2;
end;

procedure TDefault2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100209C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020916-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDefault2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Default2;
  end;
end;

procedure TDefault2.ConnectTo(svrIntf: _Default2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDefault2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDefault2.GetDefaultInterface: _Default2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDefault2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDefault2Properties.Create(Self);
{$ENDIF}
end;

destructor TDefault2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDefault2.GetServerProperties: TDefault2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDefault2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDefault2Properties.Create(AServer: TDefault2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDefault2Properties.GetDefaultInterface: _Default2;
begin
  Result := FServer.DefaultInterface;
end;

function TDefault2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoRule2.Create: _Rule2;
begin
  Result := CreateComObject(CLASS_Rule2) as _Rule2;
end;

class function CoRule2.CreateRemote(const MachineName: string): _Rule2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Rule2) as _Rule2;
end;

procedure TRule2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020AC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020A16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRule2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Rule2;
  end;
end;

procedure TRule2.ConnectTo(svrIntf: _Rule2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRule2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRule2.GetDefaultInterface: _Rule2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRule2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRule2Properties.Create(Self);
{$ENDIF}
end;

destructor TRule2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRule2.GetServerProperties: TRule2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRule2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRule2Properties.Create(AServer: TRule2);
begin
  inherited Create;
  FServer := AServer;
end;

function TRule2Properties.GetDefaultInterface: _Rule2;
begin
  Result := FServer.DefaultInterface;
end;

function TRule2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoUser2.Create: _User2;
begin
  Result := CreateComObject(CLASS_User2) as _User2;
end;

class function CoUser2.CreateRemote(const MachineName: string): _User2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_User2) as _User2;
end;

procedure TUser2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020BC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020B16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUser2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _User2;
  end;
end;

procedure TUser2.ConnectTo(svrIntf: _User2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUser2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUser2.GetDefaultInterface: _User2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUser2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUser2Properties.Create(Self);
{$ENDIF}
end;

destructor TUser2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUser2.GetServerProperties: TUser2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUser2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TUser2.ListObjectColumnPermissions: QueryResults;
begin
  Result := DefaultInterface.ListObjectColumnPermissions;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUser2Properties.Create(AServer: TUser2);
begin
  inherited Create;
  FServer := AServer;
end;

function TUser2Properties.GetDefaultInterface: _User2;
begin
  Result := FServer.DefaultInterface;
end;

function TUser2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoStoredProcedure2.Create: _StoredProcedure2;
begin
  Result := CreateComObject(CLASS_StoredProcedure2) as _StoredProcedure2;
end;

class function CoStoredProcedure2.CreateRemote(const MachineName: string): _StoredProcedure2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredProcedure2) as _StoredProcedure2;
end;

procedure TStoredProcedure2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020DC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020D16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStoredProcedure2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _StoredProcedure2;
  end;
end;

procedure TStoredProcedure2.ConnectTo(svrIntf: _StoredProcedure2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStoredProcedure2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStoredProcedure2.GetDefaultInterface: _StoredProcedure2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStoredProcedure2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStoredProcedure2Properties.Create(Self);
{$ENDIF}
end;

destructor TStoredProcedure2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStoredProcedure2.GetServerProperties: TStoredProcedure2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStoredProcedure2.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TStoredProcedure2.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TStoredProcedure2.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TStoredProcedure2.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TStoredProcedure2.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TStoredProcedure2.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TStoredProcedure2.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStoredProcedure2.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TStoredProcedure2.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TStoredProcedure2.Get_type_: SQLDMO_PROCEDURE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TStoredProcedure2.Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TStoredProcedure2.Get_Startup: WordBool;
begin
    Result := DefaultInterface.Startup;
end;

procedure TStoredProcedure2.Set_Startup(pRetVal: WordBool);
begin
  DefaultInterface.Set_Startup(pRetVal);
end;

function TStoredProcedure2.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TStoredProcedure2.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TStoredProcedure2.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TStoredProcedure2.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TStoredProcedure2.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TStoredProcedure2.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TStoredProcedure2.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TStoredProcedure2.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TStoredProcedure2.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TStoredProcedure2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TStoredProcedure2.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

procedure TStoredProcedure2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; const GranteeNames: WideString);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                  const GranteeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, EmptyParam);
end;

procedure TStoredProcedure2.Grant(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                  const GranteeNames: WideString; GrantGrant: OleVariant; 
                                  AsRole: OleVariant);
begin
  DefaultInterface.Grant(Privileges, GranteeNames, GrantGrant, AsRole);
end;

procedure TStoredProcedure2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; const RevokeeNames: WideString);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                   const RevokeeNames: WideString; GrantGrant: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, EmptyParam, EmptyParam);
end;

procedure TStoredProcedure2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                   const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                   RevokeGrantOption: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, EmptyParam);
end;

procedure TStoredProcedure2.Revoke(Privileges: SQLDMO_PRIVILEGE_TYPE; 
                                   const RevokeeNames: WideString; GrantGrant: OleVariant; 
                                   RevokeGrantOption: OleVariant; AsRole: OleVariant);
begin
  DefaultInterface.Revoke(Privileges, RevokeeNames, GrantGrant, RevokeGrantOption, AsRole);
end;

function TStoredProcedure2.ListPermissions(PrivilegeTypes: SQLDMO_PRIVILEGE_TYPE): SQLObjectList;
begin
  Result := DefaultInterface.ListPermissions(PrivilegeTypes);
end;

function TStoredProcedure2.ListUserPermissions(const UserName: WideString): SQLObjectList;
begin
  Result := DefaultInterface.ListUserPermissions(UserName);
end;

function TStoredProcedure2.EnumParameters: QueryResults;
begin
  Result := DefaultInterface.EnumParameters;
end;

procedure TStoredProcedure2.Remove;
begin
  DefaultInterface.Remove;
end;

function TStoredProcedure2.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                                  Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TStoredProcedure2.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TStoredProcedure2.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, EmptyParam);
end;

procedure TStoredProcedure2.Deny(Privileges: SQLDMO_PRIVILEGE_TYPE; const DenyeeNames: WideString; 
                                 GrantGrant: OleVariant);
begin
  DefaultInterface.Deny(Privileges, DenyeeNames, GrantGrant);
end;

procedure TStoredProcedure2.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStoredProcedure2Properties.Create(AServer: TStoredProcedure2);
begin
  inherited Create;
  FServer := AServer;
end;

function TStoredProcedure2Properties.GetDefaultInterface: _StoredProcedure2;
begin
  Result := FServer.DefaultInterface;
end;

function TStoredProcedure2Properties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TStoredProcedure2Properties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TStoredProcedure2Properties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TStoredProcedure2Properties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TStoredProcedure2Properties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TStoredProcedure2Properties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TStoredProcedure2Properties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStoredProcedure2Properties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TStoredProcedure2Properties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TStoredProcedure2Properties.Get_type_: SQLDMO_PROCEDURE_TYPE;
begin
    Result := DefaultInterface.type_;
end;

procedure TStoredProcedure2Properties.Set_type_(pRetVal: SQLDMO_PROCEDURE_TYPE);
begin
  DefaultInterface.Set_type_(pRetVal);
end;

function TStoredProcedure2Properties.Get_Startup: WordBool;
begin
    Result := DefaultInterface.Startup;
end;

procedure TStoredProcedure2Properties.Set_Startup(pRetVal: WordBool);
begin
  DefaultInterface.Set_Startup(pRetVal);
end;

function TStoredProcedure2Properties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TStoredProcedure2Properties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TStoredProcedure2Properties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TStoredProcedure2Properties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TStoredProcedure2Properties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TStoredProcedure2Properties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TStoredProcedure2Properties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TStoredProcedure2Properties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TStoredProcedure2Properties.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TStoredProcedure2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TStoredProcedure2Properties.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

{$ENDIF}

class function CoIndex2.Create: _Index2;
begin
  Result := CreateComObject(CLASS_Index2) as _Index2;
end;

class function CoIndex2.CreateRemote(const MachineName: string): _Index2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Index2) as _Index2;
end;

procedure TIndex2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10020EC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10020E16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIndex2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Index2;
  end;
end;

procedure TIndex2.ConnectTo(svrIntf: _Index2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TIndex2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TIndex2.GetDefaultInterface: _Index2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TIndex2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TIndex2Properties.Create(Self);
{$ENDIF}
end;

destructor TIndex2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TIndex2.GetServerProperties: TIndex2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TIndex2.Get_IsOnComputed: WordBool;
begin
    Result := DefaultInterface.IsOnComputed;
end;

function TIndex2.Get_IndexOnTable: WordBool;
begin
    Result := DefaultInterface.IndexOnTable;
end;

function TIndex2.CheckIndexWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckIndexWithResult;
end;

procedure TIndex2.SetIndexedColumnDESC(const ColumnName: WideString; Descending: WordBool);
begin
  DefaultInterface.SetIndexedColumnDESC(ColumnName, Descending);
end;

function TIndex2.GetIndexedColumnDESC(const ColumnName: WideString): WordBool;
begin
  Result := DefaultInterface.GetIndexedColumnDESC(ColumnName);
end;

function TIndex2.GenerateCreationSQLOnView(const TargetView: View): WideString;
begin
  Result := DefaultInterface.GenerateCreationSQLOnView(TargetView);
end;

function TIndex2.GenerateSQLOnView(const pView: View): WideString;
begin
  Result := DefaultInterface.GenerateSQLOnView(pView);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TIndex2Properties.Create(AServer: TIndex2);
begin
  inherited Create;
  FServer := AServer;
end;

function TIndex2Properties.GetDefaultInterface: _Index2;
begin
  Result := FServer.DefaultInterface;
end;

function TIndex2Properties.Get_IsOnComputed: WordBool;
begin
    Result := DefaultInterface.IsOnComputed;
end;

function TIndex2Properties.Get_IndexOnTable: WordBool;
begin
    Result := DefaultInterface.IndexOnTable;
end;

{$ENDIF}

class function CoTrigger2.Create: _Trigger2;
begin
  Result := CreateComObject(CLASS_Trigger2) as _Trigger2;
end;

class function CoTrigger2.CreateRemote(const MachineName: string): _Trigger2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Trigger2) as _Trigger2;
end;

procedure TTrigger2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100210C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021016-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTrigger2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Trigger2;
  end;
end;

procedure TTrigger2.ConnectTo(svrIntf: _Trigger2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTrigger2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTrigger2.GetDefaultInterface: _Trigger2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTrigger2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTrigger2Properties.Create(Self);
{$ENDIF}
end;

destructor TTrigger2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTrigger2.GetServerProperties: TTrigger2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTrigger2.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTrigger2.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTrigger2.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTrigger2.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTrigger2.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTrigger2.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTrigger2.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTrigger2.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTrigger2.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTrigger2.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTrigger2.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTrigger2.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTrigger2.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTrigger2.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TTrigger2.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TTrigger2.Get_type_: SQLDMO_TRIGGER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TTrigger2.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTrigger2.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTrigger2.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTrigger2.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TTrigger2.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TTrigger2.Get_InsteadOfTrigger: WordBool;
begin
    Result := DefaultInterface.InsteadOfTrigger;
end;

function TTrigger2.Get_AfterTrigger: WordBool;
begin
    Result := DefaultInterface.AfterTrigger;
end;

function TTrigger2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TTrigger2.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

procedure TTrigger2.Remove;
begin
  DefaultInterface.Remove;
end;

function TTrigger2.Script(ScriptType: SQLDMO_SCRIPT_TYPE; ScriptFilePath: OleVariant; 
                          Script2Type: SQLDMO_SCRIPT2_TYPE): WideString;
begin
  Result := DefaultInterface.Script(ScriptType, ScriptFilePath, Script2Type);
end;

function TTrigger2.EnumDependencies(DependencyType: SQLDMO_DEPENDENCY_TYPE): QueryResults;
begin
  Result := DefaultInterface.EnumDependencies(DependencyType);
end;

procedure TTrigger2.Alter(const NewText: WideString);
begin
  DefaultInterface.Alter(NewText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTrigger2Properties.Create(AServer: TTrigger2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTrigger2Properties.GetDefaultInterface: _Trigger2;
begin
  Result := FServer.DefaultInterface;
end;

function TTrigger2Properties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TTrigger2Properties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TTrigger2Properties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TTrigger2Properties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TTrigger2Properties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TTrigger2Properties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TTrigger2Properties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TTrigger2Properties.Set_Name(const pRetVal: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRetVal;
end;

function TTrigger2Properties.Get_SystemObject: WordBool;
begin
    Result := DefaultInterface.SystemObject;
end;

function TTrigger2Properties.Get_Owner: WideString;
begin
    Result := DefaultInterface.Owner;
end;

procedure TTrigger2Properties.Set_Owner(const pRetVal: WideString);
  { Warning: The property Owner has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Owner := pRetVal;
end;

function TTrigger2Properties.Get_CreateDate: WideString;
begin
    Result := DefaultInterface.CreateDate;
end;

function TTrigger2Properties.Get_ID: Integer;
begin
    Result := DefaultInterface.ID;
end;

function TTrigger2Properties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TTrigger2Properties.Set_Text(const pRetVal: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pRetVal;
end;

function TTrigger2Properties.Get_type_: SQLDMO_TRIGGER_TYPE;
begin
    Result := DefaultInterface.type_;
end;

function TTrigger2Properties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TTrigger2Properties.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Set_Enabled(pRetVal);
end;

function TTrigger2Properties.Get_QuotedIdentifierStatus: WordBool;
begin
    Result := DefaultInterface.QuotedIdentifierStatus;
end;

function TTrigger2Properties.Get_AnsiNullsStatus: WordBool;
begin
    Result := DefaultInterface.AnsiNullsStatus;
end;

procedure TTrigger2Properties.Set_AnsiNullsStatus(pRetVal: WordBool);
begin
  DefaultInterface.Set_AnsiNullsStatus(pRetVal);
end;

function TTrigger2Properties.Get_InsteadOfTrigger: WordBool;
begin
    Result := DefaultInterface.InsteadOfTrigger;
end;

function TTrigger2Properties.Get_AfterTrigger: WordBool;
begin
    Result := DefaultInterface.AfterTrigger;
end;

function TTrigger2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

function TTrigger2Properties.Get_Encrypted: WordBool;
begin
    Result := DefaultInterface.Encrypted;
end;

{$ENDIF}

class function CoLogin2.Create: _Login2;
begin
  Result := CreateComObject(CLASS_Login2) as _Login2;
end;

class function CoLogin2.CreateRemote(const MachineName: string): _Login2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Login2) as _Login2;
end;

procedure TLogin2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100213C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021316-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLogin2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Login2;
  end;
end;

procedure TLogin2.ConnectTo(svrIntf: _Login2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLogin2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLogin2.GetDefaultInterface: _Login2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLogin2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLogin2Properties.Create(Self);
{$ENDIF}
end;

destructor TLogin2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLogin2.GetServerProperties: TLogin2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLogin2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLogin2Properties.Create(AServer: TLogin2);
begin
  inherited Create;
  FServer := AServer;
end;

function TLogin2Properties.GetDefaultInterface: _Login2;
begin
  Result := FServer.DefaultInterface;
end;

function TLogin2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoRemoteServer2.Create: _RemoteServer2;
begin
  Result := CreateComObject(CLASS_RemoteServer2) as _RemoteServer2;
end;

class function CoRemoteServer2.CreateRemote(const MachineName: string): _RemoteServer2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RemoteServer2) as _RemoteServer2;
end;

procedure TRemoteServer2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100215C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021516-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRemoteServer2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _RemoteServer2;
  end;
end;

procedure TRemoteServer2.ConnectTo(svrIntf: _RemoteServer2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRemoteServer2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRemoteServer2.GetDefaultInterface: _RemoteServer2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRemoteServer2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRemoteServer2Properties.Create(Self);
{$ENDIF}
end;

destructor TRemoteServer2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRemoteServer2.GetServerProperties: TRemoteServer2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRemoteServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                       out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, EmptyParam);
end;

function TRemoteServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                       out Messages: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, Length);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRemoteServer2Properties.Create(AServer: TRemoteServer2);
begin
  inherited Create;
  FServer := AServer;
end;

function TRemoteServer2Properties.GetDefaultInterface: _RemoteServer2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoTransfer2.Create: _Transfer2;
begin
  Result := CreateComObject(CLASS_Transfer2) as _Transfer2;
end;

class function CoTransfer2.CreateRemote(const MachineName: string): _Transfer2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Transfer2) as _Transfer2;
end;

procedure TTransfer2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021EC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021E16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021E09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransfer2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Transfer2;
  end;
end;

procedure TTransfer2.ConnectTo(svrIntf: _Transfer2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TTransfer2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TTransfer2.GetDefaultInterface: _Transfer2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransfer2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransfer2Properties.Create(Self);
{$ENDIF}
end;

destructor TTransfer2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransfer2.GetServerProperties: TTransfer2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TTransfer2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnStatusMessage) then
         FOnStatusMessage(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentCompleteAtStep) then
         FOnPercentCompleteAtStep(Self,
                                  Params[0] {const WideString},
                                  Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnScriptTransferPercentComplete) then
         FOnScriptTransferPercentComplete(Self,
                                          Params[0] {const WideString},
                                          Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnTransferPercentComplete) then
         FOnTransferPercentComplete(Self,
                                    Params[0] {const WideString},
                                    Params[1] {Integer});
*)
  end; {case DispID}
end;

function TTransfer2.Get_SourceTranslateChar: WordBool;
begin
    Result := DefaultInterface.SourceTranslateChar;
end;

procedure TTransfer2.Set_SourceTranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_SourceTranslateChar(pRetVal);
end;

function TTransfer2.Get_DestTranslateChar: WordBool;
begin
    Result := DefaultInterface.DestTranslateChar;
end;

procedure TTransfer2.Set_DestTranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_DestTranslateChar(pRetVal);
end;

function TTransfer2.Get_IncludeDB: WordBool;
begin
    Result := DefaultInterface.IncludeDB;
end;

procedure TTransfer2.Set_IncludeDB(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeDB(pRetVal);
end;

function TTransfer2.Get_CopyAllFunctions: WordBool;
begin
    Result := DefaultInterface.CopyAllFunctions;
end;

procedure TTransfer2.Set_CopyAllFunctions(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllFunctions(pRetVal);
end;

function TTransfer2.Get_UseCollation: WordBool;
begin
    Result := DefaultInterface.UseCollation;
end;

procedure TTransfer2.Set_UseCollation(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseCollation(pRetVal);
end;

function TTransfer2.Get_UseDestTransaction: WordBool;
begin
    Result := DefaultInterface.UseDestTransaction;
end;

procedure TTransfer2.Set_UseDestTransaction(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseDestTransaction(pRetVal);
end;

procedure TTransfer2.RemoveAllObjects;
begin
  DefaultInterface.RemoveAllObjects;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransfer2Properties.Create(AServer: TTransfer2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransfer2Properties.GetDefaultInterface: _Transfer2;
begin
  Result := FServer.DefaultInterface;
end;

function TTransfer2Properties.Get_SourceTranslateChar: WordBool;
begin
    Result := DefaultInterface.SourceTranslateChar;
end;

procedure TTransfer2Properties.Set_SourceTranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_SourceTranslateChar(pRetVal);
end;

function TTransfer2Properties.Get_DestTranslateChar: WordBool;
begin
    Result := DefaultInterface.DestTranslateChar;
end;

procedure TTransfer2Properties.Set_DestTranslateChar(pRetVal: WordBool);
begin
  DefaultInterface.Set_DestTranslateChar(pRetVal);
end;

function TTransfer2Properties.Get_IncludeDB: WordBool;
begin
    Result := DefaultInterface.IncludeDB;
end;

procedure TTransfer2Properties.Set_IncludeDB(pRetVal: WordBool);
begin
  DefaultInterface.Set_IncludeDB(pRetVal);
end;

function TTransfer2Properties.Get_CopyAllFunctions: WordBool;
begin
    Result := DefaultInterface.CopyAllFunctions;
end;

procedure TTransfer2Properties.Set_CopyAllFunctions(pRetVal: WordBool);
begin
  DefaultInterface.Set_CopyAllFunctions(pRetVal);
end;

function TTransfer2Properties.Get_UseCollation: WordBool;
begin
    Result := DefaultInterface.UseCollation;
end;

procedure TTransfer2Properties.Set_UseCollation(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseCollation(pRetVal);
end;

function TTransfer2Properties.Get_UseDestTransaction: WordBool;
begin
    Result := DefaultInterface.UseDestTransaction;
end;

procedure TTransfer2Properties.Set_UseDestTransaction(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseDestTransaction(pRetVal);
end;

{$ENDIF}

class function CoBackup.Create: _Backup;
begin
  Result := CreateComObject(CLASS_Backup) as _Backup;
end;

class function CoBackup.CreateRemote(const MachineName: string): _Backup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Backup) as _Backup;
end;

procedure TBackup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021F00-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021F06-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021F09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBackup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Backup;
  end;
end;

procedure TBackup.ConnectTo(svrIntf: _Backup);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TBackup.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TBackup.GetDefaultInterface: _Backup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBackup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBackupProperties.Create(Self);
{$ENDIF}
end;

destructor TBackup.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBackup.GetServerProperties: TBackupProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TBackup.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnNextMedia) then
         FOnNextMedia(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnComplete) then
         FOnComplete(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TBackup.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBackup.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBackup.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBackup.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBackup.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBackup.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBackup.Get_PercentCompleteNotification: Integer;
begin
    Result := DefaultInterface.PercentCompleteNotification;
end;

procedure TBackup.Set_PercentCompleteNotification(pRetVal: Integer);
begin
  DefaultInterface.Set_PercentCompleteNotification(pRetVal);
end;

function TBackup.Get_SkipTapeHeader: WordBool;
begin
    Result := DefaultInterface.SkipTapeHeader;
end;

procedure TBackup.Set_SkipTapeHeader(pRetVal: WordBool);
begin
  DefaultInterface.Set_SkipTapeHeader(pRetVal);
end;

function TBackup.Get_UnloadTapeAfter: WordBool;
begin
    Result := DefaultInterface.UnloadTapeAfter;
end;

procedure TBackup.Set_UnloadTapeAfter(pRetVal: WordBool);
begin
  DefaultInterface.Set_UnloadTapeAfter(pRetVal);
end;

function TBackup.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TBackup.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TBackup.Get_Files: WideString;
begin
    Result := DefaultInterface.Files;
end;

procedure TBackup.Set_Files(const pRetVal: WideString);
  { Warning: The property Files has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Files := pRetVal;
end;

function TBackup.Get_DatabaseFileGroups: WideString;
begin
    Result := DefaultInterface.DatabaseFileGroups;
end;

procedure TBackup.Set_DatabaseFileGroups(const pRetVal: WideString);
  { Warning: The property DatabaseFileGroups has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFileGroups := pRetVal;
end;

function TBackup.Get_DatabaseFiles: WideString;
begin
    Result := DefaultInterface.DatabaseFiles;
end;

procedure TBackup.Set_DatabaseFiles(const pRetVal: WideString);
  { Warning: The property DatabaseFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFiles := pRetVal;
end;

function TBackup.Get_Action: SQLDMO_BACKUP_TYPE;
begin
    Result := DefaultInterface.Action;
end;

procedure TBackup.Set_Action(pRetVal: SQLDMO_BACKUP_TYPE);
begin
  DefaultInterface.Set_Action(pRetVal);
end;

function TBackup.Get_BackupSetName: WideString;
begin
    Result := DefaultInterface.BackupSetName;
end;

procedure TBackup.Set_BackupSetName(const pRetVal: WideString);
  { Warning: The property BackupSetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetName := pRetVal;
end;

function TBackup.Get_BackupSetDescription: WideString;
begin
    Result := DefaultInterface.BackupSetDescription;
end;

procedure TBackup.Set_BackupSetDescription(const pRetVal: WideString);
  { Warning: The property BackupSetDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetDescription := pRetVal;
end;

function TBackup.Get_Restart: WordBool;
begin
    Result := DefaultInterface.Restart;
end;

procedure TBackup.Set_Restart(pRetVal: WordBool);
begin
  DefaultInterface.Set_Restart(pRetVal);
end;

function TBackup.Get_TruncateLog: SQLDMO_BACKUP_LOG_TYPE;
begin
    Result := DefaultInterface.TruncateLog;
end;

procedure TBackup.Set_TruncateLog(pRetVal: SQLDMO_BACKUP_LOG_TYPE);
begin
  DefaultInterface.Set_TruncateLog(pRetVal);
end;

function TBackup.Get_BlockSize: Integer;
begin
    Result := DefaultInterface.BlockSize;
end;

procedure TBackup.Set_BlockSize(pRetVal: Integer);
begin
  DefaultInterface.Set_BlockSize(pRetVal);
end;

function TBackup.Get_FormatMedia: WordBool;
begin
    Result := DefaultInterface.FormatMedia;
end;

procedure TBackup.Set_FormatMedia(pRetVal: WordBool);
begin
  DefaultInterface.Set_FormatMedia(pRetVal);
end;

function TBackup.Get_MediaName: WideString;
begin
    Result := DefaultInterface.MediaName;
end;

procedure TBackup.Set_MediaName(const pRetVal: WideString);
  { Warning: The property MediaName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaName := pRetVal;
end;

function TBackup.Get_MediaDescription: WideString;
begin
    Result := DefaultInterface.MediaDescription;
end;

procedure TBackup.Set_MediaDescription(const pRetVal: WideString);
  { Warning: The property MediaDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaDescription := pRetVal;
end;

function TBackup.Get_Devices: WideString;
begin
    Result := DefaultInterface.Devices;
end;

procedure TBackup.Set_Devices(const pRetVal: WideString);
  { Warning: The property Devices has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Devices := pRetVal;
end;

function TBackup.Get_Tapes: WideString;
begin
    Result := DefaultInterface.Tapes;
end;

procedure TBackup.Set_Tapes(const pRetVal: WideString);
  { Warning: The property Tapes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tapes := pRetVal;
end;

function TBackup.Get_Pipes: WideString;
begin
    Result := DefaultInterface.Pipes;
end;

procedure TBackup.Set_Pipes(const pRetVal: WideString);
  { Warning: The property Pipes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pipes := pRetVal;
end;

function TBackup.Get_ExpirationDate: WideString;
begin
    Result := DefaultInterface.ExpirationDate;
end;

procedure TBackup.Set_ExpirationDate(const pRetVal: WideString);
  { Warning: The property ExpirationDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpirationDate := pRetVal;
end;

function TBackup.Get_Initialize: WordBool;
begin
    Result := DefaultInterface.Initialize;
end;

procedure TBackup.Set_Initialize(pRetVal: WordBool);
begin
  DefaultInterface.Set_Initialize(pRetVal);
end;

function TBackup.Get_RetainDays: Integer;
begin
    Result := DefaultInterface.RetainDays;
end;

procedure TBackup.Set_RetainDays(pRetVal: Integer);
begin
  DefaultInterface.Set_RetainDays(pRetVal);
end;

procedure TBackup.Abort;
begin
  DefaultInterface.Abort;
end;

procedure TBackup.SQLBackup(const ServerObject: SQLServer);
begin
  DefaultInterface.SQLBackup(ServerObject);
end;

function TBackup.GenerateSQL: WideString;
begin
  Result := DefaultInterface.GenerateSQL;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBackupProperties.Create(AServer: TBackup);
begin
  inherited Create;
  FServer := AServer;
end;

function TBackupProperties.GetDefaultInterface: _Backup;
begin
  Result := FServer.DefaultInterface;
end;

function TBackupProperties.Get_Application: Application;
begin
    Result := DefaultInterface.Application;
end;

function TBackupProperties.Get_Parent: _IVSQLDMOStdObject;
begin
    Result := DefaultInterface.Parent;
end;

function TBackupProperties.Get_UserData: Integer;
begin
    Result := DefaultInterface.UserData;
end;

procedure TBackupProperties.Set_UserData(pRetVal: Integer);
begin
  DefaultInterface.Set_UserData(pRetVal);
end;

function TBackupProperties.Get_TypeOf: SQLDMO_OBJECT_TYPE;
begin
    Result := DefaultInterface.TypeOf;
end;

function TBackupProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TBackupProperties.Get_PercentCompleteNotification: Integer;
begin
    Result := DefaultInterface.PercentCompleteNotification;
end;

procedure TBackupProperties.Set_PercentCompleteNotification(pRetVal: Integer);
begin
  DefaultInterface.Set_PercentCompleteNotification(pRetVal);
end;

function TBackupProperties.Get_SkipTapeHeader: WordBool;
begin
    Result := DefaultInterface.SkipTapeHeader;
end;

procedure TBackupProperties.Set_SkipTapeHeader(pRetVal: WordBool);
begin
  DefaultInterface.Set_SkipTapeHeader(pRetVal);
end;

function TBackupProperties.Get_UnloadTapeAfter: WordBool;
begin
    Result := DefaultInterface.UnloadTapeAfter;
end;

procedure TBackupProperties.Set_UnloadTapeAfter(pRetVal: WordBool);
begin
  DefaultInterface.Set_UnloadTapeAfter(pRetVal);
end;

function TBackupProperties.Get_Database: WideString;
begin
    Result := DefaultInterface.Database;
end;

procedure TBackupProperties.Set_Database(const pRetVal: WideString);
  { Warning: The property Database has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Database := pRetVal;
end;

function TBackupProperties.Get_Files: WideString;
begin
    Result := DefaultInterface.Files;
end;

procedure TBackupProperties.Set_Files(const pRetVal: WideString);
  { Warning: The property Files has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Files := pRetVal;
end;

function TBackupProperties.Get_DatabaseFileGroups: WideString;
begin
    Result := DefaultInterface.DatabaseFileGroups;
end;

procedure TBackupProperties.Set_DatabaseFileGroups(const pRetVal: WideString);
  { Warning: The property DatabaseFileGroups has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFileGroups := pRetVal;
end;

function TBackupProperties.Get_DatabaseFiles: WideString;
begin
    Result := DefaultInterface.DatabaseFiles;
end;

procedure TBackupProperties.Set_DatabaseFiles(const pRetVal: WideString);
  { Warning: The property DatabaseFiles has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatabaseFiles := pRetVal;
end;

function TBackupProperties.Get_Action: SQLDMO_BACKUP_TYPE;
begin
    Result := DefaultInterface.Action;
end;

procedure TBackupProperties.Set_Action(pRetVal: SQLDMO_BACKUP_TYPE);
begin
  DefaultInterface.Set_Action(pRetVal);
end;

function TBackupProperties.Get_BackupSetName: WideString;
begin
    Result := DefaultInterface.BackupSetName;
end;

procedure TBackupProperties.Set_BackupSetName(const pRetVal: WideString);
  { Warning: The property BackupSetName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetName := pRetVal;
end;

function TBackupProperties.Get_BackupSetDescription: WideString;
begin
    Result := DefaultInterface.BackupSetDescription;
end;

procedure TBackupProperties.Set_BackupSetDescription(const pRetVal: WideString);
  { Warning: The property BackupSetDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BackupSetDescription := pRetVal;
end;

function TBackupProperties.Get_Restart: WordBool;
begin
    Result := DefaultInterface.Restart;
end;

procedure TBackupProperties.Set_Restart(pRetVal: WordBool);
begin
  DefaultInterface.Set_Restart(pRetVal);
end;

function TBackupProperties.Get_TruncateLog: SQLDMO_BACKUP_LOG_TYPE;
begin
    Result := DefaultInterface.TruncateLog;
end;

procedure TBackupProperties.Set_TruncateLog(pRetVal: SQLDMO_BACKUP_LOG_TYPE);
begin
  DefaultInterface.Set_TruncateLog(pRetVal);
end;

function TBackupProperties.Get_BlockSize: Integer;
begin
    Result := DefaultInterface.BlockSize;
end;

procedure TBackupProperties.Set_BlockSize(pRetVal: Integer);
begin
  DefaultInterface.Set_BlockSize(pRetVal);
end;

function TBackupProperties.Get_FormatMedia: WordBool;
begin
    Result := DefaultInterface.FormatMedia;
end;

procedure TBackupProperties.Set_FormatMedia(pRetVal: WordBool);
begin
  DefaultInterface.Set_FormatMedia(pRetVal);
end;

function TBackupProperties.Get_MediaName: WideString;
begin
    Result := DefaultInterface.MediaName;
end;

procedure TBackupProperties.Set_MediaName(const pRetVal: WideString);
  { Warning: The property MediaName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaName := pRetVal;
end;

function TBackupProperties.Get_MediaDescription: WideString;
begin
    Result := DefaultInterface.MediaDescription;
end;

procedure TBackupProperties.Set_MediaDescription(const pRetVal: WideString);
  { Warning: The property MediaDescription has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaDescription := pRetVal;
end;

function TBackupProperties.Get_Devices: WideString;
begin
    Result := DefaultInterface.Devices;
end;

procedure TBackupProperties.Set_Devices(const pRetVal: WideString);
  { Warning: The property Devices has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Devices := pRetVal;
end;

function TBackupProperties.Get_Tapes: WideString;
begin
    Result := DefaultInterface.Tapes;
end;

procedure TBackupProperties.Set_Tapes(const pRetVal: WideString);
  { Warning: The property Tapes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tapes := pRetVal;
end;

function TBackupProperties.Get_Pipes: WideString;
begin
    Result := DefaultInterface.Pipes;
end;

procedure TBackupProperties.Set_Pipes(const pRetVal: WideString);
  { Warning: The property Pipes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Pipes := pRetVal;
end;

function TBackupProperties.Get_ExpirationDate: WideString;
begin
    Result := DefaultInterface.ExpirationDate;
end;

procedure TBackupProperties.Set_ExpirationDate(const pRetVal: WideString);
  { Warning: The property ExpirationDate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpirationDate := pRetVal;
end;

function TBackupProperties.Get_Initialize: WordBool;
begin
    Result := DefaultInterface.Initialize;
end;

procedure TBackupProperties.Set_Initialize(pRetVal: WordBool);
begin
  DefaultInterface.Set_Initialize(pRetVal);
end;

function TBackupProperties.Get_RetainDays: Integer;
begin
    Result := DefaultInterface.RetainDays;
end;

procedure TBackupProperties.Set_RetainDays(pRetVal: Integer);
begin
  DefaultInterface.Set_RetainDays(pRetVal);
end;

{$ENDIF}

class function CoBackup2.Create: _Backup2;
begin
  Result := CreateComObject(CLASS_Backup2) as _Backup2;
end;

class function CoBackup2.CreateRemote(const MachineName: string): _Backup2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Backup2) as _Backup2;
end;

procedure TBackup2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021FC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021F16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021F09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBackup2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Backup2;
  end;
end;

procedure TBackup2.ConnectTo(svrIntf: _Backup2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TBackup2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TBackup2.GetDefaultInterface: _Backup2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBackup2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBackup2Properties.Create(Self);
{$ENDIF}
end;

destructor TBackup2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBackup2.GetServerProperties: TBackup2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TBackup2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnNextMedia) then
         FOnNextMedia(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnComplete) then
         FOnComplete(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TBackup2.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TBackup2.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TBackup2.Get_MediaPassword: WideString;
begin
    Result := DefaultInterface.MediaPassword;
end;

procedure TBackup2.Set_MediaPassword(const pRetVal: WideString);
  { Warning: The property MediaPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaPassword := pRetVal;
end;

function TBackup2.Get_NoRewind: WordBool;
begin
    Result := DefaultInterface.NoRewind;
end;

procedure TBackup2.Set_NoRewind(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRewind(pRetVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBackup2Properties.Create(AServer: TBackup2);
begin
  inherited Create;
  FServer := AServer;
end;

function TBackup2Properties.GetDefaultInterface: _Backup2;
begin
  Result := FServer.DefaultInterface;
end;

function TBackup2Properties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TBackup2Properties.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TBackup2Properties.Get_MediaPassword: WideString;
begin
    Result := DefaultInterface.MediaPassword;
end;

procedure TBackup2Properties.Set_MediaPassword(const pRetVal: WideString);
  { Warning: The property MediaPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaPassword := pRetVal;
end;

function TBackup2Properties.Get_NoRewind: WordBool;
begin
    Result := DefaultInterface.NoRewind;
end;

procedure TBackup2Properties.Set_NoRewind(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRewind(pRetVal);
end;

{$ENDIF}

class function CoBulkCopy2.Create: _BulkCopy2;
begin
  Result := CreateComObject(CLASS_BulkCopy2) as _BulkCopy2;
end;

class function CoBulkCopy2.CreateRemote(const MachineName: string): _BulkCopy2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BulkCopy2) as _BulkCopy2;
end;

procedure TBulkCopy2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10021CC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10021C16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10021C09-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBulkCopy2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _BulkCopy2;
  end;
end;

procedure TBulkCopy2.ConnectTo(svrIntf: _BulkCopy2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TBulkCopy2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TBulkCopy2.GetDefaultInterface: _BulkCopy2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBulkCopy2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBulkCopy2Properties.Create(Self);
{$ENDIF}
end;

destructor TBulkCopy2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBulkCopy2.GetServerProperties: TBulkCopy2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TBulkCopy2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnRowsCopied) then
         FOnRowsCopied(Self,
                       Params[0] {const WideString},
                       Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnBatchImported) then
         FOnBatchImported(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TBulkCopy2.Get_TableLock: WordBool;
begin
    Result := DefaultInterface.TableLock;
end;

procedure TBulkCopy2.Set_TableLock(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableLock(pRetVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBulkCopy2Properties.Create(AServer: TBulkCopy2);
begin
  inherited Create;
  FServer := AServer;
end;

function TBulkCopy2Properties.GetDefaultInterface: _BulkCopy2;
begin
  Result := FServer.DefaultInterface;
end;

function TBulkCopy2Properties.Get_TableLock: WordBool;
begin
    Result := DefaultInterface.TableLock;
end;

procedure TBulkCopy2Properties.Set_TableLock(pRetVal: WordBool);
begin
  DefaultInterface.Set_TableLock(pRetVal);
end;

{$ENDIF}

class function CoFileGroup2.Create: _FileGroup2;
begin
  Result := CreateComObject(CLASS_FileGroup2) as _FileGroup2;
end;

class function CoFileGroup2.CreateRemote(const MachineName: string): _FileGroup2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FileGroup2) as _FileGroup2;
end;

procedure TFileGroup2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022CC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022C16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFileGroup2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FileGroup2;
  end;
end;

procedure TFileGroup2.ConnectTo(svrIntf: _FileGroup2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFileGroup2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFileGroup2.GetDefaultInterface: _FileGroup2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFileGroup2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFileGroup2Properties.Create(Self);
{$ENDIF}
end;

destructor TFileGroup2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFileGroup2.GetServerProperties: TFileGroup2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFileGroup2.CheckFilegroupWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckFilegroupWithResult;
end;

function TFileGroup2.CheckFilegroupDataOnlyWithResult: QueryResults;
begin
  Result := DefaultInterface.CheckFilegroupDataOnlyWithResult;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFileGroup2Properties.Create(AServer: TFileGroup2);
begin
  inherited Create;
  FServer := AServer;
end;

function TFileGroup2Properties.GetDefaultInterface: _FileGroup2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoLogFile2.Create: _LogFile2;
begin
  Result := CreateComObject(CLASS_LogFile2) as _LogFile2;
end;

class function CoLogFile2.CreateRemote(const MachineName: string): _LogFile2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogFile2) as _LogFile2;
end;

procedure TLogFile2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10022EC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10022E16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLogFile2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LogFile2;
  end;
end;

procedure TLogFile2.ConnectTo(svrIntf: _LogFile2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLogFile2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLogFile2.GetDefaultInterface: _LogFile2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLogFile2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLogFile2Properties.Create(Self);
{$ENDIF}
end;

destructor TLogFile2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLogFile2.GetServerProperties: TLogFile2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TLogFile2.Remove;
begin
  DefaultInterface.Remove;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLogFile2Properties.Create(AServer: TLogFile2);
begin
  inherited Create;
  FServer := AServer;
end;

function TLogFile2Properties.GetDefaultInterface: _LogFile2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoDatabaseRole2.Create: _DatabaseRole2;
begin
  Result := CreateComObject(CLASS_DatabaseRole2) as _DatabaseRole2;
end;

class function CoDatabaseRole2.CreateRemote(const MachineName: string): _DatabaseRole2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatabaseRole2) as _DatabaseRole2;
end;

procedure TDatabaseRole2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100231C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDatabaseRole2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DatabaseRole2;
  end;
end;

procedure TDatabaseRole2.ConnectTo(svrIntf: _DatabaseRole2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDatabaseRole2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDatabaseRole2.GetDefaultInterface: _DatabaseRole2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDatabaseRole2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDatabaseRole2Properties.Create(Self);
{$ENDIF}
end;

destructor TDatabaseRole2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDatabaseRole2.GetServerProperties: TDatabaseRole2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDatabaseRole2.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDatabaseRole2Properties.Create(AServer: TDatabaseRole2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDatabaseRole2Properties.GetDefaultInterface: _DatabaseRole2;
begin
  Result := FServer.DefaultInterface;
end;

function TDatabaseRole2Properties.Get_IsDeleted: WordBool;
begin
    Result := DefaultInterface.IsDeleted;
end;

{$ENDIF}

class function CoRestore2.Create: _Restore2;
begin
  Result := CreateComObject(CLASS_Restore2) as _Restore2;
end;

class function CoRestore2.CreateRemote(const MachineName: string): _Restore2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Restore2) as _Restore2;
end;

procedure TRestore2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100232C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023213-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10023206-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRestore2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Restore2;
  end;
end;

procedure TRestore2.ConnectTo(svrIntf: _Restore2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TRestore2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TRestore2.GetDefaultInterface: _Restore2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRestore2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRestore2Properties.Create(Self);
{$ENDIF}
end;

destructor TRestore2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRestore2.GetServerProperties: TRestore2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TRestore2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnNextMedia) then
         FOnNextMedia(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnComplete) then
         FOnComplete(Self, Params[0] {const WideString});
*)
  end; {case DispID}
end;

function TRestore2.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TRestore2.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TRestore2.Get_MediaPassword: WideString;
begin
    Result := DefaultInterface.MediaPassword;
end;

procedure TRestore2.Set_MediaPassword(const pRetVal: WideString);
  { Warning: The property MediaPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaPassword := pRetVal;
end;

function TRestore2.Get_KeepReplication: WordBool;
begin
    Result := DefaultInterface.KeepReplication;
end;

procedure TRestore2.Set_KeepReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_KeepReplication(pRetVal);
end;

function TRestore2.Get_NoRewind: WordBool;
begin
    Result := DefaultInterface.NoRewind;
end;

procedure TRestore2.Set_NoRewind(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRewind(pRetVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRestore2Properties.Create(AServer: TRestore2);
begin
  inherited Create;
  FServer := AServer;
end;

function TRestore2Properties.GetDefaultInterface: _Restore2;
begin
  Result := FServer.DefaultInterface;
end;

function TRestore2Properties.Get_Password: WideString;
begin
    Result := DefaultInterface.Password;
end;

procedure TRestore2Properties.Set_Password(const pRetVal: WideString);
  { Warning: The property Password has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Password := pRetVal;
end;

function TRestore2Properties.Get_MediaPassword: WideString;
begin
    Result := DefaultInterface.MediaPassword;
end;

procedure TRestore2Properties.Set_MediaPassword(const pRetVal: WideString);
  { Warning: The property MediaPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MediaPassword := pRetVal;
end;

function TRestore2Properties.Get_KeepReplication: WordBool;
begin
    Result := DefaultInterface.KeepReplication;
end;

procedure TRestore2Properties.Set_KeepReplication(pRetVal: WordBool);
begin
  DefaultInterface.Set_KeepReplication(pRetVal);
end;

function TRestore2Properties.Get_NoRewind: WordBool;
begin
    Result := DefaultInterface.NoRewind;
end;

procedure TRestore2Properties.Set_NoRewind(pRetVal: WordBool);
begin
  DefaultInterface.Set_NoRewind(pRetVal);
end;

{$ENDIF}

class function CoLinkedServer2.Create: _LinkedServer2;
begin
  Result := CreateComObject(CLASS_LinkedServer2) as _LinkedServer2;
end;

class function CoLinkedServer2.CreateRemote(const MachineName: string): _LinkedServer2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinkedServer2) as _LinkedServer2;
end;

procedure TLinkedServer2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100233C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023316-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLinkedServer2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _LinkedServer2;
  end;
end;

procedure TLinkedServer2.ConnectTo(svrIntf: _LinkedServer2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLinkedServer2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLinkedServer2.GetDefaultInterface: _LinkedServer2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLinkedServer2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLinkedServer2Properties.Create(Self);
{$ENDIF}
end;

destructor TLinkedServer2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLinkedServer2.GetServerProperties: TLinkedServer2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TLinkedServer2.Get_CollationName: WideString;
begin
    Result := DefaultInterface.CollationName;
end;

procedure TLinkedServer2.Set_CollationName(const pRetVal: WideString);
  { Warning: The property CollationName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CollationName := pRetVal;
end;

function TLinkedServer2.Get_ConnectTimeout: Integer;
begin
    Result := DefaultInterface.ConnectTimeout;
end;

procedure TLinkedServer2.Set_ConnectTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_ConnectTimeout(pRetVal);
end;

function TLinkedServer2.Get_QueryTimeout: Integer;
begin
    Result := DefaultInterface.QueryTimeout;
end;

procedure TLinkedServer2.Set_QueryTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_QueryTimeout(pRetVal);
end;

function TLinkedServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                       out Messages: WideString): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, EmptyParam);
end;

function TLinkedServer2.ExecuteWithResultsAndMessages2(const Command: WideString; 
                                                       out Messages: WideString; Length: OleVariant): QueryResults;
begin
  Result := DefaultInterface.ExecuteWithResultsAndMessages2(Command, Messages, Length);
end;

procedure TLinkedServer2.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLinkedServer2Properties.Create(AServer: TLinkedServer2);
begin
  inherited Create;
  FServer := AServer;
end;

function TLinkedServer2Properties.GetDefaultInterface: _LinkedServer2;
begin
  Result := FServer.DefaultInterface;
end;

function TLinkedServer2Properties.Get_CollationName: WideString;
begin
    Result := DefaultInterface.CollationName;
end;

procedure TLinkedServer2Properties.Set_CollationName(const pRetVal: WideString);
  { Warning: The property CollationName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CollationName := pRetVal;
end;

function TLinkedServer2Properties.Get_ConnectTimeout: Integer;
begin
    Result := DefaultInterface.ConnectTimeout;
end;

procedure TLinkedServer2Properties.Set_ConnectTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_ConnectTimeout(pRetVal);
end;

function TLinkedServer2Properties.Get_QueryTimeout: Integer;
begin
    Result := DefaultInterface.QueryTimeout;
end;

procedure TLinkedServer2Properties.Set_QueryTimeout(pRetVal: Integer);
begin
  DefaultInterface.Set_QueryTimeout(pRetVal);
end;

{$ENDIF}

class function CoFullTextCatalog2.Create: _FullTextCatalog2;
begin
  Result := CreateComObject(CLASS_FullTextCatalog2) as _FullTextCatalog2;
end;

class function CoFullTextCatalog2.CreateRemote(const MachineName: string): _FullTextCatalog2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FullTextCatalog2) as _FullTextCatalog2;
end;

procedure TFullTextCatalog2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100235C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10023516-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFullTextCatalog2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FullTextCatalog2;
  end;
end;

procedure TFullTextCatalog2.ConnectTo(svrIntf: _FullTextCatalog2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFullTextCatalog2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFullTextCatalog2.GetDefaultInterface: _FullTextCatalog2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFullTextCatalog2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFullTextCatalog2Properties.Create(Self);
{$ENDIF}
end;

destructor TFullTextCatalog2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFullTextCatalog2.GetServerProperties: TFullTextCatalog2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TFullTextCatalog2.Refresh;
begin
  DefaultInterface.Refresh;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFullTextCatalog2Properties.Create(AServer: TFullTextCatalog2);
begin
  inherited Create;
  FServer := AServer;
end;

function TFullTextCatalog2Properties.GetDefaultInterface: _FullTextCatalog2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoReplication2.Create: _Replication2;
begin
  Result := CreateComObject(CLASS_Replication2) as _Replication2;
end;

class function CoReplication2.CreateRemote(const MachineName: string): _Replication2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Replication2) as _Replication2;
end;

procedure TReplication2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100310C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031016-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '{10031009-E260-11CF-AE68-00AA004A34D5}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReplication2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Replication2;
  end;
end;

procedure TReplication2.ConnectTo(svrIntf: _Replication2);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TReplication2.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TReplication2.GetDefaultInterface: _Replication2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TReplication2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReplication2Properties.Create(Self);
{$ENDIF}
end;

destructor TReplication2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TReplication2.GetServerProperties: TReplication2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TReplication2.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnStatusMessage) then
         FOnStatusMessage(Self, Params[0] {const WideString});
*)
(*{The DispID for this method is DISPID_UNKNOWN!?. }
    -1: if Assigned(FOnPercentComplete) then
         FOnPercentComplete(Self,
                            Params[0] {const WideString},
                            Params[1] {Integer});
*)
  end; {case DispID}
end;

procedure TReplication2.AttachSubscriptionDatabase(const szDatabaseName: WideString; 
                                                   const szFileName: WideString; 
                                                   SubscriberSecurityType: SQLDMO_SECURITY_TYPE; 
                                                   const szSubscriberLogin: WideString; 
                                                   const szSubscriberPassword: WideString);
begin
  DefaultInterface.AttachSubscriptionDatabase(szDatabaseName, szFileName, SubscriberSecurityType, 
                                              szSubscriberLogin, szSubscriberPassword);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReplication2Properties.Create(AServer: TReplication2);
begin
  inherited Create;
  FServer := AServer;
end;

function TReplication2Properties.GetDefaultInterface: _Replication2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoDistributionPublisher2.Create: _DistributionPublisher2;
begin
  Result := CreateComObject(CLASS_DistributionPublisher2) as _DistributionPublisher2;
end;

class function CoDistributionPublisher2.CreateRemote(const MachineName: string): _DistributionPublisher2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionPublisher2) as _DistributionPublisher2;
end;

procedure TDistributionPublisher2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100307C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030716-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionPublisher2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionPublisher2;
  end;
end;

procedure TDistributionPublisher2.ConnectTo(svrIntf: _DistributionPublisher2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionPublisher2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionPublisher2.GetDefaultInterface: _DistributionPublisher2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionPublisher2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionPublisher2Properties.Create(Self);
{$ENDIF}
end;

destructor TDistributionPublisher2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionPublisher2.GetServerProperties: TDistributionPublisher2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TDistributionPublisher2.ReadAgentOffloadInfo(const bstrJobID: WideString; 
                                                       out pbAgentOffload: WordBool; 
                                                       out pszServerNetworkName: WideString; 
                                                       out pbIndependentAgent: WordBool);
begin
  DefaultInterface.ReadAgentOffloadInfo(bstrJobID, pbAgentOffload, pszServerNetworkName, 
                                        pbIndependentAgent);
end;

procedure TDistributionPublisher2.EnableAgentOffload(const bstrJobID: WideString; 
                                                     const szServerNetworkName: WideString);
begin
  DefaultInterface.EnableAgentOffload(bstrJobID, szServerNetworkName);
end;

procedure TDistributionPublisher2.DisableAgentOffload(const bstrJobID: WideString);
begin
  DefaultInterface.DisableAgentOffload(bstrJobID);
end;

procedure TDistributionPublisher2.GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                                                   out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                                                   out pRetValTimeStamp: WideString);
begin
  DefaultInterface.GetAgentsStatus2(fExcludeAnonymous, pRetValStatus, pRetValTimeStamp);
end;

function TDistributionPublisher2.EnumSnapshotAgentSessions2(const AgentName: WideString; 
                                                            SessionType: SQLDMO_SESSION_TYPE; 
                                                            SessionDuration: Integer; 
                                                            lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumSnapshotAgentSessions2(AgentName, SessionType, SessionDuration, 
                                                        lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumLogReaderAgentSessions2(const AgentName: WideString; 
                                                             SessionType: SQLDMO_SESSION_TYPE; 
                                                             SessionDuration: Integer; 
                                                             lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumLogReaderAgentSessions2(AgentName, SessionType, SessionDuration, 
                                                         lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumDistributionAgentSessions2(const AgentName: WideString; 
                                                                SessionType: SQLDMO_SESSION_TYPE; 
                                                                SessionDuration: Integer; 
                                                                lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumDistributionAgentSessions2(AgentName, SessionType, 
                                                            SessionDuration, lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumMergeAgentSessions2(const AgentName: WideString; 
                                                         SessionType: SQLDMO_SESSION_TYPE; 
                                                         SessionDuration: Integer; 
                                                         lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumMergeAgentSessions2(AgentName, SessionType, SessionDuration, 
                                                     lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumSnapshotAgentSessionDetails2(const AgentName: WideString; 
                                                                  const SessionID: WideString; 
                                                                  lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumSnapshotAgentSessionDetails2(AgentName, SessionID, 
                                                              lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumLogReaderAgentSessionDetails2(const AgentName: WideString; 
                                                                   const SessionID: WideString; 
                                                                   lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumLogReaderAgentSessionDetails2(AgentName, SessionID, 
                                                               lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumDistributionAgentSessionDetails2(const AgentName: WideString; 
                                                                      const SessionID: WideString; 
                                                                      lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumDistributionAgentSessionDetails2(AgentName, SessionID, 
                                                                  lEstimatedNumRecords);
end;

function TDistributionPublisher2.EnumMergeAgentSessionDetails2(const AgentName: WideString; 
                                                               const SessionID: WideString; 
                                                               lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumMergeAgentSessionDetails2(AgentName, SessionID, 
                                                           lEstimatedNumRecords);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionPublisher2Properties.Create(AServer: TDistributionPublisher2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionPublisher2Properties.GetDefaultInterface: _DistributionPublisher2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoDistributionDatabase2.Create: _DistributionDatabase2;
begin
  Result := CreateComObject(CLASS_DistributionDatabase2) as _DistributionDatabase2;
end;

class function CoDistributionDatabase2.CreateRemote(const MachineName: string): _DistributionDatabase2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionDatabase2) as _DistributionDatabase2;
end;

procedure TDistributionDatabase2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100313C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031316-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionDatabase2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionDatabase2;
  end;
end;

procedure TDistributionDatabase2.ConnectTo(svrIntf: _DistributionDatabase2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionDatabase2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionDatabase2.GetDefaultInterface: _DistributionDatabase2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionDatabase2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionDatabase2Properties.Create(Self);
{$ENDIF}
end;

destructor TDistributionDatabase2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionDatabase2.GetServerProperties: TDistributionDatabase2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionDatabase2.EnumQueueReaderAgentSessions(lPublicationID: Integer; 
                                                             SessionType: SQLDMO_SESSION_TYPE; 
                                                             SessionDuration: Integer; 
                                                             lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumQueueReaderAgentSessions(lPublicationID, SessionType, 
                                                          SessionDuration, lEstimatedNumRecords);
end;

function TDistributionDatabase2.EnumQueueReaderAgentSessionDetails(lPublicationID: Integer; 
                                                                   const SessionID: WideString; 
                                                                   lEstimatedNumRecords: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumQueueReaderAgentSessionDetails(lPublicationID, SessionID, 
                                                                lEstimatedNumRecords);
end;

function TDistributionDatabase2.EnumAgentErrorRecords(ErrorID: Integer): QueryResults;
begin
  Result := DefaultInterface.EnumAgentErrorRecords(ErrorID);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionDatabase2Properties.Create(AServer: TDistributionDatabase2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionDatabase2Properties.GetDefaultInterface: _DistributionDatabase2;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoTransPublication2.Create: _TransPublication2;
begin
  Result := CreateComObject(CLASS_TransPublication2) as _TransPublication2;
end;

class function CoTransPublication2.CreateRemote(const MachineName: string): _TransPublication2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransPublication2) as _TransPublication2;
end;

procedure TTransPublication2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100301C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransPublication2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransPublication2;
  end;
end;

procedure TTransPublication2.ConnectTo(svrIntf: _TransPublication2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransPublication2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransPublication2.GetDefaultInterface: _TransPublication2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransPublication2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransPublication2Properties.Create(Self);
{$ENDIF}
end;

destructor TTransPublication2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransPublication2.GetServerProperties: TTransPublication2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransPublication2.Get_AllowQueuedTransactions: WordBool;
begin
    Result := DefaultInterface.AllowQueuedTransactions;
end;

procedure TTransPublication2.Set_AllowQueuedTransactions(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowQueuedTransactions(pRetVal);
end;

function TTransPublication2.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TTransPublication2.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TTransPublication2.Get_PreSnapshotScript: WideString;
begin
    Result := DefaultInterface.PreSnapshotScript;
end;

procedure TTransPublication2.Set_PreSnapshotScript(const pRetVal: WideString);
  { Warning: The property PreSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreSnapshotScript := pRetVal;
end;

function TTransPublication2.Get_PostSnapshotScript: WideString;
begin
    Result := DefaultInterface.PostSnapshotScript;
end;

procedure TTransPublication2.Set_PostSnapshotScript(const pRetVal: WideString);
  { Warning: The property PostSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostSnapshotScript := pRetVal;
end;

function TTransPublication2.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TTransPublication2.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TTransPublication2.Get_FTPPort: Integer;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TTransPublication2.Set_FTPPort(pRetVal: Integer);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TTransPublication2.Get_FTPSubdirectory: WideString;
begin
    Result := DefaultInterface.FTPSubdirectory;
end;

procedure TTransPublication2.Set_FTPSubdirectory(const pRetVal: WideString);
  { Warning: The property FTPSubdirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPSubdirectory := pRetVal;
end;

function TTransPublication2.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TTransPublication2.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TTransPublication2.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TTransPublication2.Get_AllowDTS: WordBool;
begin
    Result := DefaultInterface.AllowDTS;
end;

procedure TTransPublication2.Set_AllowDTS(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowDTS(pRetVal);
end;

function TTransPublication2.Get_CentralizedConflicts: WordBool;
begin
    Result := DefaultInterface.CentralizedConflicts;
end;

procedure TTransPublication2.Set_CentralizedConflicts(pRetVal: WordBool);
begin
  DefaultInterface.Set_CentralizedConflicts(pRetVal);
end;

function TTransPublication2.Get_ConflictRetention: Integer;
begin
    Result := DefaultInterface.ConflictRetention;
end;

procedure TTransPublication2.Set_ConflictRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_ConflictRetention(pRetVal);
end;

function TTransPublication2.Get_ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE;
begin
    Result := DefaultInterface.ConflictPolicy;
end;

procedure TTransPublication2.Set_ConflictPolicy(pRetVal: SQLDMO_CONFLICTPOLICY_TYPE);
begin
  DefaultInterface.Set_ConflictPolicy(pRetVal);
end;

function TTransPublication2.Get_QueueType: SQLDMO_REPLQUEUE_TYPE;
begin
    Result := DefaultInterface.QueueType;
end;

procedure TTransPublication2.Set_QueueType(pRetVal: SQLDMO_REPLQUEUE_TYPE);
begin
  DefaultInterface.Set_QueueType(pRetVal);
end;

function TTransPublication2.Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

function TTransPublication2.Get_InActiveDirectory: WordBool;
begin
    Result := DefaultInterface.InActiveDirectory;
end;

procedure TTransPublication2.Set_InActiveDirectory(pRetVal: WordBool);
begin
  DefaultInterface.Set_InActiveDirectory(pRetVal);
end;

function TTransPublication2.BrowseSnapshotFolder(const szSubscriberName: WideString; 
                                                 const szSubscriberDB: WideString): WideString;
begin
  Result := DefaultInterface.BrowseSnapshotFolder(szSubscriberName, szSubscriberDB);
end;

procedure TTransPublication2.ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                                 ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                                 fShutDownAgent: WordBool);
begin
  DefaultInterface.ValidatePublication(ValidationOption, ValidationMethod, fShutDownAgent);
end;

procedure TTransPublication2.ValidateSubscriptions(const szSubscriberNames: WideString; 
                                                   const szSubscriberDBs: WideString; 
                                                   ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE; 
                                                   ValidationMethod: SQLDMO_VALIDATIONMETHOD_TYPE; 
                                                   fShutDownAgent: WordBool);
begin
  DefaultInterface.ValidateSubscriptions(szSubscriberNames, szSubscriberDBs, ValidationOption, 
                                         ValidationMethod, fShutDownAgent);
end;

procedure TTransPublication2.ReplicateUserDefinedScript(const szScriptFilePath: WideString);
begin
  DefaultInterface.ReplicateUserDefinedScript(szScriptFilePath);
end;

procedure TTransPublication2.CopySnapshot(const szDestinationFolder: WideString; 
                                          const szSubscriberName: WideString; 
                                          const szSubscriberDB: WideString);
begin
  DefaultInterface.CopySnapshot(szDestinationFolder, szSubscriberName, szSubscriberDB);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransPublication2Properties.Create(AServer: TTransPublication2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransPublication2Properties.GetDefaultInterface: _TransPublication2;
begin
  Result := FServer.DefaultInterface;
end;

function TTransPublication2Properties.Get_AllowQueuedTransactions: WordBool;
begin
    Result := DefaultInterface.AllowQueuedTransactions;
end;

procedure TTransPublication2Properties.Set_AllowQueuedTransactions(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowQueuedTransactions(pRetVal);
end;

function TTransPublication2Properties.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TTransPublication2Properties.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TTransPublication2Properties.Get_PreSnapshotScript: WideString;
begin
    Result := DefaultInterface.PreSnapshotScript;
end;

procedure TTransPublication2Properties.Set_PreSnapshotScript(const pRetVal: WideString);
  { Warning: The property PreSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreSnapshotScript := pRetVal;
end;

function TTransPublication2Properties.Get_PostSnapshotScript: WideString;
begin
    Result := DefaultInterface.PostSnapshotScript;
end;

procedure TTransPublication2Properties.Set_PostSnapshotScript(const pRetVal: WideString);
  { Warning: The property PostSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostSnapshotScript := pRetVal;
end;

function TTransPublication2Properties.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TTransPublication2Properties.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TTransPublication2Properties.Get_FTPPort: Integer;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TTransPublication2Properties.Set_FTPPort(pRetVal: Integer);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TTransPublication2Properties.Get_FTPSubdirectory: WideString;
begin
    Result := DefaultInterface.FTPSubdirectory;
end;

procedure TTransPublication2Properties.Set_FTPSubdirectory(const pRetVal: WideString);
  { Warning: The property FTPSubdirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPSubdirectory := pRetVal;
end;

function TTransPublication2Properties.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TTransPublication2Properties.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TTransPublication2Properties.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TTransPublication2Properties.Get_AllowDTS: WordBool;
begin
    Result := DefaultInterface.AllowDTS;
end;

procedure TTransPublication2Properties.Set_AllowDTS(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowDTS(pRetVal);
end;

function TTransPublication2Properties.Get_CentralizedConflicts: WordBool;
begin
    Result := DefaultInterface.CentralizedConflicts;
end;

procedure TTransPublication2Properties.Set_CentralizedConflicts(pRetVal: WordBool);
begin
  DefaultInterface.Set_CentralizedConflicts(pRetVal);
end;

function TTransPublication2Properties.Get_ConflictRetention: Integer;
begin
    Result := DefaultInterface.ConflictRetention;
end;

procedure TTransPublication2Properties.Set_ConflictRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_ConflictRetention(pRetVal);
end;

function TTransPublication2Properties.Get_ConflictPolicy: SQLDMO_CONFLICTPOLICY_TYPE;
begin
    Result := DefaultInterface.ConflictPolicy;
end;

procedure TTransPublication2Properties.Set_ConflictPolicy(pRetVal: SQLDMO_CONFLICTPOLICY_TYPE);
begin
  DefaultInterface.Set_ConflictPolicy(pRetVal);
end;

function TTransPublication2Properties.Get_QueueType: SQLDMO_REPLQUEUE_TYPE;
begin
    Result := DefaultInterface.QueueType;
end;

procedure TTransPublication2Properties.Set_QueueType(pRetVal: SQLDMO_REPLQUEUE_TYPE);
begin
  DefaultInterface.Set_QueueType(pRetVal);
end;

function TTransPublication2Properties.Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

function TTransPublication2Properties.Get_InActiveDirectory: WordBool;
begin
    Result := DefaultInterface.InActiveDirectory;
end;

procedure TTransPublication2Properties.Set_InActiveDirectory(pRetVal: WordBool);
begin
  DefaultInterface.Set_InActiveDirectory(pRetVal);
end;

{$ENDIF}

class function CoTransArticle2.Create: _TransArticle2;
begin
  Result := CreateComObject(CLASS_TransArticle2) as _TransArticle2;
end;

class function CoTransArticle2.CreateRemote(const MachineName: string): _TransArticle2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransArticle2) as _TransArticle2;
end;

procedure TTransArticle2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100302C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030216-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransArticle2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransArticle2;
  end;
end;

procedure TTransArticle2.ConnectTo(svrIntf: _TransArticle2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransArticle2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransArticle2.GetDefaultInterface: _TransArticle2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransArticle2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransArticle2Properties.Create(Self);
{$ENDIF}
end;

destructor TTransArticle2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransArticle2.GetServerProperties: TTransArticle2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransArticle2.Get_AutoIdentityRange: WordBool;
begin
    Result := DefaultInterface.AutoIdentityRange;
end;

procedure TTransArticle2.Set_AutoIdentityRange(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoIdentityRange(pRetVal);
end;

function TTransArticle2.Get_PublisherIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.PublisherIdentityRangeSize;
end;

procedure TTransArticle2.Set_PublisherIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property PublisherIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublisherIdentityRangeSize := pRetVal;
end;

function TTransArticle2.Get_SubscriberIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.SubscriberIdentityRangeSize;
end;

procedure TTransArticle2.Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property SubscriberIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberIdentityRangeSize := pRetVal;
end;

function TTransArticle2.Get_IdentityRangeThreshold: Integer;
begin
    Result := DefaultInterface.IdentityRangeThreshold;
end;

procedure TTransArticle2.Set_IdentityRangeThreshold(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityRangeThreshold(pRetVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransArticle2Properties.Create(AServer: TTransArticle2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransArticle2Properties.GetDefaultInterface: _TransArticle2;
begin
  Result := FServer.DefaultInterface;
end;

function TTransArticle2Properties.Get_AutoIdentityRange: WordBool;
begin
    Result := DefaultInterface.AutoIdentityRange;
end;

procedure TTransArticle2Properties.Set_AutoIdentityRange(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoIdentityRange(pRetVal);
end;

function TTransArticle2Properties.Get_PublisherIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.PublisherIdentityRangeSize;
end;

procedure TTransArticle2Properties.Set_PublisherIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property PublisherIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublisherIdentityRangeSize := pRetVal;
end;

function TTransArticle2Properties.Get_SubscriberIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.SubscriberIdentityRangeSize;
end;

procedure TTransArticle2Properties.Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property SubscriberIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberIdentityRangeSize := pRetVal;
end;

function TTransArticle2Properties.Get_IdentityRangeThreshold: Integer;
begin
    Result := DefaultInterface.IdentityRangeThreshold;
end;

procedure TTransArticle2Properties.Set_IdentityRangeThreshold(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityRangeThreshold(pRetVal);
end;

{$ENDIF}

class function CoTransSubscription2.Create: _TransSubscription2;
begin
  Result := CreateComObject(CLASS_TransSubscription2) as _TransSubscription2;
end;

class function CoTransSubscription2.CreateRemote(const MachineName: string): _TransSubscription2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransSubscription2) as _TransSubscription2;
end;

procedure TTransSubscription2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100303C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030316-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransSubscription2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransSubscription2;
  end;
end;

procedure TTransSubscription2.ConnectTo(svrIntf: _TransSubscription2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransSubscription2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransSubscription2.GetDefaultInterface: _TransSubscription2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransSubscription2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransSubscription2Properties.Create(Self);
{$ENDIF}
end;

destructor TTransSubscription2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransSubscription2.GetServerProperties: TTransSubscription2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransSubscription2.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TTransSubscription2.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TTransSubscription2.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TTransSubscription2.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TTransSubscription2.Get_DTSPackageName: WideString;
begin
    Result := DefaultInterface.DTSPackageName;
end;

procedure TTransSubscription2.Set_DTSPackageName(const pRetVal: WideString);
  { Warning: The property DTSPackageName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackageName := pRetVal;
end;

procedure TTransSubscription2.Set_DTSPackagePassword(const Param1: WideString);
  { Warning: The property DTSPackagePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackagePassword := Param1;
end;

function TTransSubscription2.Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
begin
    Result := DefaultInterface.DTSPackageLocation;
end;

procedure TTransSubscription2.Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
begin
  DefaultInterface.Set_DTSPackageLocation(pRetVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransSubscription2Properties.Create(AServer: TTransSubscription2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransSubscription2Properties.GetDefaultInterface: _TransSubscription2;
begin
  Result := FServer.DefaultInterface;
end;

function TTransSubscription2Properties.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TTransSubscription2Properties.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TTransSubscription2Properties.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TTransSubscription2Properties.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TTransSubscription2Properties.Get_DTSPackageName: WideString;
begin
    Result := DefaultInterface.DTSPackageName;
end;

procedure TTransSubscription2Properties.Set_DTSPackageName(const pRetVal: WideString);
  { Warning: The property DTSPackageName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackageName := pRetVal;
end;

procedure TTransSubscription2Properties.Set_DTSPackagePassword(const Param1: WideString);
  { Warning: The property DTSPackagePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackagePassword := Param1;
end;

function TTransSubscription2Properties.Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
begin
    Result := DefaultInterface.DTSPackageLocation;
end;

procedure TTransSubscription2Properties.Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
begin
  DefaultInterface.Set_DTSPackageLocation(pRetVal);
end;

{$ENDIF}

class function CoTransPullSubscription2.Create: _TransPullSubscription2;
begin
  Result := CreateComObject(CLASS_TransPullSubscription2) as _TransPullSubscription2;
end;

class function CoTransPullSubscription2.CreateRemote(const MachineName: string): _TransPullSubscription2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransPullSubscription2) as _TransPullSubscription2;
end;

procedure TTransPullSubscription2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10030BC1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030B16-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTransPullSubscription2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TransPullSubscription2;
  end;
end;

procedure TTransPullSubscription2.ConnectTo(svrIntf: _TransPullSubscription2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTransPullSubscription2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTransPullSubscription2.GetDefaultInterface: _TransPullSubscription2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTransPullSubscription2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTransPullSubscription2Properties.Create(Self);
{$ENDIF}
end;

destructor TTransPullSubscription2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTransPullSubscription2.GetServerProperties: TTransPullSubscription2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTransPullSubscription2.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TTransPullSubscription2.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TTransPullSubscription2.Get_WorkingDirectory: WideString;
begin
    Result := DefaultInterface.WorkingDirectory;
end;

procedure TTransPullSubscription2.Set_WorkingDirectory(const pRetVal: WideString);
  { Warning: The property WorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WorkingDirectory := pRetVal;
end;

function TTransPullSubscription2.Get_UseFTP: WordBool;
begin
    Result := DefaultInterface.UseFTP;
end;

procedure TTransPullSubscription2.Set_UseFTP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseFTP(pRetVal);
end;

function TTransPullSubscription2.Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
begin
    Result := DefaultInterface.PublicationType;
end;

procedure TTransPullSubscription2.Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
begin
  DefaultInterface.Set_PublicationType(pRetVal);
end;

function TTransPullSubscription2.Get_DTSPackageName: WideString;
begin
    Result := DefaultInterface.DTSPackageName;
end;

procedure TTransPullSubscription2.Set_DTSPackageName(const pRetVal: WideString);
  { Warning: The property DTSPackageName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackageName := pRetVal;
end;

procedure TTransPullSubscription2.Set_DTSPackagePassword(const Param1: WideString);
  { Warning: The property DTSPackagePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackagePassword := Param1;
end;

function TTransPullSubscription2.Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
begin
    Result := DefaultInterface.DTSPackageLocation;
end;

procedure TTransPullSubscription2.Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
begin
  DefaultInterface.Set_DTSPackageLocation(pRetVal);
end;

function TTransPullSubscription2.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TTransPullSubscription2.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TTransPullSubscription2.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TTransPullSubscription2.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TTransPullSubscription2.Get_SubscriptionID: WideString;
begin
    Result := DefaultInterface.SubscriptionID;
end;

function TTransPullSubscription2.Get_LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.LastDistributionStatus;
end;

function TTransPullSubscription2.Get_LastDistributionSummary: WideString;
begin
    Result := DefaultInterface.LastDistributionSummary;
end;

function TTransPullSubscription2.Get_LastDistributionSummaryTime: WideString;
begin
    Result := DefaultInterface.LastDistributionSummaryTime;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTransPullSubscription2Properties.Create(AServer: TTransPullSubscription2);
begin
  inherited Create;
  FServer := AServer;
end;

function TTransPullSubscription2Properties.GetDefaultInterface: _TransPullSubscription2;
begin
  Result := FServer.DefaultInterface;
end;

function TTransPullSubscription2Properties.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TTransPullSubscription2Properties.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TTransPullSubscription2Properties.Get_WorkingDirectory: WideString;
begin
    Result := DefaultInterface.WorkingDirectory;
end;

procedure TTransPullSubscription2Properties.Set_WorkingDirectory(const pRetVal: WideString);
  { Warning: The property WorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WorkingDirectory := pRetVal;
end;

function TTransPullSubscription2Properties.Get_UseFTP: WordBool;
begin
    Result := DefaultInterface.UseFTP;
end;

procedure TTransPullSubscription2Properties.Set_UseFTP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseFTP(pRetVal);
end;

function TTransPullSubscription2Properties.Get_PublicationType: SQLDMO_PUBLICATION_TYPE;
begin
    Result := DefaultInterface.PublicationType;
end;

procedure TTransPullSubscription2Properties.Set_PublicationType(pRetVal: SQLDMO_PUBLICATION_TYPE);
begin
  DefaultInterface.Set_PublicationType(pRetVal);
end;

function TTransPullSubscription2Properties.Get_DTSPackageName: WideString;
begin
    Result := DefaultInterface.DTSPackageName;
end;

procedure TTransPullSubscription2Properties.Set_DTSPackageName(const pRetVal: WideString);
  { Warning: The property DTSPackageName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackageName := pRetVal;
end;

procedure TTransPullSubscription2Properties.Set_DTSPackagePassword(const Param1: WideString);
  { Warning: The property DTSPackagePassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DTSPackagePassword := Param1;
end;

function TTransPullSubscription2Properties.Get_DTSPackageLocation: SQLDMO_REPLDTSLOC_TYPE;
begin
    Result := DefaultInterface.DTSPackageLocation;
end;

procedure TTransPullSubscription2Properties.Set_DTSPackageLocation(pRetVal: SQLDMO_REPLDTSLOC_TYPE);
begin
  DefaultInterface.Set_DTSPackageLocation(pRetVal);
end;

function TTransPullSubscription2Properties.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TTransPullSubscription2Properties.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TTransPullSubscription2Properties.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TTransPullSubscription2Properties.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TTransPullSubscription2Properties.Get_SubscriptionID: WideString;
begin
    Result := DefaultInterface.SubscriptionID;
end;

function TTransPullSubscription2Properties.Get_LastDistributionStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.LastDistributionStatus;
end;

function TTransPullSubscription2Properties.Get_LastDistributionSummary: WideString;
begin
    Result := DefaultInterface.LastDistributionSummary;
end;

function TTransPullSubscription2Properties.Get_LastDistributionSummaryTime: WideString;
begin
    Result := DefaultInterface.LastDistributionSummaryTime;
end;

{$ENDIF}

class function CoMergePublication2.Create: _MergePublication2;
begin
  Result := CreateComObject(CLASS_MergePublication2) as _MergePublication2;
end;

class function CoMergePublication2.CreateRemote(const MachineName: string): _MergePublication2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergePublication2) as _MergePublication2;
end;

procedure TMergePublication2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100304C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030416-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergePublication2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergePublication2;
  end;
end;

procedure TMergePublication2.ConnectTo(svrIntf: _MergePublication2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergePublication2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergePublication2.GetDefaultInterface: _MergePublication2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergePublication2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergePublication2Properties.Create(Self);
{$ENDIF}
end;

destructor TMergePublication2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergePublication2.GetServerProperties: TMergePublication2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergePublication2.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TMergePublication2.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TMergePublication2.Get_PreSnapshotScript: WideString;
begin
    Result := DefaultInterface.PreSnapshotScript;
end;

procedure TMergePublication2.Set_PreSnapshotScript(const pRetVal: WideString);
  { Warning: The property PreSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreSnapshotScript := pRetVal;
end;

function TMergePublication2.Get_PostSnapshotScript: WideString;
begin
    Result := DefaultInterface.PostSnapshotScript;
end;

procedure TMergePublication2.Set_PostSnapshotScript(const pRetVal: WideString);
  { Warning: The property PostSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostSnapshotScript := pRetVal;
end;

function TMergePublication2.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TMergePublication2.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TMergePublication2.Get_FTPPort: Integer;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TMergePublication2.Set_FTPPort(pRetVal: Integer);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TMergePublication2.Get_FTPSubdirectory: WideString;
begin
    Result := DefaultInterface.FTPSubdirectory;
end;

procedure TMergePublication2.Set_FTPSubdirectory(const pRetVal: WideString);
  { Warning: The property FTPSubdirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPSubdirectory := pRetVal;
end;

function TMergePublication2.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TMergePublication2.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TMergePublication2.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TMergePublication2.Get_ConflictRetention: Integer;
begin
    Result := DefaultInterface.ConflictRetention;
end;

procedure TMergePublication2.Set_ConflictRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_ConflictRetention(pRetVal);
end;

function TMergePublication2.Get_KeepPartitionChanges: WordBool;
begin
    Result := DefaultInterface.KeepPartitionChanges;
end;

procedure TMergePublication2.Set_KeepPartitionChanges(pRetVal: WordBool);
begin
  DefaultInterface.Set_KeepPartitionChanges(pRetVal);
end;

function TMergePublication2.Get_AllowSyncToAlternate: WordBool;
begin
    Result := DefaultInterface.AllowSyncToAlternate;
end;

procedure TMergePublication2.Set_AllowSyncToAlternate(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowSyncToAlternate(pRetVal);
end;

function TMergePublication2.Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

function TMergePublication2.Get_ValidateSubscriberInfo: WideString;
begin
    Result := DefaultInterface.ValidateSubscriberInfo;
end;

procedure TMergePublication2.Set_ValidateSubscriberInfo(const pRetVal: WideString);
  { Warning: The property ValidateSubscriberInfo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ValidateSubscriberInfo := pRetVal;
end;

function TMergePublication2.Get_InActiveDirectory: WordBool;
begin
    Result := DefaultInterface.InActiveDirectory;
end;

procedure TMergePublication2.Set_InActiveDirectory(pRetVal: WordBool);
begin
  DefaultInterface.Set_InActiveDirectory(pRetVal);
end;

function TMergePublication2.Get_MaxConcurrentMerge: Integer;
begin
    Result := DefaultInterface.MaxConcurrentMerge;
end;

procedure TMergePublication2.Set_MaxConcurrentMerge(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxConcurrentMerge(pRetVal);
end;

function TMergePublication2.Get_MaxConcurrentDynamicSnapshots: Integer;
begin
    Result := DefaultInterface.MaxConcurrentDynamicSnapshots;
end;

procedure TMergePublication2.Set_MaxConcurrentDynamicSnapshots(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxConcurrentDynamicSnapshots(pRetVal);
end;

function TMergePublication2.Get_MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs;
begin
    Result := DefaultInterface.MergeDynamicSnapshotJobs;
end;

function TMergePublication2.BrowseSnapshotFolder: WideString;
begin
  Result := DefaultInterface.BrowseSnapshotFolder;
end;

procedure TMergePublication2.AddAlternatePublisher(const szAlternatePublisher: WideString; 
                                                   const szAlternatePublicationDB: WideString; 
                                                   const szAlternatePublication: WideString; 
                                                   const szAlternateDistributor: WideString; 
                                                   const szFriendlyName: WideString);
begin
  DefaultInterface.AddAlternatePublisher(szAlternatePublisher, szAlternatePublicationDB, 
                                         szAlternatePublication, szAlternateDistributor, 
                                         szFriendlyName);
end;

procedure TMergePublication2.RemoveAlternatePublisher(const szAlternatePublisher: WideString; 
                                                      const szAlternatePublicationDB: WideString; 
                                                      const szAlternatePublication: WideString);
begin
  DefaultInterface.RemoveAlternatePublisher(szAlternatePublisher, szAlternatePublicationDB, 
                                            szAlternatePublication);
end;

function TMergePublication2.EnumAlternatePublishers: QueryResults;
begin
  Result := DefaultInterface.EnumAlternatePublishers;
end;

procedure TMergePublication2.ReInitializeAllSubscriptions2(bUploadFirst: WordBool);
begin
  DefaultInterface.ReInitializeAllSubscriptions2(bUploadFirst);
end;

procedure TMergePublication2.ValidatePublication(ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE);
begin
  DefaultInterface.ValidatePublication(ValidationOption);
end;

procedure TMergePublication2.ValidateSubscription(const szSubscriberName: WideString; 
                                                  const szSubscriberDB: WideString; 
                                                  ValidationOption: SQLDMO_VALIDATIONOPTION_TYPE);
begin
  DefaultInterface.ValidateSubscription(szSubscriberName, szSubscriberDB, ValidationOption);
end;

procedure TMergePublication2.ReSynchronizeSubscription(const szSubscriberName: WideString; 
                                                       const szSubscriberDB: WideString; 
                                                       ResyncType: SQLDMO_RESYNC_TYPE; 
                                                       const szDateTime: WideString);
begin
  DefaultInterface.ReSynchronizeSubscription(szSubscriberName, szSubscriberDB, ResyncType, 
                                             szDateTime);
end;

procedure TMergePublication2.ReadLastValidationDateTimes(const szSubscriberName: WideString; 
                                                         const szSubscriberDB: WideString; 
                                                         out pszSuccessfulDateTime: WideString; 
                                                         out pszAttemptedDateTime: WideString);
begin
  DefaultInterface.ReadLastValidationDateTimes(szSubscriberName, szSubscriberDB, 
                                               pszSuccessfulDateTime, pszAttemptedDateTime);
end;

procedure TMergePublication2.ReplicateUserDefinedScript(const szScriptFilePath: WideString);
begin
  DefaultInterface.ReplicateUserDefinedScript(szScriptFilePath);
end;

procedure TMergePublication2.CopySnapshot(const szDestinationFolder: WideString);
begin
  DefaultInterface.CopySnapshot(szDestinationFolder);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergePublication2Properties.Create(AServer: TMergePublication2);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergePublication2Properties.GetDefaultInterface: _MergePublication2;
begin
  Result := FServer.DefaultInterface;
end;

function TMergePublication2Properties.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TMergePublication2Properties.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TMergePublication2Properties.Get_PreSnapshotScript: WideString;
begin
    Result := DefaultInterface.PreSnapshotScript;
end;

procedure TMergePublication2Properties.Set_PreSnapshotScript(const pRetVal: WideString);
  { Warning: The property PreSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PreSnapshotScript := pRetVal;
end;

function TMergePublication2Properties.Get_PostSnapshotScript: WideString;
begin
    Result := DefaultInterface.PostSnapshotScript;
end;

procedure TMergePublication2Properties.Set_PostSnapshotScript(const pRetVal: WideString);
  { Warning: The property PostSnapshotScript has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PostSnapshotScript := pRetVal;
end;

function TMergePublication2Properties.Get_FTPAddress: WideString;
begin
    Result := DefaultInterface.FTPAddress;
end;

procedure TMergePublication2Properties.Set_FTPAddress(const pRetVal: WideString);
  { Warning: The property FTPAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPAddress := pRetVal;
end;

function TMergePublication2Properties.Get_FTPPort: Integer;
begin
    Result := DefaultInterface.FTPPort;
end;

procedure TMergePublication2Properties.Set_FTPPort(pRetVal: Integer);
begin
  DefaultInterface.Set_FTPPort(pRetVal);
end;

function TMergePublication2Properties.Get_FTPSubdirectory: WideString;
begin
    Result := DefaultInterface.FTPSubdirectory;
end;

procedure TMergePublication2Properties.Set_FTPSubdirectory(const pRetVal: WideString);
  { Warning: The property FTPSubdirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPSubdirectory := pRetVal;
end;

function TMergePublication2Properties.Get_FTPLogin: WideString;
begin
    Result := DefaultInterface.FTPLogin;
end;

procedure TMergePublication2Properties.Set_FTPLogin(const pRetVal: WideString);
  { Warning: The property FTPLogin has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPLogin := pRetVal;
end;

procedure TMergePublication2Properties.Set_FTPPassword(const Param1: WideString);
  { Warning: The property FTPPassword has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FTPPassword := Param1;
end;

function TMergePublication2Properties.Get_ConflictRetention: Integer;
begin
    Result := DefaultInterface.ConflictRetention;
end;

procedure TMergePublication2Properties.Set_ConflictRetention(pRetVal: Integer);
begin
  DefaultInterface.Set_ConflictRetention(pRetVal);
end;

function TMergePublication2Properties.Get_KeepPartitionChanges: WordBool;
begin
    Result := DefaultInterface.KeepPartitionChanges;
end;

procedure TMergePublication2Properties.Set_KeepPartitionChanges(pRetVal: WordBool);
begin
  DefaultInterface.Set_KeepPartitionChanges(pRetVal);
end;

function TMergePublication2Properties.Get_AllowSyncToAlternate: WordBool;
begin
    Result := DefaultInterface.AllowSyncToAlternate;
end;

procedure TMergePublication2Properties.Set_AllowSyncToAlternate(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowSyncToAlternate(pRetVal);
end;

function TMergePublication2Properties.Get_CompatibilityLevel: SQLDMO_REPLCOMPLEVEL_TYPE;
begin
    Result := DefaultInterface.CompatibilityLevel;
end;

function TMergePublication2Properties.Get_ValidateSubscriberInfo: WideString;
begin
    Result := DefaultInterface.ValidateSubscriberInfo;
end;

procedure TMergePublication2Properties.Set_ValidateSubscriberInfo(const pRetVal: WideString);
  { Warning: The property ValidateSubscriberInfo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ValidateSubscriberInfo := pRetVal;
end;

function TMergePublication2Properties.Get_InActiveDirectory: WordBool;
begin
    Result := DefaultInterface.InActiveDirectory;
end;

procedure TMergePublication2Properties.Set_InActiveDirectory(pRetVal: WordBool);
begin
  DefaultInterface.Set_InActiveDirectory(pRetVal);
end;

function TMergePublication2Properties.Get_MaxConcurrentMerge: Integer;
begin
    Result := DefaultInterface.MaxConcurrentMerge;
end;

procedure TMergePublication2Properties.Set_MaxConcurrentMerge(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxConcurrentMerge(pRetVal);
end;

function TMergePublication2Properties.Get_MaxConcurrentDynamicSnapshots: Integer;
begin
    Result := DefaultInterface.MaxConcurrentDynamicSnapshots;
end;

procedure TMergePublication2Properties.Set_MaxConcurrentDynamicSnapshots(pRetVal: Integer);
begin
  DefaultInterface.Set_MaxConcurrentDynamicSnapshots(pRetVal);
end;

function TMergePublication2Properties.Get_MergeDynamicSnapshotJobs: MergeDynamicSnapshotJobs;
begin
    Result := DefaultInterface.MergeDynamicSnapshotJobs;
end;

{$ENDIF}

class function CoMergeArticle2.Create: _MergeArticle2;
begin
  Result := CreateComObject(CLASS_MergeArticle2) as _MergeArticle2;
end;

class function CoMergeArticle2.CreateRemote(const MachineName: string): _MergeArticle2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeArticle2) as _MergeArticle2;
end;

procedure TMergeArticle2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100305C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030516-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeArticle2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeArticle2;
  end;
end;

procedure TMergeArticle2.ConnectTo(svrIntf: _MergeArticle2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeArticle2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeArticle2.GetDefaultInterface: _MergeArticle2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeArticle2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeArticle2Properties.Create(Self);
{$ENDIF}
end;

destructor TMergeArticle2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeArticle2.GetServerProperties: TMergeArticle2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeArticle2.Get_DestinationOwnerName: WideString;
begin
    Result := DefaultInterface.DestinationOwnerName;
end;

procedure TMergeArticle2.Set_DestinationOwnerName(const pRetVal: WideString);
  { Warning: The property DestinationOwnerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationOwnerName := pRetVal;
end;

function TMergeArticle2.Get_AutoIdentityRange: WordBool;
begin
    Result := DefaultInterface.AutoIdentityRange;
end;

procedure TMergeArticle2.Set_AutoIdentityRange(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoIdentityRange(pRetVal);
end;

function TMergeArticle2.Get_PublisherIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.PublisherIdentityRangeSize;
end;

procedure TMergeArticle2.Set_PublisherIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property PublisherIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublisherIdentityRangeSize := pRetVal;
end;

function TMergeArticle2.Get_SubscriberIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.SubscriberIdentityRangeSize;
end;

procedure TMergeArticle2.Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property SubscriberIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberIdentityRangeSize := pRetVal;
end;

function TMergeArticle2.Get_IdentityRangeThreshold: Integer;
begin
    Result := DefaultInterface.IdentityRangeThreshold;
end;

procedure TMergeArticle2.Set_IdentityRangeThreshold(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityRangeThreshold(pRetVal);
end;

function TMergeArticle2.Get_VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE;
begin
    Result := DefaultInterface.VerifyResolverSignature;
end;

procedure TMergeArticle2.Set_VerifyResolverSignature(pRetVal: SQLDMO_VERIFYSIGNATURE_TYPE);
begin
  DefaultInterface.Set_VerifyResolverSignature(pRetVal);
end;

function TMergeArticle2.Get_DestinationObjectName: WideString;
begin
    Result := DefaultInterface.DestinationObjectName;
end;

procedure TMergeArticle2.Set_DestinationObjectName(const pRetVal: WideString);
  { Warning: The property DestinationObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationObjectName := pRetVal;
end;

function TMergeArticle2.Get_AllowInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.AllowInteractiveResolver;
end;

procedure TMergeArticle2.Set_AllowInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowInteractiveResolver(pRetVal);
end;

function TMergeArticle2.Get_MultipleColumnUpdate: WordBool;
begin
    Result := DefaultInterface.MultipleColumnUpdate;
end;

procedure TMergeArticle2.Set_MultipleColumnUpdate(pRetVal: WordBool);
begin
  DefaultInterface.Set_MultipleColumnUpdate(pRetVal);
end;

function TMergeArticle2.Get_CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE;
begin
    Result := DefaultInterface.CheckPermissions;
end;

procedure TMergeArticle2.Set_CheckPermissions(pRetVal: SQLDMO_CHECKPERMISSIONS_TYPE);
begin
  DefaultInterface.Set_CheckPermissions(pRetVal);
end;

function TMergeArticle2.ListReplicatedColumns: SQLObjectList;
begin
  Result := DefaultInterface.ListReplicatedColumns;
end;

procedure TMergeArticle2.AddReplicatedColumns(const Columns: WideString);
begin
  DefaultInterface.AddReplicatedColumns(Columns);
end;

procedure TMergeArticle2.RemoveReplicatedColumns(const Columns: WideString);
begin
  DefaultInterface.RemoveReplicatedColumns(Columns);
end;

function TMergeArticle2.ScriptDestinationObject2(ScriptType: OleVariant; 
                                                 ScriptFilePath: OleVariant; 
                                                 Script2Type: OleVariant; 
                                                 const bstrDestinationObject: WideString): WideString;
begin
  Result := DefaultInterface.ScriptDestinationObject2(ScriptType, ScriptFilePath, Script2Type, 
                                                      bstrDestinationObject);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeArticle2Properties.Create(AServer: TMergeArticle2);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeArticle2Properties.GetDefaultInterface: _MergeArticle2;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeArticle2Properties.Get_DestinationOwnerName: WideString;
begin
    Result := DefaultInterface.DestinationOwnerName;
end;

procedure TMergeArticle2Properties.Set_DestinationOwnerName(const pRetVal: WideString);
  { Warning: The property DestinationOwnerName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationOwnerName := pRetVal;
end;

function TMergeArticle2Properties.Get_AutoIdentityRange: WordBool;
begin
    Result := DefaultInterface.AutoIdentityRange;
end;

procedure TMergeArticle2Properties.Set_AutoIdentityRange(pRetVal: WordBool);
begin
  DefaultInterface.Set_AutoIdentityRange(pRetVal);
end;

function TMergeArticle2Properties.Get_PublisherIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.PublisherIdentityRangeSize;
end;

procedure TMergeArticle2Properties.Set_PublisherIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property PublisherIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PublisherIdentityRangeSize := pRetVal;
end;

function TMergeArticle2Properties.Get_SubscriberIdentityRangeSize: WideString;
begin
    Result := DefaultInterface.SubscriberIdentityRangeSize;
end;

procedure TMergeArticle2Properties.Set_SubscriberIdentityRangeSize(const pRetVal: WideString);
  { Warning: The property SubscriberIdentityRangeSize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubscriberIdentityRangeSize := pRetVal;
end;

function TMergeArticle2Properties.Get_IdentityRangeThreshold: Integer;
begin
    Result := DefaultInterface.IdentityRangeThreshold;
end;

procedure TMergeArticle2Properties.Set_IdentityRangeThreshold(pRetVal: Integer);
begin
  DefaultInterface.Set_IdentityRangeThreshold(pRetVal);
end;

function TMergeArticle2Properties.Get_VerifyResolverSignature: SQLDMO_VERIFYSIGNATURE_TYPE;
begin
    Result := DefaultInterface.VerifyResolverSignature;
end;

procedure TMergeArticle2Properties.Set_VerifyResolverSignature(pRetVal: SQLDMO_VERIFYSIGNATURE_TYPE);
begin
  DefaultInterface.Set_VerifyResolverSignature(pRetVal);
end;

function TMergeArticle2Properties.Get_DestinationObjectName: WideString;
begin
    Result := DefaultInterface.DestinationObjectName;
end;

procedure TMergeArticle2Properties.Set_DestinationObjectName(const pRetVal: WideString);
  { Warning: The property DestinationObjectName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DestinationObjectName := pRetVal;
end;

function TMergeArticle2Properties.Get_AllowInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.AllowInteractiveResolver;
end;

procedure TMergeArticle2Properties.Set_AllowInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_AllowInteractiveResolver(pRetVal);
end;

function TMergeArticle2Properties.Get_MultipleColumnUpdate: WordBool;
begin
    Result := DefaultInterface.MultipleColumnUpdate;
end;

procedure TMergeArticle2Properties.Set_MultipleColumnUpdate(pRetVal: WordBool);
begin
  DefaultInterface.Set_MultipleColumnUpdate(pRetVal);
end;

function TMergeArticle2Properties.Get_CheckPermissions: SQLDMO_CHECKPERMISSIONS_TYPE;
begin
    Result := DefaultInterface.CheckPermissions;
end;

procedure TMergeArticle2Properties.Set_CheckPermissions(pRetVal: SQLDMO_CHECKPERMISSIONS_TYPE);
begin
  DefaultInterface.Set_CheckPermissions(pRetVal);
end;

{$ENDIF}

class function CoMergeSubscription2.Create: _MergeSubscription2;
begin
  Result := CreateComObject(CLASS_MergeSubscription2) as _MergeSubscription2;
end;

class function CoMergeSubscription2.CreateRemote(const MachineName: string): _MergeSubscription2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergeSubscription2) as _MergeSubscription2;
end;

procedure TMergeSubscription2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100306C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10030616-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergeSubscription2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergeSubscription2;
  end;
end;

procedure TMergeSubscription2.ConnectTo(svrIntf: _MergeSubscription2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergeSubscription2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergeSubscription2.GetDefaultInterface: _MergeSubscription2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergeSubscription2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergeSubscription2Properties.Create(Self);
{$ENDIF}
end;

destructor TMergeSubscription2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergeSubscription2.GetServerProperties: TMergeSubscription2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergeSubscription2.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TMergeSubscription2.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TMergeSubscription2.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TMergeSubscription2.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TMergeSubscription2.Get_UseInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.UseInteractiveResolver;
end;

procedure TMergeSubscription2.Set_UseInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseInteractiveResolver(pRetVal);
end;

procedure TMergeSubscription2.ReInitialize2(bUploadFirst: WordBool);
begin
  DefaultInterface.ReInitialize2(bUploadFirst);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergeSubscription2Properties.Create(AServer: TMergeSubscription2);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergeSubscription2Properties.GetDefaultInterface: _MergeSubscription2;
begin
  Result := FServer.DefaultInterface;
end;

function TMergeSubscription2Properties.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TMergeSubscription2Properties.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TMergeSubscription2Properties.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TMergeSubscription2Properties.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TMergeSubscription2Properties.Get_UseInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.UseInteractiveResolver;
end;

procedure TMergeSubscription2Properties.Set_UseInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseInteractiveResolver(pRetVal);
end;

{$ENDIF}

class function CoMergePullSubscription2.Create: _MergePullSubscription2;
begin
  Result := CreateComObject(CLASS_MergePullSubscription2) as _MergePullSubscription2;
end;

class function CoMergePullSubscription2.CreateRemote(const MachineName: string): _MergePullSubscription2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MergePullSubscription2) as _MergePullSubscription2;
end;

procedure TMergePullSubscription2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100311C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10031116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMergePullSubscription2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MergePullSubscription2;
  end;
end;

procedure TMergePullSubscription2.ConnectTo(svrIntf: _MergePullSubscription2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMergePullSubscription2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMergePullSubscription2.GetDefaultInterface: _MergePullSubscription2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMergePullSubscription2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMergePullSubscription2Properties.Create(Self);
{$ENDIF}
end;

destructor TMergePullSubscription2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMergePullSubscription2.GetServerProperties: TMergePullSubscription2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMergePullSubscription2.Get_LastMergedTime: WideString;
begin
    Result := DefaultInterface.LastMergedTime;
end;

function TMergePullSubscription2.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TMergePullSubscription2.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TMergePullSubscription2.Get_WorkingDirectory: WideString;
begin
    Result := DefaultInterface.WorkingDirectory;
end;

procedure TMergePullSubscription2.Set_WorkingDirectory(const pRetVal: WideString);
  { Warning: The property WorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WorkingDirectory := pRetVal;
end;

function TMergePullSubscription2.Get_UseFTP: WordBool;
begin
    Result := DefaultInterface.UseFTP;
end;

procedure TMergePullSubscription2.Set_UseFTP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseFTP(pRetVal);
end;

function TMergePullSubscription2.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TMergePullSubscription2.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TMergePullSubscription2.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TMergePullSubscription2.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TMergePullSubscription2.Get_UseInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.UseInteractiveResolver;
end;

procedure TMergePullSubscription2.Set_UseInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseInteractiveResolver(pRetVal);
end;

function TMergePullSubscription2.Get_SubscriptionID: WideString;
begin
    Result := DefaultInterface.SubscriptionID;
end;

function TMergePullSubscription2.Get_DynamicSnapshotLocation: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotLocation;
end;

procedure TMergePullSubscription2.Set_DynamicSnapshotLocation(const pRetVal: WideString);
  { Warning: The property DynamicSnapshotLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicSnapshotLocation := pRetVal;
end;

function TMergePullSubscription2.Get_LastMergedStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.LastMergedStatus;
end;

function TMergePullSubscription2.Get_LastMergedSummary: WideString;
begin
    Result := DefaultInterface.LastMergedSummary;
end;

procedure TMergePullSubscription2.ReInitialize2(bUploadFirst: WordBool);
begin
  DefaultInterface.ReInitialize2(bUploadFirst);
end;

function TMergePullSubscription2.EnumAlternatePublishers: QueryResults;
begin
  Result := DefaultInterface.EnumAlternatePublishers;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMergePullSubscription2Properties.Create(AServer: TMergePullSubscription2);
begin
  inherited Create;
  FServer := AServer;
end;

function TMergePullSubscription2Properties.GetDefaultInterface: _MergePullSubscription2;
begin
  Result := FServer.DefaultInterface;
end;

function TMergePullSubscription2Properties.Get_LastMergedTime: WideString;
begin
    Result := DefaultInterface.LastMergedTime;
end;

function TMergePullSubscription2Properties.Get_AltSnapshotFolder: WideString;
begin
    Result := DefaultInterface.AltSnapshotFolder;
end;

procedure TMergePullSubscription2Properties.Set_AltSnapshotFolder(const pRetVal: WideString);
  { Warning: The property AltSnapshotFolder has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AltSnapshotFolder := pRetVal;
end;

function TMergePullSubscription2Properties.Get_WorkingDirectory: WideString;
begin
    Result := DefaultInterface.WorkingDirectory;
end;

procedure TMergePullSubscription2Properties.Set_WorkingDirectory(const pRetVal: WideString);
  { Warning: The property WorkingDirectory has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WorkingDirectory := pRetVal;
end;

function TMergePullSubscription2Properties.Get_UseFTP: WordBool;
begin
    Result := DefaultInterface.UseFTP;
end;

procedure TMergePullSubscription2Properties.Set_UseFTP(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseFTP(pRetVal);
end;

function TMergePullSubscription2Properties.Get_AgentOffload: WordBool;
begin
    Result := DefaultInterface.AgentOffload;
end;

procedure TMergePullSubscription2Properties.Set_AgentOffload(pRetVal: WordBool);
begin
  DefaultInterface.Set_AgentOffload(pRetVal);
end;

function TMergePullSubscription2Properties.Get_AgentOffloadServer: WideString;
begin
    Result := DefaultInterface.AgentOffloadServer;
end;

procedure TMergePullSubscription2Properties.Set_AgentOffloadServer(const pRetVal: WideString);
  { Warning: The property AgentOffloadServer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AgentOffloadServer := pRetVal;
end;

function TMergePullSubscription2Properties.Get_UseInteractiveResolver: WordBool;
begin
    Result := DefaultInterface.UseInteractiveResolver;
end;

procedure TMergePullSubscription2Properties.Set_UseInteractiveResolver(pRetVal: WordBool);
begin
  DefaultInterface.Set_UseInteractiveResolver(pRetVal);
end;

function TMergePullSubscription2Properties.Get_SubscriptionID: WideString;
begin
    Result := DefaultInterface.SubscriptionID;
end;

function TMergePullSubscription2Properties.Get_DynamicSnapshotLocation: WideString;
begin
    Result := DefaultInterface.DynamicSnapshotLocation;
end;

procedure TMergePullSubscription2Properties.Set_DynamicSnapshotLocation(const pRetVal: WideString);
  { Warning: The property DynamicSnapshotLocation has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DynamicSnapshotLocation := pRetVal;
end;

function TMergePullSubscription2Properties.Get_LastMergedStatus: SQLDMO_TASKSTATUS_TYPE;
begin
    Result := DefaultInterface.LastMergedStatus;
end;

function TMergePullSubscription2Properties.Get_LastMergedSummary: WideString;
begin
    Result := DefaultInterface.LastMergedSummary;
end;

{$ENDIF}

class function CoDistributionPublication2.Create: _DistributionPublication2;
begin
  Result := CreateComObject(CLASS_DistributionPublication2) as _DistributionPublication2;
end;

class function CoDistributionPublication2.CreateRemote(const MachineName: string): _DistributionPublication2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionPublication2) as _DistributionPublication2;
end;

procedure TDistributionPublication2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100321C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10032116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionPublication2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionPublication2;
  end;
end;

procedure TDistributionPublication2.ConnectTo(svrIntf: _DistributionPublication2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionPublication2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionPublication2.GetDefaultInterface: _DistributionPublication2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionPublication2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionPublication2Properties.Create(Self);
{$ENDIF}
end;

destructor TDistributionPublication2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionPublication2.GetServerProperties: TDistributionPublication2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionPublication2.Get_ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE;
begin
    Result := DefaultInterface.ThirdPartyOptions;
end;

procedure TDistributionPublication2.Set_ThirdPartyOptions(pRetVal: SQLDMO_THIRDPARTYOPTION_TYPE);
begin
  DefaultInterface.Set_ThirdPartyOptions(pRetVal);
end;

function TDistributionPublication2.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

function TDistributionPublication2.EnumQueueReaderAgentView: QueryResults;
begin
  Result := DefaultInterface.EnumQueueReaderAgentView;
end;

function TDistributionPublication2.EnumSubscriptionViews2(fExcludeAnonymous: WordBool): QueryResults;
begin
  Result := DefaultInterface.EnumSubscriptionViews2(fExcludeAnonymous);
end;

procedure TDistributionPublication2.GetAgentsStatus2(fExcludeAnonymous: WordBool; 
                                                     out pRetValStatus: SQLDMO_TASKSTATUS_TYPE; 
                                                     out pRetValTimeStamp: WideString);
begin
  DefaultInterface.GetAgentsStatus2(fExcludeAnonymous, pRetValStatus, pRetValTimeStamp);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionPublication2Properties.Create(AServer: TDistributionPublication2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionPublication2Properties.GetDefaultInterface: _DistributionPublication2;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionPublication2Properties.Get_ThirdPartyOptions: SQLDMO_THIRDPARTYOPTION_TYPE;
begin
    Result := DefaultInterface.ThirdPartyOptions;
end;

procedure TDistributionPublication2Properties.Set_ThirdPartyOptions(pRetVal: SQLDMO_THIRDPARTYOPTION_TYPE);
begin
  DefaultInterface.Set_ThirdPartyOptions(pRetVal);
end;

function TDistributionPublication2Properties.Get_SnapshotJobID: WideString;
begin
    Result := DefaultInterface.SnapshotJobID;
end;

{$ENDIF}

class function CoDistributionArticle2.Create: _DistributionArticle2;
begin
  Result := CreateComObject(CLASS_DistributionArticle2) as _DistributionArticle2;
end;

class function CoDistributionArticle2.CreateRemote(const MachineName: string): _DistributionArticle2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionArticle2) as _DistributionArticle2;
end;

procedure TDistributionArticle2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100331C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10033116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionArticle2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionArticle2;
  end;
end;

procedure TDistributionArticle2.ConnectTo(svrIntf: _DistributionArticle2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionArticle2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionArticle2.GetDefaultInterface: _DistributionArticle2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionArticle2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionArticle2Properties.Create(Self);
{$ENDIF}
end;

destructor TDistributionArticle2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionArticle2.GetServerProperties: TDistributionArticle2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TDistributionArticle2.Set_ID(Param1: Integer);
begin
  DefaultInterface.Set_ID(Param1);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionArticle2Properties.Create(AServer: TDistributionArticle2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionArticle2Properties.GetDefaultInterface: _DistributionArticle2;
begin
  Result := FServer.DefaultInterface;
end;

procedure TDistributionArticle2Properties.Set_ID(Param1: Integer);
begin
  DefaultInterface.Set_ID(Param1);
end;

{$ENDIF}

class function CoDistributionSubscription2.Create: _DistributionSubscription2;
begin
  Result := CreateComObject(CLASS_DistributionSubscription2) as _DistributionSubscription2;
end;

class function CoDistributionSubscription2.CreateRemote(const MachineName: string): _DistributionSubscription2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DistributionSubscription2) as _DistributionSubscription2;
end;

procedure TDistributionSubscription2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{100341C1-E260-11CF-AE68-00AA004A34D5}';
    IntfIID:   '{10034116-E260-11CF-AE68-00AA004A34D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDistributionSubscription2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DistributionSubscription2;
  end;
end;

procedure TDistributionSubscription2.ConnectTo(svrIntf: _DistributionSubscription2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDistributionSubscription2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDistributionSubscription2.GetDefaultInterface: _DistributionSubscription2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDistributionSubscription2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDistributionSubscription2Properties.Create(Self);
{$ENDIF}
end;

destructor TDistributionSubscription2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDistributionSubscription2.GetServerProperties: TDistributionSubscription2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDistributionSubscription2.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDistributionSubscription2Properties.Create(AServer: TDistributionSubscription2);
begin
  inherited Create;
  FServer := AServer;
end;

function TDistributionSubscription2Properties.GetDefaultInterface: _DistributionSubscription2;
begin
  Result := FServer.DefaultInterface;
end;

function TDistributionSubscription2Properties.Get_DistributionJobID: WideString;
begin
    Result := DefaultInterface.DistributionJobID;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TColumn, TKey, TIndex, TBulkCopy, 
    TView, TTrigger, TCheck, TTable, TStoredProcedure, 
    TDefault, TRule, TUserDefinedDatatype, TUser, TLogFile, 
    TTransfer, TDBFile, TFileGroup, TDatabaseRole, TFullTextCatalog, 
    TDatabase, TUserDefinedFunction, TBackupDevice, TLanguage, TRemoteLogin, 
    TRemoteServer, TLogin, TOperator, TAlert, TJob, 
    TJobStep, TJobSchedule, TTargetServer, TTargetServerGroup, TCategory, 
    TRestore, TRegisteredSubscriber, TReplicationSecurity, TDistributionArticle, TDistributionSubscription, 
    TDistributionPublication, TDistributionPublisher, TDistributionDatabase, TTransSubscription, TTransArticle, 
    TTransPublication, TMergeSubsetFilter, TMergeArticle, TMergeSubscription, TMergePublication, 
    TMergeDynamicSnapshotJob, TTransPullSubscription, TMergePullSubscription, TReplication, TServerRole, 
    TLinkedServerLogin, TLinkedServer, TSQLServer, TServerGroup, TRegisteredServer, 
    TSQLServer2, TDatabase2, TTable2, TColumn2, TView2, 
    TUserDefinedDatatype2, TDefault2, TRule2, TUser2, TStoredProcedure2, 
    TIndex2, TTrigger2, TLogin2, TRemoteServer2, TTransfer2, 
    TBackup, TBackup2, TBulkCopy2, TFileGroup2, TLogFile2, 
    TDatabaseRole2, TRestore2, TLinkedServer2, TFullTextCatalog2, TReplication2, 
    TDistributionPublisher2, TDistributionDatabase2, TTransPublication2, TTransArticle2, TTransSubscription2, 
    TTransPullSubscription2, TMergePublication2, TMergeArticle2, TMergeSubscription2, TMergePullSubscription2, 
    TDistributionPublication2, TDistributionArticle2, TDistributionSubscription2]);
end;

end.
